/*This file is automatically generated by pkg.deepin.io/dbus-generator. Don't edit it*/
package lastore

import "pkg.deepin.io/lib/dbus"
import "pkg.deepin.io/lib/dbus/property"
import "reflect"
import "sync"
import "runtime"
import "fmt"
import "errors"

/*prevent compile error*/
var _ = fmt.Println
var _ = runtime.SetFinalizer
var _ = sync.NewCond
var _ = reflect.TypeOf
var _ = property.BaseObserver{}

type Manager struct {
	Path     dbus.ObjectPath
	DestName string
	core     *dbus.Object

	signals       map[<-chan *dbus.Signal]struct{}
	signalsLocker sync.Mutex

	JobList             *dbusPropertyManagerJobList
	SystemArchitectures *dbusPropertyManagerSystemArchitectures
	UpgradableApps      *dbusPropertyManagerUpgradableApps
	SystemOnChanging    *dbusPropertyManagerSystemOnChanging
}

func (obj *Manager) _createSignalChan() <-chan *dbus.Signal {
	obj.signalsLocker.Lock()
	ch := getBus().Signal()
	obj.signals[ch] = struct{}{}
	obj.signalsLocker.Unlock()
	return ch
}
func (obj *Manager) _deleteSignalChan(ch <-chan *dbus.Signal) {
	obj.signalsLocker.Lock()
	delete(obj.signals, ch)
	getBus().DetachSignal(ch)
	obj.signalsLocker.Unlock()
}
func DestroyManager(obj *Manager) {
	obj.signalsLocker.Lock()
	defer obj.signalsLocker.Unlock()
	if obj.signals == nil {
		return
	}
	for ch, _ := range obj.signals {
		getBus().DetachSignal(ch)
	}
	obj.signals = nil

	runtime.SetFinalizer(obj, nil)

	dbusRemoveMatch("type='signal',path='" + string(obj.Path) + "',interface='org.freedesktop.DBus.Properties',sender='" + obj.DestName + "',member='PropertiesChanged'")
	dbusRemoveMatch("type='signal',path='" + string(obj.Path) + "',interface='com.deepin.lastore.Manager',sender='" + obj.DestName + "',member='PropertiesChanged'")

	obj.JobList.Reset()
	obj.SystemArchitectures.Reset()
	obj.UpgradableApps.Reset()
	obj.SystemOnChanging.Reset()
}

func (obj *Manager) PauseJob(arg0 string) (_err error) {
	_err = obj.core.Call("com.deepin.lastore.Manager.PauseJob", 0, arg0).Store()
	if _err != nil {
		fmt.Println(_err)
	}
	return
}

func (obj *Manager) StartJob(arg0 string) (_err error) {
	_err = obj.core.Call("com.deepin.lastore.Manager.StartJob", 0, arg0).Store()
	if _err != nil {
		fmt.Println(_err)
	}
	return
}

func (obj *Manager) CleanJob(arg0 string) (_err error) {
	_err = obj.core.Call("com.deepin.lastore.Manager.CleanJob", 0, arg0).Store()
	if _err != nil {
		fmt.Println(_err)
	}
	return
}

func (obj *Manager) DownloadPackage(arg0 string) (arg1 dbus.ObjectPath, _err error) {
	_err = obj.core.Call("com.deepin.lastore.Manager.DownloadPackage", 0, arg0).Store(&arg1)
	if _err != nil {
		fmt.Println(_err)
	}
	return
}

func (obj *Manager) InstallPackage(arg0 string) (arg1 dbus.ObjectPath, _err error) {
	_err = obj.core.Call("com.deepin.lastore.Manager.InstallPackage", 0, arg0).Store(&arg1)
	if _err != nil {
		fmt.Println(_err)
	}
	return
}

func (obj *Manager) UpdatePackage(arg0 string) (arg1 dbus.ObjectPath, _err error) {
	_err = obj.core.Call("com.deepin.lastore.Manager.UpdatePackage", 0, arg0).Store(&arg1)
	if _err != nil {
		fmt.Println(_err)
	}
	return
}

func (obj *Manager) RemovePackage(arg0 string) (arg1 dbus.ObjectPath, _err error) {
	_err = obj.core.Call("com.deepin.lastore.Manager.RemovePackage", 0, arg0).Store(&arg1)
	if _err != nil {
		fmt.Println(_err)
	}
	return
}

func (obj *Manager) DistUpgrade() (arg0 dbus.ObjectPath, _err error) {
	_err = obj.core.Call("com.deepin.lastore.Manager.DistUpgrade", 0).Store(&arg0)
	if _err != nil {
		fmt.Println(_err)
	}
	return
}

func (obj *Manager) PackageDesktopPath(arg0 string) (arg1 string, _err error) {
	_err = obj.core.Call("com.deepin.lastore.Manager.PackageDesktopPath", 0, arg0).Store(&arg1)
	if _err != nil {
		fmt.Println(_err)
	}
	return
}

func (obj *Manager) PackageExists(arg0 string) (arg1 bool, _err error) {
	_err = obj.core.Call("com.deepin.lastore.Manager.PackageExists", 0, arg0).Store(&arg1)
	if _err != nil {
		fmt.Println(_err)
	}
	return
}

func (obj *Manager) PackagesDownloadSize(arg0 []string) (arg1 int64, _err error) {
	_err = obj.core.Call("com.deepin.lastore.Manager.PackagesDownloadSize", 0, arg0).Store(&arg1)
	if _err != nil {
		fmt.Println(_err)
	}
	return
}

func (obj *Manager) SetRegion(arg0 string) (_err error) {
	_err = obj.core.Call("com.deepin.lastore.Manager.SetRegion", 0, arg0).Store()
	if _err != nil {
		fmt.Println(_err)
	}
	return
}

type dbusPropertyManagerJobList struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyManagerJobList) SetValue(notwritable interface{}) {
	fmt.Println("com.deepin.lastore.Manager.JobList is not writable")
}

func (this *dbusPropertyManagerJobList) Get() []dbus.ObjectPath {
	return this.GetValue().([]dbus.ObjectPath)
}
func (this *dbusPropertyManagerJobList) GetValue() interface{} /*[]dbus.ObjectPath*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "com.deepin.lastore.Manager", "JobList").Store(&r)
	if err == nil && r.Signature().String() == "ao" {
		return r.Value().([]dbus.ObjectPath)
	} else {
		fmt.Println("dbusProperty:JobList error:", err, "at com.deepin.lastore.Manager")
		return *new([]dbus.ObjectPath)
	}
}
func (this *dbusPropertyManagerJobList) GetType() reflect.Type {
	return reflect.TypeOf((*[]dbus.ObjectPath)(nil)).Elem()
}

type dbusPropertyManagerSystemArchitectures struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyManagerSystemArchitectures) SetValue(notwritable interface{}) {
	fmt.Println("com.deepin.lastore.Manager.SystemArchitectures is not writable")
}

func (this *dbusPropertyManagerSystemArchitectures) Get() []string {
	return this.GetValue().([]string)
}
func (this *dbusPropertyManagerSystemArchitectures) GetValue() interface{} /*[]string*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "com.deepin.lastore.Manager", "SystemArchitectures").Store(&r)
	if err == nil && r.Signature().String() == "as" {
		return r.Value().([]string)
	} else {
		fmt.Println("dbusProperty:SystemArchitectures error:", err, "at com.deepin.lastore.Manager")
		return *new([]string)
	}
}
func (this *dbusPropertyManagerSystemArchitectures) GetType() reflect.Type {
	return reflect.TypeOf((*[]string)(nil)).Elem()
}

type dbusPropertyManagerUpgradableApps struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyManagerUpgradableApps) SetValue(notwritable interface{}) {
	fmt.Println("com.deepin.lastore.Manager.UpgradableApps is not writable")
}

func (this *dbusPropertyManagerUpgradableApps) Get() []string {
	return this.GetValue().([]string)
}
func (this *dbusPropertyManagerUpgradableApps) GetValue() interface{} /*[]string*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "com.deepin.lastore.Manager", "UpgradableApps").Store(&r)
	if err == nil && r.Signature().String() == "as" {
		return r.Value().([]string)
	} else {
		fmt.Println("dbusProperty:UpgradableApps error:", err, "at com.deepin.lastore.Manager")
		return *new([]string)
	}
}
func (this *dbusPropertyManagerUpgradableApps) GetType() reflect.Type {
	return reflect.TypeOf((*[]string)(nil)).Elem()
}

type dbusPropertyManagerSystemOnChanging struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyManagerSystemOnChanging) SetValue(notwritable interface{}) {
	fmt.Println("com.deepin.lastore.Manager.SystemOnChanging is not writable")
}

func (this *dbusPropertyManagerSystemOnChanging) Get() bool {
	return this.GetValue().(bool)
}
func (this *dbusPropertyManagerSystemOnChanging) GetValue() interface{} /*bool*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "com.deepin.lastore.Manager", "SystemOnChanging").Store(&r)
	if err == nil && r.Signature().String() == "b" {
		return r.Value().(bool)
	} else {
		fmt.Println("dbusProperty:SystemOnChanging error:", err, "at com.deepin.lastore.Manager")
		return *new(bool)
	}
}
func (this *dbusPropertyManagerSystemOnChanging) GetType() reflect.Type {
	return reflect.TypeOf((*bool)(nil)).Elem()
}

func NewManager(destName string, path dbus.ObjectPath) (*Manager, error) {
	if !path.IsValid() {
		return nil, errors.New("The path of '" + string(path) + "' is invalid.")
	}

	core := getBus().Object(destName, path)

	obj := &Manager{Path: path, DestName: destName, core: core, signals: make(map[<-chan *dbus.Signal]struct{})}

	obj.JobList = &dbusPropertyManagerJobList{&property.BaseObserver{}, core}
	obj.SystemArchitectures = &dbusPropertyManagerSystemArchitectures{&property.BaseObserver{}, core}
	obj.UpgradableApps = &dbusPropertyManagerUpgradableApps{&property.BaseObserver{}, core}
	obj.SystemOnChanging = &dbusPropertyManagerSystemOnChanging{&property.BaseObserver{}, core}

	dbusAddMatch("type='signal',path='" + string(path) + "',interface='org.freedesktop.DBus.Properties',sender='" + destName + "',member='PropertiesChanged'")
	dbusAddMatch("type='signal',path='" + string(path) + "',interface='com.deepin.lastore.Manager',sender='" + destName + "',member='PropertiesChanged'")
	sigChan := obj._createSignalChan()
	go func() {
		typeString := reflect.TypeOf("")
		typeKeyValues := reflect.TypeOf(map[string]dbus.Variant{})
		typeArrayValues := reflect.TypeOf([]string{})
		for v := range sigChan {
			if v.Name == "org.freedesktop.DBus.Properties.PropertiesChanged" &&
				len(v.Body) == 3 &&
				reflect.TypeOf(v.Body[0]) == typeString &&
				reflect.TypeOf(v.Body[1]) == typeKeyValues &&
				reflect.TypeOf(v.Body[2]) == typeArrayValues &&
				v.Body[0].(string) == "com.deepin.lastore.Manager" {
				props := v.Body[1].(map[string]dbus.Variant)
				for key, _ := range props {
					if false {
					} else if key == "JobList" {
						obj.JobList.Notify()

					} else if key == "SystemArchitectures" {
						obj.SystemArchitectures.Notify()

					} else if key == "UpgradableApps" {
						obj.UpgradableApps.Notify()

					} else if key == "SystemOnChanging" {
						obj.SystemOnChanging.Notify()
					}
				}
			} else if v.Name == "com.deepin.lastore.Manager.PropertiesChanged" && len(v.Body) == 1 && reflect.TypeOf(v.Body[0]) == typeKeyValues {
				for key, _ := range v.Body[0].(map[string]dbus.Variant) {
					if false {
					} else if key == "JobList" {
						obj.JobList.Notify()

					} else if key == "SystemArchitectures" {
						obj.SystemArchitectures.Notify()

					} else if key == "UpgradableApps" {
						obj.UpgradableApps.Notify()

					} else if key == "SystemOnChanging" {
						obj.SystemOnChanging.Notify()
					}
				}
			}
		}
	}()

	runtime.SetFinalizer(obj, func(_obj *Manager) { DestroyManager(_obj) })
	return obj, nil
}

type Updater struct {
	Path     dbus.ObjectPath
	DestName string
	core     *dbus.Object

	signals       map[<-chan *dbus.Signal]struct{}
	signalsLocker sync.Mutex

	AutoCheckUpdates  *dbusPropertyUpdaterAutoCheckUpdates
	MirrorSource      *dbusPropertyUpdaterMirrorSource
	OfficialSource    *dbusPropertyUpdaterOfficialSource
	UpdatableApps     *dbusPropertyUpdaterUpdatableApps
	UpdatablePackages *dbusPropertyUpdaterUpdatablePackages
}

func (obj *Updater) _createSignalChan() <-chan *dbus.Signal {
	obj.signalsLocker.Lock()
	ch := getBus().Signal()
	obj.signals[ch] = struct{}{}
	obj.signalsLocker.Unlock()
	return ch
}
func (obj *Updater) _deleteSignalChan(ch <-chan *dbus.Signal) {
	obj.signalsLocker.Lock()
	delete(obj.signals, ch)
	getBus().DetachSignal(ch)
	obj.signalsLocker.Unlock()
}
func DestroyUpdater(obj *Updater) {
	obj.signalsLocker.Lock()
	defer obj.signalsLocker.Unlock()
	if obj.signals == nil {
		return
	}
	for ch, _ := range obj.signals {
		getBus().DetachSignal(ch)
	}
	obj.signals = nil

	runtime.SetFinalizer(obj, nil)

	dbusRemoveMatch("type='signal',path='" + string(obj.Path) + "',interface='org.freedesktop.DBus.Properties',sender='" + obj.DestName + "',member='PropertiesChanged'")
	dbusRemoveMatch("type='signal',path='" + string(obj.Path) + "',interface='com.deepin.lastore.Updater',sender='" + obj.DestName + "',member='PropertiesChanged'")

	obj.AutoCheckUpdates.Reset()
	obj.MirrorSource.Reset()
	obj.OfficialSource.Reset()
	obj.UpdatableApps.Reset()
	obj.UpdatablePackages.Reset()
}

func (obj *Updater) ApplicationUpdateInfos(arg0 string) (arg1 [][]interface{}, _err error) {
	_err = obj.core.Call("com.deepin.lastore.Updater.ApplicationUpdateInfos", 0, arg0).Store(&arg1)
	if _err != nil {
		fmt.Println(_err)
	}
	return
}

func (obj *Updater) ListMirrorSources(arg0 string) (arg1 [][]interface{}, _err error) {
	_err = obj.core.Call("com.deepin.lastore.Updater.ListMirrorSources", 0, arg0).Store(&arg1)
	if _err != nil {
		fmt.Println(_err)
	}
	return
}

func (obj *Updater) SetAutoCheckUpdates(arg0 bool) (_err error) {
	_err = obj.core.Call("com.deepin.lastore.Updater.SetAutoCheckUpdates", 0, arg0).Store()
	if _err != nil {
		fmt.Println(_err)
	}
	return
}

func (obj *Updater) SetMirrorSource(arg0 string) (_err error) {
	_err = obj.core.Call("com.deepin.lastore.Updater.SetMirrorSource", 0, arg0).Store()
	if _err != nil {
		fmt.Println(_err)
	}
	return
}

type dbusPropertyUpdaterAutoCheckUpdates struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyUpdaterAutoCheckUpdates) SetValue(notwritable interface{}) {
	fmt.Println("com.deepin.lastore.Updater.AutoCheckUpdates is not writable")
}

func (this *dbusPropertyUpdaterAutoCheckUpdates) Get() bool {
	return this.GetValue().(bool)
}
func (this *dbusPropertyUpdaterAutoCheckUpdates) GetValue() interface{} /*bool*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "com.deepin.lastore.Updater", "AutoCheckUpdates").Store(&r)
	if err == nil && r.Signature().String() == "b" {
		return r.Value().(bool)
	} else {
		fmt.Println("dbusProperty:AutoCheckUpdates error:", err, "at com.deepin.lastore.Updater")
		return *new(bool)
	}
}
func (this *dbusPropertyUpdaterAutoCheckUpdates) GetType() reflect.Type {
	return reflect.TypeOf((*bool)(nil)).Elem()
}

type dbusPropertyUpdaterMirrorSource struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyUpdaterMirrorSource) SetValue(notwritable interface{}) {
	fmt.Println("com.deepin.lastore.Updater.MirrorSource is not writable")
}

func (this *dbusPropertyUpdaterMirrorSource) Get() string {
	return this.GetValue().(string)
}
func (this *dbusPropertyUpdaterMirrorSource) GetValue() interface{} /*string*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "com.deepin.lastore.Updater", "MirrorSource").Store(&r)
	if err == nil && r.Signature().String() == "s" {
		return r.Value().(string)
	} else {
		fmt.Println("dbusProperty:MirrorSource error:", err, "at com.deepin.lastore.Updater")
		return *new(string)
	}
}
func (this *dbusPropertyUpdaterMirrorSource) GetType() reflect.Type {
	return reflect.TypeOf((*string)(nil)).Elem()
}

type dbusPropertyUpdaterOfficialSource struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyUpdaterOfficialSource) SetValue(notwritable interface{}) {
	fmt.Println("com.deepin.lastore.Updater.OfficialSource is not writable")
}

func (this *dbusPropertyUpdaterOfficialSource) Get() string {
	return this.GetValue().(string)
}
func (this *dbusPropertyUpdaterOfficialSource) GetValue() interface{} /*string*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "com.deepin.lastore.Updater", "OfficialSource").Store(&r)
	if err == nil && r.Signature().String() == "s" {
		return r.Value().(string)
	} else {
		fmt.Println("dbusProperty:OfficialSource error:", err, "at com.deepin.lastore.Updater")
		return *new(string)
	}
}
func (this *dbusPropertyUpdaterOfficialSource) GetType() reflect.Type {
	return reflect.TypeOf((*string)(nil)).Elem()
}

type dbusPropertyUpdaterUpdatableApps struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyUpdaterUpdatableApps) SetValue(notwritable interface{}) {
	fmt.Println("com.deepin.lastore.Updater.UpdatableApps is not writable")
}

func (this *dbusPropertyUpdaterUpdatableApps) Get() []string {
	return this.GetValue().([]string)
}
func (this *dbusPropertyUpdaterUpdatableApps) GetValue() interface{} /*[]string*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "com.deepin.lastore.Updater", "UpdatableApps").Store(&r)
	if err == nil && r.Signature().String() == "as" {
		return r.Value().([]string)
	} else {
		fmt.Println("dbusProperty:UpdatableApps error:", err, "at com.deepin.lastore.Updater")
		return *new([]string)
	}
}
func (this *dbusPropertyUpdaterUpdatableApps) GetType() reflect.Type {
	return reflect.TypeOf((*[]string)(nil)).Elem()
}

type dbusPropertyUpdaterUpdatablePackages struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyUpdaterUpdatablePackages) SetValue(notwritable interface{}) {
	fmt.Println("com.deepin.lastore.Updater.UpdatablePackages is not writable")
}

func (this *dbusPropertyUpdaterUpdatablePackages) Get() []string {
	return this.GetValue().([]string)
}
func (this *dbusPropertyUpdaterUpdatablePackages) GetValue() interface{} /*[]string*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "com.deepin.lastore.Updater", "UpdatablePackages").Store(&r)
	if err == nil && r.Signature().String() == "as" {
		return r.Value().([]string)
	} else {
		fmt.Println("dbusProperty:UpdatablePackages error:", err, "at com.deepin.lastore.Updater")
		return *new([]string)
	}
}
func (this *dbusPropertyUpdaterUpdatablePackages) GetType() reflect.Type {
	return reflect.TypeOf((*[]string)(nil)).Elem()
}

func NewUpdater(destName string, path dbus.ObjectPath) (*Updater, error) {
	if !path.IsValid() {
		return nil, errors.New("The path of '" + string(path) + "' is invalid.")
	}

	core := getBus().Object(destName, path)

	obj := &Updater{Path: path, DestName: destName, core: core, signals: make(map[<-chan *dbus.Signal]struct{})}

	obj.AutoCheckUpdates = &dbusPropertyUpdaterAutoCheckUpdates{&property.BaseObserver{}, core}
	obj.MirrorSource = &dbusPropertyUpdaterMirrorSource{&property.BaseObserver{}, core}
	obj.OfficialSource = &dbusPropertyUpdaterOfficialSource{&property.BaseObserver{}, core}
	obj.UpdatableApps = &dbusPropertyUpdaterUpdatableApps{&property.BaseObserver{}, core}
	obj.UpdatablePackages = &dbusPropertyUpdaterUpdatablePackages{&property.BaseObserver{}, core}

	dbusAddMatch("type='signal',path='" + string(path) + "',interface='org.freedesktop.DBus.Properties',sender='" + destName + "',member='PropertiesChanged'")
	dbusAddMatch("type='signal',path='" + string(path) + "',interface='com.deepin.lastore.Updater',sender='" + destName + "',member='PropertiesChanged'")
	sigChan := obj._createSignalChan()
	go func() {
		typeString := reflect.TypeOf("")
		typeKeyValues := reflect.TypeOf(map[string]dbus.Variant{})
		typeArrayValues := reflect.TypeOf([]string{})
		for v := range sigChan {
			if v.Name == "org.freedesktop.DBus.Properties.PropertiesChanged" &&
				len(v.Body) == 3 &&
				reflect.TypeOf(v.Body[0]) == typeString &&
				reflect.TypeOf(v.Body[1]) == typeKeyValues &&
				reflect.TypeOf(v.Body[2]) == typeArrayValues &&
				v.Body[0].(string) == "com.deepin.lastore.Updater" {
				props := v.Body[1].(map[string]dbus.Variant)
				for key, _ := range props {
					if false {
					} else if key == "AutoCheckUpdates" {
						obj.AutoCheckUpdates.Notify()

					} else if key == "MirrorSource" {
						obj.MirrorSource.Notify()

					} else if key == "OfficialSource" {
						obj.OfficialSource.Notify()

					} else if key == "UpdatableApps" {
						obj.UpdatableApps.Notify()

					} else if key == "UpdatablePackages" {
						obj.UpdatablePackages.Notify()
					}
				}
			} else if v.Name == "com.deepin.lastore.Updater.PropertiesChanged" && len(v.Body) == 1 && reflect.TypeOf(v.Body[0]) == typeKeyValues {
				for key, _ := range v.Body[0].(map[string]dbus.Variant) {
					if false {
					} else if key == "AutoCheckUpdates" {
						obj.AutoCheckUpdates.Notify()

					} else if key == "MirrorSource" {
						obj.MirrorSource.Notify()

					} else if key == "OfficialSource" {
						obj.OfficialSource.Notify()

					} else if key == "UpdatableApps" {
						obj.UpdatableApps.Notify()

					} else if key == "UpdatablePackages" {
						obj.UpdatablePackages.Notify()
					}
				}
			}
		}
	}()

	runtime.SetFinalizer(obj, func(_obj *Updater) { DestroyUpdater(_obj) })
	return obj, nil
}

type Job struct {
	Path     dbus.ObjectPath
	DestName string
	core     *dbus.Object

	signals       map[<-chan *dbus.Signal]struct{}
	signalsLocker sync.Mutex

	Id          *dbusPropertyJobId
	PackageId   *dbusPropertyJobPackageId
	Type        *dbusPropertyJobType
	Status      *dbusPropertyJobStatus
	Progress    *dbusPropertyJobProgress
	Description *dbusPropertyJobDescription
	Cancelable  *dbusPropertyJobCancelable
}

func (obj *Job) _createSignalChan() <-chan *dbus.Signal {
	obj.signalsLocker.Lock()
	ch := getBus().Signal()
	obj.signals[ch] = struct{}{}
	obj.signalsLocker.Unlock()
	return ch
}
func (obj *Job) _deleteSignalChan(ch <-chan *dbus.Signal) {
	obj.signalsLocker.Lock()
	delete(obj.signals, ch)
	getBus().DetachSignal(ch)
	obj.signalsLocker.Unlock()
}
func DestroyJob(obj *Job) {
	obj.signalsLocker.Lock()
	defer obj.signalsLocker.Unlock()
	if obj.signals == nil {
		return
	}
	for ch, _ := range obj.signals {
		getBus().DetachSignal(ch)
	}
	obj.signals = nil

	runtime.SetFinalizer(obj, nil)

	dbusRemoveMatch("type='signal',path='" + string(obj.Path) + "',interface='org.freedesktop.DBus.Properties',sender='" + obj.DestName + "',member='PropertiesChanged'")
	dbusRemoveMatch("type='signal',path='" + string(obj.Path) + "',interface='com.deepin.lastore.Job',sender='" + obj.DestName + "',member='PropertiesChanged'")

	obj.Id.Reset()
	obj.PackageId.Reset()
	obj.Type.Reset()
	obj.Status.Reset()
	obj.Progress.Reset()
	obj.Description.Reset()
	obj.Cancelable.Reset()
}

type dbusPropertyJobId struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyJobId) SetValue(notwritable interface{}) {
	fmt.Println("com.deepin.lastore.Job.Id is not writable")
}

func (this *dbusPropertyJobId) Get() string {
	return this.GetValue().(string)
}
func (this *dbusPropertyJobId) GetValue() interface{} /*string*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "com.deepin.lastore.Job", "Id").Store(&r)
	if err == nil && r.Signature().String() == "s" {
		return r.Value().(string)
	} else {
		fmt.Println("dbusProperty:Id error:", err, "at com.deepin.lastore.Job")
		return *new(string)
	}
}
func (this *dbusPropertyJobId) GetType() reflect.Type {
	return reflect.TypeOf((*string)(nil)).Elem()
}

type dbusPropertyJobPackageId struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyJobPackageId) SetValue(notwritable interface{}) {
	fmt.Println("com.deepin.lastore.Job.PackageId is not writable")
}

func (this *dbusPropertyJobPackageId) Get() string {
	return this.GetValue().(string)
}
func (this *dbusPropertyJobPackageId) GetValue() interface{} /*string*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "com.deepin.lastore.Job", "PackageId").Store(&r)
	if err == nil && r.Signature().String() == "s" {
		return r.Value().(string)
	} else {
		fmt.Println("dbusProperty:PackageId error:", err, "at com.deepin.lastore.Job")
		return *new(string)
	}
}
func (this *dbusPropertyJobPackageId) GetType() reflect.Type {
	return reflect.TypeOf((*string)(nil)).Elem()
}

type dbusPropertyJobType struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyJobType) SetValue(notwritable interface{}) {
	fmt.Println("com.deepin.lastore.Job.Type is not writable")
}

func (this *dbusPropertyJobType) Get() string {
	return this.GetValue().(string)
}
func (this *dbusPropertyJobType) GetValue() interface{} /*string*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "com.deepin.lastore.Job", "Type").Store(&r)
	if err == nil && r.Signature().String() == "s" {
		return r.Value().(string)
	} else {
		fmt.Println("dbusProperty:Type error:", err, "at com.deepin.lastore.Job")
		return *new(string)
	}
}
func (this *dbusPropertyJobType) GetType() reflect.Type {
	return reflect.TypeOf((*string)(nil)).Elem()
}

type dbusPropertyJobStatus struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyJobStatus) SetValue(notwritable interface{}) {
	fmt.Println("com.deepin.lastore.Job.Status is not writable")
}

func (this *dbusPropertyJobStatus) Get() string {
	return this.GetValue().(string)
}
func (this *dbusPropertyJobStatus) GetValue() interface{} /*string*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "com.deepin.lastore.Job", "Status").Store(&r)
	if err == nil && r.Signature().String() == "s" {
		return r.Value().(string)
	} else {
		fmt.Println("dbusProperty:Status error:", err, "at com.deepin.lastore.Job")
		return *new(string)
	}
}
func (this *dbusPropertyJobStatus) GetType() reflect.Type {
	return reflect.TypeOf((*string)(nil)).Elem()
}

type dbusPropertyJobProgress struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyJobProgress) SetValue(notwritable interface{}) {
	fmt.Println("com.deepin.lastore.Job.Progress is not writable")
}

func (this *dbusPropertyJobProgress) Get() float64 {
	return this.GetValue().(float64)
}
func (this *dbusPropertyJobProgress) GetValue() interface{} /*float64*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "com.deepin.lastore.Job", "Progress").Store(&r)
	if err == nil && r.Signature().String() == "d" {
		return r.Value().(float64)
	} else {
		fmt.Println("dbusProperty:Progress error:", err, "at com.deepin.lastore.Job")
		return *new(float64)
	}
}
func (this *dbusPropertyJobProgress) GetType() reflect.Type {
	return reflect.TypeOf((*float64)(nil)).Elem()
}

type dbusPropertyJobDescription struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyJobDescription) SetValue(notwritable interface{}) {
	fmt.Println("com.deepin.lastore.Job.Description is not writable")
}

func (this *dbusPropertyJobDescription) Get() string {
	return this.GetValue().(string)
}
func (this *dbusPropertyJobDescription) GetValue() interface{} /*string*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "com.deepin.lastore.Job", "Description").Store(&r)
	if err == nil && r.Signature().String() == "s" {
		return r.Value().(string)
	} else {
		fmt.Println("dbusProperty:Description error:", err, "at com.deepin.lastore.Job")
		return *new(string)
	}
}
func (this *dbusPropertyJobDescription) GetType() reflect.Type {
	return reflect.TypeOf((*string)(nil)).Elem()
}

type dbusPropertyJobCancelable struct {
	*property.BaseObserver
	core *dbus.Object
}

func (this *dbusPropertyJobCancelable) SetValue(notwritable interface{}) {
	fmt.Println("com.deepin.lastore.Job.Cancelable is not writable")
}

func (this *dbusPropertyJobCancelable) Get() bool {
	return this.GetValue().(bool)
}
func (this *dbusPropertyJobCancelable) GetValue() interface{} /*bool*/ {
	var r dbus.Variant
	err := this.core.Call("org.freedesktop.DBus.Properties.Get", 0, "com.deepin.lastore.Job", "Cancelable").Store(&r)
	if err == nil && r.Signature().String() == "b" {
		return r.Value().(bool)
	} else {
		fmt.Println("dbusProperty:Cancelable error:", err, "at com.deepin.lastore.Job")
		return *new(bool)
	}
}
func (this *dbusPropertyJobCancelable) GetType() reflect.Type {
	return reflect.TypeOf((*bool)(nil)).Elem()
}

func NewJob(destName string, path dbus.ObjectPath) (*Job, error) {
	if !path.IsValid() {
		return nil, errors.New("The path of '" + string(path) + "' is invalid.")
	}

	core := getBus().Object(destName, path)

	obj := &Job{Path: path, DestName: destName, core: core, signals: make(map[<-chan *dbus.Signal]struct{})}

	obj.Id = &dbusPropertyJobId{&property.BaseObserver{}, core}
	obj.PackageId = &dbusPropertyJobPackageId{&property.BaseObserver{}, core}
	obj.Type = &dbusPropertyJobType{&property.BaseObserver{}, core}
	obj.Status = &dbusPropertyJobStatus{&property.BaseObserver{}, core}
	obj.Progress = &dbusPropertyJobProgress{&property.BaseObserver{}, core}
	obj.Description = &dbusPropertyJobDescription{&property.BaseObserver{}, core}
	obj.Cancelable = &dbusPropertyJobCancelable{&property.BaseObserver{}, core}

	dbusAddMatch("type='signal',path='" + string(path) + "',interface='org.freedesktop.DBus.Properties',sender='" + destName + "',member='PropertiesChanged'")
	dbusAddMatch("type='signal',path='" + string(path) + "',interface='com.deepin.lastore.Job',sender='" + destName + "',member='PropertiesChanged'")
	sigChan := obj._createSignalChan()
	go func() {
		typeString := reflect.TypeOf("")
		typeKeyValues := reflect.TypeOf(map[string]dbus.Variant{})
		typeArrayValues := reflect.TypeOf([]string{})
		for v := range sigChan {
			if v.Name == "org.freedesktop.DBus.Properties.PropertiesChanged" &&
				len(v.Body) == 3 &&
				reflect.TypeOf(v.Body[0]) == typeString &&
				reflect.TypeOf(v.Body[1]) == typeKeyValues &&
				reflect.TypeOf(v.Body[2]) == typeArrayValues &&
				v.Body[0].(string) == "com.deepin.lastore.Job" {
				props := v.Body[1].(map[string]dbus.Variant)
				for key, _ := range props {
					if false {
					} else if key == "Id" {
						obj.Id.Notify()

					} else if key == "PackageId" {
						obj.PackageId.Notify()

					} else if key == "Type" {
						obj.Type.Notify()

					} else if key == "Status" {
						obj.Status.Notify()

					} else if key == "Progress" {
						obj.Progress.Notify()

					} else if key == "Description" {
						obj.Description.Notify()

					} else if key == "Cancelable" {
						obj.Cancelable.Notify()
					}
				}
			} else if v.Name == "com.deepin.lastore.Job.PropertiesChanged" && len(v.Body) == 1 && reflect.TypeOf(v.Body[0]) == typeKeyValues {
				for key, _ := range v.Body[0].(map[string]dbus.Variant) {
					if false {
					} else if key == "Id" {
						obj.Id.Notify()

					} else if key == "PackageId" {
						obj.PackageId.Notify()

					} else if key == "Type" {
						obj.Type.Notify()

					} else if key == "Status" {
						obj.Status.Notify()

					} else if key == "Progress" {
						obj.Progress.Notify()

					} else if key == "Description" {
						obj.Description.Notify()

					} else if key == "Cancelable" {
						obj.Cancelable.Notify()
					}
				}
			}
		}
	}()

	runtime.SetFinalizer(obj, func(_obj *Job) { DestroyJob(_obj) })
	return obj, nil
}
