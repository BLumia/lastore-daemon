{"Filepath":"src/internal/dstore/dstore.go","Functions":[{"Uniquefunname":"func (s *Store) GetMetadataServer() string","Funname":"GetMetadataServer","Returntype":"string","Args":""},{"Uniquefunname":"func (s *Store) GetPackageApplication(path string) (v []*PackageInfo, err error)","Funname":"GetPackageApplication","Returntype":"(v []*PackageInfo, err error)","Args":"path string"},{"Uniquefunname":"func NewStore() *Store","Funname":"NewStore","Returntype":"*Store","Args":""},{"Uniquefunname":"func NewStore() *Store","Funname":"dstore.NewStore","Returntype":"*Store","Args":""},{"Uniquefunname":"func (s *Store) GetMetadataServer() string","Funname":"dstore.Store.GetMetadataServer","Returntype":"string","Args":""},{"Uniquefunname":"func (s *Store) GetPackageApplication(path string) (v []*PackageInfo, err error)","Funname":"dstore.Store.GetPackageApplication","Returntype":"(v []*PackageInfo, err error)","Args":"path string"}],"Records":[{"Name":"struct:dstore.AppInfo","Fields":["dstore.AppInfo.Category string","dstore.AppInfo.LocaleName map[string]string","dstore.AppInfo.PackageName string"]},{"Name":"struct:dstore.PackageInfo","Fields":["dstore.PackageInfo.Category string","dstore.PackageInfo.Locale map[string]struct { Description struct { Name string `json:\"name\"`; } `json:\"description\"`; }","dstore.PackageInfo.Name string","dstore.PackageInfo.PackageName string","dstore.PackageInfo.PackageURI string"]},{"Name":"struct:dstore.Store","Fields":["dstore.Store.sysCfg *ini.File"]},{"Name":"const:dstore","Fields":["dstore.appstoreConfPath","dstore.appstoreConfPathDefault"]},{"Name":"var:dstore","Fields":["dstore.expireDelay"]}]}
{"Filepath":"src/internal/dstore/utils.go","Functions":[{"Uniquefunname":"func cacheFetchJSON(v interface","Funname":"cacheFetchJSON","Returntype":"error","Args":"v interface{}, url, cacheFilepath string, expire time.Duration"},{"Uniquefunname":"func cacheFetchJSON(v interface","Funname":"dstore.cacheFetchJSON","Returntype":"error","Args":"v interface{}, url, cacheFilepath string, expire time.Duration"}],"Records":null}
{"Filepath":"src/internal/mirrors/mirrors.go","Functions":[{"Uniquefunname":"func GenerateMirrors(repository string, fpath string) error","Funname":"GenerateMirrors","Returntype":"error","Args":"repository string, fpath string"},{"Uniquefunname":"func GenerateUnpublishedMirrors(url, fpath string) error","Funname":"GenerateUnpublishedMirrors","Returntype":"error","Args":"url, fpath string"},{"Uniquefunname":"func (v mirrors) Len() int","Funname":"Len","Returntype":"int","Args":""},{"Uniquefunname":"func (v mirrors) Less(i, j int) bool","Funname":"Less","Returntype":"bool","Args":"i, j int"},{"Uniquefunname":"func LoadMirrorSources(url string) ([]system.MirrorSource, error)","Funname":"LoadMirrorSources","Returntype":"([]system.MirrorSource, error)","Args":"url string"},{"Uniquefunname":"func (v mirrors) Swap(i, j int)","Funname":"Swap","Returntype":"","Args":"i, j int"},{"Uniquefunname":"func getUnpublishedMirrorSources(url string) ([]system.MirrorSource, error)","Funname":"getUnpublishedMirrorSources","Returntype":"([]system.MirrorSource, error)","Args":"url string"},{"Uniquefunname":"func GenerateMirrors(repository string, fpath string) error","Funname":"mirrors.GenerateMirrors","Returntype":"error","Args":"repository string, fpath string"},{"Uniquefunname":"func GenerateUnpublishedMirrors(url, fpath string) error","Funname":"mirrors.GenerateUnpublishedMirrors","Returntype":"error","Args":"url, fpath string"},{"Uniquefunname":"func LoadMirrorSources(url string) ([]system.MirrorSource, error)","Funname":"mirrors.LoadMirrorSources","Returntype":"([]system.MirrorSource, error)","Args":"url string"},{"Uniquefunname":"func getUnpublishedMirrorSources(url string) ([]system.MirrorSource, error)","Funname":"mirrors.getUnpublishedMirrorSources","Returntype":"([]system.MirrorSource, error)","Args":"url string"},{"Uniquefunname":"func (v mirrors) Len() int","Funname":"mirrors.mirrors.Len","Returntype":"int","Args":""},{"Uniquefunname":"func (v mirrors) Less(i, j int) bool","Funname":"mirrors.mirrors.Less","Returntype":"bool","Args":"i, j int"},{"Uniquefunname":"func (v mirrors) Swap(i, j int)","Funname":"mirrors.mirrors.Swap","Returntype":"","Args":"i, j int"},{"Uniquefunname":"func toMirrorsSourceList(v mirrors) []system.MirrorSource","Funname":"mirrors.toMirrorsSourceList","Returntype":"[]system.MirrorSource","Args":"v mirrors"},{"Uniquefunname":"func toMirrorsSourceList(v mirrors) []system.MirrorSource","Funname":"toMirrorsSourceList","Returntype":"[]system.MirrorSource","Args":"v mirrors"}],"Records":[{"Name":"struct:mirrors.mirror","Fields":["mirrors.mirror.AdjustDelay int","mirrors.mirror.Country string","mirrors.mirror.Id string","mirrors.mirror.Locale map[string]map[string]string","mirrors.mirror.Name string","mirrors.mirror.UrlFtp string","mirrors.mirror.UrlHttp string","mirrors.mirror.UrlHttps string","mirrors.mirror.Weight int"]},{"Name":"struct:mirrors.unpublishedMirrors","Fields":["mirrors.unpublishedMirrors.Error string","mirrors.unpublishedMirrors.Mirrors mirrors"]}]}
{"Filepath":"src/internal/querydesktop/desktopfile.go","Functions":[{"Uniquefunname":"func (fs DesktopFiles) BestOne() string","Funname":"BestOne","Returntype":"string","Args":""},{"Uniquefunname":"func (fs DesktopFiles) Len() int","Funname":"Len","Returntype":"int","Args":""},{"Uniquefunname":"func (fs DesktopFiles) Less(i, j int) bool","Funname":"Less","Returntype":"bool","Args":"i, j int"},{"Uniquefunname":"func QueryDesktopFile(pkg string) string","Funname":"QueryDesktopFile","Returntype":"string","Args":"pkg string"},{"Uniquefunname":"func (fs DesktopFiles) Swap(i, j int)","Funname":"Swap","Returntype":"","Args":"i, j int"},{"Uniquefunname":"func (fs DesktopFiles) BestOne() string","Funname":"querydesktop.DesktopFiles.BestOne","Returntype":"string","Args":""},{"Uniquefunname":"func (fs DesktopFiles) Len() int","Funname":"querydesktop.DesktopFiles.Len","Returntype":"int","Args":""},{"Uniquefunname":"func (fs DesktopFiles) Less(i, j int) bool","Funname":"querydesktop.DesktopFiles.Less","Returntype":"bool","Args":"i, j int"},{"Uniquefunname":"func (fs DesktopFiles) Swap(i, j int)","Funname":"querydesktop.DesktopFiles.Swap","Returntype":"","Args":"i, j int"},{"Uniquefunname":"func (fs DesktopFiles) score(i int) int","Funname":"querydesktop.DesktopFiles.score","Returntype":"int","Args":"i int"},{"Uniquefunname":"func QueryDesktopFile(pkg string) string","Funname":"querydesktop.QueryDesktopFile","Returntype":"string","Args":"pkg string"},{"Uniquefunname":"func (fs DesktopFiles) score(i int) int","Funname":"score","Returntype":"int","Args":"i int"}],"Records":[{"Name":"struct:querydesktop.DesktopFiles","Fields":["querydesktop.DesktopFiles.Files []string","querydesktop.DesktopFiles.PkgName string"]},{"Name":"const:querydesktop","Fields":["querydesktop.desktopExt","querydesktop.flatpakAppPkgPrefix","querydesktop.flatpakAppsDir"]}]}
{"Filepath":"src/internal/querydesktop/desktopfile_test.go","Functions":[{"Uniquefunname":"func ListAppStore(t *testing.T) []string","Funname":"ListAppStore","Returntype":"[]string","Args":"t *testing.T"},{"Uniquefunname":"func ListInstalled(t *testing.T) []string","Funname":"ListInstalled","Returntype":"[]string","Args":"t *testing.T"},{"Uniquefunname":"func TestDesktopQuery(t *testing.T)","Funname":"TestDesktopQuery","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func init()","Funname":"init","Returntype":"","Args":""},{"Uniquefunname":"func ListAppStore(t *testing.T) []string","Funname":"querydesktop.ListAppStore","Returntype":"[]string","Args":"t *testing.T"},{"Uniquefunname":"func ListInstalled(t *testing.T) []string","Funname":"querydesktop.ListInstalled","Returntype":"[]string","Args":"t *testing.T"},{"Uniquefunname":"func TestDesktopQuery(t *testing.T)","Funname":"querydesktop.TestDesktopQuery","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func init()","Funname":"querydesktop.init","Returntype":"","Args":""}],"Records":null}
{"Filepath":"src/internal/querydesktop/dpkg.go","Functions":[{"Uniquefunname":"func InitDB()","Funname":"InitDB","Returntype":"","Args":""},{"Uniquefunname":"func ListDesktopFiles(pkg string) []string","Funname":"ListDesktopFiles","Returntype":"[]string","Args":"pkg string"},{"Uniquefunname":"func ListPkgsFiles(pkgs []string) []string","Funname":"ListPkgsFiles","Returntype":"[]string","Args":"pkgs []string"},{"Uniquefunname":"func QueryDesktopFilePathByDependencies(pkgId string) string","Funname":"QueryDesktopFilePathByDependencies","Returntype":"string","Args":"pkgId string"},{"Uniquefunname":"func QuerySameSourcePkgs(pkg string) []string","Funname":"QuerySameSourcePkgs","Returntype":"[]string","Args":"pkg string"},{"Uniquefunname":"func groupBySource() (map[string][]string, map[string]string)","Funname":"groupBySource","Returntype":"(map[string][]string, map[string]string)","Args":""},{"Uniquefunname":"func queryRelateDependencies(stopCh chan bool, pkgId string, set map[string]struct{})chan string","Funname":"queryRelateDependencies","Returntype":"chan string","Args":"stopCh chan bool, pkgId string, set map[string]struct{}"},{"Uniquefunname":"func InitDB()","Funname":"querydesktop.InitDB","Returntype":"","Args":""},{"Uniquefunname":"func ListDesktopFiles(pkg string) []string","Funname":"querydesktop.ListDesktopFiles","Returntype":"[]string","Args":"pkg string"},{"Uniquefunname":"func ListPkgsFiles(pkgs []string) []string","Funname":"querydesktop.ListPkgsFiles","Returntype":"[]string","Args":"pkgs []string"},{"Uniquefunname":"func QueryDesktopFilePathByDependencies(pkgId string) string","Funname":"querydesktop.QueryDesktopFilePathByDependencies","Returntype":"string","Args":"pkgId string"},{"Uniquefunname":"func QuerySameSourcePkgs(pkg string) []string","Funname":"querydesktop.QuerySameSourcePkgs","Returntype":"[]string","Args":"pkg string"},{"Uniquefunname":"func groupBySource() (map[string][]string, map[string]string)","Funname":"querydesktop.groupBySource","Returntype":"(map[string][]string, map[string]string)","Args":""},{"Uniquefunname":"func querydesktop.queryRelateDependencies(stopCh chan bool, pkgId string, set map[string]struct{})chan string","Funname":"querydesktop.queryRelateDependencies","Returntype":"chan string","Args":"stopCh chan bool, pkgId string, set map[string]struct{}"}],"Records":[{"Name":"var:querydesktop","Fields":["querydesktop.__B2S__","querydesktop.__S2B__"]}]}
{"Filepath":"src/internal/system/common.go","Functions":[{"Uniquefunname":"func DecodeJson(fpath string, d interface","Funname":"DecodeJson","Returntype":"error","Args":"fpath string, d interface{}"},{"Uniquefunname":"func EncodeJson(fpath string, d interface","Funname":"EncodeJson","Returntype":"error","Args":"fpath string, d interface{}"},{"Uniquefunname":"func NormalFileExists(fpath string) bool","Funname":"NormalFileExists","Returntype":"bool","Args":"fpath string"},{"Uniquefunname":"func SystemUpgradeInfo() ([]UpgradeInfo, error)","Funname":"SystemUpgradeInfo","Returntype":"([]UpgradeInfo, error)","Args":""},{"Uniquefunname":"func DecodeJson(fpath string, d interface","Funname":"system.DecodeJson","Returntype":"error","Args":"fpath string, d interface{}"},{"Uniquefunname":"func EncodeJson(fpath string, d interface","Funname":"system.EncodeJson","Returntype":"error","Args":"fpath string, d interface{}"},{"Uniquefunname":"func NormalFileExists(fpath string) bool","Funname":"system.NormalFileExists","Returntype":"bool","Args":"fpath string"},{"Uniquefunname":"func SystemUpgradeInfo() ([]UpgradeInfo, error)","Funname":"system.SystemUpgradeInfo","Returntype":"([]UpgradeInfo, error)","Args":""}],"Records":[{"Name":"struct:system.MirrorSource","Fields":["system.MirrorSource.AdjustDelay int","system.MirrorSource.Country string","system.MirrorSource.Id string","system.MirrorSource.Name string","system.MirrorSource.NameLocale map[string]string","system.MirrorSource.Url string","system.MirrorSource.Weight int"]},{"Name":"var:system","Fields":["system.RepoInfos"]},{"Name":"struct:system.RepositoryInfo","Fields":["system.RepositoryInfo.Mirror string","system.RepositoryInfo.Name string","system.RepositoryInfo.Url string"]}]}
{"Filepath":"src/internal/system/fsnotify.go","Functions":[{"Uniquefunname":"func (f *DirMonitor) Add(fn DirMonitorCallback, names ...string) error","Funname":"Add","Returntype":"error","Args":"fn DirMonitorCallback, names ...string"},{"Uniquefunname":"func NewDirMonitor(baseDir string) *DirMonitor","Funname":"NewDirMonitor","Returntype":"*DirMonitor","Args":"baseDir string"},{"Uniquefunname":"func (f *DirMonitor) Start() error","Funname":"Start","Returntype":"error","Args":""},{"Uniquefunname":"func (f *DirMonitor) Stop()","Funname":"Stop","Returntype":"","Args":""},{"Uniquefunname":"func (f *DirMonitor) Add(fn DirMonitorCallback, names ...string) error","Funname":"system.DirMonitor.Add","Returntype":"error","Args":"fn DirMonitorCallback, names ...string"},{"Uniquefunname":"func (f *DirMonitor) Start() error","Funname":"system.DirMonitor.Start","Returntype":"error","Args":""},{"Uniquefunname":"func (f *DirMonitor) Stop()","Funname":"system.DirMonitor.Stop","Returntype":"","Args":""},{"Uniquefunname":"func (f *DirMonitor) tryNotify(event *fsnotify.FileEvent)","Funname":"system.DirMonitor.tryNotify","Returntype":"","Args":"event *fsnotify.FileEvent"},{"Uniquefunname":"func NewDirMonitor(baseDir string) *DirMonitor","Funname":"system.NewDirMonitor","Returntype":"*DirMonitor","Args":"baseDir string"},{"Uniquefunname":"func (f *DirMonitor) tryNotify(event *fsnotify.FileEvent)","Funname":"tryNotify","Returntype":"","Args":"event *fsnotify.FileEvent"}],"Records":[{"Name":"struct:system.DirMonitor","Fields":["system.DirMonitor.baseDir string","system.DirMonitor.callbacks map[string]DirMonitorCallback","system.DirMonitor.done chan bool","system.DirMonitor.watcher *fsnotify.Watcher"]}]}
{"Filepath":"src/internal/system/system.go","Functions":[{"Uniquefunname":"func (e *PkgSystemError) Error() string","Funname":"Error","Returntype":"string","Args":""},{"Uniquefunname":"func (e NotFoundErrorType) Error() string","Funname":"Error","Returntype":"string","Args":""},{"Uniquefunname":"func (err *UpdateInfoError) Error() string","Funname":"Error","Returntype":"string","Args":""},{"Uniquefunname":"func (e *JobError) GetDetail() string","Funname":"GetDetail","Returntype":"string","Args":""},{"Uniquefunname":"func (e *PkgSystemError) GetDetail() string","Funname":"GetDetail","Returntype":"string","Args":""},{"Uniquefunname":"func (e *JobError) GetType() string","Funname":"GetType","Returntype":"string","Args":""},{"Uniquefunname":"func (e *PkgSystemError) GetType() string","Funname":"GetType","Returntype":"string","Args":""},{"Uniquefunname":"func NotFoundError(w string) NotFoundErrorType","Funname":"NotFoundError","Returntype":"NotFoundErrorType","Args":"w string"},{"Uniquefunname":"func (e *JobError) GetDetail() string","Funname":"system.JobError.GetDetail","Returntype":"string","Args":""},{"Uniquefunname":"func (e *JobError) GetType() string","Funname":"system.JobError.GetType","Returntype":"string","Args":""},{"Uniquefunname":"func NotFoundError(w string) NotFoundErrorType","Funname":"system.NotFoundError","Returntype":"NotFoundErrorType","Args":"w string"},{"Uniquefunname":"func (e NotFoundErrorType) Error() string","Funname":"system.NotFoundErrorType.Error","Returntype":"string","Args":""},{"Uniquefunname":"func (e *PkgSystemError) Error() string","Funname":"system.PkgSystemError.Error","Returntype":"string","Args":""},{"Uniquefunname":"func (e *PkgSystemError) GetDetail() string","Funname":"system.PkgSystemError.GetDetail","Returntype":"string","Args":""},{"Uniquefunname":"func (e *PkgSystemError) GetType() string","Funname":"system.PkgSystemError.GetType","Returntype":"string","Args":""},{"Uniquefunname":"func (err *UpdateInfoError) Error() string","Funname":"system.UpdateInfoError.Error","Returntype":"string","Args":""}],"Records":[{"Name":"const:system","Fields":["system.CleanJobType","system.DefaultMirrorsUrl","system.DistUpgradeJobType","system.DownloadJobType","system.EndStatus","system.ErrTypeDependenciesBroken","system.ErrTypeDpkgInterrupted","system.ErrTypeInvalidSourcesList","system.ErrTypeUnknown","system.FailedStatus","system.FixErrorJobType","system.InstallJobType","system.PausedStatus","system.PrepareDistUpgradeJobType","system.ReadyStatus","system.RemoveJobType","system.RunningStatus","system.SucceedStatus","system.UpdateJobType","system.UpdateSourceJobType","system.VarLibDir"]},{"Name":"struct:system.JobError","Fields":["system.JobError.Detail string","system.JobError.Type string"]},{"Name":"struct:system.JobProgressInfo","Fields":["system.JobProgressInfo.Cancelable bool","system.JobProgressInfo.Description string","system.JobProgressInfo.Error *JobError","system.JobProgressInfo.FatalError bool","system.JobProgressInfo.JobId string","system.JobProgressInfo.Progress float64","system.JobProgressInfo.Status Status"]},{"Name":"var:system","Fields":["system.NotImplementError","system.NotSupportError","system.ResourceExitError"]},{"Name":"struct:system.PkgSystemError","Fields":["system.PkgSystemError.Detail string","system.PkgSystemError.Type string"]},{"Name":"interface","Fields":["system.System"]},{"Name":"struct:system.UpdateInfoError","Fields":["system.UpdateInfoError.Detail string","system.UpdateInfoError.Type string"]},{"Name":"struct:system.UpgradeInfo","Fields":["system.UpgradeInfo.ChangeLog string","system.UpgradeInfo.CurrentVersion string","system.UpgradeInfo.LastVersion string","system.UpgradeInfo.Package string"]}]}
{"Filepath":"src/internal/system/system_apt.go","Functions":[{"Uniquefunname":"func DetectDefaultRepoInfo(rInfos []RepositoryInfo) RepositoryInfo","Funname":"DetectDefaultRepoInfo","Returntype":"RepositoryInfo","Args":"rInfos []RepositoryInfo"},{"Uniquefunname":"func ListPackageFile(packages ...string) []string","Funname":"ListPackageFile","Returntype":"[]string","Args":"packages ...string"},{"Uniquefunname":"func QueryPackageDependencies(pkgId string) []string","Funname":"QueryPackageDependencies","Returntype":"[]string","Args":"pkgId string"},{"Uniquefunname":"func QueryPackageDownloadSize(packages ...string) (float64, error)","Funname":"QueryPackageDownloadSize","Returntype":"(float64, error)","Args":"packages ...string"},{"Uniquefunname":"func QueryPackageInstallable(pkgId string) bool","Funname":"QueryPackageInstallable","Returntype":"bool","Args":"pkgId string"},{"Uniquefunname":"func QueryPackageInstalled(pkgId string) bool","Funname":"QueryPackageInstalled","Returntype":"bool","Args":"pkgId string"},{"Uniquefunname":"func SystemArchitectures() ([]Architecture, error)","Funname":"SystemArchitectures","Returntype":"([]Architecture, error)","Args":""},{"Uniquefunname":"func guestBasePackageName(pkgId string) string","Funname":"guestBasePackageName","Returntype":"string","Args":"pkgId string"},{"Uniquefunname":"func init()","Funname":"init","Returntype":"","Args":""},{"Uniquefunname":"func parsePackageSize(line string) (float64, error)","Funname":"parsePackageSize","Returntype":"(float64, error)","Args":"line string"},{"Uniquefunname":"func DetectDefaultRepoInfo(rInfos []RepositoryInfo) RepositoryInfo","Funname":"system.DetectDefaultRepoInfo","Returntype":"RepositoryInfo","Args":"rInfos []RepositoryInfo"},{"Uniquefunname":"func ListPackageFile(packages ...string) []string","Funname":"system.ListPackageFile","Returntype":"[]string","Args":"packages ...string"},{"Uniquefunname":"func QueryPackageDependencies(pkgId string) []string","Funname":"system.QueryPackageDependencies","Returntype":"[]string","Args":"pkgId string"},{"Uniquefunname":"func QueryPackageDownloadSize(packages ...string) (float64, error)","Funname":"system.QueryPackageDownloadSize","Returntype":"(float64, error)","Args":"packages ...string"},{"Uniquefunname":"func QueryPackageInstallable(pkgId string) bool","Funname":"system.QueryPackageInstallable","Returntype":"bool","Args":"pkgId string"},{"Uniquefunname":"func QueryPackageInstalled(pkgId string) bool","Funname":"system.QueryPackageInstalled","Returntype":"bool","Args":"pkgId string"},{"Uniquefunname":"func SystemArchitectures() ([]Architecture, error)","Funname":"system.SystemArchitectures","Returntype":"([]Architecture, error)","Args":""},{"Uniquefunname":"func guestBasePackageName(pkgId string) string","Funname":"system.guestBasePackageName","Returntype":"string","Args":"pkgId string"},{"Uniquefunname":"func init()","Funname":"system.init","Returntype":"","Args":""},{"Uniquefunname":"func parsePackageSize(line string) (float64, error)","Funname":"system.parsePackageSize","Returntype":"(float64, error)","Args":"line string"}],"Records":[{"Name":"const:system","Fields":["system.SizeDownloaded","system.SizeUnknown"]},{"Name":"var:system","Fields":["system.__ReDownloadSize__","system.__unitTable__","system.defaultRepoInfo"]}]}
{"Filepath":"src/internal/system/system_apt_test.go","Functions":[{"Uniquefunname":"func Test(t *testing.T)","Funname":"Test","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func (*testWrap) TestPackageDownloadSize(c *C.C)","Funname":"TestPackageDownloadSize","Returntype":"","Args":"c *C.C"},{"Uniquefunname":"func (*testWrap) TestParseSize(c *C.C)","Funname":"TestParseSize","Returntype":"","Args":"c *C.C"},{"Uniquefunname":"func (*testWrap) TestQueryPackageDepend(c *C.C)","Funname":"TestQueryPackageDepend","Returntype":"","Args":"c *C.C"},{"Uniquefunname":"func init()","Funname":"init","Returntype":"","Args":""},{"Uniquefunname":"func system.Test(t *testing.T)","Funname":"system.Test","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func init()","Funname":"system.init","Returntype":"","Args":""},{"Uniquefunname":"func (*testWrap) TestPackageDownloadSize(c *C.C)","Funname":"system.testWrap.TestPackageDownloadSize","Returntype":"","Args":"c *C.C"},{"Uniquefunname":"func (*testWrap) TestParseSize(c *C.C)","Funname":"system.testWrap.TestParseSize","Returntype":"","Args":"c *C.C"},{"Uniquefunname":"func (*testWrap) TestQueryPackageDepend(c *C.C)","Funname":"system.testWrap.TestQueryPackageDepend","Returntype":"","Args":"c *C.C"}],"Records":null}
{"Filepath":"src/internal/system/apt/all_test.go","Functions":[{"Uniquefunname":"func Test(t *testing.T)","Funname":"Test","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func (*testWrap) TestParseInfo(c *C.C)","Funname":"TestParseInfo","Returntype":"","Args":"c *C.C"},{"Uniquefunname":"func apt.Test(t *testing.T)","Funname":"apt.Test","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func init()","Funname":"apt.init","Returntype":"","Args":""},{"Uniquefunname":"func (*testWrap) TestParseInfo(c *C.C)","Funname":"apt.testWrap.TestParseInfo","Returntype":"","Args":"c *C.C"},{"Uniquefunname":"func init()","Funname":"init","Returntype":"","Args":""}],"Records":null}
{"Filepath":"src/internal/system/apt/apt.go","Functions":[{"Uniquefunname":"func (c *aptCommand) Abort() error","Funname":"Abort","Returntype":"error","Args":""},{"Uniquefunname":"func (p *APTSystem) AddCMD(cmd *aptCommand)","Funname":"AddCMD","Returntype":"","Args":"cmd *aptCommand"},{"Uniquefunname":"func (p *APTSystem) FindCMD(id string) *aptCommand","Funname":"FindCMD","Returntype":"*aptCommand","Args":"id string"},{"Uniquefunname":"func (p *APTSystem) RemoveCMD(id string)","Funname":"RemoveCMD","Returntype":"","Args":"id string"},{"Uniquefunname":"func (c *aptCommand) Start() error","Funname":"Start","Returntype":"error","Args":""},{"Uniquefunname":"func (c *aptCommand) String() string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func (c *aptCommand) Wait() (err error)","Funname":"Wait","Returntype":"(err error)","Args":""},{"Uniquefunname":"func (p *APTSystem) AddCMD(cmd *aptCommand)","Funname":"apt.APTSystem.AddCMD","Returntype":"","Args":"cmd *aptCommand"},{"Uniquefunname":"func (p *APTSystem) FindCMD(id string) *aptCommand","Funname":"apt.APTSystem.FindCMD","Returntype":"*aptCommand","Args":"id string"},{"Uniquefunname":"func (p *APTSystem) RemoveCMD(id string)","Funname":"apt.APTSystem.RemoveCMD","Returntype":"","Args":"id string"},{"Uniquefunname":"func (c *aptCommand) Abort() error","Funname":"apt.aptCommand.Abort","Returntype":"error","Args":""},{"Uniquefunname":"func (c *aptCommand) Start() error","Funname":"apt.aptCommand.Start","Returntype":"error","Args":""},{"Uniquefunname":"func (c *aptCommand) String() string","Funname":"apt.aptCommand.String","Returntype":"string","Args":""},{"Uniquefunname":"func (c *aptCommand) Wait() (err error)","Funname":"apt.aptCommand.Wait","Returntype":"(err error)","Args":""},{"Uniquefunname":"func (c *aptCommand) atExit()","Funname":"apt.aptCommand.atExit","Returntype":"","Args":""},{"Uniquefunname":"func (c *aptCommand) indicateFailed(errType, errDetail string, isFatalErr bool)","Funname":"apt.aptCommand.indicateFailed","Returntype":"","Args":"errType, errDetail string, isFatalErr bool"},{"Uniquefunname":"func (c *aptCommand) setEnv(envVarMap map[string]string)","Funname":"apt.aptCommand.setEnv","Returntype":"","Args":"envVarMap map[string]string"},{"Uniquefunname":"func (c *aptCommand) updateProgress()","Funname":"apt.aptCommand.updateProgress","Returntype":"","Args":""},{"Uniquefunname":"func createCommandLine(cmdType string, cmdArgs []string) *exec.Cmd","Funname":"apt.createCommandLine","Returntype":"*exec.Cmd","Args":"cmdType string, cmdArgs []string"},{"Uniquefunname":"func apt.newAPTCommand(cmdSet CommandSet, jobId string, cmdType string, fn system.Indicator, cmdArgs []string)*aptCommand","Funname":"apt.newAPTCommand","Returntype":"*aptCommand","Args":"cmdSet CommandSet, jobId string, cmdType string, fn system.Indicator, cmdArgs []string"},{"Uniquefunname":"func parseJobError(stdErrStr string, stdOutStr string) *system.JobError","Funname":"apt.parseJobError","Returntype":"*system.JobError","Args":"stdErrStr string, stdOutStr string"},{"Uniquefunname":"func (c *aptCommand) atExit()","Funname":"atExit","Returntype":"","Args":""},{"Uniquefunname":"func createCommandLine(cmdType string, cmdArgs []string) *exec.Cmd","Funname":"createCommandLine","Returntype":"*exec.Cmd","Args":"cmdType string, cmdArgs []string"},{"Uniquefunname":"func (c *aptCommand) indicateFailed(errType, errDetail string, isFatalErr bool)","Funname":"indicateFailed","Returntype":"","Args":"errType, errDetail string, isFatalErr bool"},{"Uniquefunname":"func newAPTCommand(cmdSet CommandSet, jobId string, cmdType string, fn system.Indicator, cmdArgs []string)*aptCommand","Funname":"newAPTCommand","Returntype":"*aptCommand","Args":"cmdSet CommandSet, jobId string, cmdType string, fn system.Indicator, cmdArgs []string"},{"Uniquefunname":"func parseJobError(stdErrStr string, stdOutStr string) *system.JobError","Funname":"parseJobError","Returntype":"*system.JobError","Args":"stdErrStr string, stdOutStr string"},{"Uniquefunname":"func (c *aptCommand) setEnv(envVarMap map[string]string)","Funname":"setEnv","Returntype":"","Args":"envVarMap map[string]string"},{"Uniquefunname":"func (c *aptCommand) updateProgress()","Funname":"updateProgress","Returntype":"","Args":""}],"Records":[{"Name":"interface","Fields":["apt.CommandSet"]},{"Name":"const:apt","Fields":["apt.ExitFailure","apt.ExitPause","apt.ExitSuccess"]},{"Name":"struct:apt.aptCommand","Fields":["apt.aptCommand.Cancelable bool","apt.aptCommand.JobId string","apt.aptCommand.apt *exec.Cmd","apt.aptCommand.aptMu sync.Mutex","apt.aptCommand.aptPipe *os.File","apt.aptCommand.atExitFn func() bool","apt.aptCommand.cmdSet CommandSet","apt.aptCommand.exitCode int","apt.aptCommand.indicator system.Indicator","apt.aptCommand.stderr bytes.Buffer","apt.aptCommand.stdout bytes.Buffer"]}]}
{"Filepath":"src/internal/system/apt/proxy.go","Functions":[{"Uniquefunname":"func (p *APTSystem) Abort(jobId string) error","Funname":"Abort","Returntype":"error","Args":"jobId string"},{"Uniquefunname":"func (p *APTSystem) AttachIndicator(f system.Indicator)","Funname":"AttachIndicator","Returntype":"","Args":"f system.Indicator"},{"Uniquefunname":"func (p *APTSystem) Clean(jobId string) error","Funname":"Clean","Returntype":"error","Args":"jobId string"},{"Uniquefunname":"func (p *APTSystem) DistUpgrade(jobId string, environ map[string]string) error","Funname":"DistUpgrade","Returntype":"error","Args":"jobId string, environ map[string]string"},{"Uniquefunname":"func (p *APTSystem) Download(jobId string, packages []string) error","Funname":"Download","Returntype":"error","Args":"jobId string, packages []string"},{"Uniquefunname":"func FixError(jobId string, errType string, environ map[string]string)error","Funname":"FixError","Returntype":"error","Args":"jobId string, errType string, environ map[string]string"},{"Uniquefunname":"func (p *APTSystem) Install(jobId string, packages []string, environ map[string]string) error","Funname":"Install","Returntype":"error","Args":"jobId string, packages []string, environ map[string]string"},{"Uniquefunname":"func New() system.System","Funname":"New","Returntype":"system.System","Args":""},{"Uniquefunname":"func ParsePkgSystemError(out, err []byte) error","Funname":"ParsePkgSystemError","Returntype":"error","Args":"out, err []byte"},{"Uniquefunname":"func ParseProgressInfo(id, line string) (system.JobProgressInfo, error)","Funname":"ParseProgressInfo","Returntype":"(system.JobProgressInfo, error)","Args":"id, line string"},{"Uniquefunname":"func (p *APTSystem) Remove(jobId string, packages []string, environ map[string]string) error","Funname":"Remove","Returntype":"error","Args":"jobId string, packages []string, environ map[string]string"},{"Uniquefunname":"func (p *APTSystem) UpdateSource(jobId string) error","Funname":"UpdateSource","Returntype":"error","Args":"jobId string"},{"Uniquefunname":"func WaitDpkgLockRelease()","Funname":"WaitDpkgLockRelease","Returntype":"","Args":""},{"Uniquefunname":"func (p *APTSystem) Abort(jobId string) error","Funname":"apt.APTSystem.Abort","Returntype":"error","Args":"jobId string"},{"Uniquefunname":"func (p *APTSystem) AttachIndicator(f system.Indicator)","Funname":"apt.APTSystem.AttachIndicator","Returntype":"","Args":"f system.Indicator"},{"Uniquefunname":"func (p *APTSystem) Clean(jobId string) error","Funname":"apt.APTSystem.Clean","Returntype":"error","Args":"jobId string"},{"Uniquefunname":"func (p *APTSystem) DistUpgrade(jobId string, environ map[string]string) error","Funname":"apt.APTSystem.DistUpgrade","Returntype":"error","Args":"jobId string, environ map[string]string"},{"Uniquefunname":"func (p *APTSystem) Download(jobId string, packages []string) error","Funname":"apt.APTSystem.Download","Returntype":"error","Args":"jobId string, packages []string"},{"Uniquefunname":"func apt.APTSystem.FixError(jobId string, errType string, environ map[string]string)error","Funname":"apt.APTSystem.FixError","Returntype":"error","Args":"jobId string, errType string, environ map[string]string"},{"Uniquefunname":"func (p *APTSystem) Install(jobId string, packages []string, environ map[string]string) error","Funname":"apt.APTSystem.Install","Returntype":"error","Args":"jobId string, packages []string, environ map[string]string"},{"Uniquefunname":"func (p *APTSystem) Remove(jobId string, packages []string, environ map[string]string) error","Funname":"apt.APTSystem.Remove","Returntype":"error","Args":"jobId string, packages []string, environ map[string]string"},{"Uniquefunname":"func (p *APTSystem) UpdateSource(jobId string) error","Funname":"apt.APTSystem.UpdateSource","Returntype":"error","Args":"jobId string"},{"Uniquefunname":"func New() system.System","Funname":"apt.New","Returntype":"system.System","Args":""},{"Uniquefunname":"func ParsePkgSystemError(out, err []byte) error","Funname":"apt.ParsePkgSystemError","Returntype":"error","Args":"out, err []byte"},{"Uniquefunname":"func ParseProgressInfo(id, line string) (system.JobProgressInfo, error)","Funname":"apt.ParseProgressInfo","Returntype":"(system.JobProgressInfo, error)","Args":"id, line string"},{"Uniquefunname":"func WaitDpkgLockRelease()","Funname":"apt.WaitDpkgLockRelease","Returntype":"","Args":""},{"Uniquefunname":"func checkDpkgDirtyJournal() bool","Funname":"apt.checkDpkgDirtyJournal","Returntype":"bool","Args":""},{"Uniquefunname":"func checkLock(p string) (string, bool)","Funname":"apt.checkLock","Returntype":"(string, bool)","Args":"p string"},{"Uniquefunname":"func checkPkgSystemError(lock bool) error","Funname":"apt.checkPkgSystemError","Returntype":"error","Args":"lock bool"},{"Uniquefunname":"func parsePkgSystemError(out, err []byte) error","Funname":"apt.parsePkgSystemError","Returntype":"error","Args":"out, err []byte"},{"Uniquefunname":"func parseProgressField(v string) (float64, error)","Funname":"apt.parseProgressField","Returntype":"(float64, error)","Args":"v string"},{"Uniquefunname":"func safeStart(c *aptCommand) error","Funname":"apt.safeStart","Returntype":"error","Args":"c *aptCommand"},{"Uniquefunname":"func tryFixDpkgDirtyStatus()","Funname":"apt.tryFixDpkgDirtyStatus","Returntype":"","Args":""},{"Uniquefunname":"func checkDpkgDirtyJournal() bool","Funname":"checkDpkgDirtyJournal","Returntype":"bool","Args":""},{"Uniquefunname":"func checkLock(p string) (string, bool)","Funname":"checkLock","Returntype":"(string, bool)","Args":"p string"},{"Uniquefunname":"func checkPkgSystemError(lock bool) error","Funname":"checkPkgSystemError","Returntype":"error","Args":"lock bool"},{"Uniquefunname":"func parsePkgSystemError(out, err []byte) error","Funname":"parsePkgSystemError","Returntype":"error","Args":"out, err []byte"},{"Uniquefunname":"func parseProgressField(v string) (float64, error)","Funname":"parseProgressField","Returntype":"(float64, error)","Args":"v string"},{"Uniquefunname":"func safeStart(c *aptCommand) error","Funname":"safeStart","Returntype":"error","Args":"c *aptCommand"},{"Uniquefunname":"func tryFixDpkgDirtyStatus()","Funname":"tryFixDpkgDirtyStatus","Returntype":"","Args":""}],"Records":[{"Name":"struct:apt.APTSystem","Fields":["apt.APTSystem.cmdSet map[string]*aptCommand","apt.APTSystem.indicator system.Indicator"]}]}
{"Filepath":"src/internal/utils/log.go","Functions":[{"Uniquefunname":"func SetLogger(levels, format, output string) *dbus.Error","Funname":"SetLogger","Returntype":"*dbus.Error","Args":"levels, format, output string"},{"Uniquefunname":"func SetSeelogger(levels string, format string, output string) error","Funname":"SetSeelogger","Returntype":"error","Args":"levels string, format string, output string"},{"Uniquefunname":"func SetLogger(levels, format, output string) *dbus.Error","Funname":"utils.SetLogger","Returntype":"*dbus.Error","Args":"levels, format, output string"},{"Uniquefunname":"func SetSeelogger(levels string, format string, output string) error","Funname":"utils.SetSeelogger","Returntype":"error","Args":"levels string, format string, output string"}],"Records":[{"Name":"const:utils","Fields":["utils.DefaultLogFormat","utils.DefaultLogLevel","utils.DefaultLogOutput"]},{"Name":"var:utils","Fields":["utils.baseLogDir"]}]}
{"Filepath":"src/internal/utils/ostree.go","Functions":[{"Uniquefunname":"func (tree *OSTree) Cat(branch string, fpath string) (string, error)","Funname":"Cat","Returntype":"(string, error)","Args":"branch string, fpath string"},{"Uniquefunname":"func (tree *OSTree) Checkout(branch string, target string, force bool) error","Funname":"Checkout","Returntype":"error","Args":"branch string, target string, force bool"},{"Uniquefunname":"func (tree *OSTree) HasBranch(branch string) bool","Funname":"HasBranch","Returntype":"bool","Args":"branch string"},{"Uniquefunname":"func (tree *OSTree) List(branch string, root string) (string, error)","Funname":"List","Returntype":"(string, error)","Args":"branch string, root string"},{"Uniquefunname":"func (tree *OSTree) NeedCheckout(branch string, target string) bool","Funname":"NeedCheckout","Returntype":"bool","Args":"branch string, target string"},{"Uniquefunname":"func NewOSTree(repo string, remote string) (*OSTree, error)","Funname":"NewOSTree","Returntype":"(*OSTree, error)","Args":"repo string, remote string"},{"Uniquefunname":"func (tree *OSTree) Pull(branch string) error","Funname":"Pull","Returntype":"error","Args":"branch string"},{"Uniquefunname":"func (tree *OSTree) RemoteURL() string","Funname":"RemoteURL","Returntype":"string","Args":""},{"Uniquefunname":"func (tree *OSTree) buildDo(args ...string) *exec.Cmd","Funname":"buildDo","Returntype":"*exec.Cmd","Args":"args ...string"},{"Uniquefunname":"func (tree *OSTree) do(args ...string) (string, error)","Funname":"do","Returntype":"(string, error)","Args":"args ...string"},{"Uniquefunname":"func NewOSTree(repo string, remote string) (*OSTree, error)","Funname":"utils.NewOSTree","Returntype":"(*OSTree, error)","Args":"repo string, remote string"},{"Uniquefunname":"func (tree *OSTree) Cat(branch string, fpath string) (string, error)","Funname":"utils.OSTree.Cat","Returntype":"(string, error)","Args":"branch string, fpath string"},{"Uniquefunname":"func (tree *OSTree) Checkout(branch string, target string, force bool) error","Funname":"utils.OSTree.Checkout","Returntype":"error","Args":"branch string, target string, force bool"},{"Uniquefunname":"func (tree *OSTree) HasBranch(branch string) bool","Funname":"utils.OSTree.HasBranch","Returntype":"bool","Args":"branch string"},{"Uniquefunname":"func (tree *OSTree) List(branch string, root string) (string, error)","Funname":"utils.OSTree.List","Returntype":"(string, error)","Args":"branch string, root string"},{"Uniquefunname":"func (tree *OSTree) NeedCheckout(branch string, target string) bool","Funname":"utils.OSTree.NeedCheckout","Returntype":"bool","Args":"branch string, target string"},{"Uniquefunname":"func (tree *OSTree) Pull(branch string) error","Funname":"utils.OSTree.Pull","Returntype":"error","Args":"branch string"},{"Uniquefunname":"func (tree *OSTree) RemoteURL() string","Funname":"utils.OSTree.RemoteURL","Returntype":"string","Args":""},{"Uniquefunname":"func (tree *OSTree) buildDo(args ...string) *exec.Cmd","Funname":"utils.OSTree.buildDo","Returntype":"*exec.Cmd","Args":"args ...string"},{"Uniquefunname":"func (tree *OSTree) do(args ...string) (string, error)","Funname":"utils.OSTree.do","Returntype":"(string, error)","Args":"args ...string"}],"Records":[{"Name":"struct:utils.OSTree","Fields":["utils.OSTree.repo string"]}]}
{"Filepath":"src/internal/utils/utils.go","Functions":[{"Uniquefunname":"func EnsureBaseDir(fpath string) error","Funname":"EnsureBaseDir","Returntype":"error","Args":"fpath string"},{"Uniquefunname":"func FilterExecOutput(cmd *exec.Cmd, timeout time.Duration, filter func(line string) bool)([]string, error)","Funname":"FilterExecOutput","Returntype":"([]string, error)","Args":"cmd *exec.Cmd, timeout time.Duration, filter func(line string) bool"},{"Uniquefunname":"func OpenURL(url string) (io.ReadCloser, error)","Funname":"OpenURL","Returntype":"(io.ReadCloser, error)","Args":"url string"},{"Uniquefunname":"func RemoteCatLine(url string) (string, error)","Funname":"RemoteCatLine","Returntype":"(string, error)","Args":"url string"},{"Uniquefunname":"func RunCommand(prog string, args ...string) (string, error)","Funname":"RunCommand","Returntype":"(string, error)","Args":"prog string, args ...string"},{"Uniquefunname":"func TeeToFile(in io.Reader, fpath string, handler func(io.Reader) error) error","Funname":"TeeToFile","Returntype":"error","Args":"in io.Reader, fpath string, handler func(io.Reader) error"},{"Uniquefunname":"func ValidURL(url string) bool","Funname":"ValidURL","Returntype":"bool","Args":"url string"},{"Uniquefunname":"func WriteData(fpath string, data interface","Funname":"WriteData","Returntype":"error","Args":"fpath string, data interface{}"},{"Uniquefunname":"func EnsureBaseDir(fpath string) error","Funname":"utils.EnsureBaseDir","Returntype":"error","Args":"fpath string"},{"Uniquefunname":"func utils.FilterExecOutput(cmd *exec.Cmd, timeout time.Duration, filter func(line string) bool)([]string, error)","Funname":"utils.FilterExecOutput","Returntype":"([]string, error)","Args":"cmd *exec.Cmd, timeout time.Duration, filter func(line string) bool"},{"Uniquefunname":"func OpenURL(url string) (io.ReadCloser, error)","Funname":"utils.OpenURL","Returntype":"(io.ReadCloser, error)","Args":"url string"},{"Uniquefunname":"func RemoteCatLine(url string) (string, error)","Funname":"utils.RemoteCatLine","Returntype":"(string, error)","Args":"url string"},{"Uniquefunname":"func RunCommand(prog string, args ...string) (string, error)","Funname":"utils.RunCommand","Returntype":"(string, error)","Args":"prog string, args ...string"},{"Uniquefunname":"func TeeToFile(in io.Reader, fpath string, handler func(io.Reader) error) error","Funname":"utils.TeeToFile","Returntype":"error","Args":"in io.Reader, fpath string, handler func(io.Reader) error"},{"Uniquefunname":"func ValidURL(url string) bool","Funname":"utils.ValidURL","Returntype":"bool","Args":"url string"},{"Uniquefunname":"func WriteData(fpath string, data interface","Funname":"utils.WriteData","Returntype":"error","Args":"fpath string, data interface{}"}],"Records":null}
{"Filepath":"src/lastore-apt-clean/main.go","Functions":[{"Uniquefunname":"func compareVersions(ver1, op, ver2 string) bool","Funname":"compareVersions","Returntype":"bool","Args":"ver1, op, ver2 string"},{"Uniquefunname":"func deleteDeb(dir, name string)","Funname":"deleteDeb","Returntype":"","Args":"dir, name string"},{"Uniquefunname":"func getArchivesDir() (string, error)","Funname":"getArchivesDir","Returntype":"(string, error)","Args":""},{"Uniquefunname":"func getCandidateVersion(info *DebInfo) (string, error)","Funname":"getCandidateVersion","Returntype":"(string, error)","Args":"info *DebInfo"},{"Uniquefunname":"func getChangeTime(fileInfo os.FileInfo) time.Time","Funname":"getChangeTime","Returntype":"time.Time","Args":"fileInfo os.FileInfo"},{"Uniquefunname":"func getControlField(line []byte, key []byte) (string, error)","Funname":"getControlField","Returntype":"(string, error)","Args":"line []byte, key []byte"},{"Uniquefunname":"func getDebInfo(filename string) (*DebInfo, error)","Funname":"getDebInfo","Returntype":"(*DebInfo, error)","Args":"filename string"},{"Uniquefunname":"func main()","Funname":"main","Returntype":"","Args":""},{"Uniquefunname":"func compareVersions(ver1, op, ver2 string) bool","Funname":"main.compareVersions","Returntype":"bool","Args":"ver1, op, ver2 string"},{"Uniquefunname":"func deleteDeb(dir, name string)","Funname":"main.deleteDeb","Returntype":"","Args":"dir, name string"},{"Uniquefunname":"func getArchivesDir() (string, error)","Funname":"main.getArchivesDir","Returntype":"(string, error)","Args":""},{"Uniquefunname":"func getCandidateVersion(info *DebInfo) (string, error)","Funname":"main.getCandidateVersion","Returntype":"(string, error)","Args":"info *DebInfo"},{"Uniquefunname":"func getChangeTime(fileInfo os.FileInfo) time.Time","Funname":"main.getChangeTime","Returntype":"time.Time","Args":"fileInfo os.FileInfo"},{"Uniquefunname":"func getControlField(line []byte, key []byte) (string, error)","Funname":"main.getControlField","Returntype":"(string, error)","Args":"line []byte, key []byte"},{"Uniquefunname":"func getDebInfo(filename string) (*DebInfo, error)","Funname":"main.getDebInfo","Returntype":"(*DebInfo, error)","Args":"filename string"},{"Uniquefunname":"func main()","Funname":"main.main","Returntype":"","Args":""},{"Uniquefunname":"func mustGetBin(name string) string","Funname":"main.mustGetBin","Returntype":"string","Args":"name string"},{"Uniquefunname":"func queryStatusVersion(info *DebInfo) (status, version string, err error)","Funname":"main.queryStatusVersion","Returntype":"(status, version string, err error)","Args":"info *DebInfo"},{"Uniquefunname":"func shouldDelete(dir string, fileInfo os.FileInfo) (DeletePolicy, error)","Funname":"main.shouldDelete","Returntype":"(DeletePolicy, error)","Args":"dir string, fileInfo os.FileInfo"},{"Uniquefunname":"func mustGetBin(name string) string","Funname":"mustGetBin","Returntype":"string","Args":"name string"},{"Uniquefunname":"func queryStatusVersion(info *DebInfo) (status, version string, err error)","Funname":"queryStatusVersion","Returntype":"(status, version string, err error)","Args":"info *DebInfo"},{"Uniquefunname":"func shouldDelete(dir string, fileInfo os.FileInfo) (DeletePolicy, error)","Funname":"shouldDelete","Returntype":"(DeletePolicy, error)","Args":"dir string, fileInfo os.FileInfo"}],"Records":[{"Name":"struct:main.DebInfo","Fields":["main.DebInfo.arch string","main.DebInfo.name string","main.DebInfo.version string"]},{"Name":"const:main","Fields":["main.DeleteExpired","main.DeleteImmediately","main.Keep","main.maxElapsed","main.statusInstallInstalled","main.statusNotFound","main.statusRemoveConfigFiles","main.statusUnknownNotInstalled"]},{"Name":"var:main","Fields":["main.binAptCache","main.binAptConfig","main.binDpkg","main.binDpkgDeb","main.binDpkgQuery"]}]}
{"Filepath":"src/lastore-daemon/config.go","Functions":[{"Uniquefunname":"func NewConfig(fpath string) *Config","Funname":"NewConfig","Returntype":"*Config","Args":"fpath string"},{"Uniquefunname":"func (c *Config) SetAppstoreRegion(region string) error","Funname":"SetAppstoreRegion","Returntype":"error","Args":"region string"},{"Uniquefunname":"func (c *Config) SetAutoCheckUpdates(enable bool) error","Funname":"SetAutoCheckUpdates","Returntype":"error","Args":"enable bool"},{"Uniquefunname":"func (c *Config) SetAutoClean(enable bool) error","Funname":"SetAutoClean","Returntype":"error","Args":"enable bool"},{"Uniquefunname":"func (c *Config) SetAutoDownloadUpdates(enable bool) error","Funname":"SetAutoDownloadUpdates","Returntype":"error","Args":"enable bool"},{"Uniquefunname":"func (c *Config) SetMirrorSource(id string) error","Funname":"SetMirrorSource","Returntype":"error","Args":"id string"},{"Uniquefunname":"func (c *Config) UpdateLastCheckTime() error","Funname":"UpdateLastCheckTime","Returntype":"error","Args":""},{"Uniquefunname":"func (c *Config) UpdateLastCleanTime() error","Funname":"UpdateLastCleanTime","Returntype":"error","Args":""},{"Uniquefunname":"func (c *Config) SetAppstoreRegion(region string) error","Funname":"main.Config.SetAppstoreRegion","Returntype":"error","Args":"region string"},{"Uniquefunname":"func (c *Config) SetAutoCheckUpdates(enable bool) error","Funname":"main.Config.SetAutoCheckUpdates","Returntype":"error","Args":"enable bool"},{"Uniquefunname":"func (c *Config) SetAutoClean(enable bool) error","Funname":"main.Config.SetAutoClean","Returntype":"error","Args":"enable bool"},{"Uniquefunname":"func (c *Config) SetAutoDownloadUpdates(enable bool) error","Funname":"main.Config.SetAutoDownloadUpdates","Returntype":"error","Args":"enable bool"},{"Uniquefunname":"func (c *Config) SetMirrorSource(id string) error","Funname":"main.Config.SetMirrorSource","Returntype":"error","Args":"id string"},{"Uniquefunname":"func (c *Config) UpdateLastCheckTime() error","Funname":"main.Config.UpdateLastCheckTime","Returntype":"error","Args":""},{"Uniquefunname":"func (c *Config) UpdateLastCleanTime() error","Funname":"main.Config.UpdateLastCleanTime","Returntype":"error","Args":""},{"Uniquefunname":"func (c *Config) save() error","Funname":"main.Config.save","Returntype":"error","Args":""},{"Uniquefunname":"func NewConfig(fpath string) *Config","Funname":"main.NewConfig","Returntype":"*Config","Args":"fpath string"},{"Uniquefunname":"func (c *Config) save() error","Funname":"save","Returntype":"error","Args":""}],"Records":[{"Name":"struct:main.Config","Fields":["main.Config.AppstoreRegion string","main.Config.AutoCheckUpdates bool","main.Config.AutoClean bool","main.Config.AutoDownloadUpdates bool","main.Config.CheckInterval time.Duration","main.Config.CleanInterval time.Duration","main.Config.DisableUpdateMetadata bool","main.Config.LastCheckTime time.Time","main.Config.LastCleanTime time.Time","main.Config.MirrorSource string","main.Config.MirrorsUrl string","main.Config.Repository string","main.Config.filePath string"]},{"Name":"var:main","Fields":["main.DefaultConfig"]},{"Name":"const:main","Fields":["main.MinCheckInterval"]}]}
{"Filepath":"src/lastore-daemon/dbusutil.go","Functions":[{"Uniquefunname":"func (v *Updater) emitPropChangedAutoCheckUpdates(value bool) error","Funname":"emitPropChangedAutoCheckUpdates","Returntype":"error","Args":"value bool"},{"Uniquefunname":"func (v *Manager) emitPropChangedAutoClean(value bool) error","Funname":"emitPropChangedAutoClean","Returntype":"error","Args":"value bool"},{"Uniquefunname":"func (v *Updater) emitPropChangedAutoDownloadUpdates(value bool) error","Funname":"emitPropChangedAutoDownloadUpdates","Returntype":"error","Args":"value bool"},{"Uniquefunname":"func (v *Job) emitPropChangedCancelable(value bool) error","Funname":"emitPropChangedCancelable","Returntype":"error","Args":"value bool"},{"Uniquefunname":"func (v *Job) emitPropChangedCreateTime(value int64) error","Funname":"emitPropChangedCreateTime","Returntype":"error","Args":"value int64"},{"Uniquefunname":"func (v *Job) emitPropChangedDescription(value string) error","Funname":"emitPropChangedDescription","Returntype":"error","Args":"value string"},{"Uniquefunname":"func (v *Job) emitPropChangedDownloadSize(value int64) error","Funname":"emitPropChangedDownloadSize","Returntype":"error","Args":"value int64"},{"Uniquefunname":"func (v *Job) emitPropChangedId(value string) error","Funname":"emitPropChangedId","Returntype":"error","Args":"value string"},{"Uniquefunname":"func (v *Manager) emitPropChangedJobList(value []dbus.ObjectPath) error","Funname":"emitPropChangedJobList","Returntype":"error","Args":"value []dbus.ObjectPath"},{"Uniquefunname":"func (v *Updater) emitPropChangedMirrorSource(value string) error","Funname":"emitPropChangedMirrorSource","Returntype":"error","Args":"value string"},{"Uniquefunname":"func (v *Job) emitPropChangedName(value string) error","Funname":"emitPropChangedName","Returntype":"error","Args":"value string"},{"Uniquefunname":"func (v *Job) emitPropChangedPackages(value []string) error","Funname":"emitPropChangedPackages","Returntype":"error","Args":"value []string"},{"Uniquefunname":"func (v *Job) emitPropChangedProgress(value float64) error","Funname":"emitPropChangedProgress","Returntype":"error","Args":"value float64"},{"Uniquefunname":"func (v *Job) emitPropChangedSpeed(value int64) error","Funname":"emitPropChangedSpeed","Returntype":"error","Args":"value int64"},{"Uniquefunname":"func (v *Job) emitPropChangedStatus(value system.Status) error","Funname":"emitPropChangedStatus","Returntype":"error","Args":"value system.Status"},{"Uniquefunname":"func (v *Manager) emitPropChangedSystemOnChanging(value bool) error","Funname":"emitPropChangedSystemOnChanging","Returntype":"error","Args":"value bool"},{"Uniquefunname":"func (v *Job) emitPropChangedType(value string) error","Funname":"emitPropChangedType","Returntype":"error","Args":"value string"},{"Uniquefunname":"func (v *Updater) emitPropChangedUpdatableApps(value []string) error","Funname":"emitPropChangedUpdatableApps","Returntype":"error","Args":"value []string"},{"Uniquefunname":"func (v *Updater) emitPropChangedUpdatablePackages(value []string) error","Funname":"emitPropChangedUpdatablePackages","Returntype":"error","Args":"value []string"},{"Uniquefunname":"func (v *Manager) emitPropChangedUpgradableApps(value []string) error","Funname":"emitPropChangedUpgradableApps","Returntype":"error","Args":"value []string"},{"Uniquefunname":"func (v *Job) emitPropChangedCancelable(value bool) error","Funname":"main.Job.emitPropChangedCancelable","Returntype":"error","Args":"value bool"},{"Uniquefunname":"func (v *Job) emitPropChangedCreateTime(value int64) error","Funname":"main.Job.emitPropChangedCreateTime","Returntype":"error","Args":"value int64"},{"Uniquefunname":"func (v *Job) emitPropChangedDescription(value string) error","Funname":"main.Job.emitPropChangedDescription","Returntype":"error","Args":"value string"},{"Uniquefunname":"func (v *Job) emitPropChangedDownloadSize(value int64) error","Funname":"main.Job.emitPropChangedDownloadSize","Returntype":"error","Args":"value int64"},{"Uniquefunname":"func (v *Job) emitPropChangedId(value string) error","Funname":"main.Job.emitPropChangedId","Returntype":"error","Args":"value string"},{"Uniquefunname":"func (v *Job) emitPropChangedName(value string) error","Funname":"main.Job.emitPropChangedName","Returntype":"error","Args":"value string"},{"Uniquefunname":"func (v *Job) emitPropChangedPackages(value []string) error","Funname":"main.Job.emitPropChangedPackages","Returntype":"error","Args":"value []string"},{"Uniquefunname":"func (v *Job) emitPropChangedProgress(value float64) error","Funname":"main.Job.emitPropChangedProgress","Returntype":"error","Args":"value float64"},{"Uniquefunname":"func (v *Job) emitPropChangedSpeed(value int64) error","Funname":"main.Job.emitPropChangedSpeed","Returntype":"error","Args":"value int64"},{"Uniquefunname":"func (v *Job) emitPropChangedStatus(value system.Status) error","Funname":"main.Job.emitPropChangedStatus","Returntype":"error","Args":"value system.Status"},{"Uniquefunname":"func (v *Job) emitPropChangedType(value string) error","Funname":"main.Job.emitPropChangedType","Returntype":"error","Args":"value string"},{"Uniquefunname":"func (v *Job) setPropCancelable(value bool) (changed bool)","Funname":"main.Job.setPropCancelable","Returntype":"(changed bool)","Args":"value bool"},{"Uniquefunname":"func (v *Job) setPropCreateTime(value int64) (changed bool)","Funname":"main.Job.setPropCreateTime","Returntype":"(changed bool)","Args":"value int64"},{"Uniquefunname":"func (v *Job) setPropDescription(value string) (changed bool)","Funname":"main.Job.setPropDescription","Returntype":"(changed bool)","Args":"value string"},{"Uniquefunname":"func (v *Job) setPropDownloadSize(value int64) (changed bool)","Funname":"main.Job.setPropDownloadSize","Returntype":"(changed bool)","Args":"value int64"},{"Uniquefunname":"func (v *Job) setPropId(value string) (changed bool)","Funname":"main.Job.setPropId","Returntype":"(changed bool)","Args":"value string"},{"Uniquefunname":"func (v *Job) setPropName(value string) (changed bool)","Funname":"main.Job.setPropName","Returntype":"(changed bool)","Args":"value string"},{"Uniquefunname":"func (v *Job) setPropPackages(value []string)","Funname":"main.Job.setPropPackages","Returntype":"","Args":"value []string"},{"Uniquefunname":"func (v *Job) setPropProgress(value float64) (changed bool)","Funname":"main.Job.setPropProgress","Returntype":"(changed bool)","Args":"value float64"},{"Uniquefunname":"func (v *Job) setPropSpeed(value int64) (changed bool)","Funname":"main.Job.setPropSpeed","Returntype":"(changed bool)","Args":"value int64"},{"Uniquefunname":"func (v *Job) setPropStatus(value system.Status) (changed bool)","Funname":"main.Job.setPropStatus","Returntype":"(changed bool)","Args":"value system.Status"},{"Uniquefunname":"func (v *Job) setPropType(value string) (changed bool)","Funname":"main.Job.setPropType","Returntype":"(changed bool)","Args":"value string"},{"Uniquefunname":"func (v *Manager) emitPropChangedAutoClean(value bool) error","Funname":"main.Manager.emitPropChangedAutoClean","Returntype":"error","Args":"value bool"},{"Uniquefunname":"func (v *Manager) emitPropChangedJobList(value []dbus.ObjectPath) error","Funname":"main.Manager.emitPropChangedJobList","Returntype":"error","Args":"value []dbus.ObjectPath"},{"Uniquefunname":"func (v *Manager) emitPropChangedSystemOnChanging(value bool) error","Funname":"main.Manager.emitPropChangedSystemOnChanging","Returntype":"error","Args":"value bool"},{"Uniquefunname":"func (v *Manager) emitPropChangedUpgradableApps(value []string) error","Funname":"main.Manager.emitPropChangedUpgradableApps","Returntype":"error","Args":"value []string"},{"Uniquefunname":"func (v *Manager) setPropAutoClean(value bool) (changed bool)","Funname":"main.Manager.setPropAutoClean","Returntype":"(changed bool)","Args":"value bool"},{"Uniquefunname":"func (v *Manager) setPropJobList(value []dbus.ObjectPath)","Funname":"main.Manager.setPropJobList","Returntype":"","Args":"value []dbus.ObjectPath"},{"Uniquefunname":"func (v *Manager) setPropSystemOnChanging(value bool) (changed bool)","Funname":"main.Manager.setPropSystemOnChanging","Returntype":"(changed bool)","Args":"value bool"},{"Uniquefunname":"func (v *Manager) setPropUpgradableApps(value []string)","Funname":"main.Manager.setPropUpgradableApps","Returntype":"","Args":"value []string"},{"Uniquefunname":"func (v *Updater) emitPropChangedAutoCheckUpdates(value bool) error","Funname":"main.Updater.emitPropChangedAutoCheckUpdates","Returntype":"error","Args":"value bool"},{"Uniquefunname":"func (v *Updater) emitPropChangedAutoDownloadUpdates(value bool) error","Funname":"main.Updater.emitPropChangedAutoDownloadUpdates","Returntype":"error","Args":"value bool"},{"Uniquefunname":"func (v *Updater) emitPropChangedMirrorSource(value string) error","Funname":"main.Updater.emitPropChangedMirrorSource","Returntype":"error","Args":"value string"},{"Uniquefunname":"func (v *Updater) emitPropChangedUpdatableApps(value []string) error","Funname":"main.Updater.emitPropChangedUpdatableApps","Returntype":"error","Args":"value []string"},{"Uniquefunname":"func (v *Updater) emitPropChangedUpdatablePackages(value []string) error","Funname":"main.Updater.emitPropChangedUpdatablePackages","Returntype":"error","Args":"value []string"},{"Uniquefunname":"func (v *Updater) setPropAutoCheckUpdates(value bool) (changed bool)","Funname":"main.Updater.setPropAutoCheckUpdates","Returntype":"(changed bool)","Args":"value bool"},{"Uniquefunname":"func (v *Updater) setPropAutoDownloadUpdates(value bool) (changed bool)","Funname":"main.Updater.setPropAutoDownloadUpdates","Returntype":"(changed bool)","Args":"value bool"},{"Uniquefunname":"func (v *Updater) setPropMirrorSource(value string) (changed bool)","Funname":"main.Updater.setPropMirrorSource","Returntype":"(changed bool)","Args":"value string"},{"Uniquefunname":"func (v *Updater) setPropUpdatableApps(value []string)","Funname":"main.Updater.setPropUpdatableApps","Returntype":"","Args":"value []string"},{"Uniquefunname":"func (v *Updater) setPropUpdatablePackages(value []string)","Funname":"main.Updater.setPropUpdatablePackages","Returntype":"","Args":"value []string"},{"Uniquefunname":"func (v *Updater) setPropAutoCheckUpdates(value bool) (changed bool)","Funname":"setPropAutoCheckUpdates","Returntype":"(changed bool)","Args":"value bool"},{"Uniquefunname":"func (v *Manager) setPropAutoClean(value bool) (changed bool)","Funname":"setPropAutoClean","Returntype":"(changed bool)","Args":"value bool"},{"Uniquefunname":"func (v *Updater) setPropAutoDownloadUpdates(value bool) (changed bool)","Funname":"setPropAutoDownloadUpdates","Returntype":"(changed bool)","Args":"value bool"},{"Uniquefunname":"func (v *Job) setPropCancelable(value bool) (changed bool)","Funname":"setPropCancelable","Returntype":"(changed bool)","Args":"value bool"},{"Uniquefunname":"func (v *Job) setPropCreateTime(value int64) (changed bool)","Funname":"setPropCreateTime","Returntype":"(changed bool)","Args":"value int64"},{"Uniquefunname":"func (v *Job) setPropDescription(value string) (changed bool)","Funname":"setPropDescription","Returntype":"(changed bool)","Args":"value string"},{"Uniquefunname":"func (v *Job) setPropDownloadSize(value int64) (changed bool)","Funname":"setPropDownloadSize","Returntype":"(changed bool)","Args":"value int64"},{"Uniquefunname":"func (v *Job) setPropId(value string) (changed bool)","Funname":"setPropId","Returntype":"(changed bool)","Args":"value string"},{"Uniquefunname":"func (v *Manager) setPropJobList(value []dbus.ObjectPath)","Funname":"setPropJobList","Returntype":"","Args":"value []dbus.ObjectPath"},{"Uniquefunname":"func (v *Updater) setPropMirrorSource(value string) (changed bool)","Funname":"setPropMirrorSource","Returntype":"(changed bool)","Args":"value string"},{"Uniquefunname":"func (v *Job) setPropName(value string) (changed bool)","Funname":"setPropName","Returntype":"(changed bool)","Args":"value string"},{"Uniquefunname":"func (v *Job) setPropPackages(value []string)","Funname":"setPropPackages","Returntype":"","Args":"value []string"},{"Uniquefunname":"func (v *Job) setPropProgress(value float64) (changed bool)","Funname":"setPropProgress","Returntype":"(changed bool)","Args":"value float64"},{"Uniquefunname":"func (v *Job) setPropSpeed(value int64) (changed bool)","Funname":"setPropSpeed","Returntype":"(changed bool)","Args":"value int64"},{"Uniquefunname":"func (v *Job) setPropStatus(value system.Status) (changed bool)","Funname":"setPropStatus","Returntype":"(changed bool)","Args":"value system.Status"},{"Uniquefunname":"func (v *Manager) setPropSystemOnChanging(value bool) (changed bool)","Funname":"setPropSystemOnChanging","Returntype":"(changed bool)","Args":"value bool"},{"Uniquefunname":"func (v *Job) setPropType(value string) (changed bool)","Funname":"setPropType","Returntype":"(changed bool)","Args":"value string"},{"Uniquefunname":"func (v *Updater) setPropUpdatableApps(value []string)","Funname":"setPropUpdatableApps","Returntype":"","Args":"value []string"},{"Uniquefunname":"func (v *Updater) setPropUpdatablePackages(value []string)","Funname":"setPropUpdatablePackages","Returntype":"","Args":"value []string"},{"Uniquefunname":"func (v *Manager) setPropUpgradableApps(value []string)","Funname":"setPropUpgradableApps","Returntype":"","Args":"value []string"}],"Records":null}
{"Filepath":"src/lastore-daemon/inhibitor.go","Functions":[{"Uniquefunname":"func Inhibitor(what, who, why string) (dbus.UnixFD, error)","Funname":"Inhibitor","Returntype":"(dbus.UnixFD, error)","Args":"what, who, why string"},{"Uniquefunname":"func Inhibitor(what, who, why string) (dbus.UnixFD, error)","Funname":"main.Inhibitor","Returntype":"(dbus.UnixFD, error)","Args":"what, who, why string"},{"Uniquefunname":"func (m *Manager) updateSystemOnChaning(onChanging bool)","Funname":"main.Manager.updateSystemOnChaning","Returntype":"","Args":"onChanging bool"},{"Uniquefunname":"func (m *Manager) updateSystemOnChaning(onChanging bool)","Funname":"updateSystemOnChaning","Returntype":"","Args":"onChanging bool"}],"Records":null}
{"Filepath":"src/lastore-daemon/job.go","Functions":[{"Uniquefunname":"func NewJob(service *dbusutil.Service, id, jobName string, packages []string, jobType, queueName string, environ map[string]string)*Job","Funname":"NewJob","Returntype":"*Job","Args":"service *dbusutil.Service, id, jobName string, packages []string, jobType, queueName string, environ map[string]string"},{"Uniquefunname":"func (j *Job) String() string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func (j *Job) _InitProgressRange(begin, end float64)","Funname":"_InitProgressRange","Returntype":"","Args":"begin, end float64"},{"Uniquefunname":"func (j *Job) _UpdateInfo(info system.JobProgressInfo) bool","Funname":"_UpdateInfo","Returntype":"bool","Args":"info system.JobProgressInfo"},{"Uniquefunname":"func buildProgress(p, begin, end float64) float64","Funname":"buildProgress","Returntype":"float64","Args":"p, begin, end float64"},{"Uniquefunname":"func (j *Job) changeType(jobType string)","Funname":"changeType","Returntype":"","Args":"jobType string"},{"Uniquefunname":"func (j *Job) getHook(name string) func()","Funname":"getHook","Returntype":"func()","Args":"name string"},{"Uniquefunname":"func (j *Job) initDownloadSize()","Funname":"initDownloadSize","Returntype":"","Args":""},{"Uniquefunname":"func (j *Job) String() string","Funname":"main.Job.String","Returntype":"string","Args":""},{"Uniquefunname":"func (j *Job) _InitProgressRange(begin, end float64)","Funname":"main.Job._InitProgressRange","Returntype":"","Args":"begin, end float64"},{"Uniquefunname":"func (j *Job) _UpdateInfo(info system.JobProgressInfo) bool","Funname":"main.Job._UpdateInfo","Returntype":"bool","Args":"info system.JobProgressInfo"},{"Uniquefunname":"func (j *Job) changeType(jobType string)","Funname":"main.Job.changeType","Returntype":"","Args":"jobType string"},{"Uniquefunname":"func (j *Job) getHook(name string) func()","Funname":"main.Job.getHook","Returntype":"func()","Args":"name string"},{"Uniquefunname":"func (j *Job) initDownloadSize()","Funname":"main.Job.initDownloadSize","Returntype":"","Args":""},{"Uniquefunname":"func (j *Job) setError(e Error)","Funname":"main.Job.setError","Returntype":"","Args":"e Error"},{"Uniquefunname":"func (j *Job) setHooks(hooks map[string]func())","Funname":"main.Job.setHooks","Returntype":"","Args":"hooks map[string]func()"},{"Uniquefunname":"func main.NewJob(service *dbusutil.Service, id, jobName string, packages []string, jobType, queueName string, environ map[string]string)*Job","Funname":"main.NewJob","Returntype":"*Job","Args":"service *dbusutil.Service, id, jobName string, packages []string, jobType, queueName string, environ map[string]string"},{"Uniquefunname":"func buildProgress(p, begin, end float64) float64","Funname":"main.buildProgress","Returntype":"float64","Args":"p, begin, end float64"},{"Uniquefunname":"func (j *Job) setError(e Error)","Funname":"setError","Returntype":"","Args":"e Error"},{"Uniquefunname":"func (j *Job) setHooks(hooks map[string]func())","Funname":"setHooks","Returntype":"","Args":"hooks map[string]func()"}],"Records":[{"Name":"interface","Fields":["main.Error"]},{"Name":"struct:main.Job","Fields":["main.Job.Cancelable bool","main.Job.CreateTime int64","main.Job.Description string","main.Job.DownloadSize int64","main.Job.Id string","main.Job.Name string","main.Job.Packages []string","main.Job.Progress float64","main.Job.PropsMu sync.RWMutex","main.Job.Speed int64","main.Job.Status system.Status","main.Job.Type string","main.Job.environ map[string]string","main.Job.hooks map[string]func()","main.Job.hooksMu sync.Mutex","main.Job.next *Job","main.Job.option map[string]string","main.Job.progressRangeBegin float64","main.Job.progressRangeEnd float64","main.Job.queueName string","main.Job.retry int","main.Job.service *dbusutil.Service","main.Job.speedMeter SpeedMeter"]}]}
{"Filepath":"src/lastore-daemon/job_manager.go","Functions":[{"Uniquefunname":"func (jm *JobManager) CleanJob(jobId string) error","Funname":"CleanJob","Returntype":"error","Args":"jobId string"},{"Uniquefunname":"func CreateJob(jobName, jobType string, packages []string, environ map[string]string)(*Job, error)","Funname":"CreateJob","Returntype":"(*Job, error)","Args":"jobName, jobType string, packages []string, environ map[string]string"},{"Uniquefunname":"func (jm *JobManager) Dispatch()","Funname":"Dispatch","Returntype":"","Args":""},{"Uniquefunname":"func (jm *JobManager) List() JobList","Funname":"List","Returntype":"JobList","Args":""},{"Uniquefunname":"func (jm *JobManager) MarkStart(jobId string) error","Funname":"MarkStart","Returntype":"error","Args":"jobId string"},{"Uniquefunname":"func NewJobManager(service *dbusutil.Service, api system.System, notifyFn func()) *JobManager","Funname":"NewJobManager","Returntype":"*JobManager","Args":"service *dbusutil.Service, api system.System, notifyFn func()"},{"Uniquefunname":"func (jm *JobManager) PauseJob(jobId string) error","Funname":"PauseJob","Returntype":"error","Args":"jobId string"},{"Uniquefunname":"func (jm *JobManager) addJob(j *Job) error","Funname":"addJob","Returntype":"error","Args":"j *Job"},{"Uniquefunname":"func (jm *JobManager) createJobList(name string, cap int)","Funname":"createJobList","Returntype":"","Args":"name string, cap int"},{"Uniquefunname":"func (jm *JobManager) dispatch()","Funname":"dispatch","Returntype":"","Args":""},{"Uniquefunname":"func (jm *JobManager) findJobById(jobId string) *Job","Funname":"findJobById","Returntype":"*Job","Args":"jobId string"},{"Uniquefunname":"func (jm *JobManager) findJobByType(jobType string, pkgs []string) *Job","Funname":"findJobByType","Returntype":"*Job","Args":"jobType string, pkgs []string"},{"Uniquefunname":"func (jm *JobManager) handleJobProgressInfo(info system.JobProgressInfo)","Funname":"handleJobProgressInfo","Returntype":"","Args":"info system.JobProgressInfo"},{"Uniquefunname":"func (jm *JobManager) CleanJob(jobId string) error","Funname":"main.JobManager.CleanJob","Returntype":"error","Args":"jobId string"},{"Uniquefunname":"func main.JobManager.CreateJob(jobName, jobType string, packages []string, environ map[string]string)(*Job, error)","Funname":"main.JobManager.CreateJob","Returntype":"(*Job, error)","Args":"jobName, jobType string, packages []string, environ map[string]string"},{"Uniquefunname":"func (jm *JobManager) Dispatch()","Funname":"main.JobManager.Dispatch","Returntype":"","Args":""},{"Uniquefunname":"func (jm *JobManager) List() JobList","Funname":"main.JobManager.List","Returntype":"JobList","Args":""},{"Uniquefunname":"func (jm *JobManager) MarkStart(jobId string) error","Funname":"main.JobManager.MarkStart","Returntype":"error","Args":"jobId string"},{"Uniquefunname":"func (jm *JobManager) PauseJob(jobId string) error","Funname":"main.JobManager.PauseJob","Returntype":"error","Args":"jobId string"},{"Uniquefunname":"func (jm *JobManager) addJob(j *Job) error","Funname":"main.JobManager.addJob","Returntype":"error","Args":"j *Job"},{"Uniquefunname":"func (jm *JobManager) createJobList(name string, cap int)","Funname":"main.JobManager.createJobList","Returntype":"","Args":"name string, cap int"},{"Uniquefunname":"func (jm *JobManager) dispatch()","Funname":"main.JobManager.dispatch","Returntype":"","Args":""},{"Uniquefunname":"func (jm *JobManager) findJobById(jobId string) *Job","Funname":"main.JobManager.findJobById","Returntype":"*Job","Args":"jobId string"},{"Uniquefunname":"func (jm *JobManager) findJobByType(jobType string, pkgs []string) *Job","Funname":"main.JobManager.findJobByType","Returntype":"*Job","Args":"jobType string, pkgs []string"},{"Uniquefunname":"func (jm *JobManager) handleJobProgressInfo(info system.JobProgressInfo)","Funname":"main.JobManager.handleJobProgressInfo","Returntype":"","Args":"info system.JobProgressInfo"},{"Uniquefunname":"func (jm *JobManager) markDirty()","Funname":"main.JobManager.markDirty","Returntype":"","Args":""},{"Uniquefunname":"func (jm *JobManager) markStart(job *Job) error","Funname":"main.JobManager.markStart","Returntype":"error","Args":"job *Job"},{"Uniquefunname":"func (jm *JobManager) pauseJob(job *Job) error","Funname":"main.JobManager.pauseJob","Returntype":"error","Args":"job *Job"},{"Uniquefunname":"func (jm *JobManager) removeJob(jobId string, queueName string) error","Funname":"main.JobManager.removeJob","Returntype":"error","Args":"jobId string, queueName string"},{"Uniquefunname":"func (jm *JobManager) sendNotify()","Funname":"main.JobManager.sendNotify","Returntype":"","Args":""},{"Uniquefunname":"func (jm *JobManager) startJobsInQueue(queue *JobQueue)","Funname":"main.JobManager.startJobsInQueue","Returntype":"","Args":"queue *JobQueue"},{"Uniquefunname":"func NewJobManager(service *dbusutil.Service, api system.System, notifyFn func()) *JobManager","Funname":"main.NewJobManager","Returntype":"*JobManager","Args":"service *dbusutil.Service, api system.System, notifyFn func()"},{"Uniquefunname":"func (jm *JobManager) markDirty()","Funname":"markDirty","Returntype":"","Args":""},{"Uniquefunname":"func (jm *JobManager) markStart(job *Job) error","Funname":"markStart","Returntype":"error","Args":"job *Job"},{"Uniquefunname":"func (jm *JobManager) pauseJob(job *Job) error","Funname":"pauseJob","Returntype":"error","Args":"job *Job"},{"Uniquefunname":"func (jm *JobManager) removeJob(jobId string, queueName string) error","Funname":"removeJob","Returntype":"error","Args":"jobId string, queueName string"},{"Uniquefunname":"func (jm *JobManager) sendNotify()","Funname":"sendNotify","Returntype":"","Args":""},{"Uniquefunname":"func (jm *JobManager) startJobsInQueue(queue *JobQueue)","Funname":"startJobsInQueue","Returntype":"","Args":"queue *JobQueue"}],"Records":[{"Name":"const:main","Fields":["main.DownloadQueue","main.DownloadQueueCap","main.LockQueue","main.SystemChangeQueue","main.SystemChangeQueueCap"]},{"Name":"struct:main.JobManager","Fields":["main.JobManager.changed bool","main.JobManager.mux sync.RWMutex","main.JobManager.notify func()","main.JobManager.queues map[string]*JobQueue","main.JobManager.service *dbusutil.Service","main.JobManager.system system.System"]},{"Name":"var:main","Fields":["main.genJobId"]}]}
{"Filepath":"src/lastore-daemon/job_queue.go","Functions":[{"Uniquefunname":"func (l *JobQueue) Add(j *Job) error","Funname":"Add","Returntype":"error","Args":"j *Job"},{"Uniquefunname":"func (l *JobQueue) AllJobs() JobList","Funname":"AllJobs","Returntype":"JobList","Args":""},{"Uniquefunname":"func (l *JobQueue) DoneJobs() JobList","Funname":"DoneJobs","Returntype":"JobList","Args":""},{"Uniquefunname":"func (l *JobQueue) Find(id string) *Job","Funname":"Find","Returntype":"*Job","Args":"id string"},{"Uniquefunname":"func (l JobList) Len() int","Funname":"Len","Returntype":"int","Args":""},{"Uniquefunname":"func (l JobList) Less(i, j int) bool","Funname":"Less","Returntype":"bool","Args":"i, j int"},{"Uniquefunname":"func NewJobQueue(name string, cap int) *JobQueue","Funname":"NewJobQueue","Returntype":"*JobQueue","Args":"name string, cap int"},{"Uniquefunname":"func (l *JobQueue) PendingJobs() JobList","Funname":"PendingJobs","Returntype":"JobList","Args":""},{"Uniquefunname":"func (l *JobQueue) Raise(jobId string) error","Funname":"Raise","Returntype":"error","Args":"jobId string"},{"Uniquefunname":"func (l *JobQueue) Remove(id string) (*Job, error)","Funname":"Remove","Returntype":"(*Job, error)","Args":"id string"},{"Uniquefunname":"func (l *JobQueue) RunningJobs() JobList","Funname":"RunningJobs","Returntype":"JobList","Args":""},{"Uniquefunname":"func (l JobList) Swap(i, j int)","Funname":"Swap","Returntype":"","Args":"i, j int"},{"Uniquefunname":"func (l JobList) Len() int","Funname":"main.JobList.Len","Returntype":"int","Args":""},{"Uniquefunname":"func (l JobList) Less(i, j int) bool","Funname":"main.JobList.Less","Returntype":"bool","Args":"i, j int"},{"Uniquefunname":"func (l JobList) Swap(i, j int)","Funname":"main.JobList.Swap","Returntype":"","Args":"i, j int"},{"Uniquefunname":"func (l *JobQueue) Add(j *Job) error","Funname":"main.JobQueue.Add","Returntype":"error","Args":"j *Job"},{"Uniquefunname":"func (l *JobQueue) AllJobs() JobList","Funname":"main.JobQueue.AllJobs","Returntype":"JobList","Args":""},{"Uniquefunname":"func (l *JobQueue) DoneJobs() JobList","Funname":"main.JobQueue.DoneJobs","Returntype":"JobList","Args":""},{"Uniquefunname":"func (l *JobQueue) Find(id string) *Job","Funname":"main.JobQueue.Find","Returntype":"*Job","Args":"id string"},{"Uniquefunname":"func (l *JobQueue) PendingJobs() JobList","Funname":"main.JobQueue.PendingJobs","Returntype":"JobList","Args":""},{"Uniquefunname":"func (l *JobQueue) Raise(jobId string) error","Funname":"main.JobQueue.Raise","Returntype":"error","Args":"jobId string"},{"Uniquefunname":"func (l *JobQueue) Remove(id string) (*Job, error)","Funname":"main.JobQueue.Remove","Returntype":"(*Job, error)","Args":"id string"},{"Uniquefunname":"func (l *JobQueue) RunningJobs() JobList","Funname":"main.JobQueue.RunningJobs","Returntype":"JobList","Args":""},{"Uniquefunname":"func NewJobQueue(name string, cap int) *JobQueue","Funname":"main.NewJobQueue","Returntype":"*JobQueue","Args":"name string, cap int"}],"Records":[{"Name":"struct:main.JobQueue","Fields":["main.JobQueue.Cap int","main.JobQueue.Name string","main.JobQueue.jobs JobList","main.JobQueue.mux sync.RWMutex"]}]}
{"Filepath":"src/lastore-daemon/jobqueue_test.go","Functions":[{"Uniquefunname":"func TestJobQueue(t *testing.T)","Funname":"TestJobQueue","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestJobQueue(t *testing.T)","Funname":"main.TestJobQueue","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"src/lastore-daemon/locale_pkgs.go","Functions":[{"Uniquefunname":"func QueryEnhancedLocalePackages(checker func(string) bool, lang string, pkgs ...string)[]string","Funname":"QueryEnhancedLocalePackages","Returntype":"[]string","Args":"checker func(string) bool, lang string, pkgs ...string"},{"Uniquefunname":"func main.QueryEnhancedLocalePackages(checker func(string) bool, lang string, pkgs ...string)[]string","Funname":"main.QueryEnhancedLocalePackages","Returntype":"[]string","Args":"checker func(string) bool, lang string, pkgs ...string"}],"Records":null}
{"Filepath":"src/lastore-daemon/main.go","Functions":[{"Uniquefunname":"func RegisterMonitor(handler func(), paths ...string)","Funname":"RegisterMonitor","Returntype":"","Args":"handler func(), paths ...string"},{"Uniquefunname":"func Tr(text string) string","Funname":"Tr","Returntype":"string","Args":"text string"},{"Uniquefunname":"func main()","Funname":"main","Returntype":"","Args":""},{"Uniquefunname":"func RegisterMonitor(handler func(), paths ...string)","Funname":"main.RegisterMonitor","Returntype":"","Args":"handler func(), paths ...string"},{"Uniquefunname":"func Tr(text string) string","Funname":"main.Tr","Returntype":"string","Args":"text string"},{"Uniquefunname":"func main()","Funname":"main.main","Returntype":"","Args":""}],"Records":[{"Name":"const:main","Fields":["main.dbusServiceName"]}]}
{"Filepath":"src/lastore-daemon/manager.go","Functions":[{"Uniquefunname":"func (m *Manager) CleanArchives() (dbus.ObjectPath, *dbus.Error)","Funname":"CleanArchives","Returntype":"(dbus.ObjectPath, *dbus.Error)","Args":""},{"Uniquefunname":"func (m *Manager) CleanJob(jobId string) *dbus.Error","Funname":"CleanJob","Returntype":"*dbus.Error","Args":"jobId string"},{"Uniquefunname":"func (m *Manager) DistUpgrade(sender dbus.Sender) (dbus.ObjectPath, *dbus.Error)","Funname":"DistUpgrade","Returntype":"(dbus.ObjectPath, *dbus.Error)","Args":"sender dbus.Sender"},{"Uniquefunname":"func (m *Manager) FixError(sender dbus.Sender, errType string) (dbus.ObjectPath, *dbus.Error)","Funname":"FixError","Returntype":"(dbus.ObjectPath, *dbus.Error)","Args":"sender dbus.Sender, errType string"},{"Uniquefunname":"func InstallPackage(sender dbus.Sender, jobName string, packages string)(dbus.ObjectPath, *dbus.Error)","Funname":"InstallPackage","Returntype":"(dbus.ObjectPath, *dbus.Error)","Args":"sender dbus.Sender, jobName string, packages string"},{"Uniquefunname":"func NewManager(service *dbusutil.Service, b system.System, c *Config) *Manager","Funname":"NewManager","Returntype":"*Manager","Args":"service *dbusutil.Service, b system.System, c *Config"},{"Uniquefunname":"func NormalizePackageNames(s string) ([]string, error)","Funname":"NormalizePackageNames","Returntype":"([]string, error)","Args":"s string"},{"Uniquefunname":"func (m *Manager) PackageDesktopPath(pkgId string) (string, *dbus.Error)","Funname":"PackageDesktopPath","Returntype":"(string, *dbus.Error)","Args":"pkgId string"},{"Uniquefunname":"func (m *Manager) PackageExists(pkgId string) (bool, *dbus.Error)","Funname":"PackageExists","Returntype":"(bool, *dbus.Error)","Args":"pkgId string"},{"Uniquefunname":"func (m *Manager) PackageInstallable(pkgId string) (bool, *dbus.Error)","Funname":"PackageInstallable","Returntype":"(bool, *dbus.Error)","Args":"pkgId string"},{"Uniquefunname":"func (m *Manager) PackagesDownloadSize(packages []string) (int64, *dbus.Error)","Funname":"PackagesDownloadSize","Returntype":"(int64, *dbus.Error)","Args":"packages []string"},{"Uniquefunname":"func (m *Manager) PauseJob(jobId string) *dbus.Error","Funname":"PauseJob","Returntype":"*dbus.Error","Args":"jobId string"},{"Uniquefunname":"func (m *Manager) PrepareDistUpgrade() (dbus.ObjectPath, *dbus.Error)","Funname":"PrepareDistUpgrade","Returntype":"(dbus.ObjectPath, *dbus.Error)","Args":""},{"Uniquefunname":"func RemovePackage(sender dbus.Sender, jobName string, packages string)(dbus.ObjectPath, *dbus.Error)","Funname":"RemovePackage","Returntype":"(dbus.ObjectPath, *dbus.Error)","Args":"sender dbus.Sender, jobName string, packages string"},{"Uniquefunname":"func (m *Manager) SetAutoClean(enable bool) *dbus.Error","Funname":"SetAutoClean","Returntype":"*dbus.Error","Args":"enable bool"},{"Uniquefunname":"func (m *Manager) SetRegion(region string) *dbus.Error","Funname":"SetRegion","Returntype":"*dbus.Error","Args":"region string"},{"Uniquefunname":"func (m *Manager) StartJob(jobId string) *dbus.Error","Funname":"StartJob","Returntype":"*dbus.Error","Args":"jobId string"},{"Uniquefunname":"func UpdatePackage(sender dbus.Sender, jobName string, packages string)(dbus.ObjectPath, *dbus.Error)","Funname":"UpdatePackage","Returntype":"(dbus.ObjectPath, *dbus.Error)","Args":"sender dbus.Sender, jobName string, packages string"},{"Uniquefunname":"func (m *Manager) UpdateSource() (dbus.ObjectPath, *dbus.Error)","Funname":"UpdateSource","Returntype":"(dbus.ObjectPath, *dbus.Error)","Args":""},{"Uniquefunname":"func (m *Manager) cancelAllJob() error","Funname":"cancelAllJob","Returntype":"error","Args":""},{"Uniquefunname":"func (m *Manager) cleanArchives(needNotify bool) (*Job, error)","Funname":"cleanArchives","Returntype":"(*Job, error)","Args":"needNotify bool"},{"Uniquefunname":"func (m *Manager) distUpgrade(sender dbus.Sender) (*Job, error)","Funname":"distUpgrade","Returntype":"(*Job, error)","Args":"sender dbus.Sender"},{"Uniquefunname":"func (m *Manager) ensureUpdateSourceOnce()","Funname":"ensureUpdateSourceOnce","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) fixError(sender dbus.Sender, errType string) (*Job, error)","Funname":"fixError","Returntype":"(*Job, error)","Args":"sender dbus.Sender, errType string"},{"Uniquefunname":"func (m *Manager) getExecutablePath(sender dbus.Sender) (string, error)","Funname":"getExecutablePath","Returntype":"(string, error)","Args":"sender dbus.Sender"},{"Uniquefunname":"func getLang(envVars procfs.EnvVars) string","Funname":"getLang","Returntype":"string","Args":"envVars procfs.EnvVars"},{"Uniquefunname":"func getUsedLang(environ map[string]string) string","Funname":"getUsedLang","Returntype":"string","Args":"environ map[string]string"},{"Uniquefunname":"func (m *Manager) handleUpdateInfosChanged()","Funname":"handleUpdateInfosChanged","Returntype":"","Args":""},{"Uniquefunname":"func installPackage(sender dbus.Sender, jobName string, packages string)(*Job, error)","Funname":"installPackage","Returntype":"(*Job, error)","Args":"sender dbus.Sender, jobName string, packages string"},{"Uniquefunname":"func installPkg(jobName, packages string, environ map[string]string)(*Job, error)","Funname":"installPkg","Returntype":"(*Job, error)","Args":"jobName, packages string, environ map[string]string"},{"Uniquefunname":"func isAptRunning() (bool, error)","Funname":"isAptRunning","Returntype":"(bool, error)","Args":""},{"Uniquefunname":"func listPackageDesktopFiles(pkg string) []string","Funname":"listPackageDesktopFiles","Returntype":"[]string","Args":"pkg string"},{"Uniquefunname":"func (m *Manager) loopCheck()","Funname":"loopCheck","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) CleanArchives() (dbus.ObjectPath, *dbus.Error)","Funname":"main.Manager.CleanArchives","Returntype":"(dbus.ObjectPath, *dbus.Error)","Args":""},{"Uniquefunname":"func (m *Manager) CleanJob(jobId string) *dbus.Error","Funname":"main.Manager.CleanJob","Returntype":"*dbus.Error","Args":"jobId string"},{"Uniquefunname":"func (m *Manager) DistUpgrade(sender dbus.Sender) (dbus.ObjectPath, *dbus.Error)","Funname":"main.Manager.DistUpgrade","Returntype":"(dbus.ObjectPath, *dbus.Error)","Args":"sender dbus.Sender"},{"Uniquefunname":"func (m *Manager) FixError(sender dbus.Sender, errType string) (dbus.ObjectPath, *dbus.Error)","Funname":"main.Manager.FixError","Returntype":"(dbus.ObjectPath, *dbus.Error)","Args":"sender dbus.Sender, errType string"},{"Uniquefunname":"func main.Manager.InstallPackage(sender dbus.Sender, jobName string, packages string)(dbus.ObjectPath, *dbus.Error)","Funname":"main.Manager.InstallPackage","Returntype":"(dbus.ObjectPath, *dbus.Error)","Args":"sender dbus.Sender, jobName string, packages string"},{"Uniquefunname":"func (m *Manager) PackageDesktopPath(pkgId string) (string, *dbus.Error)","Funname":"main.Manager.PackageDesktopPath","Returntype":"(string, *dbus.Error)","Args":"pkgId string"},{"Uniquefunname":"func (m *Manager) PackageExists(pkgId string) (bool, *dbus.Error)","Funname":"main.Manager.PackageExists","Returntype":"(bool, *dbus.Error)","Args":"pkgId string"},{"Uniquefunname":"func (m *Manager) PackageInstallable(pkgId string) (bool, *dbus.Error)","Funname":"main.Manager.PackageInstallable","Returntype":"(bool, *dbus.Error)","Args":"pkgId string"},{"Uniquefunname":"func (m *Manager) PackagesDownloadSize(packages []string) (int64, *dbus.Error)","Funname":"main.Manager.PackagesDownloadSize","Returntype":"(int64, *dbus.Error)","Args":"packages []string"},{"Uniquefunname":"func (m *Manager) PauseJob(jobId string) *dbus.Error","Funname":"main.Manager.PauseJob","Returntype":"*dbus.Error","Args":"jobId string"},{"Uniquefunname":"func (m *Manager) PrepareDistUpgrade() (dbus.ObjectPath, *dbus.Error)","Funname":"main.Manager.PrepareDistUpgrade","Returntype":"(dbus.ObjectPath, *dbus.Error)","Args":""},{"Uniquefunname":"func main.Manager.RemovePackage(sender dbus.Sender, jobName string, packages string)(dbus.ObjectPath, *dbus.Error)","Funname":"main.Manager.RemovePackage","Returntype":"(dbus.ObjectPath, *dbus.Error)","Args":"sender dbus.Sender, jobName string, packages string"},{"Uniquefunname":"func (m *Manager) SetAutoClean(enable bool) *dbus.Error","Funname":"main.Manager.SetAutoClean","Returntype":"*dbus.Error","Args":"enable bool"},{"Uniquefunname":"func (m *Manager) SetRegion(region string) *dbus.Error","Funname":"main.Manager.SetRegion","Returntype":"*dbus.Error","Args":"region string"},{"Uniquefunname":"func (m *Manager) StartJob(jobId string) *dbus.Error","Funname":"main.Manager.StartJob","Returntype":"*dbus.Error","Args":"jobId string"},{"Uniquefunname":"func main.Manager.UpdatePackage(sender dbus.Sender, jobName string, packages string)(dbus.ObjectPath, *dbus.Error)","Funname":"main.Manager.UpdatePackage","Returntype":"(dbus.ObjectPath, *dbus.Error)","Args":"sender dbus.Sender, jobName string, packages string"},{"Uniquefunname":"func (m *Manager) UpdateSource() (dbus.ObjectPath, *dbus.Error)","Funname":"main.Manager.UpdateSource","Returntype":"(dbus.ObjectPath, *dbus.Error)","Args":""},{"Uniquefunname":"func (m *Manager) cancelAllJob() error","Funname":"main.Manager.cancelAllJob","Returntype":"error","Args":""},{"Uniquefunname":"func (m *Manager) cleanArchives(needNotify bool) (*Job, error)","Funname":"main.Manager.cleanArchives","Returntype":"(*Job, error)","Args":"needNotify bool"},{"Uniquefunname":"func (m *Manager) distUpgrade(sender dbus.Sender) (*Job, error)","Funname":"main.Manager.distUpgrade","Returntype":"(*Job, error)","Args":"sender dbus.Sender"},{"Uniquefunname":"func (m *Manager) ensureUpdateSourceOnce()","Funname":"main.Manager.ensureUpdateSourceOnce","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) fixError(sender dbus.Sender, errType string) (*Job, error)","Funname":"main.Manager.fixError","Returntype":"(*Job, error)","Args":"sender dbus.Sender, errType string"},{"Uniquefunname":"func (m *Manager) getExecutablePath(sender dbus.Sender) (string, error)","Funname":"main.Manager.getExecutablePath","Returntype":"(string, error)","Args":"sender dbus.Sender"},{"Uniquefunname":"func (m *Manager) handleUpdateInfosChanged()","Funname":"main.Manager.handleUpdateInfosChanged","Returntype":"","Args":""},{"Uniquefunname":"func main.Manager.installPackage(sender dbus.Sender, jobName string, packages string)(*Job, error)","Funname":"main.Manager.installPackage","Returntype":"(*Job, error)","Args":"sender dbus.Sender, jobName string, packages string"},{"Uniquefunname":"func main.Manager.installPkg(jobName, packages string, environ map[string]string)(*Job, error)","Funname":"main.Manager.installPkg","Returntype":"(*Job, error)","Args":"jobName, packages string, environ map[string]string"},{"Uniquefunname":"func (m *Manager) loopCheck()","Funname":"main.Manager.loopCheck","Returntype":"","Args":""},{"Uniquefunname":"func (m *Manager) prepareDistUpgrade() (*Job, error)","Funname":"main.Manager.prepareDistUpgrade","Returntype":"(*Job, error)","Args":""},{"Uniquefunname":"func main.Manager.removePackage(sender dbus.Sender, jobName string, packages string)(*Job, error)","Funname":"main.Manager.removePackage","Returntype":"(*Job, error)","Args":"sender dbus.Sender, jobName string, packages string"},{"Uniquefunname":"func main.Manager.updatePackage(sender dbus.Sender, jobName string, packages string)(*Job, error)","Funname":"main.Manager.updatePackage","Returntype":"(*Job, error)","Args":"sender dbus.Sender, jobName string, packages string"},{"Uniquefunname":"func (m *Manager) updateSource() (*Job, error)","Funname":"main.Manager.updateSource","Returntype":"(*Job, error)","Args":""},{"Uniquefunname":"func NewManager(service *dbusutil.Service, b system.System, c *Config) *Manager","Funname":"main.NewManager","Returntype":"*Manager","Args":"service *dbusutil.Service, b system.System, c *Config"},{"Uniquefunname":"func NormalizePackageNames(s string) ([]string, error)","Funname":"main.NormalizePackageNames","Returntype":"([]string, error)","Args":"s string"},{"Uniquefunname":"func getLang(envVars procfs.EnvVars) string","Funname":"main.getLang","Returntype":"string","Args":"envVars procfs.EnvVars"},{"Uniquefunname":"func getUsedLang(environ map[string]string) string","Funname":"main.getUsedLang","Returntype":"string","Args":"environ map[string]string"},{"Uniquefunname":"func isAptRunning() (bool, error)","Funname":"main.isAptRunning","Returntype":"(bool, error)","Args":""},{"Uniquefunname":"func listPackageDesktopFiles(pkg string) []string","Funname":"main.listPackageDesktopFiles","Returntype":"[]string","Args":"pkg string"},{"Uniquefunname":"func main.makeEnvironWithSender(service *dbusutil.Service, sender dbus.Sender)(map[string]string, error)","Funname":"main.makeEnvironWithSender","Returntype":"(map[string]string, error)","Args":"service *dbusutil.Service, sender dbus.Sender"},{"Uniquefunname":"func makeEnvironWithSender(service *dbusutil.Service, sender dbus.Sender)(map[string]string, error)","Funname":"makeEnvironWithSender","Returntype":"(map[string]string, error)","Args":"service *dbusutil.Service, sender dbus.Sender"},{"Uniquefunname":"func (m *Manager) prepareDistUpgrade() (*Job, error)","Funname":"prepareDistUpgrade","Returntype":"(*Job, error)","Args":""},{"Uniquefunname":"func removePackage(sender dbus.Sender, jobName string, packages string)(*Job, error)","Funname":"removePackage","Returntype":"(*Job, error)","Args":"sender dbus.Sender, jobName string, packages string"},{"Uniquefunname":"func updatePackage(sender dbus.Sender, jobName string, packages string)(*Job, error)","Funname":"updatePackage","Returntype":"(*Job, error)","Args":"sender dbus.Sender, jobName string, packages string"},{"Uniquefunname":"func (m *Manager) updateSource() (*Job, error)","Funname":"updateSource","Returntype":"(*Job, error)","Args":""}],"Records":[{"Name":"struct:main.Manager","Fields":["main.Manager.AutoClean bool","main.Manager.JobList []dbus.ObjectPath","main.Manager.PropsMu sync.RWMutex","main.Manager.SystemArchitectures []system.Architecture","main.Manager.SystemOnChanging bool","main.Manager.UpgradableApps []string","main.Manager.apps *apps.Apps","main.Manager.autoCleanCfgChange chan struct{}","main.Manager.b system.System","main.Manager.config *Config","main.Manager.do sync.Mutex","main.Manager.inhibitFd dbus.UnixFD","main.Manager.jobList []*Job","main.Manager.jobManager *JobManager","main.Manager.methods *struct { FixError func() `in:\"errType\" out:\"job\"`; CleanArchives func() `out:\"job\"`; CleanJob func() `in:\"jobId\"`; StartJob func() `in:\"jobId\"`; PauseJob func() `in:\"jobId\"`; InstallPackage func() `in:\"jobName,packages\" out:\"job\"`; RemovePackage func() `in:\"jobName,packages\" out:\"job\"`; UpdatePackage func() `in:\"jobName,packages\" out:\"job\"`; UpdateSource func() `out:\"job\"`; DistUpgrade func() `out:\"job\"`; PrepareDistUpgrade func() `out:\"job\"`; PackageDesktopPath func() `in:\"pkgId\" out:\"desktopPath\"`;","main.Manager.service *dbusutil.Service","main.Manager.updateSourceOnce bool","main.Manager.updater *Updater"]},{"Name":"var:main","Fields":["main.allowInstallPackageExecPaths","main.allowRemovePackageExecPaths","main.errAptRunning","main.pkgNameRegexp"]}]}
{"Filepath":"src/lastore-daemon/setup_test.go","Functions":[{"Uniquefunname":"func init()","Funname":"init","Returntype":"","Args":""},{"Uniquefunname":"func init()","Funname":"main.init","Returntype":"","Args":""}],"Records":null}
{"Filepath":"src/lastore-daemon/speed_meter.go","Functions":[{"Uniquefunname":"func (s *SpeedMeter) SetDownloadSize(size int64)","Funname":"SetDownloadSize","Returntype":"","Args":"size int64"},{"Uniquefunname":"func (s *SpeedMeter) Speed(newProgress float64) int64","Funname":"Speed","Returntype":"int64","Args":"newProgress float64"},{"Uniquefunname":"func (s *SpeedMeter) SetDownloadSize(size int64)","Funname":"main.SpeedMeter.SetDownloadSize","Returntype":"","Args":"size int64"},{"Uniquefunname":"func (s *SpeedMeter) Speed(newProgress float64) int64","Funname":"main.SpeedMeter.Speed","Returntype":"int64","Args":"newProgress float64"}],"Records":[{"Name":"struct:main.SpeedMeter","Fields":["main.SpeedMeter.DownloadSize int64","main.SpeedMeter.count int","main.SpeedMeter.inited int","main.SpeedMeter.progress float64","main.SpeedMeter.speed int64","main.SpeedMeter.startTime time.Time","main.SpeedMeter.updateTime time.Time"]}]}
{"Filepath":"src/lastore-daemon/start_job.go","Functions":[{"Uniquefunname":"func StartSystemJob(sys system.System, j *Job) error","Funname":"StartSystemJob","Returntype":"error","Args":"sys system.System, j *Job"},{"Uniquefunname":"func TransitionJobState(j *Job, to system.Status) error","Funname":"TransitionJobState","Returntype":"error","Args":"j *Job, to system.Status"},{"Uniquefunname":"func ValidTransitionJobState(from system.Status, to system.Status) bool","Funname":"ValidTransitionJobState","Returntype":"bool","Args":"from system.Status, to system.Status"},{"Uniquefunname":"func StartSystemJob(sys system.System, j *Job) error","Funname":"main.StartSystemJob","Returntype":"error","Args":"sys system.System, j *Job"},{"Uniquefunname":"func TransitionJobState(j *Job, to system.Status) error","Funname":"main.TransitionJobState","Returntype":"error","Args":"j *Job, to system.Status"},{"Uniquefunname":"func ValidTransitionJobState(from system.Status, to system.Status) bool","Funname":"main.ValidTransitionJobState","Returntype":"bool","Args":"from system.Status, to system.Status"}],"Records":null}
{"Filepath":"src/lastore-daemon/stub.go","Functions":[{"Uniquefunname":"func DestroyJobDBus(j *Job)","Funname":"DestroyJobDBus","Returntype":"","Args":"j *Job"},{"Uniquefunname":"func (*Job) GetInterfaceName() string","Funname":"GetInterfaceName","Returntype":"string","Args":""},{"Uniquefunname":"func (*Manager) GetInterfaceName() string","Funname":"GetInterfaceName","Returntype":"string","Args":""},{"Uniquefunname":"func (*Updater) GetInterfaceName() string","Funname":"GetInterfaceName","Returntype":"string","Args":""},{"Uniquefunname":"func (j *Job) getPath() dbus.ObjectPath","Funname":"getPath","Returntype":"dbus.ObjectPath","Args":""},{"Uniquefunname":"func DestroyJobDBus(j *Job)","Funname":"main.DestroyJobDBus","Returntype":"","Args":"j *Job"},{"Uniquefunname":"func (*Job) GetInterfaceName() string","Funname":"main.Job.GetInterfaceName","Returntype":"string","Args":""},{"Uniquefunname":"func (j *Job) getPath() dbus.ObjectPath","Funname":"main.Job.getPath","Returntype":"dbus.ObjectPath","Args":""},{"Uniquefunname":"func (j *Job) notifyAll()","Funname":"main.Job.notifyAll","Returntype":"","Args":""},{"Uniquefunname":"func (*Manager) GetInterfaceName() string","Funname":"main.Manager.GetInterfaceName","Returntype":"string","Args":""},{"Uniquefunname":"func (m *Manager) updatableApps(info []system.UpgradeInfo)","Funname":"main.Manager.updatableApps","Returntype":"","Args":"info []system.UpgradeInfo"},{"Uniquefunname":"func (m *Manager) updateJobList()","Funname":"main.Manager.updateJobList","Returntype":"","Args":""},{"Uniquefunname":"func (*Updater) GetInterfaceName() string","Funname":"main.Updater.GetInterfaceName","Returntype":"string","Args":""},{"Uniquefunname":"func (u *Updater) setUpdatableApps(ids []string)","Funname":"main.Updater.setUpdatableApps","Returntype":"","Args":"ids []string"},{"Uniquefunname":"func (u *Updater) setUpdatablePackages(ids []string)","Funname":"main.Updater.setUpdatablePackages","Returntype":"","Args":"ids []string"},{"Uniquefunname":"func (j *Job) notifyAll()","Funname":"notifyAll","Returntype":"","Args":""},{"Uniquefunname":"func (u *Updater) setUpdatableApps(ids []string)","Funname":"setUpdatableApps","Returntype":"","Args":"ids []string"},{"Uniquefunname":"func (u *Updater) setUpdatablePackages(ids []string)","Funname":"setUpdatablePackages","Returntype":"","Args":"ids []string"},{"Uniquefunname":"func (m *Manager) updatableApps(info []system.UpgradeInfo)","Funname":"updatableApps","Returntype":"","Args":"info []system.UpgradeInfo"},{"Uniquefunname":"func (m *Manager) updateJobList()","Funname":"updateJobList","Returntype":"","Args":""}],"Records":[{"Name":"var:main","Fields":["main.NotUseDBus"]}]}
{"Filepath":"src/lastore-daemon/update_infos.go","Functions":[{"Uniquefunname":"func (u *Updater) ApplicationUpdateInfos(lang string) ([]ApplicationUpdateInfo, *dbus.Error)","Funname":"ApplicationUpdateInfos","Returntype":"([]ApplicationUpdateInfo, *dbus.Error)","Args":"lang string"},{"Uniquefunname":"func applicationInfos() map[string]ApplicationInfo","Funname":"applicationInfos","Returntype":"map[string]ApplicationInfo","Args":""},{"Uniquefunname":"func (u *Updater) loadUpdateInfos(info []system.UpgradeInfo)","Funname":"loadUpdateInfos","Returntype":"","Args":"info []system.UpgradeInfo"},{"Uniquefunname":"func (u *Updater) ApplicationUpdateInfos(lang string) ([]ApplicationUpdateInfo, *dbus.Error)","Funname":"main.Updater.ApplicationUpdateInfos","Returntype":"([]ApplicationUpdateInfo, *dbus.Error)","Args":"lang string"},{"Uniquefunname":"func (u *Updater) loadUpdateInfos(info []system.UpgradeInfo)","Funname":"main.Updater.loadUpdateInfos","Returntype":"","Args":"info []system.UpgradeInfo"},{"Uniquefunname":"func applicationInfos() map[string]ApplicationInfo","Funname":"main.applicationInfos","Returntype":"map[string]ApplicationInfo","Args":""},{"Uniquefunname":"func packageIconInfos() map[string]string","Funname":"main.packageIconInfos","Returntype":"map[string]string","Args":""},{"Uniquefunname":"func packageIconInfos() map[string]string","Funname":"packageIconInfos","Returntype":"map[string]string","Args":""}],"Records":[{"Name":"struct:main.ApplicationInfo","Fields":["main.ApplicationInfo.Category string","main.ApplicationInfo.Icon string","main.ApplicationInfo.Id string","main.ApplicationInfo.LocaleName map[string]string","main.ApplicationInfo.Name string"]}]}
{"Filepath":"src/lastore-daemon/updater.go","Functions":[{"Uniquefunname":"func (u *Updater) ListMirrorSources(lang string) ([]LocaleMirrorSource, *dbus.Error)","Funname":"ListMirrorSources","Returntype":"([]LocaleMirrorSource, *dbus.Error)","Args":"lang string"},{"Uniquefunname":"func NewUpdater(service *dbusutil.Service, m *Manager, config *Config) *Updater","Funname":"NewUpdater","Returntype":"*Updater","Args":"service *dbusutil.Service, m *Manager, config *Config"},{"Uniquefunname":"func (u *Updater) RestoreSystemSource() *dbus.Error","Funname":"RestoreSystemSource","Returntype":"*dbus.Error","Args":""},{"Uniquefunname":"func SetAPTSmartMirror(url string) error","Funname":"SetAPTSmartMirror","Returntype":"error","Args":"url string"},{"Uniquefunname":"func (u *Updater) SetAutoCheckUpdates(enable bool) *dbus.Error","Funname":"SetAutoCheckUpdates","Returntype":"*dbus.Error","Args":"enable bool"},{"Uniquefunname":"func (u *Updater) SetAutoDownloadUpdates(enable bool) *dbus.Error","Funname":"SetAutoDownloadUpdates","Returntype":"*dbus.Error","Args":"enable bool"},{"Uniquefunname":"func (u *Updater) SetMirrorSource(id string) *dbus.Error","Funname":"SetMirrorSource","Returntype":"*dbus.Error","Args":"id string"},{"Uniquefunname":"func UpdatableNames(infos []system.UpgradeInfo) []string","Funname":"UpdatableNames","Returntype":"[]string","Args":"infos []system.UpgradeInfo"},{"Uniquefunname":"func (u *Updater) listMirrorSources(lang string) []LocaleMirrorSource","Funname":"listMirrorSources","Returntype":"[]LocaleMirrorSource","Args":"lang string"},{"Uniquefunname":"func (u *Updater) loopCheck()","Funname":"loopCheck","Returntype":"","Args":""},{"Uniquefunname":"func NewUpdater(service *dbusutil.Service, m *Manager, config *Config) *Updater","Funname":"main.NewUpdater","Returntype":"*Updater","Args":"service *dbusutil.Service, m *Manager, config *Config"},{"Uniquefunname":"func SetAPTSmartMirror(url string) error","Funname":"main.SetAPTSmartMirror","Returntype":"error","Args":"url string"},{"Uniquefunname":"func UpdatableNames(infos []system.UpgradeInfo) []string","Funname":"main.UpdatableNames","Returntype":"[]string","Args":"infos []system.UpgradeInfo"},{"Uniquefunname":"func (u *Updater) ListMirrorSources(lang string) ([]LocaleMirrorSource, *dbus.Error)","Funname":"main.Updater.ListMirrorSources","Returntype":"([]LocaleMirrorSource, *dbus.Error)","Args":"lang string"},{"Uniquefunname":"func (u *Updater) RestoreSystemSource() *dbus.Error","Funname":"main.Updater.RestoreSystemSource","Returntype":"*dbus.Error","Args":""},{"Uniquefunname":"func (u *Updater) SetAutoCheckUpdates(enable bool) *dbus.Error","Funname":"main.Updater.SetAutoCheckUpdates","Returntype":"*dbus.Error","Args":"enable bool"},{"Uniquefunname":"func (u *Updater) SetAutoDownloadUpdates(enable bool) *dbus.Error","Funname":"main.Updater.SetAutoDownloadUpdates","Returntype":"*dbus.Error","Args":"enable bool"},{"Uniquefunname":"func (u *Updater) SetMirrorSource(id string) *dbus.Error","Funname":"main.Updater.SetMirrorSource","Returntype":"*dbus.Error","Args":"id string"},{"Uniquefunname":"func (u *Updater) listMirrorSources(lang string) []LocaleMirrorSource","Funname":"main.Updater.listMirrorSources","Returntype":"[]LocaleMirrorSource","Args":"lang string"},{"Uniquefunname":"func (u *Updater) loopCheck()","Funname":"main.Updater.loopCheck","Returntype":"","Args":""},{"Uniquefunname":"func (u *Updater) restoreSystemSource() error","Funname":"main.Updater.restoreSystemSource","Returntype":"error","Args":""},{"Uniquefunname":"func (u *Updater) setMirrorSource(id string) error","Funname":"main.Updater.setMirrorSource","Returntype":"error","Args":"id string"},{"Uniquefunname":"func (u *Updater) restoreSystemSource() error","Funname":"restoreSystemSource","Returntype":"error","Args":""},{"Uniquefunname":"func (u *Updater) setMirrorSource(id string) error","Funname":"setMirrorSource","Returntype":"error","Args":"id string"}],"Records":[{"Name":"struct:main.ApplicationUpdateInfo","Fields":["main.ApplicationUpdateInfo.CurrentVersion string","main.ApplicationUpdateInfo.Icon string","main.ApplicationUpdateInfo.Id string","main.ApplicationUpdateInfo.LastVersion string","main.ApplicationUpdateInfo.Name string","main.ApplicationUpdateInfo.changeLog string"]},{"Name":"struct:main.LocaleMirrorSource","Fields":["main.LocaleMirrorSource.Id string","main.LocaleMirrorSource.Name string","main.LocaleMirrorSource.Url string"]},{"Name":"struct:main.Updater","Fields":["main.Updater.AutoCheckUpdates bool","main.Updater.AutoDownloadUpdates bool","main.Updater.MirrorSource string","main.Updater.PropsMu sync.RWMutex","main.Updater.UpdatableApps []string","main.Updater.UpdatablePackages []string","main.Updater.config *Config","main.Updater.manager *Manager","main.Updater.methods *struct { ListMirrorSources func() `in:\"lang\" out:\"mirrorSources\"`; SetMirrorSource func() `in:\"id\"`; SetAutoCheckUpdates func() `in:\"enable\"`; SetAutoDownloadUpdates func() `in:\"enable\"`; ApplicationUpdateInfos func() `in:\"lang\" out:\"updateInfos\"`; }","main.Updater.service *dbusutil.Service"]},{"Name":"const:main","Fields":["main.aptSource","main.aptSourceOrigin"]}]}
{"Filepath":"src/lastore-daemon/util_test.go","Functions":[{"Uniquefunname":"func Test(t *testing.T)","Funname":"Test","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func (*testWrap) TestGetEnhancedLocalePackages(c *C.C)","Funname":"TestGetEnhancedLocalePackages","Returntype":"","Args":"c *C.C"},{"Uniquefunname":"func (*testWrap) TestGuestJobType(c *C.C)","Funname":"TestGuestJobType","Returntype":"","Args":"c *C.C"},{"Uniquefunname":"func (*testWrap) TestNormalizePackageNames(c *C.C)","Funname":"TestNormalizePackageNames","Returntype":"","Args":"c *C.C"},{"Uniquefunname":"func (*testWrap) TestTranisition(c *C.C)","Funname":"TestTranisition","Returntype":"","Args":"c *C.C"},{"Uniquefunname":"func init()","Funname":"init","Returntype":"","Args":""},{"Uniquefunname":"func main.Test(t *testing.T)","Funname":"main.Test","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func init()","Funname":"main.init","Returntype":"","Args":""},{"Uniquefunname":"func (*testWrap) TestGetEnhancedLocalePackages(c *C.C)","Funname":"main.testWrap.TestGetEnhancedLocalePackages","Returntype":"","Args":"c *C.C"},{"Uniquefunname":"func (*testWrap) TestGuestJobType(c *C.C)","Funname":"main.testWrap.TestGuestJobType","Returntype":"","Args":"c *C.C"},{"Uniquefunname":"func (*testWrap) TestNormalizePackageNames(c *C.C)","Funname":"main.testWrap.TestNormalizePackageNames","Returntype":"","Args":"c *C.C"},{"Uniquefunname":"func (*testWrap) TestTranisition(c *C.C)","Funname":"main.testWrap.TestTranisition","Returntype":"","Args":"c *C.C"}],"Records":null}
{"Filepath":"src/lastore-smartmirror/main.go","Functions":[{"Uniquefunname":"func main()","Funname":"main","Returntype":"","Args":""},{"Uniquefunname":"func main()","Funname":"main.main","Returntype":"","Args":""}],"Records":null}
{"Filepath":"src/lastore-smartmirror-daemon/config.go","Functions":[{"Uniquefunname":"func (c *config) save() error","Funname":"main.config.save","Returntype":"error","Args":""},{"Uniquefunname":"func (c *config) setEnable(enable bool) error","Funname":"main.config.setEnable","Returntype":"error","Args":"enable bool"},{"Uniquefunname":"func newConfig(fpath string) *config","Funname":"main.newConfig","Returntype":"*config","Args":"fpath string"},{"Uniquefunname":"func newConfig(fpath string) *config","Funname":"newConfig","Returntype":"*config","Args":"fpath string"},{"Uniquefunname":"func (c *config) save() error","Funname":"save","Returntype":"error","Args":""},{"Uniquefunname":"func (c *config) setEnable(enable bool) error","Funname":"setEnable","Returntype":"error","Args":"enable bool"}],"Records":[{"Name":"struct:main.config","Fields":["main.config.Enable bool","main.config.filePath string"]},{"Name":"var:main","Fields":["main.defaultConfig"]}]}
{"Filepath":"src/lastore-smartmirror-daemon/header.go","Functions":[{"Uniquefunname":"func buildRequest(header map[string]string, method string, url string) *http.Request","Funname":"buildRequest","Returntype":"*http.Request","Args":"header map[string]string, method string, url string"},{"Uniquefunname":"func getUrlHostname(u *url.URL) string","Funname":"getUrlHostname","Returntype":"string","Args":"u *url.URL"},{"Uniquefunname":"func handleRequest(r *http.Request) (string, int)","Funname":"handleRequest","Returntype":"(string, int)","Args":"r *http.Request"},{"Uniquefunname":"func machineID() string","Funname":"machineID","Returntype":"string","Args":""},{"Uniquefunname":"func buildRequest(header map[string]string, method string, url string) *http.Request","Funname":"main.buildRequest","Returntype":"*http.Request","Args":"header map[string]string, method string, url string"},{"Uniquefunname":"func getUrlHostname(u *url.URL) string","Funname":"main.getUrlHostname","Returntype":"string","Args":"u *url.URL"},{"Uniquefunname":"func handleRequest(r *http.Request) (string, int)","Funname":"main.handleRequest","Returntype":"(string, int)","Args":"r *http.Request"},{"Uniquefunname":"func machineID() string","Funname":"main.machineID","Returntype":"string","Args":""},{"Uniquefunname":"func makeHeader() map[string]string","Funname":"main.makeHeader","Returntype":"map[string]string","Args":""},{"Uniquefunname":"func makeReportHeader(reports []Report) map[string]string","Funname":"main.makeReportHeader","Returntype":"map[string]string","Args":"reports []Report"},{"Uniquefunname":"func stripPort(hostport string) string","Funname":"main.stripPort","Returntype":"string","Args":"hostport string"},{"Uniquefunname":"func stripURLPath(u string) string","Funname":"main.stripURLPath","Returntype":"string","Args":"u string"},{"Uniquefunname":"func userAgent() string","Funname":"main.userAgent","Returntype":"string","Args":""},{"Uniquefunname":"func makeHeader() map[string]string","Funname":"makeHeader","Returntype":"map[string]string","Args":""},{"Uniquefunname":"func makeReportHeader(reports []Report) map[string]string","Funname":"makeReportHeader","Returntype":"map[string]string","Args":"reports []Report"},{"Uniquefunname":"func stripPort(hostport string) string","Funname":"stripPort","Returntype":"string","Args":"hostport string"},{"Uniquefunname":"func stripURLPath(u string) string","Funname":"stripURLPath","Returntype":"string","Args":"u string"},{"Uniquefunname":"func userAgent() string","Funname":"userAgent","Returntype":"string","Args":""}],"Records":[{"Name":"var:main","Fields":["main.httpClient"]}]}
{"Filepath":"src/lastore-smartmirror-daemon/lastore_smartmirror_daemon_suite_test.go","Functions":[{"Uniquefunname":"func TestLastoreSmartmirrorDaemon(t *testing.T)","Funname":"TestLastoreSmartmirrorDaemon","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestLastoreSmartmirrorDaemon(t *testing.T)","Funname":"main.TestLastoreSmartmirrorDaemon","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"src/lastore-smartmirror-daemon/lastore_smartmirror_daemon_test.go","Functions":null,"Records":[{"Name":"var:main","Fields":["main._","main.list","main.mq"]}]}
{"Filepath":"src/lastore-smartmirror-daemon/main.go","Functions":[{"Uniquefunname":"func main()","Funname":"main","Returntype":"","Args":""},{"Uniquefunname":"func main()","Funname":"main.main","Returntype":"","Args":""}],"Records":[{"Name":"const:main","Fields":["main.DefaultLogOutput"]}]}
{"Filepath":"src/lastore-smartmirror-daemon/quality.go","Functions":[{"Uniquefunname":"func (r *Report) String() string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func (mq *MirrorQuality) compare(left, right string) bool","Funname":"compare","Returntype":"bool","Args":"left, right string"},{"Uniquefunname":"func (mq *MirrorQuality) detectSelectMirror(originMirrorList []string) []string","Funname":"detectSelectMirror","Returntype":"[]string","Args":"originMirrorList []string"},{"Uniquefunname":"func (mq *MirrorQuality) getQuality(mirror string) *Quality","Funname":"getQuality","Returntype":"*Quality","Args":"mirror string"},{"Uniquefunname":"func (mq *MirrorQuality) lessAccessSelectMirror(originMirrorList []string) []string","Funname":"lessAccessSelectMirror","Returntype":"[]string","Args":"originMirrorList []string"},{"Uniquefunname":"func (mq *MirrorQuality) compare(left, right string) bool","Funname":"main.MirrorQuality.compare","Returntype":"bool","Args":"left, right string"},{"Uniquefunname":"func (mq *MirrorQuality) detectSelectMirror(originMirrorList []string) []string","Funname":"main.MirrorQuality.detectSelectMirror","Returntype":"[]string","Args":"originMirrorList []string"},{"Uniquefunname":"func (mq *MirrorQuality) getQuality(mirror string) *Quality","Funname":"main.MirrorQuality.getQuality","Returntype":"*Quality","Args":"mirror string"},{"Uniquefunname":"func (mq *MirrorQuality) lessAccessSelectMirror(originMirrorList []string) []string","Funname":"main.MirrorQuality.lessAccessSelectMirror","Returntype":"[]string","Args":"originMirrorList []string"},{"Uniquefunname":"func (mq *MirrorQuality) merge(left, right []string, handler compareHandler) []string","Funname":"main.MirrorQuality.merge","Returntype":"[]string","Args":"left, right []string, handler compareHandler"},{"Uniquefunname":"func (mq *MirrorQuality) mergeSort(originMirrorList []string, handler compareHandler) []string","Funname":"main.MirrorQuality.mergeSort","Returntype":"[]string","Args":"originMirrorList []string, handler compareHandler"},{"Uniquefunname":"func (mq *MirrorQuality) selectLessAccess(left, right string) bool","Funname":"main.MirrorQuality.selectLessAccess","Returntype":"bool","Args":"left, right string"},{"Uniquefunname":"func (mq *MirrorQuality) setQuality(mirror string, q *Quality)","Funname":"main.MirrorQuality.setQuality","Returntype":"","Args":"mirror string, q *Quality"},{"Uniquefunname":"func (mq *MirrorQuality) sortSelectMirror(originMirrorList []string) []string","Funname":"main.MirrorQuality.sortSelectMirror","Returntype":"[]string","Args":"originMirrorList []string"},{"Uniquefunname":"func (mq *MirrorQuality) updateQuality(r Report)","Funname":"main.MirrorQuality.updateQuality","Returntype":"","Args":"r Report"},{"Uniquefunname":"func (r *Report) String() string","Funname":"main.Report.String","Returntype":"string","Args":""},{"Uniquefunname":"func (mq *MirrorQuality) merge(left, right []string, handler compareHandler) []string","Funname":"merge","Returntype":"[]string","Args":"left, right []string, handler compareHandler"},{"Uniquefunname":"func (mq *MirrorQuality) mergeSort(originMirrorList []string, handler compareHandler) []string","Funname":"mergeSort","Returntype":"[]string","Args":"originMirrorList []string, handler compareHandler"},{"Uniquefunname":"func (mq *MirrorQuality) selectLessAccess(left, right string) bool","Funname":"selectLessAccess","Returntype":"bool","Args":"left, right string"},{"Uniquefunname":"func (mq *MirrorQuality) setQuality(mirror string, q *Quality)","Funname":"setQuality","Returntype":"","Args":"mirror string, q *Quality"},{"Uniquefunname":"func (mq *MirrorQuality) sortSelectMirror(originMirrorList []string) []string","Funname":"sortSelectMirror","Returntype":"[]string","Args":"originMirrorList []string"},{"Uniquefunname":"func (mq *MirrorQuality) updateQuality(r Report)","Funname":"updateQuality","Returntype":"","Args":"r Report"}],"Records":[{"Name":"struct:main.MirrorQuality","Fields":["main.MirrorQuality.adjustDelays map[string]int","main.MirrorQuality.mux sync.Mutex","main.MirrorQuality.reportList chan []Report"]},{"Name":"struct:main.Quality","Fields":["main.Quality.AccessCount int","main.Quality.AverageDelay int","main.Quality.DetectCount int","main.Quality.FailedCount int"]},{"Name":"struct:main.Report","Fields":["main.Report.Delay time.Duration","main.Report.Failed bool","main.Report.Mirror string","main.Report.StatusCode int","main.Report.URL string"]}]}
{"Filepath":"src/lastore-smartmirror-daemon/smartmirror.go","Functions":[{"Uniquefunname":"func (s *SmartMirror) GetInterfaceName() string","Funname":"GetInterfaceName","Returntype":"string","Args":""},{"Uniquefunname":"func (s *SmartMirror) Query(original, officialMirror, mirrorHost string) (string, *dbus.Error)","Funname":"Query","Returntype":"(string, *dbus.Error)","Args":"original, officialMirror, mirrorHost string"},{"Uniquefunname":"func (s *SmartMirror) SetEnable(enable bool) *dbus.Error","Funname":"SetEnable","Returntype":"*dbus.Error","Args":"enable bool"},{"Uniquefunname":"func (s *SmartMirror) canQuit() bool","Funname":"canQuit","Returntype":"bool","Args":""},{"Uniquefunname":"func (s *SmartMirror) GetInterfaceName() string","Funname":"main.SmartMirror.GetInterfaceName","Returntype":"string","Args":""},{"Uniquefunname":"func (s *SmartMirror) Query(original, officialMirror, mirrorHost string) (string, *dbus.Error)","Funname":"main.SmartMirror.Query","Returntype":"(string, *dbus.Error)","Args":"original, officialMirror, mirrorHost string"},{"Uniquefunname":"func (s *SmartMirror) SetEnable(enable bool) *dbus.Error","Funname":"main.SmartMirror.SetEnable","Returntype":"*dbus.Error","Args":"enable bool"},{"Uniquefunname":"func (s *SmartMirror) canQuit() bool","Funname":"main.SmartMirror.canQuit","Returntype":"bool","Args":""},{"Uniquefunname":"func (s *SmartMirror) makeChoice(original, officialMirror string) string","Funname":"main.SmartMirror.makeChoice","Returntype":"string","Args":"original, officialMirror string"},{"Uniquefunname":"func (s *SmartMirror) route(original, officialMirror string) string","Funname":"main.SmartMirror.route","Returntype":"string","Args":"original, officialMirror string"},{"Uniquefunname":"func newSmartMirror(service *dbusutil.Service) *SmartMirror","Funname":"main.newSmartMirror","Returntype":"*SmartMirror","Args":"service *dbusutil.Service"},{"Uniquefunname":"func (s *SmartMirror) makeChoice(original, officialMirror string) string","Funname":"makeChoice","Returntype":"string","Args":"original, officialMirror string"},{"Uniquefunname":"func newSmartMirror(service *dbusutil.Service) *SmartMirror","Funname":"newSmartMirror","Returntype":"*SmartMirror","Args":"service *dbusutil.Service"},{"Uniquefunname":"func (s *SmartMirror) route(original, officialMirror string) string","Funname":"route","Returntype":"string","Args":"original, officialMirror string"}],"Records":[{"Name":"struct:main.SmartMirror","Fields":["main.SmartMirror.Enable bool","main.SmartMirror.config *config","main.SmartMirror.methods *struct { Query func() `in:\"origin, official, mirror\" out:\"url\"`; SetEnable func() `in:\"enable\"`; }","main.SmartMirror.mirrorQuality MirrorQuality","main.SmartMirror.service *dbusutil.Service","main.SmartMirror.sources []system.MirrorSource","main.SmartMirror.sourcesURL []string","main.SmartMirror.taskCount int"]},{"Name":"var:main","Fields":["main.configDataFilepath","main.qualityDataFilepath"]}]}
{"Filepath":"src/lastore-tools/category.go","Functions":[{"Uniquefunname":"func GenerateApplications(repo, fpath string) error","Funname":"GenerateApplications","Returntype":"error","Args":"repo, fpath string"},{"Uniquefunname":"func GenerateCategory(repo, fpath string) error","Funname":"GenerateCategory","Returntype":"error","Args":"repo, fpath string"},{"Uniquefunname":"func decodeData(wrap bool, url string, data interface","Funname":"decodeData","Returntype":"error","Args":"wrap bool, url string, data interface{}"},{"Uniquefunname":"func genApplications(v []*dstore.PackageInfo, fpath string) error","Funname":"genApplications","Returntype":"error","Args":"v []*dstore.PackageInfo, fpath string"},{"Uniquefunname":"func GenerateApplications(repo, fpath string) error","Funname":"main.GenerateApplications","Returntype":"error","Args":"repo, fpath string"},{"Uniquefunname":"func GenerateCategory(repo, fpath string) error","Funname":"main.GenerateCategory","Returntype":"error","Args":"repo, fpath string"},{"Uniquefunname":"func decodeData(wrap bool, url string, data interface","Funname":"main.decodeData","Returntype":"error","Args":"wrap bool, url string, data interface{}"},{"Uniquefunname":"func genApplications(v []*dstore.PackageInfo, fpath string) error","Funname":"main.genApplications","Returntype":"error","Args":"v []*dstore.PackageInfo, fpath string"},{"Uniquefunname":"func writeData(fpath string, data interface","Funname":"main.writeData","Returntype":"error","Args":"fpath string, data interface{}"},{"Uniquefunname":"func writeData(fpath string, data interface","Funname":"writeData","Returntype":"error","Args":"fpath string, data interface{}"}],"Records":null}
{"Filepath":"src/lastore-tools/deprecated.go","Functions":[{"Uniquefunname":"func BuildDesktopDirectories() []string","Funname":"BuildDesktopDirectories","Returntype":"[]string","Args":""},{"Uniquefunname":"func GenerateDesktopIndexes(baseDir string) error","Funname":"GenerateDesktopIndexes","Returntype":"error","Args":"baseDir string"},{"Uniquefunname":"func GetDesktopFiles(dirs []string) []string","Funname":"GetDesktopFiles","Returntype":"[]string","Args":"dirs []string"},{"Uniquefunname":"func ParseDesktopInfo(packagesIndex map[string]string, dPath string) *DesktopInfo","Funname":"ParseDesktopInfo","Returntype":"*DesktopInfo","Args":"packagesIndex map[string]string, dPath string"},{"Uniquefunname":"func ParsePackageInfos() (map[string]string, map[string]int64)","Funname":"ParsePackageInfos","Returntype":"(map[string]string, map[string]int64)","Args":""},{"Uniquefunname":"func getDesktopFilePaths(listFilePath string) []string","Funname":"getDesktopFilePaths","Returntype":"[]string","Args":"listFilePath string"},{"Uniquefunname":"func getPackageName(name string) string","Funname":"getPackageName","Returntype":"string","Args":"name string"},{"Uniquefunname":"func BuildDesktopDirectories() []string","Funname":"main.BuildDesktopDirectories","Returntype":"[]string","Args":""},{"Uniquefunname":"func GenerateDesktopIndexes(baseDir string) error","Funname":"main.GenerateDesktopIndexes","Returntype":"error","Args":"baseDir string"},{"Uniquefunname":"func GetDesktopFiles(dirs []string) []string","Funname":"main.GetDesktopFiles","Returntype":"[]string","Args":"dirs []string"},{"Uniquefunname":"func ParseDesktopInfo(packagesIndex map[string]string, dPath string) *DesktopInfo","Funname":"main.ParseDesktopInfo","Returntype":"*DesktopInfo","Args":"packagesIndex map[string]string, dPath string"},{"Uniquefunname":"func ParsePackageInfos() (map[string]string, map[string]int64)","Funname":"main.ParsePackageInfos","Returntype":"(map[string]string, map[string]int64)","Args":""},{"Uniquefunname":"func getDesktopFilePaths(listFilePath string) []string","Funname":"main.getDesktopFilePaths","Returntype":"[]string","Args":"listFilePath string"},{"Uniquefunname":"func getPackageName(name string) string","Funname":"main.getPackageName","Returntype":"string","Args":"name string"},{"Uniquefunname":"func mergeDesktopIndex(infos map[string]string, fpath string) map[string]string","Funname":"main.mergeDesktopIndex","Returntype":"map[string]string","Args":"infos map[string]string, fpath string"},{"Uniquefunname":"func mergeDesktopIndex(infos map[string]string, fpath string) map[string]string","Funname":"mergeDesktopIndex","Returntype":"map[string]string","Args":"infos map[string]string, fpath string"}],"Records":[{"Name":"struct:main.DesktopInfo","Fields":["main.DesktopInfo.Exec string","main.DesktopInfo.FilePath string","main.DesktopInfo.Icon string","main.DesktopInfo.Package string"]},{"Name":"var:main","Fields":["main.execRegexp","main.iconRegexp"]}]}
{"Filepath":"src/lastore-tools/dropin.go","Functions":[{"Uniquefunname":"func BuildCategories() (map[string]string, error)","Funname":"BuildCategories","Returntype":"(map[string]string, error)","Args":""},{"Uniquefunname":"func BuildDesktop2uaid() (map[string]string, error)","Funname":"BuildDesktop2uaid","Returntype":"(map[string]string, error)","Args":""},{"Uniquefunname":"func buildMapStringStringInfo(dir string) (map[string]string, error)","Funname":"buildMapStringStringInfo","Returntype":"(map[string]string, error)","Args":"dir string"},{"Uniquefunname":"func handleDropinDir(dirPath string, handle func(f io.Reader) error) error","Funname":"handleDropinDir","Returntype":"error","Args":"dirPath string, handle func(f io.Reader) error"},{"Uniquefunname":"func BuildCategories() (map[string]string, error)","Funname":"main.BuildCategories","Returntype":"(map[string]string, error)","Args":""},{"Uniquefunname":"func BuildDesktop2uaid() (map[string]string, error)","Funname":"main.BuildDesktop2uaid","Returntype":"(map[string]string, error)","Args":""},{"Uniquefunname":"func buildMapStringStringInfo(dir string) (map[string]string, error)","Funname":"main.buildMapStringStringInfo","Returntype":"(map[string]string, error)","Args":"dir string"},{"Uniquefunname":"func handleDropinDir(dirPath string, handle func(f io.Reader) error) error","Funname":"main.handleDropinDir","Returntype":"error","Args":"dirPath string, handle func(f io.Reader) error"}],"Records":[{"Name":"var:main","Fields":["main.BaseDir","main.CacheDir"]}]}
{"Filepath":"src/lastore-tools/index_test.go","Functions":[{"Uniquefunname":"func Test(t *testing.T)","Funname":"Test","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func (*testWrap) TestNormalizePackageName(c *C.C)","Funname":"TestNormalizePackageName","Returntype":"","Args":"c *C.C"},{"Uniquefunname":"func init()","Funname":"init","Returntype":"","Args":""},{"Uniquefunname":"func main.Test(t *testing.T)","Funname":"main.Test","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func init()","Funname":"main.init","Returntype":"","Args":""},{"Uniquefunname":"func (*testWrap) TestNormalizePackageName(c *C.C)","Funname":"main.testWrap.TestNormalizePackageName","Returntype":"","Args":"c *C.C"}],"Records":null}
{"Filepath":"src/lastore-tools/lastore.go","Functions":[{"Uniquefunname":"func LastoreInstall(p string) error","Funname":"LastoreInstall","Returntype":"error","Args":"p string"},{"Uniquefunname":"func LastorePrepareUpgrade() error","Funname":"LastorePrepareUpgrade","Returntype":"error","Args":""},{"Uniquefunname":"func LastoreRemove(p string) error","Funname":"LastoreRemove","Returntype":"error","Args":"p string"},{"Uniquefunname":"func LastoreSearch(server string, p string, debug bool) error","Funname":"LastoreSearch","Returntype":"error","Args":"server string, p string, debug bool"},{"Uniquefunname":"func LastoreUpdate() error","Funname":"LastoreUpdate","Returntype":"error","Args":""},{"Uniquefunname":"func LastoreUpgrade() error","Funname":"LastoreUpgrade","Returntype":"error","Args":""},{"Uniquefunname":"func MainTester(c *cli.Context)","Funname":"MainTester","Returntype":"","Args":"c *cli.Context"},{"Uniquefunname":"func getLastore() *lastore.Lastore","Funname":"getLastore","Returntype":"*lastore.Lastore","Args":""},{"Uniquefunname":"func LastoreInstall(p string) error","Funname":"main.LastoreInstall","Returntype":"error","Args":"p string"},{"Uniquefunname":"func LastorePrepareUpgrade() error","Funname":"main.LastorePrepareUpgrade","Returntype":"error","Args":""},{"Uniquefunname":"func LastoreRemove(p string) error","Funname":"main.LastoreRemove","Returntype":"error","Args":"p string"},{"Uniquefunname":"func LastoreSearch(server string, p string, debug bool) error","Funname":"main.LastoreSearch","Returntype":"error","Args":"server string, p string, debug bool"},{"Uniquefunname":"func LastoreUpdate() error","Funname":"main.LastoreUpdate","Returntype":"error","Args":""},{"Uniquefunname":"func LastoreUpgrade() error","Funname":"main.LastoreUpgrade","Returntype":"error","Args":""},{"Uniquefunname":"func MainTester(c *cli.Context)","Funname":"main.MainTester","Returntype":"","Args":"c *cli.Context"},{"Uniquefunname":"func getLastore() *lastore.Lastore","Funname":"main.getLastore","Returntype":"*lastore.Lastore","Args":""},{"Uniquefunname":"func showLine(j *lastore.Job) string","Funname":"main.showLine","Returntype":"string","Args":"j *lastore.Job"},{"Uniquefunname":"func waitJob(p dbus.ObjectPath) error","Funname":"main.waitJob","Returntype":"error","Args":"p dbus.ObjectPath"},{"Uniquefunname":"func showLine(j *lastore.Job) string","Funname":"showLine","Returntype":"string","Args":"j *lastore.Job"},{"Uniquefunname":"func waitJob(p dbus.ObjectPath) error","Funname":"waitJob","Returntype":"error","Args":"p dbus.ObjectPath"}],"Records":[{"Name":"var:main","Fields":["main.CMDTester"]}]}
{"Filepath":"src/lastore-tools/main.go","Functions":[{"Uniquefunname":"func MainUpdater(c *cli.Context)","Funname":"MainUpdater","Returntype":"","Args":"c *cli.Context"},{"Uniquefunname":"func debugPrint(fmtStr string, args ...interface","Funname":"debugPrint","Returntype":"","Args":"fmtStr string, args ...interface{}"},{"Uniquefunname":"func main()","Funname":"main","Returntype":"","Args":""},{"Uniquefunname":"func MainUpdater(c *cli.Context)","Funname":"main.MainUpdater","Returntype":"","Args":"c *cli.Context"},{"Uniquefunname":"func debugPrint(fmtStr string, args ...interface","Funname":"main.debugPrint","Returntype":"","Args":"fmtStr string, args ...interface{}"},{"Uniquefunname":"func main()","Funname":"main.main","Returntype":"","Args":""}],"Records":[{"Name":"var:main","Fields":["main.CMDUpdater"]}]}
{"Filepath":"src/lastore-tools/metadata.go","Functions":[{"Uniquefunname":"func MainMetadata(c *cli.Context)","Funname":"MainMetadata","Returntype":"","Args":"c *cli.Context"},{"Uniquefunname":"func MainMetadata(c *cli.Context)","Funname":"main.MainMetadata","Returntype":"","Args":"c *cli.Context"}],"Records":[{"Name":"var:main","Fields":["main.CMDMetadata"]}]}
{"Filepath":"src/lastore-tools/query-desktop.go","Functions":null,"Records":[{"Name":"var:main","Fields":["main.CMDQueryDesktop"]}]}
{"Filepath":"src/lastore-tools/smartmirror.go","Functions":[{"Uniquefunname":"func ShowBest(url string)","Funname":"ShowBest","Returntype":"","Args":"url string"},{"Uniquefunname":"func ShowBestOnError(url string, err error)","Funname":"ShowBestOnError","Returntype":"","Args":"url string, err error"},{"Uniquefunname":"func SubmainMirrorSynProgress(c *cli.Context)","Funname":"SubmainMirrorSynProgress","Returntype":"","Args":"c *cli.Context"},{"Uniquefunname":"func appendSuffix(r string, suffix string) string","Funname":"appendSuffix","Returntype":"string","Args":"r string, suffix string"},{"Uniquefunname":"func buildRequest(header map[string]string, method string, url string) *http.Request","Funname":"buildRequest","Returntype":"*http.Request","Args":"header map[string]string, method string, url string"},{"Uniquefunname":"func getMirrorList(p string) ([]string, error)","Funname":"getMirrorList","Returntype":"([]string, error)","Args":"p string"},{"Uniquefunname":"func handleRequest(c *http.Client, r *http.Request) (string, bool)","Funname":"handleRequest","Returntype":"(string, bool)","Args":"c *http.Client, r *http.Request"},{"Uniquefunname":"func ShowBest(url string)","Funname":"main.ShowBest","Returntype":"","Args":"url string"},{"Uniquefunname":"func ShowBestOnError(url string, err error)","Funname":"main.ShowBestOnError","Returntype":"","Args":"url string, err error"},{"Uniquefunname":"func SubmainMirrorSynProgress(c *cli.Context)","Funname":"main.SubmainMirrorSynProgress","Returntype":"","Args":"c *cli.Context"},{"Uniquefunname":"func appendSuffix(r string, suffix string) string","Funname":"main.appendSuffix","Returntype":"string","Args":"r string, suffix string"},{"Uniquefunname":"func buildRequest(header map[string]string, method string, url string) *http.Request","Funname":"main.buildRequest","Returntype":"*http.Request","Args":"header map[string]string, method string, url string"},{"Uniquefunname":"func getMirrorList(p string) ([]string, error)","Funname":"main.getMirrorList","Returntype":"([]string, error)","Args":"p string"},{"Uniquefunname":"func handleRequest(c *http.Client, r *http.Request) (string, bool)","Funname":"main.handleRequest","Returntype":"(string, bool)","Args":"c *http.Client, r *http.Request"}],"Records":[{"Name":"var:main","Fields":["main.CMDSmartMirror"]}]}
{"Filepath":"src/lastore-tools/smartmirror_sync_progress.go","Functions":[{"Uniquefunname":"func (c *URLChecker) Check(urls ...string)","Funname":"Check","Returntype":"","Args":"urls ...string"},{"Uniquefunname":"func CheckURLExists(url string) *URLCheckResult","Funname":"CheckURLExists","Returntype":"*URLCheckResult","Args":"url string"},{"Uniquefunname":"func DetectServer(parallel int, indexName string, official string, mlist []string)[]MirrorInfo","Funname":"DetectServer","Returntype":"[]MirrorInfo","Args":"parallel int, indexName string, official string, mlist []string"},{"Uniquefunname":"func NewURLChecker(thread int) *URLChecker","Funname":"NewURLChecker","Returntype":"*URLChecker","Args":"thread int"},{"Uniquefunname":"func ParseIndex(indexUrl string) ([]string, error)","Funname":"ParseIndex","Returntype":"([]string, error)","Args":"indexUrl string"},{"Uniquefunname":"func (c *URLChecker) Result(url string) *URLCheckResult","Funname":"Result","Returntype":"*URLCheckResult","Args":"url string"},{"Uniquefunname":"func SaveMirrorInfos(infos []MirrorInfo, w io.Writer) error","Funname":"SaveMirrorInfos","Returntype":"error","Args":"infos []MirrorInfo, w io.Writer"},{"Uniquefunname":"func (u *URLChecker) SendAllRequest()","Funname":"SendAllRequest","Returntype":"","Args":""},{"Uniquefunname":"func ShowMirrorInfos(infos []MirrorInfo)","Funname":"ShowMirrorInfos","Returntype":"","Args":"infos []MirrorInfo"},{"Uniquefunname":"func fetchLastSync(url string) time.Time","Funname":"fetchLastSync","Returntype":"time.Time","Args":"url string"},{"Uniquefunname":"func CheckURLExists(url string) *URLCheckResult","Funname":"main.CheckURLExists","Returntype":"*URLCheckResult","Args":"url string"},{"Uniquefunname":"func main.DetectServer(parallel int, indexName string, official string, mlist []string)[]MirrorInfo","Funname":"main.DetectServer","Returntype":"[]MirrorInfo","Args":"parallel int, indexName string, official string, mlist []string"},{"Uniquefunname":"func NewURLChecker(thread int) *URLChecker","Funname":"main.NewURLChecker","Returntype":"*URLChecker","Args":"thread int"},{"Uniquefunname":"func ParseIndex(indexUrl string) ([]string, error)","Funname":"main.ParseIndex","Returntype":"([]string, error)","Args":"indexUrl string"},{"Uniquefunname":"func SaveMirrorInfos(infos []MirrorInfo, w io.Writer) error","Funname":"main.SaveMirrorInfos","Returntype":"error","Args":"infos []MirrorInfo, w io.Writer"},{"Uniquefunname":"func ShowMirrorInfos(infos []MirrorInfo)","Funname":"main.ShowMirrorInfos","Returntype":"","Args":"infos []MirrorInfo"},{"Uniquefunname":"func (c *URLChecker) Check(urls ...string)","Funname":"main.URLChecker.Check","Returntype":"","Args":"urls ...string"},{"Uniquefunname":"func (c *URLChecker) Result(url string) *URLCheckResult","Funname":"main.URLChecker.Result","Returntype":"*URLCheckResult","Args":"url string"},{"Uniquefunname":"func (u *URLChecker) SendAllRequest()","Funname":"main.URLChecker.SendAllRequest","Returntype":"","Args":""},{"Uniquefunname":"func fetchLastSync(url string) time.Time","Funname":"main.fetchLastSync","Returntype":"time.Time","Args":"url string"},{"Uniquefunname":"func u2014(server string) string","Funname":"main.u2014","Returntype":"string","Args":"server string"},{"Uniquefunname":"func u2015(server string) string","Funname":"main.u2015","Returntype":"string","Args":"server string"},{"Uniquefunname":"func uGuards(server string, guards []string) []string","Funname":"main.uGuards","Returntype":"[]string","Args":"server string, guards []string"},{"Uniquefunname":"func u2014(server string) string","Funname":"u2014","Returntype":"string","Args":"server string"},{"Uniquefunname":"func u2015(server string) string","Funname":"u2015","Returntype":"string","Args":"server string"},{"Uniquefunname":"func uGuards(server string, guards []string) []string","Funname":"uGuards","Returntype":"[]string","Args":"server string, guards []string"}],"Records":[{"Name":"struct:main.MirrorInfo","Fields":["main.MirrorInfo.Detail []URLCheckResult","main.MirrorInfo.LastSync time.Time","main.MirrorInfo.Latency time.Duration","main.MirrorInfo.Name string","main.MirrorInfo.Progress float64","main.MirrorInfo.Support2014 bool","main.MirrorInfo.Support2015 bool"]},{"Name":"struct:main.URLCheckResult","Fields":["main.URLCheckResult.Latency time.Duration","main.URLCheckResult.Result bool","main.URLCheckResult.ResultCode int","main.URLCheckResult.StartTime time.Time","main.URLCheckResult.URL string"]},{"Name":"struct:main.URLChecker","Fields":["main.URLChecker.nDone int","main.URLChecker.result map[string]chan *URLCheckResult","main.URLChecker.workQueue chan string","main.URLChecker.workerQueue chan chan string"]}]}
{"Filepath":"src/lastore-tools/upgradable.go","Functions":[{"Uniquefunname":"func GenerateUpdateInfos(fpath string) error","Funname":"GenerateUpdateInfos","Returntype":"error","Args":"fpath string"},{"Uniquefunname":"func buildUpgradeInfo(needle *regexp.Regexp, line string) *system.UpgradeInfo","Funname":"buildUpgradeInfo","Returntype":"*system.UpgradeInfo","Args":"needle *regexp.Regexp, line string"},{"Uniquefunname":"func buildUpgradeInfoRegex(archs []system.Architecture) *regexp.Regexp","Funname":"buildUpgradeInfoRegex","Returntype":"*regexp.Regexp","Args":"archs []system.Architecture"},{"Uniquefunname":"func getSystemArchitectures() []system.Architecture","Funname":"getSystemArchitectures","Returntype":"[]system.Architecture","Args":""},{"Uniquefunname":"func listDistUpgradePackages() ([]string, error)","Funname":"listDistUpgradePackages","Returntype":"([]string, error)","Args":""},{"Uniquefunname":"func GenerateUpdateInfos(fpath string) error","Funname":"main.GenerateUpdateInfos","Returntype":"error","Args":"fpath string"},{"Uniquefunname":"func buildUpgradeInfo(needle *regexp.Regexp, line string) *system.UpgradeInfo","Funname":"main.buildUpgradeInfo","Returntype":"*system.UpgradeInfo","Args":"needle *regexp.Regexp, line string"},{"Uniquefunname":"func buildUpgradeInfoRegex(archs []system.Architecture) *regexp.Regexp","Funname":"main.buildUpgradeInfoRegex","Returntype":"*regexp.Regexp","Args":"archs []system.Architecture"},{"Uniquefunname":"func getSystemArchitectures() []system.Architecture","Funname":"main.getSystemArchitectures","Returntype":"[]system.Architecture","Args":""},{"Uniquefunname":"func listDistUpgradePackages() ([]string, error)","Funname":"main.listDistUpgradePackages","Returntype":"([]string, error)","Args":""},{"Uniquefunname":"func main.mapUpgradeInfo(lines []string, needle *regexp.Regexp, fn func(*regexp.Regexp, string) *system.UpgradeInfo)[]system.UpgradeInfo","Funname":"main.mapUpgradeInfo","Returntype":"[]system.UpgradeInfo","Args":"lines []string, needle *regexp.Regexp, fn func(*regexp.Regexp, string) *system.UpgradeInfo"},{"Uniquefunname":"func parseAptShowList(r io.Reader, title string) []string","Funname":"main.parseAptShowList","Returntype":"[]string","Args":"r io.Reader, title string"},{"Uniquefunname":"func queryDpkgUpgradeInfoByAptList() ([]string, error)","Funname":"main.queryDpkgUpgradeInfoByAptList","Returntype":"([]string, error)","Args":""},{"Uniquefunname":"func mapUpgradeInfo(lines []string, needle *regexp.Regexp, fn func(*regexp.Regexp, string) *system.UpgradeInfo)[]system.UpgradeInfo","Funname":"mapUpgradeInfo","Returntype":"[]system.UpgradeInfo","Args":"lines []string, needle *regexp.Regexp, fn func(*regexp.Regexp, string) *system.UpgradeInfo"},{"Uniquefunname":"func parseAptShowList(r io.Reader, title string) []string","Funname":"parseAptShowList","Returntype":"[]string","Args":"r io.Reader, title string"},{"Uniquefunname":"func queryDpkgUpgradeInfoByAptList() ([]string, error)","Funname":"queryDpkgUpgradeInfoByAptList","Returntype":"([]string, error)","Args":""}],"Records":null}
{"Filepath":"src/lastore-tools/upgradable_test.go","Functions":[{"Uniquefunname":"func (*testWrap) TestBuildUpgradeInfo(c *C.C)","Funname":"TestBuildUpgradeInfo","Returntype":"","Args":"c *C.C"},{"Uniquefunname":"func (*testWrap) TestParseApt(c *C.C)","Funname":"TestParseApt","Returntype":"","Args":"c *C.C"},{"Uniquefunname":"func (*testWrap) TestBuildUpgradeInfo(c *C.C)","Funname":"main.testWrap.TestBuildUpgradeInfo","Returntype":"","Args":"c *C.C"},{"Uniquefunname":"func (*testWrap) TestParseApt(c *C.C)","Funname":"main.testWrap.TestParseApt","Returntype":"","Args":"c *C.C"}],"Records":null}
{"Filepath":"vendor/src/fixme/pkg_recommend/lang_info.go","Functions":[{"Uniquefunname":"func (infos LangInfos) Get(locale string) (*LangInfo, error)","Funname":"Get","Returntype":"(*LangInfo, error)","Args":"locale string"},{"Uniquefunname":"func GetLangCodeInfo(locale, config string) (*LangCodeInfo, error)","Funname":"GetLangCodeInfo","Returntype":"(*LangCodeInfo, error)","Args":"locale, config string"},{"Uniquefunname":"func GetSupportedLangInfos() (LangInfos, error)","Funname":"GetSupportedLangInfos","Returntype":"(LangInfos, error)","Args":""},{"Uniquefunname":"func IsSupportedLocale(locale string) bool","Funname":"IsSupportedLocale","Returntype":"bool","Args":"locale string"},{"Uniquefunname":"func (info *LangInfo) ToLangCode() *LangCodeInfo","Funname":"ToLangCode","Returntype":"*LangCodeInfo","Args":""},{"Uniquefunname":"func getLangInfoByLocale(locale, config string) (*LangInfo, error)","Funname":"getLangInfoByLocale","Returntype":"(*LangInfo, error)","Args":"locale, config string"},{"Uniquefunname":"func getLangInfosFromFile(config string) (LangInfos, error)","Funname":"getLangInfosFromFile","Returntype":"(LangInfos, error)","Args":"config string"},{"Uniquefunname":"func getSupportedLocaleList(config string) ([]string, error)","Funname":"getSupportedLocaleList","Returntype":"([]string, error)","Args":"config string"},{"Uniquefunname":"func isItemInList(item string, list []string) bool","Funname":"isItemInList","Returntype":"bool","Args":"item string, list []string"},{"Uniquefunname":"func GetLangCodeInfo(locale, config string) (*LangCodeInfo, error)","Funname":"pkg_recommend.GetLangCodeInfo","Returntype":"(*LangCodeInfo, error)","Args":"locale, config string"},{"Uniquefunname":"func GetSupportedLangInfos() (LangInfos, error)","Funname":"pkg_recommend.GetSupportedLangInfos","Returntype":"(LangInfos, error)","Args":""},{"Uniquefunname":"func IsSupportedLocale(locale string) bool","Funname":"pkg_recommend.IsSupportedLocale","Returntype":"bool","Args":"locale string"},{"Uniquefunname":"func (info *LangInfo) ToLangCode() *LangCodeInfo","Funname":"pkg_recommend.LangInfo.ToLangCode","Returntype":"*LangCodeInfo","Args":""},{"Uniquefunname":"func (infos LangInfos) Get(locale string) (*LangInfo, error)","Funname":"pkg_recommend.LangInfos.Get","Returntype":"(*LangInfo, error)","Args":"locale string"},{"Uniquefunname":"func getLangInfoByLocale(locale, config string) (*LangInfo, error)","Funname":"pkg_recommend.getLangInfoByLocale","Returntype":"(*LangInfo, error)","Args":"locale, config string"},{"Uniquefunname":"func getLangInfosFromFile(config string) (LangInfos, error)","Funname":"pkg_recommend.getLangInfosFromFile","Returntype":"(LangInfos, error)","Args":"config string"},{"Uniquefunname":"func getSupportedLocaleList(config string) ([]string, error)","Funname":"pkg_recommend.getSupportedLocaleList","Returntype":"([]string, error)","Args":"config string"},{"Uniquefunname":"func isItemInList(item string, list []string) bool","Funname":"pkg_recommend.isItemInList","Returntype":"bool","Args":"item string, list []string"}],"Records":[{"Name":"struct:pkg_recommend.LangCodeInfo","Fields":["pkg_recommend.LangCodeInfo.CountryCode string","pkg_recommend.LangCodeInfo.LangCode string","pkg_recommend.LangCodeInfo.Variant string"]},{"Name":"struct:pkg_recommend.LangInfo","Fields":["pkg_recommend.LangInfo.CountryCode string","pkg_recommend.LangInfo.Description string","pkg_recommend.LangInfo.LangCode string","pkg_recommend.LangInfo.Locale string"]},{"Name":"const:pkg_recommend","Fields":["pkg_recommend.LangInfoFile","pkg_recommend.langSupportedFile"]},{"Name":"struct:pkg_recommend.langInfoGroup","Fields":["pkg_recommend.langInfoGroup.Infos LangInfos"]}]}
{"Filepath":"vendor/src/fixme/pkg_recommend/parse_file.go","Functions":[{"Uniquefunname":"func (categories jsonDependentCategories) GetAllDependentInfos(locale string) DependentInfos","Funname":"GetAllDependentInfos","Returntype":"DependentInfos","Args":"locale string"},{"Uniquefunname":"func (categories jsonDependentCategories) GetDependentInfos(key, locale string) DependentInfos","Funname":"GetDependentInfos","Returntype":"DependentInfos","Args":"key, locale string"},{"Uniquefunname":"func (infos jsonDependentInfos) GetDependentInfos(locale string) DependentInfos","Funname":"GetDependentInfos","Returntype":"DependentInfos","Args":"locale string"},{"Uniquefunname":"func (categories jsonDependentCategories) GetInfos(key string) jsonDependentInfos","Funname":"GetInfos","Returntype":"jsonDependentInfos","Args":"key string"},{"Uniquefunname":"func (info *jsonDependentInfo) GetPackages(locale string) []string","Funname":"GetPackages","Returntype":"[]string","Args":"locale string"},{"Uniquefunname":"func getDependentCategories(config string) (jsonDependentCategories, error)","Funname":"getDependentCategories","Returntype":"(jsonDependentCategories, error)","Args":"config string"},{"Uniquefunname":"func getPackagesByLangInfo(locale, langCode, countryCode, variant string)[]string","Funname":"getPackagesByLangInfo","Returntype":"[]string","Args":"locale, langCode, countryCode, variant string"},{"Uniquefunname":"func getDependentCategories(config string) (jsonDependentCategories, error)","Funname":"pkg_recommend.getDependentCategories","Returntype":"(jsonDependentCategories, error)","Args":"config string"},{"Uniquefunname":"func (categories jsonDependentCategories) GetAllDependentInfos(locale string) DependentInfos","Funname":"pkg_recommend.jsonDependentCategories.GetAllDependentInfos","Returntype":"DependentInfos","Args":"locale string"},{"Uniquefunname":"func (categories jsonDependentCategories) GetDependentInfos(key, locale string) DependentInfos","Funname":"pkg_recommend.jsonDependentCategories.GetDependentInfos","Returntype":"DependentInfos","Args":"key, locale string"},{"Uniquefunname":"func (categories jsonDependentCategories) GetInfos(key string) jsonDependentInfos","Funname":"pkg_recommend.jsonDependentCategories.GetInfos","Returntype":"jsonDependentInfos","Args":"key string"},{"Uniquefunname":"func (info *jsonDependentInfo) GetPackages(locale string) []string","Funname":"pkg_recommend.jsonDependentInfo.GetPackages","Returntype":"[]string","Args":"locale string"},{"Uniquefunname":"func pkg_recommend.jsonDependentInfo.getPackagesByLangInfo(locale, langCode, countryCode, variant string)[]string","Funname":"pkg_recommend.jsonDependentInfo.getPackagesByLangInfo","Returntype":"[]string","Args":"locale, langCode, countryCode, variant string"},{"Uniquefunname":"func (infos jsonDependentInfos) GetDependentInfos(locale string) DependentInfos","Funname":"pkg_recommend.jsonDependentInfos.GetDependentInfos","Returntype":"DependentInfos","Args":"locale string"}],"Records":[{"Name":"const:pkg_recommend","Fields":["pkg_recommend.formatTypeLC","pkg_recommend.formatTypeLCCC","pkg_recommend.formatTypeLCVA","pkg_recommend.formatTypeNone"]},{"Name":"struct:pkg_recommend.jsonDependentCategory","Fields":["pkg_recommend.jsonDependentCategory.Category string","pkg_recommend.jsonDependentCategory.Infos jsonDependentInfos"]},{"Name":"struct:pkg_recommend.jsonDependentGroup","Fields":["pkg_recommend.jsonDependentGroup.Categories jsonDependentCategories"]},{"Name":"struct:pkg_recommend.jsonDependentInfo","Fields":["pkg_recommend.jsonDependentInfo.Dependent string","pkg_recommend.jsonDependentInfo.FormatType int32","pkg_recommend.jsonDependentInfo.LangCode string","pkg_recommend.jsonDependentInfo.PkgPull string"]},{"Name":"var:pkg_recommend","Fields":["pkg_recommend.regUnderLine"]}]}
{"Filepath":"vendor/src/fixme/pkg_recommend/pkg_depends.go","Functions":[{"Uniquefunname":"func GetByLocale(locale string) (DependentInfos, DependentInfos, error)","Funname":"GetByLocale","Returntype":"(DependentInfos, DependentInfos, error)","Args":"locale string"},{"Uniquefunname":"func GetByPackage(locale, pkg string) ([]string, []string, error)","Funname":"GetByPackage","Returntype":"([]string, []string, error)","Args":"locale, pkg string"},{"Uniquefunname":"func (infos DependentInfos) GetConflictPackages() DependentInfos","Funname":"GetConflictPackages","Returntype":"DependentInfos","Args":""},{"Uniquefunname":"func GetEnhancedLocalePackages(lang string, pkg string) []string","Funname":"GetEnhancedLocalePackages","Returntype":"[]string","Args":"lang string, pkg string"},{"Uniquefunname":"func (infos DependentInfos) GetPackagesByDependent(dependent string) []string","Funname":"GetPackagesByDependent","Returntype":"[]string","Args":"dependent string"},{"Uniquefunname":"func getConflictPackages(pkgs []string) []string","Funname":"getConflictPackages","Returntype":"[]string","Args":"pkgs []string"},{"Uniquefunname":"func (infos DependentInfos) GetConflictPackages() DependentInfos","Funname":"pkg_recommend.DependentInfos.GetConflictPackages","Returntype":"DependentInfos","Args":""},{"Uniquefunname":"func (infos DependentInfos) GetPackagesByDependent(dependent string) []string","Funname":"pkg_recommend.DependentInfos.GetPackagesByDependent","Returntype":"[]string","Args":"dependent string"},{"Uniquefunname":"func GetByLocale(locale string) (DependentInfos, DependentInfos, error)","Funname":"pkg_recommend.GetByLocale","Returntype":"(DependentInfos, DependentInfos, error)","Args":"locale string"},{"Uniquefunname":"func GetByPackage(locale, pkg string) ([]string, []string, error)","Funname":"pkg_recommend.GetByPackage","Returntype":"([]string, []string, error)","Args":"locale, pkg string"},{"Uniquefunname":"func GetEnhancedLocalePackages(lang string, pkg string) []string","Funname":"pkg_recommend.GetEnhancedLocalePackages","Returntype":"[]string","Args":"lang string, pkg string"},{"Uniquefunname":"func getConflictPackages(pkgs []string) []string","Funname":"pkg_recommend.getConflictPackages","Returntype":"[]string","Args":"pkgs []string"}],"Records":[{"Name":"struct:pkg_recommend.DependentInfo","Fields":["pkg_recommend.DependentInfo.Dependent string","pkg_recommend.DependentInfo.Packages []string"]},{"Name":"const:pkg_recommend","Fields":["pkg_recommend.pkgDependsFile"]}]}
{"Filepath":"vendor/src/fixme/pkg_recommend/sourcehansans.go","Functions":null,"Records":[{"Name":"var:pkg_recommend","Fields":["pkg_recommend.conflictPkgMap"]}]}
{"Filepath":"vendor/src/github.com/apcera/termtables/cell.go","Functions":[{"Uniquefunname":"func CreateCell(v interface","Funname":"CreateCell","Returntype":"*Cell","Args":"v interface{}, style *CellStyle"},{"Uniquefunname":"func (c *Cell) Render(style *renderStyle) (buffer string)","Funname":"Render","Returntype":"(buffer string)","Args":"style *renderStyle"},{"Uniquefunname":"func (c *Cell) Width() int","Funname":"Width","Returntype":"int","Args":""},{"Uniquefunname":"func (c *Cell) alignCell(style *renderStyle) string","Funname":"alignCell","Returntype":"string","Args":"style *renderStyle"},{"Uniquefunname":"func createCell(column int, v interface","Funname":"createCell","Returntype":"*Cell","Args":"column int, v interface{}, style *CellStyle"},{"Uniquefunname":"func filterColorCodes(s string) string","Funname":"filterColorCodes","Returntype":"string","Args":"s string"},{"Uniquefunname":"func renderValue(v interface","Funname":"renderValue","Returntype":"string","Args":"v interface{}"},{"Uniquefunname":"func (c *Cell) Render(style *renderStyle) (buffer string)","Funname":"termtables.Cell.Render","Returntype":"(buffer string)","Args":"style *renderStyle"},{"Uniquefunname":"func (c *Cell) Width() int","Funname":"termtables.Cell.Width","Returntype":"int","Args":""},{"Uniquefunname":"func (c *Cell) alignCell(style *renderStyle) string","Funname":"termtables.Cell.alignCell","Returntype":"string","Args":"style *renderStyle"},{"Uniquefunname":"func CreateCell(v interface","Funname":"termtables.CreateCell","Returntype":"*Cell","Args":"v interface{}, style *CellStyle"},{"Uniquefunname":"func createCell(column int, v interface","Funname":"termtables.createCell","Returntype":"*Cell","Args":"column int, v interface{}, style *CellStyle"},{"Uniquefunname":"func filterColorCodes(s string) string","Funname":"termtables.filterColorCodes","Returntype":"string","Args":"s string"},{"Uniquefunname":"func renderValue(v interface","Funname":"termtables.renderValue","Returntype":"string","Args":"v interface{}"}],"Records":[{"Name":"struct:termtables.Cell","Fields":["termtables.Cell.alignment *tableAlignment","termtables.Cell.colSpan int","termtables.Cell.column int","termtables.Cell.formattedValue string"]},{"Name":"var:termtables","Fields":["termtables.colorFilter"]}]}
{"Filepath":"vendor/src/github.com/apcera/termtables/cell_test.go","Functions":[{"Uniquefunname":"func (f *foo) String() string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func TestCellRenderBool(t *testing.T)","Funname":"TestCellRenderBool","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestCellRenderFloat(t *testing.T)","Funname":"TestCellRenderFloat","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestCellRenderGeneric(t *testing.T)","Funname":"TestCellRenderGeneric","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestCellRenderInteger(t *testing.T)","Funname":"TestCellRenderInteger","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestCellRenderPadding(t *testing.T)","Funname":"TestCellRenderPadding","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestCellRenderString(t *testing.T)","Funname":"TestCellRenderString","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestCellRenderStringerStruct(t *testing.T)","Funname":"TestCellRenderStringerStruct","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestFilterColorCodes(t *testing.T)","Funname":"TestFilterColorCodes","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestCellRenderBool(t *testing.T)","Funname":"termtables.TestCellRenderBool","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestCellRenderFloat(t *testing.T)","Funname":"termtables.TestCellRenderFloat","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestCellRenderGeneric(t *testing.T)","Funname":"termtables.TestCellRenderGeneric","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestCellRenderInteger(t *testing.T)","Funname":"termtables.TestCellRenderInteger","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestCellRenderPadding(t *testing.T)","Funname":"termtables.TestCellRenderPadding","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestCellRenderString(t *testing.T)","Funname":"termtables.TestCellRenderString","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestCellRenderStringerStruct(t *testing.T)","Funname":"termtables.TestCellRenderStringerStruct","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestFilterColorCodes(t *testing.T)","Funname":"termtables.TestFilterColorCodes","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func (f *foo) String() string","Funname":"termtables.foo.String","Returntype":"string","Args":""}],"Records":[{"Name":"struct:termtables.foo","Fields":["termtables.foo.v string"]}]}
{"Filepath":"vendor/src/github.com/apcera/termtables/html.go","Functions":[{"Uniquefunname":"func (r *Row) HTML(tag string, style *renderStyle) string","Funname":"HTML","Returntype":"string","Args":"tag string, style *renderStyle"},{"Uniquefunname":"func (t *Table) RenderHTML() (buffer string)","Funname":"RenderHTML","Returntype":"(buffer string)","Args":""},{"Uniquefunname":"func generateHtmlTitleRow(title interface","Funname":"generateHtmlTitleRow","Returntype":"string","Args":"title interface{}, t *Table, style *renderStyle"},{"Uniquefunname":"func (r *Row) HTML(tag string, style *renderStyle) string","Funname":"termtables.Row.HTML","Returntype":"string","Args":"tag string, style *renderStyle"},{"Uniquefunname":"func (t *Table) RenderHTML() (buffer string)","Funname":"termtables.Table.RenderHTML","Returntype":"(buffer string)","Args":""},{"Uniquefunname":"func generateHtmlTitleRow(title interface","Funname":"termtables.generateHtmlTitleRow","Returntype":"string","Args":"title interface{}, t *Table, style *renderStyle"}],"Records":[{"Name":"const:termtables","Fields":["termtables.TitleAsCaption","termtables.TitleAsThSpan"]},{"Name":"struct:termtables.htmlStyleRules","Fields":["termtables.htmlStyleRules.title titleStyle"]}]}
{"Filepath":"vendor/src/github.com/apcera/termtables/html_test.go","Functions":[{"Uniquefunname":"func TestCreateTableHTML(t *testing.T)","Funname":"TestCreateTableHTML","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTableAfterSetAlign(t *testing.T)","Funname":"TestTableAfterSetAlign","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTableTitleWidthAdjustsHTML(t *testing.T)","Funname":"TestTableTitleWidthAdjustsHTML","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTableUnicodeWidthsHTML(t *testing.T)","Funname":"TestTableUnicodeWidthsHTML","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTableWithAlignment(t *testing.T)","Funname":"TestTableWithAlignment","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTableWithAltTitleStyle(t *testing.T)","Funname":"TestTableWithAltTitleStyle","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTableWithHeaderHTML(t *testing.T)","Funname":"TestTableWithHeaderHTML","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTableWithNoHeadersHTML(t *testing.T)","Funname":"TestTableWithNoHeadersHTML","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestCreateTableHTML(t *testing.T)","Funname":"termtables.TestCreateTableHTML","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTableAfterSetAlign(t *testing.T)","Funname":"termtables.TestTableAfterSetAlign","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTableTitleWidthAdjustsHTML(t *testing.T)","Funname":"termtables.TestTableTitleWidthAdjustsHTML","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTableUnicodeWidthsHTML(t *testing.T)","Funname":"termtables.TestTableUnicodeWidthsHTML","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTableWithAlignment(t *testing.T)","Funname":"termtables.TestTableWithAlignment","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTableWithAltTitleStyle(t *testing.T)","Funname":"termtables.TestTableWithAltTitleStyle","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTableWithHeaderHTML(t *testing.T)","Funname":"termtables.TestTableWithHeaderHTML","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTableWithNoHeadersHTML(t *testing.T)","Funname":"termtables.TestTableWithNoHeadersHTML","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/apcera/termtables/row.go","Functions":[{"Uniquefunname":"func (r *Row) AddCell(item interface","Funname":"AddCell","Returntype":"","Args":"item interface{}"},{"Uniquefunname":"func CreateRow(items []interface","Funname":"CreateRow","Returntype":"*Row","Args":"items []interface{}"},{"Uniquefunname":"func (r *Row) Render(style *renderStyle) string","Funname":"Render","Returntype":"string","Args":"style *renderStyle"},{"Uniquefunname":"func CreateRow(items []interface","Funname":"termtables.CreateRow","Returntype":"*Row","Args":"items []interface{}"},{"Uniquefunname":"func (r *Row) AddCell(item interface","Funname":"termtables.Row.AddCell","Returntype":"","Args":"item interface{}"},{"Uniquefunname":"func (r *Row) Render(style *renderStyle) string","Funname":"termtables.Row.Render","Returntype":"string","Args":"style *renderStyle"}],"Records":[{"Name":"struct:termtables.Row","Fields":["termtables.Row.cells []*Cell"]}]}
{"Filepath":"vendor/src/github.com/apcera/termtables/row_test.go","Functions":[{"Uniquefunname":"func TestBasicRowRender(t *testing.T)","Funname":"TestBasicRowRender","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestRowRenderWidthBasedPadding(t *testing.T)","Funname":"TestRowRenderWidthBasedPadding","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestBasicRowRender(t *testing.T)","Funname":"termtables.TestBasicRowRender","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestRowRenderWidthBasedPadding(t *testing.T)","Funname":"termtables.TestRowRenderWidthBasedPadding","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/apcera/termtables/separator.go","Functions":[{"Uniquefunname":"func (s *Separator) Render(style *renderStyle) string","Funname":"Render","Returntype":"string","Args":"style *renderStyle"},{"Uniquefunname":"func (s *Separator) Render(style *renderStyle) string","Funname":"termtables.Separator.Render","Returntype":"string","Args":"style *renderStyle"}],"Records":[{"Name":"const:termtables","Fields":["termtables.LINE_BOTTOM","termtables.LINE_INNER","termtables.LINE_SUBTOP","termtables.LINE_TOP"]},{"Name":"struct:termtables.Separator","Fields":["termtables.Separator.where lineType"]}]}
{"Filepath":"vendor/src/github.com/apcera/termtables/straight_separator.go","Functions":[{"Uniquefunname":"func (s *StraightSeparator) Render(style *renderStyle) string","Funname":"Render","Returntype":"string","Args":"style *renderStyle"},{"Uniquefunname":"func (s *StraightSeparator) Render(style *renderStyle) string","Funname":"termtables.StraightSeparator.Render","Returntype":"string","Args":"style *renderStyle"}],"Records":[{"Name":"struct:termtables.StraightSeparator","Fields":["termtables.StraightSeparator.where lineType"]}]}
{"Filepath":"vendor/src/github.com/apcera/termtables/style.go","Functions":[{"Uniquefunname":"func (s *renderStyle) CellWidth(i int) int","Funname":"CellWidth","Returntype":"int","Args":"i int"},{"Uniquefunname":"func (s *renderStyle) buildReplaceContent(bad string)","Funname":"buildReplaceContent","Returntype":"","Args":"bad string"},{"Uniquefunname":"func createRenderStyle(table *Table) *renderStyle","Funname":"createRenderStyle","Returntype":"*renderStyle","Args":"table *Table"},{"Uniquefunname":"func (s *TableStyle) fillStyleRules()","Funname":"fillStyleRules","Returntype":"","Args":""},{"Uniquefunname":"func (s *TableStyle) setAsciiBoxStyle()","Funname":"setAsciiBoxStyle","Returntype":"","Args":""},{"Uniquefunname":"func (s *TableStyle) setUtfBoxStyle()","Funname":"setUtfBoxStyle","Returntype":"","Args":""},{"Uniquefunname":"func (s *TableStyle) fillStyleRules()","Funname":"termtables.TableStyle.fillStyleRules","Returntype":"","Args":""},{"Uniquefunname":"func (s *TableStyle) setAsciiBoxStyle()","Funname":"termtables.TableStyle.setAsciiBoxStyle","Returntype":"","Args":""},{"Uniquefunname":"func (s *TableStyle) setUtfBoxStyle()","Funname":"termtables.TableStyle.setUtfBoxStyle","Returntype":"","Args":""},{"Uniquefunname":"func createRenderStyle(table *Table) *renderStyle","Funname":"termtables.createRenderStyle","Returntype":"*renderStyle","Args":"table *Table"},{"Uniquefunname":"func (s *renderStyle) CellWidth(i int) int","Funname":"termtables.renderStyle.CellWidth","Returntype":"int","Args":"i int"},{"Uniquefunname":"func (s *renderStyle) buildReplaceContent(bad string)","Funname":"termtables.renderStyle.buildReplaceContent","Returntype":"","Args":"bad string"}],"Records":[{"Name":"const:termtables","Fields":["termtables.AlignCenter","termtables.AlignLeft","termtables.AlignRight"]},{"Name":"struct:termtables.CellStyle","Fields":["termtables.CellStyle.Alignment tableAlignment","termtables.CellStyle.ColSpan int"]},{"Name":"var:termtables","Fields":["termtables.DefaultStyle"]},{"Name":"struct:termtables.TableStyle","Fields":["termtables.TableStyle.Alignment tableAlignment","termtables.TableStyle.BorderBottom string","termtables.TableStyle.BorderBottomLeft string","termtables.TableStyle.BorderBottomRight string","termtables.TableStyle.BorderI string","termtables.TableStyle.BorderLeft string","termtables.TableStyle.BorderRight string","termtables.TableStyle.BorderTop string","termtables.TableStyle.BorderTopLeft string","termtables.TableStyle.BorderTopRight string","termtables.TableStyle.BorderX string","termtables.TableStyle.BorderY string","termtables.TableStyle.PaddingLeft int","termtables.TableStyle.PaddingRight int","termtables.TableStyle.SkipBorder bool","termtables.TableStyle.Width int","termtables.TableStyle.htmlRules htmlStyleRules"]},{"Name":"struct:termtables.renderStyle","Fields":["termtables.renderStyle.cellWidths map[int]int","termtables.renderStyle.columns int","termtables.renderStyle.replaceContent func(string) string"]}]}
{"Filepath":"vendor/src/github.com/apcera/termtables/table.go","Functions":[{"Uniquefunname":"func (t *Table) AddHeaders(headers ...interface","Funname":"AddHeaders","Returntype":"","Args":"headers ...interface{}"},{"Uniquefunname":"func (t *Table) AddRow(items ...interface","Funname":"AddRow","Returntype":"*Row","Args":"items ...interface{}"},{"Uniquefunname":"func (t *Table) AddSeparator()","Funname":"AddSeparator","Returntype":"","Args":""},{"Uniquefunname":"func (t *Table) AddTitle(title interface","Funname":"AddTitle","Returntype":"","Args":"title interface{}"},{"Uniquefunname":"func CreateTable() *Table","Funname":"CreateTable","Returntype":"*Table","Args":""},{"Uniquefunname":"func EnableUTF8()","Funname":"EnableUTF8","Returntype":"","Args":""},{"Uniquefunname":"func EnableUTF8PerLocale()","Funname":"EnableUTF8PerLocale","Returntype":"","Args":""},{"Uniquefunname":"func (t *Table) Render() (buffer string)","Funname":"Render","Returntype":"(buffer string)","Args":""},{"Uniquefunname":"func (t *Table) SetAlign(align tableAlignment, column int)","Funname":"SetAlign","Returntype":"","Args":"align tableAlignment, column int"},{"Uniquefunname":"func (t *Table) SetHTMLStyleTitle(want titleStyle)","Funname":"SetHTMLStyleTitle","Returntype":"","Args":"want titleStyle"},{"Uniquefunname":"func SetHTMLStyleTitle(want titleStyle)","Funname":"SetHTMLStyleTitle","Returntype":"","Args":"want titleStyle"},{"Uniquefunname":"func (t *Table) SetModeHTML()","Funname":"SetModeHTML","Returntype":"","Args":""},{"Uniquefunname":"func SetModeHTML(onoff bool)","Funname":"SetModeHTML","Returntype":"","Args":"onoff bool"},{"Uniquefunname":"func (t *Table) SetModeMarkdown()","Funname":"SetModeMarkdown","Returntype":"","Args":""},{"Uniquefunname":"func SetModeMarkdown(onoff bool)","Funname":"SetModeMarkdown","Returntype":"","Args":"onoff bool"},{"Uniquefunname":"func (t *Table) SetModeTerminal()","Funname":"SetModeTerminal","Returntype":"","Args":""},{"Uniquefunname":"func (t *Table) UTF8Box()","Funname":"UTF8Box","Returntype":"","Args":""},{"Uniquefunname":"func chooseDefaultOutput()","Funname":"chooseDefaultOutput","Returntype":"","Args":""},{"Uniquefunname":"func init()","Funname":"init","Returntype":"","Args":""},{"Uniquefunname":"func (t *Table) renderMarkdown() (buffer string)","Funname":"renderMarkdown","Returntype":"(buffer string)","Args":""},{"Uniquefunname":"func (t *Table) renderTerminal() (buffer string)","Funname":"renderTerminal","Returntype":"(buffer string)","Args":""},{"Uniquefunname":"func CreateTable() *Table","Funname":"termtables.CreateTable","Returntype":"*Table","Args":""},{"Uniquefunname":"func EnableUTF8()","Funname":"termtables.EnableUTF8","Returntype":"","Args":""},{"Uniquefunname":"func EnableUTF8PerLocale()","Funname":"termtables.EnableUTF8PerLocale","Returntype":"","Args":""},{"Uniquefunname":"func SetHTMLStyleTitle(want titleStyle)","Funname":"termtables.SetHTMLStyleTitle","Returntype":"","Args":"want titleStyle"},{"Uniquefunname":"func SetModeHTML(onoff bool)","Funname":"termtables.SetModeHTML","Returntype":"","Args":"onoff bool"},{"Uniquefunname":"func SetModeMarkdown(onoff bool)","Funname":"termtables.SetModeMarkdown","Returntype":"","Args":"onoff bool"},{"Uniquefunname":"func (t *Table) AddHeaders(headers ...interface","Funname":"termtables.Table.AddHeaders","Returntype":"","Args":"headers ...interface{}"},{"Uniquefunname":"func (t *Table) AddRow(items ...interface","Funname":"termtables.Table.AddRow","Returntype":"*Row","Args":"items ...interface{}"},{"Uniquefunname":"func (t *Table) AddSeparator()","Funname":"termtables.Table.AddSeparator","Returntype":"","Args":""},{"Uniquefunname":"func (t *Table) AddTitle(title interface","Funname":"termtables.Table.AddTitle","Returntype":"","Args":"title interface{}"},{"Uniquefunname":"func (t *Table) Render() (buffer string)","Funname":"termtables.Table.Render","Returntype":"(buffer string)","Args":""},{"Uniquefunname":"func (t *Table) SetAlign(align tableAlignment, column int)","Funname":"termtables.Table.SetAlign","Returntype":"","Args":"align tableAlignment, column int"},{"Uniquefunname":"func (t *Table) SetHTMLStyleTitle(want titleStyle)","Funname":"termtables.Table.SetHTMLStyleTitle","Returntype":"","Args":"want titleStyle"},{"Uniquefunname":"func (t *Table) SetModeHTML()","Funname":"termtables.Table.SetModeHTML","Returntype":"","Args":""},{"Uniquefunname":"func (t *Table) SetModeMarkdown()","Funname":"termtables.Table.SetModeMarkdown","Returntype":"","Args":""},{"Uniquefunname":"func (t *Table) SetModeTerminal()","Funname":"termtables.Table.SetModeTerminal","Returntype":"","Args":""},{"Uniquefunname":"func (t *Table) UTF8Box()","Funname":"termtables.Table.UTF8Box","Returntype":"","Args":""},{"Uniquefunname":"func (t *Table) renderMarkdown() (buffer string)","Funname":"termtables.Table.renderMarkdown","Returntype":"(buffer string)","Args":""},{"Uniquefunname":"func (t *Table) renderTerminal() (buffer string)","Funname":"termtables.Table.renderTerminal","Returntype":"(buffer string)","Args":""},{"Uniquefunname":"func chooseDefaultOutput()","Funname":"termtables.chooseDefaultOutput","Returntype":"","Args":""},{"Uniquefunname":"func init()","Funname":"termtables.init","Returntype":"","Args":""}],"Records":[{"Name":"interface","Fields":["termtables.Element"]},{"Name":"var:termtables","Fields":["termtables.MaxColumns","termtables.defaultOutputMode","termtables.outputsEnabled"]},{"Name":"struct:termtables.Table","Fields":["termtables.Table.Style *TableStyle","termtables.Table.elements []Element","termtables.Table.headers []interface{}","termtables.Table.outputMode outputMode","termtables.Table.title interface{}","termtables.Table.titleCell *Cell"]},{"Name":"const:termtables","Fields":["termtables.outputHTML","termtables.outputMarkdown","termtables.outputTerminal"]}]}
{"Filepath":"vendor/src/github.com/apcera/termtables/table_test.go","Functions":[{"Uniquefunname":"func DisplayFailedOutput(actual, expected string) string","Funname":"DisplayFailedOutput","Returntype":"string","Args":"actual, expected string"},{"Uniquefunname":"func TestCreateTable(t *testing.T)","Funname":"TestCreateTable","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestStyleResets(t *testing.T)","Funname":"TestStyleResets","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTableAlignPostsetting(t *testing.T)","Funname":"TestTableAlignPostsetting","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTableHeaderWidthAdjusts(t *testing.T)","Funname":"TestTableHeaderWidthAdjusts","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTableInMarkdown(t *testing.T)","Funname":"TestTableInMarkdown","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTableInUTF8(t *testing.T)","Funname":"TestTableInUTF8","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTableMissingCells(t *testing.T)","Funname":"TestTableMissingCells","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTableTitleWidthAdjusts(t *testing.T)","Funname":"TestTableTitleWidthAdjusts","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTableUnicodeUTF8AndSGR(t *testing.T)","Funname":"TestTableUnicodeUTF8AndSGR","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTableUnicodeWidths(t *testing.T)","Funname":"TestTableUnicodeWidths","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTableWidthHandling(t *testing.T)","Funname":"TestTableWidthHandling","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTableWidthHandling_SecondErrorCondition(t *testing.T)","Funname":"TestTableWidthHandling_SecondErrorCondition","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTableWithCombiningChars(t *testing.T)","Funname":"TestTableWithCombiningChars","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTableWithFullwidthChars(t *testing.T)","Funname":"TestTableWithFullwidthChars","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTableWithHeader(t *testing.T)","Funname":"TestTableWithHeader","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTableWithNoHeaders(t *testing.T)","Funname":"TestTableWithNoHeaders","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTitleUnicodeWidths(t *testing.T)","Funname":"TestTitleUnicodeWidths","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func checkRendersTo(t *testing.T, table *Table, expected string)","Funname":"checkRendersTo","Returntype":"","Args":"t *testing.T, table *Table, expected string"},{"Uniquefunname":"func DisplayFailedOutput(actual, expected string) string","Funname":"termtables.DisplayFailedOutput","Returntype":"string","Args":"actual, expected string"},{"Uniquefunname":"func TestCreateTable(t *testing.T)","Funname":"termtables.TestCreateTable","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestStyleResets(t *testing.T)","Funname":"termtables.TestStyleResets","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTableAlignPostsetting(t *testing.T)","Funname":"termtables.TestTableAlignPostsetting","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTableHeaderWidthAdjusts(t *testing.T)","Funname":"termtables.TestTableHeaderWidthAdjusts","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTableInMarkdown(t *testing.T)","Funname":"termtables.TestTableInMarkdown","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTableInUTF8(t *testing.T)","Funname":"termtables.TestTableInUTF8","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTableMissingCells(t *testing.T)","Funname":"termtables.TestTableMissingCells","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTableTitleWidthAdjusts(t *testing.T)","Funname":"termtables.TestTableTitleWidthAdjusts","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTableUnicodeUTF8AndSGR(t *testing.T)","Funname":"termtables.TestTableUnicodeUTF8AndSGR","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTableUnicodeWidths(t *testing.T)","Funname":"termtables.TestTableUnicodeWidths","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTableWidthHandling(t *testing.T)","Funname":"termtables.TestTableWidthHandling","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTableWidthHandling_SecondErrorCondition(t *testing.T)","Funname":"termtables.TestTableWidthHandling_SecondErrorCondition","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTableWithCombiningChars(t *testing.T)","Funname":"termtables.TestTableWithCombiningChars","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTableWithFullwidthChars(t *testing.T)","Funname":"termtables.TestTableWithFullwidthChars","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTableWithHeader(t *testing.T)","Funname":"termtables.TestTableWithHeader","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTableWithNoHeaders(t *testing.T)","Funname":"termtables.TestTableWithNoHeaders","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTitleUnicodeWidths(t *testing.T)","Funname":"termtables.TestTitleUnicodeWidths","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func checkRendersTo(t *testing.T, table *Table, expected string)","Funname":"termtables.checkRendersTo","Returntype":"","Args":"t *testing.T, table *Table, expected string"}],"Records":null}
{"Filepath":"vendor/src/github.com/apcera/termtables/locale/detect.go","Functions":[{"Uniquefunname":"func GetCharmap() string","Funname":"GetCharmap","Returntype":"string","Args":""},{"Uniquefunname":"func init()","Funname":"init","Returntype":"","Args":""},{"Uniquefunname":"func GetCharmap() string","Funname":"locale.GetCharmap","Returntype":"string","Args":""},{"Uniquefunname":"func init()","Funname":"locale.init","Returntype":"","Args":""}],"Records":null}
{"Filepath":"vendor/src/github.com/apcera/termtables/locale/windows.go","Functions":[{"Uniquefunname":"func GetCharmap() string","Funname":"GetCharmap","Returntype":"string","Args":""},{"Uniquefunname":"func GetCharmap() string","Funname":"locale.GetCharmap","Returntype":"string","Args":""}],"Records":null}
{"Filepath":"vendor/src/github.com/apcera/termtables/locale/wrapper.go","Functions":[{"Uniquefunname":"func main()","Funname":"main","Returntype":"","Args":""},{"Uniquefunname":"func main()","Funname":"main.main","Returntype":"","Args":""}],"Records":null}
{"Filepath":"vendor/src/github.com/apcera/termtables/term/env.go","Functions":[{"Uniquefunname":"func GetEnvWindowSize() *Size","Funname":"GetEnvWindowSize","Returntype":"*Size","Args":""},{"Uniquefunname":"func GetEnvWindowSize() *Size","Funname":"term.GetEnvWindowSize","Returntype":"*Size","Args":""}],"Records":null}
{"Filepath":"vendor/src/github.com/apcera/termtables/term/getsize.go","Functions":[{"Uniquefunname":"func GetSize() (*Size, error)","Funname":"GetSize","Returntype":"(*Size, error)","Args":""},{"Uniquefunname":"func GetSize() (*Size, error)","Funname":"term.GetSize","Returntype":"(*Size, error)","Args":""}],"Records":[{"Name":"struct:term.Size","Fields":["term.Size.Columns int","term.Size.Lines int"]}]}
{"Filepath":"vendor/src/github.com/apcera/termtables/term/sizes_other.go","Functions":[{"Uniquefunname":"func GetTerminalWindowSize(file *os.File) (*Size, error)","Funname":"GetTerminalWindowSize","Returntype":"(*Size, error)","Args":"file *os.File"},{"Uniquefunname":"func GetTerminalWindowSize(file *os.File) (*Size, error)","Funname":"term.GetTerminalWindowSize","Returntype":"(*Size, error)","Args":"file *os.File"}],"Records":[{"Name":"var:term","Fields":["term.ErrNoPlatformSizes"]}]}
{"Filepath":"vendor/src/github.com/apcera/termtables/term/sizes_unix.go","Functions":[{"Uniquefunname":"func GetTerminalWindowSize(file *os.File) (*Size, error)","Funname":"GetTerminalWindowSize","Returntype":"(*Size, error)","Args":"file *os.File"},{"Uniquefunname":"func GetTerminalWindowSize(file *os.File) (*Size, error)","Funname":"term.GetTerminalWindowSize","Returntype":"(*Size, error)","Args":"file *os.File"}],"Records":[{"Name":"var:term","Fields":["term.ErrGetWinsizeFailed"]}]}
{"Filepath":"vendor/src/github.com/apcera/termtables/term/wrapper.go","Functions":[{"Uniquefunname":"func main()","Funname":"main","Returntype":"","Args":""},{"Uniquefunname":"func main()","Funname":"main.main","Returntype":"","Args":""}],"Records":null}
{"Filepath":"vendor/src/github.com/cihub/seelog/behavior_adaptive_test.go","Functions":[{"Uniquefunname":"func Test_Adaptive(t *testing.T)","Funname":"Test_Adaptive","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func countSequencedRowsInFile(filePath string) (int64, error)","Funname":"countSequencedRowsInFile","Returntype":"(int64, error)","Args":"filePath string"},{"Uniquefunname":"func Test_Adaptive(t *testing.T)","Funname":"seelog.Test_Adaptive","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func countSequencedRowsInFile(filePath string) (int64, error)","Funname":"seelog.countSequencedRowsInFile","Returntype":"(int64, error)","Args":"filePath string"}],"Records":null}
{"Filepath":"vendor/src/github.com/cihub/seelog/behavior_adaptivelogger.go","Functions":[{"Uniquefunname":"func NewAsyncAdaptiveLogger(config *logConfig, minInterval time.Duration, maxInterval time.Duration, criticalMsgCount uint32)(*asyncAdaptiveLogger, error)","Funname":"NewAsyncAdaptiveLogger","Returntype":"(*asyncAdaptiveLogger, error)","Args":"config *logConfig, minInterval time.Duration, maxInterval time.Duration, criticalMsgCount uint32"},{"Uniquefunname":"func (asnAdaptiveLogger *asyncAdaptiveLogger) calcAdaptiveInterval(msgCount int) time.Duration","Funname":"calcAdaptiveInterval","Returntype":"time.Duration","Args":"msgCount int"},{"Uniquefunname":"func (asnAdaptiveLogger *asyncAdaptiveLogger) processItem() (closed bool, itemCount int)","Funname":"processItem","Returntype":"(closed bool, itemCount int)","Args":""},{"Uniquefunname":"func (asnAdaptiveLogger *asyncAdaptiveLogger) processQueue()","Funname":"processQueue","Returntype":"","Args":""},{"Uniquefunname":"func seelog.NewAsyncAdaptiveLogger(config *logConfig, minInterval time.Duration, maxInterval time.Duration, criticalMsgCount uint32)(*asyncAdaptiveLogger, error)","Funname":"seelog.NewAsyncAdaptiveLogger","Returntype":"(*asyncAdaptiveLogger, error)","Args":"config *logConfig, minInterval time.Duration, maxInterval time.Duration, criticalMsgCount uint32"},{"Uniquefunname":"func (asnAdaptiveLogger *asyncAdaptiveLogger) calcAdaptiveInterval(msgCount int) time.Duration","Funname":"seelog.asyncAdaptiveLogger.calcAdaptiveInterval","Returntype":"time.Duration","Args":"msgCount int"},{"Uniquefunname":"func (asnAdaptiveLogger *asyncAdaptiveLogger) processItem() (closed bool, itemCount int)","Funname":"seelog.asyncAdaptiveLogger.processItem","Returntype":"(closed bool, itemCount int)","Args":""},{"Uniquefunname":"func (asnAdaptiveLogger *asyncAdaptiveLogger) processQueue()","Funname":"seelog.asyncAdaptiveLogger.processQueue","Returntype":"","Args":""}],"Records":[{"Name":"var:seelog","Fields":["seelog.adaptiveLoggerMaxCriticalMsgCount","seelog.adaptiveLoggerMaxInterval"]},{"Name":"struct:seelog.asyncAdaptiveLogger","Fields":["seelog.asyncAdaptiveLogger.criticalMsgCount uint32","seelog.asyncAdaptiveLogger.maxInterval time.Duration","seelog.asyncAdaptiveLogger.minInterval time.Duration"]}]}
{"Filepath":"vendor/src/github.com/cihub/seelog/behavior_asynclogger.go","Functions":[{"Uniquefunname":"func (asnLogger *asyncLogger) Close()","Funname":"Close","Returntype":"","Args":""},{"Uniquefunname":"func (asnLogger *asyncLogger) Flush()","Funname":"Flush","Returntype":"","Args":""},{"Uniquefunname":"func addMsgToQueue(level LogLevel, context LogContextInterface, message fmt.Stringer)","Funname":"addMsgToQueue","Returntype":"","Args":"level LogLevel, context LogContextInterface, message fmt.Stringer"},{"Uniquefunname":"func (asnLogger *asyncLogger) flushQueue(lockNeeded bool)","Funname":"flushQueue","Returntype":"","Args":"lockNeeded bool"},{"Uniquefunname":"func innerLog(level LogLevel, context LogContextInterface, message fmt.Stringer)","Funname":"innerLog","Returntype":"","Args":"level LogLevel, context LogContextInterface, message fmt.Stringer"},{"Uniquefunname":"func newAsyncLogger(config *logConfig) *asyncLogger","Funname":"newAsyncLogger","Returntype":"*asyncLogger","Args":"config *logConfig"},{"Uniquefunname":"func (asnLogger *asyncLogger) processQueueElement()","Funname":"processQueueElement","Returntype":"","Args":""},{"Uniquefunname":"func (asnLogger *asyncLogger) Close()","Funname":"seelog.asyncLogger.Close","Returntype":"","Args":""},{"Uniquefunname":"func (asnLogger *asyncLogger) Flush()","Funname":"seelog.asyncLogger.Flush","Returntype":"","Args":""},{"Uniquefunname":"func seelog.asyncLogger.addMsgToQueue(level LogLevel, context LogContextInterface, message fmt.Stringer)","Funname":"seelog.asyncLogger.addMsgToQueue","Returntype":"","Args":"level LogLevel, context LogContextInterface, message fmt.Stringer"},{"Uniquefunname":"func (asnLogger *asyncLogger) flushQueue(lockNeeded bool)","Funname":"seelog.asyncLogger.flushQueue","Returntype":"","Args":"lockNeeded bool"},{"Uniquefunname":"func seelog.asyncLogger.innerLog(level LogLevel, context LogContextInterface, message fmt.Stringer)","Funname":"seelog.asyncLogger.innerLog","Returntype":"","Args":"level LogLevel, context LogContextInterface, message fmt.Stringer"},{"Uniquefunname":"func (asnLogger *asyncLogger) processQueueElement()","Funname":"seelog.asyncLogger.processQueueElement","Returntype":"","Args":""},{"Uniquefunname":"func newAsyncLogger(config *logConfig) *asyncLogger","Funname":"seelog.newAsyncLogger","Returntype":"*asyncLogger","Args":"config *logConfig"}],"Records":[{"Name":"const:seelog","Fields":["seelog.MaxQueueSize"]},{"Name":"struct:seelog.asyncLogger","Fields":["seelog.asyncLogger.msgQueue *list.List","seelog.asyncLogger.queueHasElements *sync.Cond"]},{"Name":"struct:seelog.msgQueueItem","Fields":["seelog.msgQueueItem.context LogContextInterface","seelog.msgQueueItem.level LogLevel","seelog.msgQueueItem.message fmt.Stringer"]}]}
{"Filepath":"vendor/src/github.com/cihub/seelog/behavior_asyncloop_test.go","Functions":[{"Uniquefunname":"func Test_Asyncloop(t *testing.T)","Funname":"Test_Asyncloop","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func Test_AsyncloopOff(t *testing.T)","Funname":"Test_AsyncloopOff","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func Test_Asyncloop(t *testing.T)","Funname":"seelog.Test_Asyncloop","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func Test_AsyncloopOff(t *testing.T)","Funname":"seelog.Test_AsyncloopOff","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/cihub/seelog/behavior_asynclooplogger.go","Functions":[{"Uniquefunname":"func NewAsyncLoopLogger(config *logConfig) *asyncLoopLogger","Funname":"NewAsyncLoopLogger","Returntype":"*asyncLoopLogger","Args":"config *logConfig"},{"Uniquefunname":"func (asnLoopLogger *asyncLoopLogger) processItem() (closed bool)","Funname":"processItem","Returntype":"(closed bool)","Args":""},{"Uniquefunname":"func (asnLoopLogger *asyncLoopLogger) processQueue()","Funname":"processQueue","Returntype":"","Args":""},{"Uniquefunname":"func NewAsyncLoopLogger(config *logConfig) *asyncLoopLogger","Funname":"seelog.NewAsyncLoopLogger","Returntype":"*asyncLoopLogger","Args":"config *logConfig"},{"Uniquefunname":"func (asnLoopLogger *asyncLoopLogger) processItem() (closed bool)","Funname":"seelog.asyncLoopLogger.processItem","Returntype":"(closed bool)","Args":""},{"Uniquefunname":"func (asnLoopLogger *asyncLoopLogger) processQueue()","Funname":"seelog.asyncLoopLogger.processQueue","Returntype":"","Args":""}],"Records":null}
{"Filepath":"vendor/src/github.com/cihub/seelog/behavior_asynctimer_test.go","Functions":[{"Uniquefunname":"func Test_Asynctimer(t *testing.T)","Funname":"Test_Asynctimer","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func Test_Asynctimer(t *testing.T)","Funname":"seelog.Test_Asynctimer","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/cihub/seelog/behavior_asynctimerlogger.go","Functions":[{"Uniquefunname":"func NewAsyncTimerLogger(config *logConfig, interval time.Duration) (*asyncTimerLogger, error)","Funname":"NewAsyncTimerLogger","Returntype":"(*asyncTimerLogger, error)","Args":"config *logConfig, interval time.Duration"},{"Uniquefunname":"func (asnTimerLogger *asyncTimerLogger) processItem() (closed bool)","Funname":"processItem","Returntype":"(closed bool)","Args":""},{"Uniquefunname":"func (asnTimerLogger *asyncTimerLogger) processQueue()","Funname":"processQueue","Returntype":"","Args":""},{"Uniquefunname":"func NewAsyncTimerLogger(config *logConfig, interval time.Duration) (*asyncTimerLogger, error)","Funname":"seelog.NewAsyncTimerLogger","Returntype":"(*asyncTimerLogger, error)","Args":"config *logConfig, interval time.Duration"},{"Uniquefunname":"func (asnTimerLogger *asyncTimerLogger) processItem() (closed bool)","Funname":"seelog.asyncTimerLogger.processItem","Returntype":"(closed bool)","Args":""},{"Uniquefunname":"func (asnTimerLogger *asyncTimerLogger) processQueue()","Funname":"seelog.asyncTimerLogger.processQueue","Returntype":"","Args":""}],"Records":[{"Name":"struct:seelog.asyncTimerLogger","Fields":["seelog.asyncTimerLogger.interval time.Duration"]}]}
{"Filepath":"vendor/src/github.com/cihub/seelog/behavior_synclogger.go","Functions":[{"Uniquefunname":"func (syncLogger *syncLogger) Close()","Funname":"Close","Returntype":"","Args":""},{"Uniquefunname":"func (syncLogger *syncLogger) Flush()","Funname":"Flush","Returntype":"","Args":""},{"Uniquefunname":"func NewSyncLogger(config *logConfig) *syncLogger","Funname":"NewSyncLogger","Returntype":"*syncLogger","Args":"config *logConfig"},{"Uniquefunname":"func innerLog(level LogLevel, context LogContextInterface, message fmt.Stringer)","Funname":"innerLog","Returntype":"","Args":"level LogLevel, context LogContextInterface, message fmt.Stringer"},{"Uniquefunname":"func NewSyncLogger(config *logConfig) *syncLogger","Funname":"seelog.NewSyncLogger","Returntype":"*syncLogger","Args":"config *logConfig"},{"Uniquefunname":"func (syncLogger *syncLogger) Close()","Funname":"seelog.syncLogger.Close","Returntype":"","Args":""},{"Uniquefunname":"func (syncLogger *syncLogger) Flush()","Funname":"seelog.syncLogger.Flush","Returntype":"","Args":""},{"Uniquefunname":"func seelog.syncLogger.innerLog(level LogLevel, context LogContextInterface, message fmt.Stringer)","Funname":"seelog.syncLogger.innerLog","Returntype":"","Args":"level LogLevel, context LogContextInterface, message fmt.Stringer"}],"Records":null}
{"Filepath":"vendor/src/github.com/cihub/seelog/behavior_synclogger_test.go","Functions":[{"Uniquefunname":"func Test_Sync(t *testing.T)","Funname":"Test_Sync","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func Test_Sync(t *testing.T)","Funname":"seelog.Test_Sync","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/cihub/seelog/cfg_config.go","Functions":[{"Uniquefunname":"func LoggerFromConfigAsBytes(data []byte) (LoggerInterface, error)","Funname":"LoggerFromConfigAsBytes","Returntype":"(LoggerInterface, error)","Args":"data []byte"},{"Uniquefunname":"func LoggerFromConfigAsFile(fileName string) (LoggerInterface, error)","Funname":"LoggerFromConfigAsFile","Returntype":"(LoggerInterface, error)","Args":"fileName string"},{"Uniquefunname":"func LoggerFromConfigAsString(data string) (LoggerInterface, error)","Funname":"LoggerFromConfigAsString","Returntype":"(LoggerInterface, error)","Args":"data string"},{"Uniquefunname":"func LoggerFromCustomReceiver(receiver CustomReceiver) (LoggerInterface, error)","Funname":"LoggerFromCustomReceiver","Returntype":"(LoggerInterface, error)","Args":"receiver CustomReceiver"},{"Uniquefunname":"func LoggerFromParamConfigAsBytes(data []byte, parserParams *cfgParseParams)(LoggerInterface, error)","Funname":"LoggerFromParamConfigAsBytes","Returntype":"(LoggerInterface, error)","Args":"data []byte, parserParams *cfgParseParams"},{"Uniquefunname":"func LoggerFromParamConfigAsFile(fileName string, parserParams *cfgParseParams)(LoggerInterface, error)","Funname":"LoggerFromParamConfigAsFile","Returntype":"(LoggerInterface, error)","Args":"fileName string, parserParams *cfgParseParams"},{"Uniquefunname":"func LoggerFromParamConfigAsString(data string, parserParams *cfgParseParams)(LoggerInterface, error)","Funname":"LoggerFromParamConfigAsString","Returntype":"(LoggerInterface, error)","Args":"data string, parserParams *cfgParseParams"},{"Uniquefunname":"func LoggerFromWriterWithMinLevel(output io.Writer, minLevel LogLevel)(LoggerInterface, error)","Funname":"LoggerFromWriterWithMinLevel","Returntype":"(LoggerInterface, error)","Args":"output io.Writer, minLevel LogLevel"},{"Uniquefunname":"func LoggerFromWriterWithMinLevelAndFormat(output io.Writer, minLevel LogLevel, format string)(LoggerInterface, error)","Funname":"LoggerFromWriterWithMinLevelAndFormat","Returntype":"(LoggerInterface, error)","Args":"output io.Writer, minLevel LogLevel, format string"},{"Uniquefunname":"func LoggerFromXMLDecoder(xmlParser *xml.Decoder, rootNode xml.Token) (LoggerInterface, error)","Funname":"LoggerFromXMLDecoder","Returntype":"(LoggerInterface, error)","Args":"xmlParser *xml.Decoder, rootNode xml.Token"},{"Uniquefunname":"func LoggerFromConfigAsBytes(data []byte) (LoggerInterface, error)","Funname":"seelog.LoggerFromConfigAsBytes","Returntype":"(LoggerInterface, error)","Args":"data []byte"},{"Uniquefunname":"func LoggerFromConfigAsFile(fileName string) (LoggerInterface, error)","Funname":"seelog.LoggerFromConfigAsFile","Returntype":"(LoggerInterface, error)","Args":"fileName string"},{"Uniquefunname":"func LoggerFromConfigAsString(data string) (LoggerInterface, error)","Funname":"seelog.LoggerFromConfigAsString","Returntype":"(LoggerInterface, error)","Args":"data string"},{"Uniquefunname":"func LoggerFromCustomReceiver(receiver CustomReceiver) (LoggerInterface, error)","Funname":"seelog.LoggerFromCustomReceiver","Returntype":"(LoggerInterface, error)","Args":"receiver CustomReceiver"},{"Uniquefunname":"func seelog.LoggerFromParamConfigAsBytes(data []byte, parserParams *cfgParseParams)(LoggerInterface, error)","Funname":"seelog.LoggerFromParamConfigAsBytes","Returntype":"(LoggerInterface, error)","Args":"data []byte, parserParams *cfgParseParams"},{"Uniquefunname":"func seelog.LoggerFromParamConfigAsFile(fileName string, parserParams *cfgParseParams)(LoggerInterface, error)","Funname":"seelog.LoggerFromParamConfigAsFile","Returntype":"(LoggerInterface, error)","Args":"fileName string, parserParams *cfgParseParams"},{"Uniquefunname":"func seelog.LoggerFromParamConfigAsString(data string, parserParams *cfgParseParams)(LoggerInterface, error)","Funname":"seelog.LoggerFromParamConfigAsString","Returntype":"(LoggerInterface, error)","Args":"data string, parserParams *cfgParseParams"},{"Uniquefunname":"func seelog.LoggerFromWriterWithMinLevel(output io.Writer, minLevel LogLevel)(LoggerInterface, error)","Funname":"seelog.LoggerFromWriterWithMinLevel","Returntype":"(LoggerInterface, error)","Args":"output io.Writer, minLevel LogLevel"},{"Uniquefunname":"func seelog.LoggerFromWriterWithMinLevelAndFormat(output io.Writer, minLevel LogLevel, format string)(LoggerInterface, error)","Funname":"seelog.LoggerFromWriterWithMinLevelAndFormat","Returntype":"(LoggerInterface, error)","Args":"output io.Writer, minLevel LogLevel, format string"},{"Uniquefunname":"func LoggerFromXMLDecoder(xmlParser *xml.Decoder, rootNode xml.Token) (LoggerInterface, error)","Funname":"seelog.LoggerFromXMLDecoder","Returntype":"(LoggerInterface, error)","Args":"xmlParser *xml.Decoder, rootNode xml.Token"}],"Records":null}
{"Filepath":"vendor/src/github.com/cihub/seelog/cfg_errors.go","Functions":[{"Uniquefunname":"func newMissingArgumentError(nodeName, attrName string) *missingArgumentError","Funname":"newMissingArgumentError","Returntype":"*missingArgumentError","Args":"nodeName, attrName string"},{"Uniquefunname":"func newUnexpectedAttributeError(nodeName, attr string) *unexpectedAttributeError","Funname":"newUnexpectedAttributeError","Returntype":"*unexpectedAttributeError","Args":"nodeName, attr string"},{"Uniquefunname":"func newUnexpectedChildElementError(msg string) *unexpectedChildElementError","Funname":"newUnexpectedChildElementError","Returntype":"*unexpectedChildElementError","Args":"msg string"},{"Uniquefunname":"func newMissingArgumentError(nodeName, attrName string) *missingArgumentError","Funname":"seelog.newMissingArgumentError","Returntype":"*missingArgumentError","Args":"nodeName, attrName string"},{"Uniquefunname":"func newUnexpectedAttributeError(nodeName, attr string) *unexpectedAttributeError","Funname":"seelog.newUnexpectedAttributeError","Returntype":"*unexpectedAttributeError","Args":"nodeName, attr string"},{"Uniquefunname":"func newUnexpectedChildElementError(msg string) *unexpectedChildElementError","Funname":"seelog.newUnexpectedChildElementError","Returntype":"*unexpectedChildElementError","Args":"msg string"}],"Records":[{"Name":"var:seelog","Fields":["seelog.errNodeCannotHaveChildren","seelog.errNodeMustHaveChildren"]}]}
{"Filepath":"vendor/src/github.com/cihub/seelog/cfg_logconfig.go","Functions":[{"Uniquefunname":"func (config *logConfig) IsAllowed(level LogLevel, context LogContextInterface) bool","Funname":"IsAllowed","Returntype":"bool","Args":"level LogLevel, context LogContextInterface"},{"Uniquefunname":"func NewLoggerConfig(c logLevelConstraints, e []*LogLevelException, d dispatcherInterface)*logConfig","Funname":"NewLoggerConfig","Returntype":"*logConfig","Args":"c logLevelConstraints, e []*LogLevelException, d dispatcherInterface"},{"Uniquefunname":"func getLoggerTypeFromString(logTypeString string) (level loggerTypeFromString, found bool)","Funname":"getLoggerTypeFromString","Returntype":"(level loggerTypeFromString, found bool)","Args":"logTypeString string"},{"Uniquefunname":"func newFullLoggerConfig(constraints logLevelConstraints, exceptions []*LogLevelException, rootDispatcher dispatcherInterface, logType loggerTypeFromString, logData interface{}, cfgParams *cfgParseParams)(*configForParsing, error)","Funname":"newFullLoggerConfig","Returntype":"(*configForParsing, error)","Args":"constraints logLevelConstraints, exceptions []*LogLevelException, rootDispatcher dispatcherInterface, logType loggerTypeFromString, logData interface{}, cfgParams *cfgParseParams"},{"Uniquefunname":"func seelog.NewLoggerConfig(c logLevelConstraints, e []*LogLevelException, d dispatcherInterface)*logConfig","Funname":"seelog.NewLoggerConfig","Returntype":"*logConfig","Args":"c logLevelConstraints, e []*LogLevelException, d dispatcherInterface"},{"Uniquefunname":"func getLoggerTypeFromString(logTypeString string) (level loggerTypeFromString, found bool)","Funname":"seelog.getLoggerTypeFromString","Returntype":"(level loggerTypeFromString, found bool)","Args":"logTypeString string"},{"Uniquefunname":"func (config *logConfig) IsAllowed(level LogLevel, context LogContextInterface) bool","Funname":"seelog.logConfig.IsAllowed","Returntype":"bool","Args":"level LogLevel, context LogContextInterface"},{"Uniquefunname":"func seelog.newFullLoggerConfig(constraints logLevelConstraints, exceptions []*LogLevelException, rootDispatcher dispatcherInterface, logType loggerTypeFromString, logData interface{}, cfgParams *cfgParseParams)(*configForParsing, error)","Funname":"seelog.newFullLoggerConfig","Returntype":"(*configForParsing, error)","Args":"constraints logLevelConstraints, exceptions []*LogLevelException, rootDispatcher dispatcherInterface, logType loggerTypeFromString, logData interface{}, cfgParams *cfgParseParams"}],"Records":[{"Name":"struct:seelog.adaptiveLoggerData","Fields":["seelog.adaptiveLoggerData.CriticalMsgCount uint32","seelog.adaptiveLoggerData.MaxInterval uint32","seelog.adaptiveLoggerData.MinInterval uint32"]},{"Name":"const:seelog","Fields":["seelog.adaptiveLoggerTypeFromString","seelog.adaptiveLoggerTypeFromStringStr","seelog.asyncLooploggerTypeFromString","seelog.asyncTimerloggerTypeFromString","seelog.asyncTimerloggerTypeFromStringStr","seelog.asyncloggerTypeFromStringStr","seelog.defaultloggerTypeFromString","seelog.syncloggerTypeFromString","seelog.syncloggerTypeFromStringStr"]},{"Name":"struct:seelog.asyncTimerLoggerData","Fields":["seelog.asyncTimerLoggerData.AsyncInterval uint32"]},{"Name":"struct:seelog.configForParsing","Fields":["seelog.configForParsing.LogType loggerTypeFromString","seelog.configForParsing.LoggerData interface{}","seelog.configForParsing.Params *cfgParseParams"]},{"Name":"struct:seelog.logConfig","Fields":["seelog.logConfig.Constraints logLevelConstraints","seelog.logConfig.Exceptions []*LogLevelException","seelog.logConfig.RootDispatcher dispatcherInterface"]},{"Name":"var:seelog","Fields":["seelog.loggerTypeToStringRepresentations"]}]}
{"Filepath":"vendor/src/github.com/cihub/seelog/cfg_logconfig_test.go","Functions":[{"Uniquefunname":"func TestConfig(t *testing.T)","Funname":"TestConfig","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func getFirstContext() (LogContextInterface, error)","Funname":"getFirstContext","Returntype":"(LogContextInterface, error)","Args":""},{"Uniquefunname":"func getSecondContext() (LogContextInterface, error)","Funname":"getSecondContext","Returntype":"(LogContextInterface, error)","Args":""},{"Uniquefunname":"func TestConfig(t *testing.T)","Funname":"seelog.TestConfig","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func getFirstContext() (LogContextInterface, error)","Funname":"seelog.getFirstContext","Returntype":"(LogContextInterface, error)","Args":""},{"Uniquefunname":"func getSecondContext() (LogContextInterface, error)","Funname":"seelog.getSecondContext","Returntype":"(LogContextInterface, error)","Args":""}],"Records":null}
{"Filepath":"vendor/src/github.com/cihub/seelog/cfg_parser.go","Functions":[{"Uniquefunname":"func (cfg *cfgParseParams) String() string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func checkDistinctExceptions(exceptions []*LogLevelException) error","Funname":"checkDistinctExceptions","Returntype":"error","Args":"exceptions []*LogLevelException"},{"Uniquefunname":"func checkExpectedElements(node *xmlNode, elements ...expectedElementInfo) error","Funname":"checkExpectedElements","Returntype":"error","Args":"node *xmlNode, elements ...expectedElementInfo"},{"Uniquefunname":"func checkUnexpectedAttribute(node *xmlNode, expectedAttrs ...string) error","Funname":"checkUnexpectedAttribute","Returntype":"error","Args":"node *xmlNode, expectedAttrs ...string"},{"Uniquefunname":"func configFromReader(reader io.Reader) (*configForParsing, error)","Funname":"configFromReader","Returntype":"(*configForParsing, error)","Args":"reader io.Reader"},{"Uniquefunname":"func configFromReaderWithConfig(reader io.Reader, cfg *cfgParseParams)(*configForParsing, error)","Funname":"configFromReaderWithConfig","Returntype":"(*configForParsing, error)","Args":"reader io.Reader, cfg *cfgParseParams"},{"Uniquefunname":"func configFromXMLDecoder(xmlParser *xml.Decoder, rootNode xml.Token)(*configForParsing, error)","Funname":"configFromXMLDecoder","Returntype":"(*configForParsing, error)","Args":"xmlParser *xml.Decoder, rootNode xml.Token"},{"Uniquefunname":"func configFromXMLDecoderWithConfig(xmlParser *xml.Decoder, rootNode xml.Token, cfg *cfgParseParams)(*configForParsing, error)","Funname":"configFromXMLDecoderWithConfig","Returntype":"(*configForParsing, error)","Args":"xmlParser *xml.Decoder, rootNode xml.Token, cfg *cfgParseParams"},{"Uniquefunname":"func configFromXMLNodeWithConfig(config *xmlNode, cfg *cfgParseParams)(*configForParsing, error)","Funname":"configFromXMLNodeWithConfig","Returntype":"(*configForParsing, error)","Args":"config *xmlNode, cfg *cfgParseParams"},{"Uniquefunname":"func createConsoleWriter(node *xmlNode, formatFromParent *formatter, formats map[string]*formatter, cfg *cfgParseParams)(interface{}, error)","Funname":"createConsoleWriter","Returntype":"(interface{}, error)","Args":"node *xmlNode, formatFromParent *formatter, formats map[string]*formatter, cfg *cfgParseParams"},{"Uniquefunname":"func createCustomReceiver(node *xmlNode, formatFromParent *formatter, formats map[string]*formatter, cfg *cfgParseParams)(interface{}, error)","Funname":"createCustomReceiver","Returntype":"(interface{}, error)","Args":"node *xmlNode, formatFromParent *formatter, formats map[string]*formatter, cfg *cfgParseParams"},{"Uniquefunname":"func createFilter(node *xmlNode, formatFromParent *formatter, formats map[string]*formatter, cfg *cfgParseParams)(interface{}, error)","Funname":"createFilter","Returntype":"(interface{}, error)","Args":"node *xmlNode, formatFromParent *formatter, formats map[string]*formatter, cfg *cfgParseParams"},{"Uniquefunname":"func createInnerReceivers(node *xmlNode, format *formatter, formats map[string]*formatter, cfg *cfgParseParams)([]interface{}, error)","Funname":"createInnerReceivers","Returntype":"([]interface{}, error)","Args":"node *xmlNode, format *formatter, formats map[string]*formatter, cfg *cfgParseParams"},{"Uniquefunname":"func createRollingFileWriter(node *xmlNode, formatFromParent *formatter, formats map[string]*formatter, cfg *cfgParseParams)(interface{}, error)","Funname":"createRollingFileWriter","Returntype":"(interface{}, error)","Args":"node *xmlNode, formatFromParent *formatter, formats map[string]*formatter, cfg *cfgParseParams"},{"Uniquefunname":"func createSMTPWriter(node *xmlNode, formatFromParent *formatter, formats map[string]*formatter, cfg *cfgParseParams)(interface{}, error)","Funname":"createSMTPWriter","Returntype":"(interface{}, error)","Args":"node *xmlNode, formatFromParent *formatter, formats map[string]*formatter, cfg *cfgParseParams"},{"Uniquefunname":"func createSplitter(node *xmlNode, formatFromParent *formatter, formats map[string]*formatter, cfg *cfgParseParams)(interface{}, error)","Funname":"createSplitter","Returntype":"(interface{}, error)","Args":"node *xmlNode, formatFromParent *formatter, formats map[string]*formatter, cfg *cfgParseParams"},{"Uniquefunname":"func createbufferedWriter(node *xmlNode, formatFromParent *formatter, formats map[string]*formatter, cfg *cfgParseParams)(interface{}, error)","Funname":"createbufferedWriter","Returntype":"(interface{}, error)","Args":"node *xmlNode, formatFromParent *formatter, formats map[string]*formatter, cfg *cfgParseParams"},{"Uniquefunname":"func createconnWriter(node *xmlNode, formatFromParent *formatter, formats map[string]*formatter, cfg *cfgParseParams)(interface{}, error)","Funname":"createconnWriter","Returntype":"(interface{}, error)","Args":"node *xmlNode, formatFromParent *formatter, formats map[string]*formatter, cfg *cfgParseParams"},{"Uniquefunname":"func createfileWriter(node *xmlNode, formatFromParent *formatter, formats map[string]*formatter, cfg *cfgParseParams)(interface{}, error)","Funname":"createfileWriter","Returntype":"(interface{}, error)","Args":"node *xmlNode, formatFromParent *formatter, formats map[string]*formatter, cfg *cfgParseParams"},{"Uniquefunname":"func fillPredefinedFormats() error","Funname":"fillPredefinedFormats","Returntype":"error","Args":""},{"Uniquefunname":"func getConstraints(node *xmlNode) (logLevelConstraints, error)","Funname":"getConstraints","Returntype":"(logLevelConstraints, error)","Args":"node *xmlNode"},{"Uniquefunname":"func getCurrentFormat(node *xmlNode, formatFromParent *formatter, formats map[string]*formatter)(*formatter, error)","Funname":"getCurrentFormat","Returntype":"(*formatter, error)","Args":"node *xmlNode, formatFromParent *formatter, formats map[string]*formatter"},{"Uniquefunname":"func getExceptions(config *xmlNode) ([]*LogLevelException, error)","Funname":"getExceptions","Returntype":"([]*LogLevelException, error)","Args":"config *xmlNode"},{"Uniquefunname":"func getFormats(config *xmlNode) (map[string]*formatter, error)","Funname":"getFormats","Returntype":"(map[string]*formatter, error)","Args":"config *xmlNode"},{"Uniquefunname":"func getOutputsTree(config *xmlNode, formats map[string]*formatter, cfg *cfgParseParams)(dispatcherInterface, error)","Funname":"getOutputsTree","Returntype":"(dispatcherInterface, error)","Args":"config *xmlNode, formats map[string]*formatter, cfg *cfgParseParams"},{"Uniquefunname":"func getloggerTypeFromStringData(config *xmlNode)(logType loggerTypeFromString, logData interface{}, err error)","Funname":"getloggerTypeFromStringData","Returntype":"(logType loggerTypeFromString, logData interface{}, err error)","Args":"config *xmlNode"},{"Uniquefunname":"func init()","Funname":"init","Returntype":"","Args":""},{"Uniquefunname":"func mandatoryElement(name string) expectedElementInfo","Funname":"mandatoryElement","Returntype":"expectedElementInfo","Args":"name string"},{"Uniquefunname":"func multipleElements(name string) expectedElementInfo","Funname":"multipleElements","Returntype":"expectedElementInfo","Args":"name string"},{"Uniquefunname":"func multipleMandatoryElements(name string) expectedElementInfo","Funname":"multipleMandatoryElements","Returntype":"expectedElementInfo","Args":"name string"},{"Uniquefunname":"func optionalElement(name string) expectedElementInfo","Funname":"optionalElement","Returntype":"expectedElementInfo","Args":"name string"},{"Uniquefunname":"func parseLevels(str string) ([]LogLevel, error)","Funname":"parseLevels","Returntype":"([]LogLevel, error)","Args":"str string"},{"Uniquefunname":"func (cfg *cfgParseParams) String() string","Funname":"seelog.cfgParseParams.String","Returntype":"string","Args":""},{"Uniquefunname":"func checkDistinctExceptions(exceptions []*LogLevelException) error","Funname":"seelog.checkDistinctExceptions","Returntype":"error","Args":"exceptions []*LogLevelException"},{"Uniquefunname":"func checkExpectedElements(node *xmlNode, elements ...expectedElementInfo) error","Funname":"seelog.checkExpectedElements","Returntype":"error","Args":"node *xmlNode, elements ...expectedElementInfo"},{"Uniquefunname":"func checkUnexpectedAttribute(node *xmlNode, expectedAttrs ...string) error","Funname":"seelog.checkUnexpectedAttribute","Returntype":"error","Args":"node *xmlNode, expectedAttrs ...string"},{"Uniquefunname":"func configFromReader(reader io.Reader) (*configForParsing, error)","Funname":"seelog.configFromReader","Returntype":"(*configForParsing, error)","Args":"reader io.Reader"},{"Uniquefunname":"func seelog.configFromReaderWithConfig(reader io.Reader, cfg *cfgParseParams)(*configForParsing, error)","Funname":"seelog.configFromReaderWithConfig","Returntype":"(*configForParsing, error)","Args":"reader io.Reader, cfg *cfgParseParams"},{"Uniquefunname":"func seelog.configFromXMLDecoder(xmlParser *xml.Decoder, rootNode xml.Token)(*configForParsing, error)","Funname":"seelog.configFromXMLDecoder","Returntype":"(*configForParsing, error)","Args":"xmlParser *xml.Decoder, rootNode xml.Token"},{"Uniquefunname":"func seelog.configFromXMLDecoderWithConfig(xmlParser *xml.Decoder, rootNode xml.Token, cfg *cfgParseParams)(*configForParsing, error)","Funname":"seelog.configFromXMLDecoderWithConfig","Returntype":"(*configForParsing, error)","Args":"xmlParser *xml.Decoder, rootNode xml.Token, cfg *cfgParseParams"},{"Uniquefunname":"func seelog.configFromXMLNodeWithConfig(config *xmlNode, cfg *cfgParseParams)(*configForParsing, error)","Funname":"seelog.configFromXMLNodeWithConfig","Returntype":"(*configForParsing, error)","Args":"config *xmlNode, cfg *cfgParseParams"},{"Uniquefunname":"func seelog.createConsoleWriter(node *xmlNode, formatFromParent *formatter, formats map[string]*formatter, cfg *cfgParseParams)(interface{}, error)","Funname":"seelog.createConsoleWriter","Returntype":"(interface{}, error)","Args":"node *xmlNode, formatFromParent *formatter, formats map[string]*formatter, cfg *cfgParseParams"},{"Uniquefunname":"func seelog.createCustomReceiver(node *xmlNode, formatFromParent *formatter, formats map[string]*formatter, cfg *cfgParseParams)(interface{}, error)","Funname":"seelog.createCustomReceiver","Returntype":"(interface{}, error)","Args":"node *xmlNode, formatFromParent *formatter, formats map[string]*formatter, cfg *cfgParseParams"},{"Uniquefunname":"func seelog.createFilter(node *xmlNode, formatFromParent *formatter, formats map[string]*formatter, cfg *cfgParseParams)(interface{}, error)","Funname":"seelog.createFilter","Returntype":"(interface{}, error)","Args":"node *xmlNode, formatFromParent *formatter, formats map[string]*formatter, cfg *cfgParseParams"},{"Uniquefunname":"func seelog.createInnerReceivers(node *xmlNode, format *formatter, formats map[string]*formatter, cfg *cfgParseParams)([]interface{}, error)","Funname":"seelog.createInnerReceivers","Returntype":"([]interface{}, error)","Args":"node *xmlNode, format *formatter, formats map[string]*formatter, cfg *cfgParseParams"},{"Uniquefunname":"func seelog.createRollingFileWriter(node *xmlNode, formatFromParent *formatter, formats map[string]*formatter, cfg *cfgParseParams)(interface{}, error)","Funname":"seelog.createRollingFileWriter","Returntype":"(interface{}, error)","Args":"node *xmlNode, formatFromParent *formatter, formats map[string]*formatter, cfg *cfgParseParams"},{"Uniquefunname":"func seelog.createSMTPWriter(node *xmlNode, formatFromParent *formatter, formats map[string]*formatter, cfg *cfgParseParams)(interface{}, error)","Funname":"seelog.createSMTPWriter","Returntype":"(interface{}, error)","Args":"node *xmlNode, formatFromParent *formatter, formats map[string]*formatter, cfg *cfgParseParams"},{"Uniquefunname":"func seelog.createSplitter(node *xmlNode, formatFromParent *formatter, formats map[string]*formatter, cfg *cfgParseParams)(interface{}, error)","Funname":"seelog.createSplitter","Returntype":"(interface{}, error)","Args":"node *xmlNode, formatFromParent *formatter, formats map[string]*formatter, cfg *cfgParseParams"},{"Uniquefunname":"func seelog.createbufferedWriter(node *xmlNode, formatFromParent *formatter, formats map[string]*formatter, cfg *cfgParseParams)(interface{}, error)","Funname":"seelog.createbufferedWriter","Returntype":"(interface{}, error)","Args":"node *xmlNode, formatFromParent *formatter, formats map[string]*formatter, cfg *cfgParseParams"},{"Uniquefunname":"func seelog.createconnWriter(node *xmlNode, formatFromParent *formatter, formats map[string]*formatter, cfg *cfgParseParams)(interface{}, error)","Funname":"seelog.createconnWriter","Returntype":"(interface{}, error)","Args":"node *xmlNode, formatFromParent *formatter, formats map[string]*formatter, cfg *cfgParseParams"},{"Uniquefunname":"func seelog.createfileWriter(node *xmlNode, formatFromParent *formatter, formats map[string]*formatter, cfg *cfgParseParams)(interface{}, error)","Funname":"seelog.createfileWriter","Returntype":"(interface{}, error)","Args":"node *xmlNode, formatFromParent *formatter, formats map[string]*formatter, cfg *cfgParseParams"},{"Uniquefunname":"func fillPredefinedFormats() error","Funname":"seelog.fillPredefinedFormats","Returntype":"error","Args":""},{"Uniquefunname":"func getConstraints(node *xmlNode) (logLevelConstraints, error)","Funname":"seelog.getConstraints","Returntype":"(logLevelConstraints, error)","Args":"node *xmlNode"},{"Uniquefunname":"func seelog.getCurrentFormat(node *xmlNode, formatFromParent *formatter, formats map[string]*formatter)(*formatter, error)","Funname":"seelog.getCurrentFormat","Returntype":"(*formatter, error)","Args":"node *xmlNode, formatFromParent *formatter, formats map[string]*formatter"},{"Uniquefunname":"func getExceptions(config *xmlNode) ([]*LogLevelException, error)","Funname":"seelog.getExceptions","Returntype":"([]*LogLevelException, error)","Args":"config *xmlNode"},{"Uniquefunname":"func getFormats(config *xmlNode) (map[string]*formatter, error)","Funname":"seelog.getFormats","Returntype":"(map[string]*formatter, error)","Args":"config *xmlNode"},{"Uniquefunname":"func seelog.getOutputsTree(config *xmlNode, formats map[string]*formatter, cfg *cfgParseParams)(dispatcherInterface, error)","Funname":"seelog.getOutputsTree","Returntype":"(dispatcherInterface, error)","Args":"config *xmlNode, formats map[string]*formatter, cfg *cfgParseParams"},{"Uniquefunname":"func seelog.getloggerTypeFromStringData(config *xmlNode)(logType loggerTypeFromString, logData interface{}, err error)","Funname":"seelog.getloggerTypeFromStringData","Returntype":"(logType loggerTypeFromString, logData interface{}, err error)","Args":"config *xmlNode"},{"Uniquefunname":"func init()","Funname":"seelog.init","Returntype":"","Args":""},{"Uniquefunname":"func mandatoryElement(name string) expectedElementInfo","Funname":"seelog.mandatoryElement","Returntype":"expectedElementInfo","Args":"name string"},{"Uniquefunname":"func multipleElements(name string) expectedElementInfo","Funname":"seelog.multipleElements","Returntype":"expectedElementInfo","Args":"name string"},{"Uniquefunname":"func multipleMandatoryElements(name string) expectedElementInfo","Funname":"seelog.multipleMandatoryElements","Returntype":"expectedElementInfo","Args":"name string"},{"Uniquefunname":"func optionalElement(name string) expectedElementInfo","Funname":"seelog.optionalElement","Returntype":"expectedElementInfo","Args":"name string"},{"Uniquefunname":"func parseLevels(str string) ([]LogLevel, error)","Funname":"seelog.parseLevels","Returntype":"([]LogLevel, error)","Args":"str string"}],"Records":[{"Name":"const:seelog","Fields":["seelog.adaptLoggerCriticalMsgCountAttr","seelog.adaptLoggerMaxIntervalAttr","seelog.adaptLoggerMinIntervalAttr","seelog.addressID","seelog.asyncLoggerIntervalAttr","seelog.bufferedFlushPeriodAttr","seelog.bufferedSizeAttr","seelog.bufferedWriterID","seelog.cACertDirpathID","seelog.connWriterAddrAttr","seelog.connWriterID","seelog.connWriterInsecureSkipVerifyAttr","seelog.connWriterNetAttr","seelog.connWriterReconnectOnMsgAttr","seelog.connWriterUseTLSAttr","seelog.consoleWriterID","seelog.customNameAttrID","seelog.customNameDataAttrPrefix","seelog.customReceiverID","seelog.exceptionID","seelog.exceptionsID","seelog.filePatternID","seelog.fileWriterID","seelog.filterDispatcherID","seelog.filterLevelsAttrID","seelog.formatAttrID","seelog.formatID","seelog.formatKeyAttrID","seelog.formatsID","seelog.funcPatternID","seelog.hostNameID","seelog.hostPortID","seelog.levelsID","seelog.loggerTypeFromStringAttr","seelog.mailHeaderID","seelog.mailHeaderNameID","seelog.mailHeaderValueID","seelog.maxLevelID","seelog.minLevelID","seelog.outputFormatID","seelog.outputsID","seelog.pathID","seelog.predefinedPrefix","seelog.recipientID","seelog.rollingFileArchiveAttr","seelog.rollingFileArchivePathAttr","seelog.rollingFileDataPatternAttr","seelog.rollingFileMaxRollsAttr","seelog.rollingFileMaxSizeAttr","seelog.rollingFileNameModeAttr","seelog.rollingFilePathAttr","seelog.rollingFileTypeAttr","seelog.rollingfileWriterID","seelog.seelogConfigID","seelog.senderNameID","seelog.senderaddressID","seelog.smtpWriterID","seelog.splitterDispatcherID","seelog.subjectID","seelog.userNameID","seelog.userPassID"]},{"Name":"struct:seelog.cfgParseParams","Fields":["seelog.cfgParseParams.CustomReceiverProducers map[string]CustomReceiverProducer"]},{"Name":"var:seelog","Fields":["seelog.elementMap","seelog.predefinedFormats"]},{"Name":"struct:seelog.elementMapEntry","Fields":["seelog.elementMapEntry.constructor func(node *xmlNode, formatFromParent *formatter, formats map[string]*formatter, cfg *cfgParseParams) (interface{}, error)"]},{"Name":"struct:seelog.expectedElementInfo","Fields":["seelog.expectedElementInfo.mandatory bool","seelog.expectedElementInfo.multiple bool","seelog.expectedElementInfo.name string"]}]}
{"Filepath":"vendor/src/github.com/cihub/seelog/cfg_parser_test.go","Functions":[{"Uniquefunname":"func (cr *customTestReceiver) AfterParse(initArgs CustomReceiverInitArgs) error","Funname":"AfterParse","Returntype":"error","Args":"initArgs CustomReceiverInitArgs"},{"Uniquefunname":"func (cr *customTestReceiver) Close() error","Funname":"Close","Returntype":"error","Args":""},{"Uniquefunname":"func (cr *customTestReceiver) Flush()","Funname":"Flush","Returntype":"","Args":""},{"Uniquefunname":"func ReceiveMessage(message string, level LogLevel, context LogContextInterface)error","Funname":"ReceiveMessage","Returntype":"error","Args":"message string, level LogLevel, context LogContextInterface"},{"Uniquefunname":"func (cr *customTestReceiver) String() string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func TestParser(t *testing.T)","Funname":"TestParser","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func cleanupAfterCfgTest(t *testing.T)","Funname":"cleanupAfterCfgTest","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func configsAreEqual(conf1 *configForParsing, conf2 interface","Funname":"configsAreEqual","Returntype":"bool","Args":"conf1 *configForParsing, conf2 interface{}"},{"Uniquefunname":"func getParserTests() []parserTest","Funname":"getParserTests","Returntype":"[]parserTest","Args":""},{"Uniquefunname":"func getTestFileName(testName, postfix string) string","Funname":"getTestFileName","Returntype":"string","Args":"testName, postfix string"},{"Uniquefunname":"func parseTest(test parserTest, t *testing.T)","Funname":"parseTest","Returntype":"","Args":"test parserTest, t *testing.T"},{"Uniquefunname":"func TestParser(t *testing.T)","Funname":"seelog.TestParser","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func cleanupAfterCfgTest(t *testing.T)","Funname":"seelog.cleanupAfterCfgTest","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func configsAreEqual(conf1 *configForParsing, conf2 interface","Funname":"seelog.configsAreEqual","Returntype":"bool","Args":"conf1 *configForParsing, conf2 interface{}"},{"Uniquefunname":"func (cr *customTestReceiver) AfterParse(initArgs CustomReceiverInitArgs) error","Funname":"seelog.customTestReceiver.AfterParse","Returntype":"error","Args":"initArgs CustomReceiverInitArgs"},{"Uniquefunname":"func (cr *customTestReceiver) Close() error","Funname":"seelog.customTestReceiver.Close","Returntype":"error","Args":""},{"Uniquefunname":"func (cr *customTestReceiver) Flush()","Funname":"seelog.customTestReceiver.Flush","Returntype":"","Args":""},{"Uniquefunname":"func seelog.customTestReceiver.ReceiveMessage(message string, level LogLevel, context LogContextInterface)error","Funname":"seelog.customTestReceiver.ReceiveMessage","Returntype":"error","Args":"message string, level LogLevel, context LogContextInterface"},{"Uniquefunname":"func (cr *customTestReceiver) String() string","Funname":"seelog.customTestReceiver.String","Returntype":"string","Args":""},{"Uniquefunname":"func getParserTests() []parserTest","Funname":"seelog.getParserTests","Returntype":"[]parserTest","Args":""},{"Uniquefunname":"func getTestFileName(testName, postfix string) string","Funname":"seelog.getTestFileName","Returntype":"string","Args":"testName, postfix string"},{"Uniquefunname":"func parseTest(test parserTest, t *testing.T)","Funname":"seelog.parseTest","Returntype":"","Args":"test parserTest, t *testing.T"},{"Uniquefunname":"func testLogFileFilter(fn string) bool","Funname":"seelog.testLogFileFilter","Returntype":"bool","Args":"fn string"},{"Uniquefunname":"func testLogFileFilter(fn string) bool","Funname":"testLogFileFilter","Returntype":"bool","Args":"fn string"}],"Records":[{"Name":"struct:seelog.customTestReceiver","Fields":["seelog.customTestReceiver.co *customTestReceiverOutput"]},{"Name":"struct:seelog.customTestReceiverOutput","Fields":["seelog.customTestReceiverOutput.closed bool","seelog.customTestReceiverOutput.dataPassed string","seelog.customTestReceiverOutput.flushed bool","seelog.customTestReceiverOutput.initCalled bool","seelog.customTestReceiverOutput.levelOutput LogLevel","seelog.customTestReceiverOutput.messageOutput string"]},{"Name":"struct:seelog.parserTest","Fields":["seelog.parserTest.config string","seelog.parserTest.errorExpected bool","seelog.parserTest.expected *configForParsing","seelog.parserTest.parserConfig *cfgParseParams","seelog.parserTest.testName string"]},{"Name":"var:seelog","Fields":["seelog.parserTests","seelog.re"]}]}
{"Filepath":"vendor/src/github.com/cihub/seelog/common_constraints.go","Functions":[{"Uniquefunname":"func (listConstr *listConstraints) AllowedLevels() map[LogLevel]bool","Funname":"AllowedLevels","Returntype":"map[LogLevel]bool","Args":""},{"Uniquefunname":"func (listConstr *listConstraints) IsAllowed(level LogLevel) bool","Funname":"IsAllowed","Returntype":"bool","Args":"level LogLevel"},{"Uniquefunname":"func (minMaxConstr *minMaxConstraints) IsAllowed(level LogLevel) bool","Funname":"IsAllowed","Returntype":"bool","Args":"level LogLevel"},{"Uniquefunname":"func (offConstr *offConstraints) IsAllowed(level LogLevel) bool","Funname":"IsAllowed","Returntype":"bool","Args":"level LogLevel"},{"Uniquefunname":"func NewListConstraints(allowList []LogLevel) (*listConstraints, error)","Funname":"NewListConstraints","Returntype":"(*listConstraints, error)","Args":"allowList []LogLevel"},{"Uniquefunname":"func NewMinMaxConstraints(min LogLevel, max LogLevel) (*minMaxConstraints, error)","Funname":"NewMinMaxConstraints","Returntype":"(*minMaxConstraints, error)","Args":"min LogLevel, max LogLevel"},{"Uniquefunname":"func NewOffConstraints() (*offConstraints, error)","Funname":"NewOffConstraints","Returntype":"(*offConstraints, error)","Args":""},{"Uniquefunname":"func (listConstr *listConstraints) String() string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func (minMaxConstr *minMaxConstraints) String() string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func (offConstr *offConstraints) String() string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func createMapFromList(allowedList []LogLevel) (map[LogLevel]bool, error)","Funname":"createMapFromList","Returntype":"(map[LogLevel]bool, error)","Args":"allowedList []LogLevel"},{"Uniquefunname":"func NewListConstraints(allowList []LogLevel) (*listConstraints, error)","Funname":"seelog.NewListConstraints","Returntype":"(*listConstraints, error)","Args":"allowList []LogLevel"},{"Uniquefunname":"func NewMinMaxConstraints(min LogLevel, max LogLevel) (*minMaxConstraints, error)","Funname":"seelog.NewMinMaxConstraints","Returntype":"(*minMaxConstraints, error)","Args":"min LogLevel, max LogLevel"},{"Uniquefunname":"func NewOffConstraints() (*offConstraints, error)","Funname":"seelog.NewOffConstraints","Returntype":"(*offConstraints, error)","Args":""},{"Uniquefunname":"func createMapFromList(allowedList []LogLevel) (map[LogLevel]bool, error)","Funname":"seelog.createMapFromList","Returntype":"(map[LogLevel]bool, error)","Args":"allowedList []LogLevel"},{"Uniquefunname":"func (listConstr *listConstraints) AllowedLevels() map[LogLevel]bool","Funname":"seelog.listConstraints.AllowedLevels","Returntype":"map[LogLevel]bool","Args":""},{"Uniquefunname":"func (listConstr *listConstraints) IsAllowed(level LogLevel) bool","Funname":"seelog.listConstraints.IsAllowed","Returntype":"bool","Args":"level LogLevel"},{"Uniquefunname":"func (listConstr *listConstraints) String() string","Funname":"seelog.listConstraints.String","Returntype":"string","Args":""},{"Uniquefunname":"func (minMaxConstr *minMaxConstraints) IsAllowed(level LogLevel) bool","Funname":"seelog.minMaxConstraints.IsAllowed","Returntype":"bool","Args":"level LogLevel"},{"Uniquefunname":"func (minMaxConstr *minMaxConstraints) String() string","Funname":"seelog.minMaxConstraints.String","Returntype":"string","Args":""},{"Uniquefunname":"func (offConstr *offConstraints) IsAllowed(level LogLevel) bool","Funname":"seelog.offConstraints.IsAllowed","Returntype":"bool","Args":"level LogLevel"},{"Uniquefunname":"func (offConstr *offConstraints) String() string","Funname":"seelog.offConstraints.String","Returntype":"string","Args":""},{"Uniquefunname":"func validateOffLevel(allowedLevels map[LogLevel]bool) error","Funname":"seelog.validateOffLevel","Returntype":"error","Args":"allowedLevels map[LogLevel]bool"},{"Uniquefunname":"func validateOffLevel(allowedLevels map[LogLevel]bool) error","Funname":"validateOffLevel","Returntype":"error","Args":"allowedLevels map[LogLevel]bool"}],"Records":[{"Name":"struct:seelog.listConstraints","Fields":["seelog.listConstraints.allowedLevels map[LogLevel]bool"]},{"Name":"interface","Fields":["seelog.logLevelConstraints"]},{"Name":"struct:seelog.minMaxConstraints","Fields":["seelog.minMaxConstraints.max LogLevel","seelog.minMaxConstraints.min LogLevel"]}]}
{"Filepath":"vendor/src/github.com/cihub/seelog/common_constraints_test.go","Functions":[{"Uniquefunname":"func TestInvalidLogLevels(t *testing.T)","Funname":"TestInvalidLogLevels","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestInvalidminMaxConstraints(t *testing.T)","Funname":"TestInvalidminMaxConstraints","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestValidListoffConstraints(t *testing.T)","Funname":"TestValidListoffConstraints","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestValidlistConstraints(t *testing.T)","Funname":"TestValidlistConstraints","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestValidminMaxConstraints(t *testing.T)","Funname":"TestValidminMaxConstraints","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestlistConstraintsWithDuplicates(t *testing.T)","Funname":"TestlistConstraintsWithDuplicates","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestlistConstraintsWithOffInList(t *testing.T)","Funname":"TestlistConstraintsWithOffInList","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestInvalidLogLevels(t *testing.T)","Funname":"seelog.TestInvalidLogLevels","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestInvalidminMaxConstraints(t *testing.T)","Funname":"seelog.TestInvalidminMaxConstraints","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestValidListoffConstraints(t *testing.T)","Funname":"seelog.TestValidListoffConstraints","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestValidlistConstraints(t *testing.T)","Funname":"seelog.TestValidlistConstraints","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestValidminMaxConstraints(t *testing.T)","Funname":"seelog.TestValidminMaxConstraints","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestlistConstraintsWithDuplicates(t *testing.T)","Funname":"seelog.TestlistConstraintsWithDuplicates","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestlistConstraintsWithOffInList(t *testing.T)","Funname":"seelog.TestlistConstraintsWithOffInList","Returntype":"","Args":"t *testing.T"}],"Records":[{"Name":"var:seelog","Fields":["seelog.listTests","seelog.minMaxTests","seelog.offTests"]},{"Name":"struct:seelog.logLevelTestCase","Fields":["seelog.logLevelTestCase.allowed bool","seelog.logLevelTestCase.level LogLevel"]}]}
{"Filepath":"vendor/src/github.com/cihub/seelog/common_context.go","Functions":[{"Uniquefunname":"func (context *logContext) CallTime() time.Time","Funname":"CallTime","Returntype":"time.Time","Args":""},{"Uniquefunname":"func (errContext *errorContext) CallTime() time.Time","Funname":"CallTime","Returntype":"time.Time","Args":""},{"Uniquefunname":"func (context *logContext) CustomContext() interface","Funname":"CustomContext","Returntype":"interface{}","Args":""},{"Uniquefunname":"func (errContext *errorContext) CustomContext() interface","Funname":"CustomContext","Returntype":"interface{}","Args":""},{"Uniquefunname":"func (context *logContext) FileName() string","Funname":"FileName","Returntype":"string","Args":""},{"Uniquefunname":"func (errContext *errorContext) FileName() string","Funname":"FileName","Returntype":"string","Args":""},{"Uniquefunname":"func (context *logContext) FullPath() string","Funname":"FullPath","Returntype":"string","Args":""},{"Uniquefunname":"func (errContext *errorContext) FullPath() string","Funname":"FullPath","Returntype":"string","Args":""},{"Uniquefunname":"func (context *logContext) Func() string","Funname":"Func","Returntype":"string","Args":""},{"Uniquefunname":"func (errContext *errorContext) Func() string","Funname":"Func","Returntype":"string","Args":""},{"Uniquefunname":"func (context *logContext) IsValid() bool","Funname":"IsValid","Returntype":"bool","Args":""},{"Uniquefunname":"func (errContext *errorContext) IsValid() bool","Funname":"IsValid","Returntype":"bool","Args":""},{"Uniquefunname":"func (context *logContext) Line() int","Funname":"Line","Returntype":"int","Args":""},{"Uniquefunname":"func (errContext *errorContext) Line() int","Funname":"Line","Returntype":"int","Args":""},{"Uniquefunname":"func (context *logContext) ShortPath() string","Funname":"ShortPath","Returntype":"string","Args":""},{"Uniquefunname":"func (errContext *errorContext) ShortPath() string","Funname":"ShortPath","Returntype":"string","Args":""},{"Uniquefunname":"func currentContext(custom interface","Funname":"currentContext","Returntype":"(LogContextInterface, error)","Args":"custom interface{}"},{"Uniquefunname":"func extractCallerInfo(skip int)(fullPath string, shortPath string, funcName string, line int, err error)","Funname":"extractCallerInfo","Returntype":"(fullPath string, shortPath string, funcName string, line int, err error)","Args":"skip int"},{"Uniquefunname":"func (errContext *errorContext) getErrorText(prefix string) string","Funname":"getErrorText","Returntype":"string","Args":"prefix string"},{"Uniquefunname":"func init()","Funname":"init","Returntype":"","Args":""},{"Uniquefunname":"func currentContext(custom interface","Funname":"seelog.currentContext","Returntype":"(LogContextInterface, error)","Args":"custom interface{}"},{"Uniquefunname":"func (errContext *errorContext) CallTime() time.Time","Funname":"seelog.errorContext.CallTime","Returntype":"time.Time","Args":""},{"Uniquefunname":"func (errContext *errorContext) CustomContext() interface","Funname":"seelog.errorContext.CustomContext","Returntype":"interface{}","Args":""},{"Uniquefunname":"func (errContext *errorContext) FileName() string","Funname":"seelog.errorContext.FileName","Returntype":"string","Args":""},{"Uniquefunname":"func (errContext *errorContext) FullPath() string","Funname":"seelog.errorContext.FullPath","Returntype":"string","Args":""},{"Uniquefunname":"func (errContext *errorContext) Func() string","Funname":"seelog.errorContext.Func","Returntype":"string","Args":""},{"Uniquefunname":"func (errContext *errorContext) IsValid() bool","Funname":"seelog.errorContext.IsValid","Returntype":"bool","Args":""},{"Uniquefunname":"func (errContext *errorContext) Line() int","Funname":"seelog.errorContext.Line","Returntype":"int","Args":""},{"Uniquefunname":"func (errContext *errorContext) ShortPath() string","Funname":"seelog.errorContext.ShortPath","Returntype":"string","Args":""},{"Uniquefunname":"func (errContext *errorContext) getErrorText(prefix string) string","Funname":"seelog.errorContext.getErrorText","Returntype":"string","Args":"prefix string"},{"Uniquefunname":"func seelog.extractCallerInfo(skip int)(fullPath string, shortPath string, funcName string, line int, err error)","Funname":"seelog.extractCallerInfo","Returntype":"(fullPath string, shortPath string, funcName string, line int, err error)","Args":"skip int"},{"Uniquefunname":"func init()","Funname":"seelog.init","Returntype":"","Args":""},{"Uniquefunname":"func (context *logContext) CallTime() time.Time","Funname":"seelog.logContext.CallTime","Returntype":"time.Time","Args":""},{"Uniquefunname":"func (context *logContext) CustomContext() interface","Funname":"seelog.logContext.CustomContext","Returntype":"interface{}","Args":""},{"Uniquefunname":"func (context *logContext) FileName() string","Funname":"seelog.logContext.FileName","Returntype":"string","Args":""},{"Uniquefunname":"func (context *logContext) FullPath() string","Funname":"seelog.logContext.FullPath","Returntype":"string","Args":""},{"Uniquefunname":"func (context *logContext) Func() string","Funname":"seelog.logContext.Func","Returntype":"string","Args":""},{"Uniquefunname":"func (context *logContext) IsValid() bool","Funname":"seelog.logContext.IsValid","Returntype":"bool","Args":""},{"Uniquefunname":"func (context *logContext) Line() int","Funname":"seelog.logContext.Line","Returntype":"int","Args":""},{"Uniquefunname":"func (context *logContext) ShortPath() string","Funname":"seelog.logContext.ShortPath","Returntype":"string","Args":""},{"Uniquefunname":"func specifyContext(skip int, custom interface","Funname":"seelog.specifyContext","Returntype":"(LogContextInterface, error)","Args":"skip int, custom interface{}"},{"Uniquefunname":"func specifyContext(skip int, custom interface","Funname":"specifyContext","Returntype":"(LogContextInterface, error)","Args":"skip int, custom interface{}"}],"Records":[{"Name":"interface","Fields":["seelog.LogContextInterface"]},{"Name":"struct:seelog.errorContext","Fields":["seelog.errorContext.err error","seelog.errorContext.errorTime time.Time"]},{"Name":"struct:seelog.logContext","Fields":["seelog.logContext.callTime time.Time","seelog.logContext.custom interface{}","seelog.logContext.fileName string","seelog.logContext.fullPath string","seelog.logContext.funcName string","seelog.logContext.line int","seelog.logContext.shortPath string"]},{"Name":"var:seelog","Fields":["seelog.workingDir"]}]}
{"Filepath":"vendor/src/github.com/cihub/seelog/common_context_test.go","Functions":[{"Uniquefunname":"func TestContext(t *testing.T)","Funname":"TestContext","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestCustomContext(t *testing.T)","Funname":"TestCustomContext","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestInnerContext(t *testing.T)","Funname":"TestInnerContext","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func init()","Funname":"init","Returntype":"","Args":""},{"Uniquefunname":"func innerContext() (context LogContextInterface, err error)","Funname":"innerContext","Returntype":"(context LogContextInterface, err error)","Args":""},{"Uniquefunname":"func TestContext(t *testing.T)","Funname":"seelog.TestContext","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestCustomContext(t *testing.T)","Funname":"seelog.TestCustomContext","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestInnerContext(t *testing.T)","Funname":"seelog.TestInnerContext","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func init()","Funname":"seelog.init","Returntype":"","Args":""},{"Uniquefunname":"func innerContext() (context LogContextInterface, err error)","Funname":"seelog.innerContext","Returntype":"(context LogContextInterface, err error)","Args":""}],"Records":[{"Name":"var:seelog","Fields":["seelog.commonPrefix","seelog.testFullPath"]},{"Name":"struct:seelog.testContext","Fields":["seelog.testContext.field string"]},{"Name":"const:seelog","Fields":["seelog.testShortPath"]}]}
{"Filepath":"vendor/src/github.com/cihub/seelog/common_exception.go","Functions":[{"Uniquefunname":"func (logLevelEx *LogLevelException) FilePattern() string","Funname":"FilePattern","Returntype":"string","Args":""},{"Uniquefunname":"func (logLevelEx *LogLevelException) FuncPattern() string","Funname":"FuncPattern","Returntype":"string","Args":""},{"Uniquefunname":"func (logLevelEx *LogLevelException) IsAllowed(level LogLevel) bool","Funname":"IsAllowed","Returntype":"bool","Args":"level LogLevel"},{"Uniquefunname":"func (logLevelEx *LogLevelException) MatchesContext(context LogContextInterface) bool","Funname":"MatchesContext","Returntype":"bool","Args":"context LogContextInterface"},{"Uniquefunname":"func NewLogLevelException(funcPattern string, filePattern string, constraints logLevelConstraints)(*LogLevelException, error)","Funname":"NewLogLevelException","Returntype":"(*LogLevelException, error)","Args":"funcPattern string, filePattern string, constraints logLevelConstraints"},{"Uniquefunname":"func (logLevelEx *LogLevelException) String() string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func (logLevelEx *LogLevelException) initFilePatternParts(filePattern string) (err error)","Funname":"initFilePatternParts","Returntype":"(err error)","Args":"filePattern string"},{"Uniquefunname":"func (logLevelEx *LogLevelException) initFuncPatternParts(funcPattern string) (err error)","Funname":"initFuncPatternParts","Returntype":"(err error)","Args":"funcPattern string"},{"Uniquefunname":"func (logLevelEx *LogLevelException) match(funcPath string, filePath string) bool","Funname":"match","Returntype":"bool","Args":"funcPath string, filePath string"},{"Uniquefunname":"func (logLevelEx *LogLevelException) FilePattern() string","Funname":"seelog.LogLevelException.FilePattern","Returntype":"string","Args":""},{"Uniquefunname":"func (logLevelEx *LogLevelException) FuncPattern() string","Funname":"seelog.LogLevelException.FuncPattern","Returntype":"string","Args":""},{"Uniquefunname":"func (logLevelEx *LogLevelException) IsAllowed(level LogLevel) bool","Funname":"seelog.LogLevelException.IsAllowed","Returntype":"bool","Args":"level LogLevel"},{"Uniquefunname":"func (logLevelEx *LogLevelException) MatchesContext(context LogContextInterface) bool","Funname":"seelog.LogLevelException.MatchesContext","Returntype":"bool","Args":"context LogContextInterface"},{"Uniquefunname":"func (logLevelEx *LogLevelException) String() string","Funname":"seelog.LogLevelException.String","Returntype":"string","Args":""},{"Uniquefunname":"func (logLevelEx *LogLevelException) initFilePatternParts(filePattern string) (err error)","Funname":"seelog.LogLevelException.initFilePatternParts","Returntype":"(err error)","Args":"filePattern string"},{"Uniquefunname":"func (logLevelEx *LogLevelException) initFuncPatternParts(funcPattern string) (err error)","Funname":"seelog.LogLevelException.initFuncPatternParts","Returntype":"(err error)","Args":"funcPattern string"},{"Uniquefunname":"func (logLevelEx *LogLevelException) match(funcPath string, filePath string) bool","Funname":"seelog.LogLevelException.match","Returntype":"bool","Args":"funcPath string, filePath string"},{"Uniquefunname":"func seelog.NewLogLevelException(funcPattern string, filePattern string, constraints logLevelConstraints)(*LogLevelException, error)","Funname":"seelog.NewLogLevelException","Returntype":"(*LogLevelException, error)","Args":"funcPattern string, filePattern string, constraints logLevelConstraints"},{"Uniquefunname":"func splitPattern(pattern string) []string","Funname":"seelog.splitPattern","Returntype":"[]string","Args":"pattern string"},{"Uniquefunname":"func stringMatchesPattern(patternparts []string, testString string) bool","Funname":"seelog.stringMatchesPattern","Returntype":"bool","Args":"patternparts []string, testString string"},{"Uniquefunname":"func splitPattern(pattern string) []string","Funname":"splitPattern","Returntype":"[]string","Args":"pattern string"},{"Uniquefunname":"func stringMatchesPattern(patternparts []string, testString string) bool","Funname":"stringMatchesPattern","Returntype":"bool","Args":"patternparts []string, testString string"}],"Records":[{"Name":"struct:seelog.LogLevelException","Fields":["seelog.LogLevelException.constraints logLevelConstraints","seelog.LogLevelException.filePattern string","seelog.LogLevelException.filePatternParts []string","seelog.LogLevelException.funcPattern string","seelog.LogLevelException.funcPatternParts []string"]},{"Name":"var:seelog","Fields":["seelog.fileFormatValidator","seelog.funcFormatValidator"]}]}
{"Filepath":"vendor/src/github.com/cihub/seelog/common_exception_test.go","Functions":[{"Uniquefunname":"func TestAsterisksReducing(t *testing.T)","Funname":"TestAsterisksReducing","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestMatchingCorrectness(t *testing.T)","Funname":"TestMatchingCorrectness","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestAsterisksReducing(t *testing.T)","Funname":"seelog.TestAsterisksReducing","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestMatchingCorrectness(t *testing.T)","Funname":"seelog.TestMatchingCorrectness","Returntype":"","Args":"t *testing.T"}],"Records":[{"Name":"struct:seelog.exceptionTestCase","Fields":["seelog.exceptionTestCase.fileName string","seelog.exceptionTestCase.filePattern string","seelog.exceptionTestCase.funcName string","seelog.exceptionTestCase.funcPattern string","seelog.exceptionTestCase.match bool"]},{"Name":"var:seelog","Fields":["seelog.exceptionTestCases"]}]}
{"Filepath":"vendor/src/github.com/cihub/seelog/common_flusher.go","Functions":null,"Records":[{"Name":"interface","Fields":["seelog.flusherInterface"]}]}
{"Filepath":"vendor/src/github.com/cihub/seelog/common_loglevel.go","Functions":[{"Uniquefunname":"func LogLevelFromString(levelStr string) (level LogLevel, found bool)","Funname":"LogLevelFromString","Returntype":"(level LogLevel, found bool)","Args":"levelStr string"},{"Uniquefunname":"func (level LogLevel) String() string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func (level LogLevel) String() string","Funname":"seelog.LogLevel.String","Returntype":"string","Args":""},{"Uniquefunname":"func LogLevelFromString(levelStr string) (level LogLevel, found bool)","Funname":"seelog.LogLevelFromString","Returntype":"(level LogLevel, found bool)","Args":"levelStr string"}],"Records":[{"Name":"const:seelog","Fields":["seelog.CriticalLvl","seelog.CriticalStr","seelog.DebugLvl","seelog.DebugStr","seelog.ErrorLvl","seelog.ErrorStr","seelog.InfoLvl","seelog.InfoStr","seelog.Off","seelog.OffStr","seelog.TraceLvl","seelog.TraceStr","seelog.WarnLvl","seelog.WarnStr"]},{"Name":"var:seelog","Fields":["seelog.levelToStringRepresentations"]}]}
{"Filepath":"vendor/src/github.com/cihub/seelog/dispatch_custom.go","Functions":[{"Uniquefunname":"func (disp *customReceiverDispatcher) Close() error","Funname":"Close","Returntype":"error","Args":""},{"Uniquefunname":"func Dispatch(message string, level LogLevel, context LogContextInterface, errorFunc func(err error))","Funname":"Dispatch","Returntype":"","Args":"message string, level LogLevel, context LogContextInterface, errorFunc func(err error)"},{"Uniquefunname":"func (disp *customReceiverDispatcher) Flush()","Funname":"Flush","Returntype":"","Args":""},{"Uniquefunname":"func NewCustomReceiverDispatcher(formatter *formatter, customReceiverName string, cArgs CustomReceiverInitArgs)(*customReceiverDispatcher, error)","Funname":"NewCustomReceiverDispatcher","Returntype":"(*customReceiverDispatcher, error)","Args":"formatter *formatter, customReceiverName string, cArgs CustomReceiverInitArgs"},{"Uniquefunname":"func NewCustomReceiverDispatcherByValue(formatter *formatter, customReceiver CustomReceiver, name string, cArgs CustomReceiverInitArgs)(*customReceiverDispatcher, error)","Funname":"NewCustomReceiverDispatcherByValue","Returntype":"(*customReceiverDispatcher, error)","Args":"formatter *formatter, customReceiver CustomReceiver, name string, cArgs CustomReceiverInitArgs"},{"Uniquefunname":"func RegisterReceiver(name string, receiver CustomReceiver)","Funname":"RegisterReceiver","Returntype":"","Args":"name string, receiver CustomReceiver"},{"Uniquefunname":"func (disp *customReceiverDispatcher) String() string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func customReceiverByName(name string) (creceiver CustomReceiver, err error)","Funname":"customReceiverByName","Returntype":"(creceiver CustomReceiver, err error)","Args":"name string"},{"Uniquefunname":"func seelog.NewCustomReceiverDispatcher(formatter *formatter, customReceiverName string, cArgs CustomReceiverInitArgs)(*customReceiverDispatcher, error)","Funname":"seelog.NewCustomReceiverDispatcher","Returntype":"(*customReceiverDispatcher, error)","Args":"formatter *formatter, customReceiverName string, cArgs CustomReceiverInitArgs"},{"Uniquefunname":"func seelog.NewCustomReceiverDispatcherByValue(formatter *formatter, customReceiver CustomReceiver, name string, cArgs CustomReceiverInitArgs)(*customReceiverDispatcher, error)","Funname":"seelog.NewCustomReceiverDispatcherByValue","Returntype":"(*customReceiverDispatcher, error)","Args":"formatter *formatter, customReceiver CustomReceiver, name string, cArgs CustomReceiverInitArgs"},{"Uniquefunname":"func RegisterReceiver(name string, receiver CustomReceiver)","Funname":"seelog.RegisterReceiver","Returntype":"","Args":"name string, receiver CustomReceiver"},{"Uniquefunname":"func customReceiverByName(name string) (creceiver CustomReceiver, err error)","Funname":"seelog.customReceiverByName","Returntype":"(creceiver CustomReceiver, err error)","Args":"name string"},{"Uniquefunname":"func (disp *customReceiverDispatcher) Close() error","Funname":"seelog.customReceiverDispatcher.Close","Returntype":"error","Args":""},{"Uniquefunname":"func seelog.customReceiverDispatcher.Dispatch(message string, level LogLevel, context LogContextInterface, errorFunc func(err error))","Funname":"seelog.customReceiverDispatcher.Dispatch","Returntype":"","Args":"message string, level LogLevel, context LogContextInterface, errorFunc func(err error)"},{"Uniquefunname":"func (disp *customReceiverDispatcher) Flush()","Funname":"seelog.customReceiverDispatcher.Flush","Returntype":"","Args":""},{"Uniquefunname":"func (disp *customReceiverDispatcher) String() string","Funname":"seelog.customReceiverDispatcher.String","Returntype":"string","Args":""}],"Records":[{"Name":"interface","Fields":["seelog.CustomReceiver"]},{"Name":"struct:seelog.CustomReceiverInitArgs","Fields":["seelog.CustomReceiverInitArgs.XmlCustomAttrs map[string]string"]},{"Name":"struct:seelog.customReceiverDispatcher","Fields":["seelog.customReceiverDispatcher.customReceiverName string","seelog.customReceiverDispatcher.formatter *formatter","seelog.customReceiverDispatcher.innerReceiver CustomReceiver","seelog.customReceiverDispatcher.usedArgs CustomReceiverInitArgs"]},{"Name":"var:seelog","Fields":["seelog.registeredReceivers"]}]}
{"Filepath":"vendor/src/github.com/cihub/seelog/dispatch_customdispatcher_test.go","Functions":[{"Uniquefunname":"func TestCustomDispatcher_Close(t *testing.T)","Funname":"TestCustomDispatcher_Close","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestCustomDispatcher_Flush(t *testing.T)","Funname":"TestCustomDispatcher_Flush","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestCustomDispatcher_Message(t *testing.T)","Funname":"TestCustomDispatcher_Message","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestCustomDispatcher_Close(t *testing.T)","Funname":"seelog.TestCustomDispatcher_Close","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestCustomDispatcher_Flush(t *testing.T)","Funname":"seelog.TestCustomDispatcher_Flush","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestCustomDispatcher_Message(t *testing.T)","Funname":"seelog.TestCustomDispatcher_Message","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/cihub/seelog/dispatch_dispatcher.go","Functions":[{"Uniquefunname":"func (disp *dispatcher) Close() error","Funname":"Close","Returntype":"error","Args":""},{"Uniquefunname":"func Dispatch(message string, level LogLevel, context LogContextInterface, errorFunc func(err error))","Funname":"Dispatch","Returntype":"","Args":"message string, level LogLevel, context LogContextInterface, errorFunc func(err error)"},{"Uniquefunname":"func (disp *dispatcher) Dispatchers() []dispatcherInterface","Funname":"Dispatchers","Returntype":"[]dispatcherInterface","Args":""},{"Uniquefunname":"func (disp *dispatcher) Flush()","Funname":"Flush","Returntype":"","Args":""},{"Uniquefunname":"func (disp *dispatcher) String() string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func (disp *dispatcher) Writers() []*formattedWriter","Funname":"Writers","Returntype":"[]*formattedWriter","Args":""},{"Uniquefunname":"func createDispatcher(formatter *formatter, receivers []interface","Funname":"createDispatcher","Returntype":"(*dispatcher, error)","Args":"formatter *formatter, receivers []interface{}"},{"Uniquefunname":"func createDispatcher(formatter *formatter, receivers []interface","Funname":"seelog.createDispatcher","Returntype":"(*dispatcher, error)","Args":"formatter *formatter, receivers []interface{}"},{"Uniquefunname":"func (disp *dispatcher) Close() error","Funname":"seelog.dispatcher.Close","Returntype":"error","Args":""},{"Uniquefunname":"func seelog.dispatcher.Dispatch(message string, level LogLevel, context LogContextInterface, errorFunc func(err error))","Funname":"seelog.dispatcher.Dispatch","Returntype":"","Args":"message string, level LogLevel, context LogContextInterface, errorFunc func(err error)"},{"Uniquefunname":"func (disp *dispatcher) Dispatchers() []dispatcherInterface","Funname":"seelog.dispatcher.Dispatchers","Returntype":"[]dispatcherInterface","Args":""},{"Uniquefunname":"func (disp *dispatcher) Flush()","Funname":"seelog.dispatcher.Flush","Returntype":"","Args":""},{"Uniquefunname":"func (disp *dispatcher) String() string","Funname":"seelog.dispatcher.String","Returntype":"string","Args":""},{"Uniquefunname":"func (disp *dispatcher) Writers() []*formattedWriter","Funname":"seelog.dispatcher.Writers","Returntype":"[]*formattedWriter","Args":""}],"Records":[{"Name":"struct:seelog.dispatcher","Fields":["seelog.dispatcher.dispatchers []dispatcherInterface","seelog.dispatcher.formatter *formatter","seelog.dispatcher.writers []*formattedWriter"]},{"Name":"interface","Fields":["seelog.dispatcherInterface"]}]}
{"Filepath":"vendor/src/github.com/cihub/seelog/dispatch_filterdispatcher.go","Functions":[{"Uniquefunname":"func Dispatch(message string, level LogLevel, context LogContextInterface, errorFunc func(err error))","Funname":"Dispatch","Returntype":"","Args":"message string, level LogLevel, context LogContextInterface, errorFunc func(err error)"},{"Uniquefunname":"func NewFilterDispatcher(formatter *formatter, receivers []interface{}, allowList ...LogLevel)(*filterDispatcher, error)","Funname":"NewFilterDispatcher","Returntype":"(*filterDispatcher, error)","Args":"formatter *formatter, receivers []interface{}, allowList ...LogLevel"},{"Uniquefunname":"func (filter *filterDispatcher) String() string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func seelog.NewFilterDispatcher(formatter *formatter, receivers []interface{}, allowList ...LogLevel)(*filterDispatcher, error)","Funname":"seelog.NewFilterDispatcher","Returntype":"(*filterDispatcher, error)","Args":"formatter *formatter, receivers []interface{}, allowList ...LogLevel"},{"Uniquefunname":"func seelog.filterDispatcher.Dispatch(message string, level LogLevel, context LogContextInterface, errorFunc func(err error))","Funname":"seelog.filterDispatcher.Dispatch","Returntype":"","Args":"message string, level LogLevel, context LogContextInterface, errorFunc func(err error)"},{"Uniquefunname":"func (filter *filterDispatcher) String() string","Funname":"seelog.filterDispatcher.String","Returntype":"string","Args":""}],"Records":[{"Name":"struct:seelog.filterDispatcher","Fields":["seelog.filterDispatcher.allowList map[LogLevel]bool"]}]}
{"Filepath":"vendor/src/github.com/cihub/seelog/dispatch_filterdispatcher_test.go","Functions":[{"Uniquefunname":"func TestfilterDispatcher_Deny(t *testing.T)","Funname":"TestfilterDispatcher_Deny","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestfilterDispatcher_Pass(t *testing.T)","Funname":"TestfilterDispatcher_Pass","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestfilterDispatcher_Deny(t *testing.T)","Funname":"seelog.TestfilterDispatcher_Deny","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestfilterDispatcher_Pass(t *testing.T)","Funname":"seelog.TestfilterDispatcher_Pass","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/cihub/seelog/dispatch_splitdispatcher.go","Functions":[{"Uniquefunname":"func NewSplitDispatcher(formatter *formatter, receivers []interface{})(*splitDispatcher, error)","Funname":"NewSplitDispatcher","Returntype":"(*splitDispatcher, error)","Args":"formatter *formatter, receivers []interface{}"},{"Uniquefunname":"func (splitter *splitDispatcher) String() string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func seelog.NewSplitDispatcher(formatter *formatter, receivers []interface{})(*splitDispatcher, error)","Funname":"seelog.NewSplitDispatcher","Returntype":"(*splitDispatcher, error)","Args":"formatter *formatter, receivers []interface{}"},{"Uniquefunname":"func (splitter *splitDispatcher) String() string","Funname":"seelog.splitDispatcher.String","Returntype":"string","Args":""}],"Records":null}
{"Filepath":"vendor/src/github.com/cihub/seelog/dispatch_splitdispatcher_test.go","Functions":[{"Uniquefunname":"func TestsplitDispatcher(t *testing.T)","Funname":"TestsplitDispatcher","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func init()","Funname":"init","Returntype":"","Args":""},{"Uniquefunname":"func TestsplitDispatcher(t *testing.T)","Funname":"seelog.TestsplitDispatcher","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func init()","Funname":"seelog.init","Returntype":"","Args":""}],"Records":[{"Name":"var:seelog","Fields":["seelog.onlyMessageFormatForTest"]}]}
{"Filepath":"vendor/src/github.com/cihub/seelog/format.go","Functions":[{"Uniquefunname":"func Format(message string, level LogLevel, context LogContextInterface)string","Funname":"Format","Returntype":"string","Args":"message string, level LogLevel, context LogContextInterface"},{"Uniquefunname":"func FormatterFunction(message string, level LogLevel, context LogContextInterface)interface{}","Funname":"FormatterFunction","Returntype":"interface{}","Args":"message string, level LogLevel, context LogContextInterface"},{"Uniquefunname":"func FormatterFunctionShort(message string, level LogLevel, context LogContextInterface)interface{}","Funname":"FormatterFunctionShort","Returntype":"interface{}","Args":"message string, level LogLevel, context LogContextInterface"},{"Uniquefunname":"func NewFormatter(formatString string) (*formatter, error)","Funname":"NewFormatter","Returntype":"(*formatter, error)","Args":"formatString string"},{"Uniquefunname":"func RegisterCustomFormatter(name string, creator FormatterFuncCreator) error","Funname":"RegisterCustomFormatter","Returntype":"error","Args":"name string, creator FormatterFuncCreator"},{"Uniquefunname":"func (formatter *formatter) String() string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func buildFormatterFuncs(formatter *formatter) error","Funname":"buildFormatterFuncs","Returntype":"error","Args":"formatter *formatter"},{"Uniquefunname":"func createANSIEscapeFunc(escapeCodeString string) FormatterFunc","Funname":"createANSIEscapeFunc","Returntype":"FormatterFunc","Args":"escapeCodeString string"},{"Uniquefunname":"func createDateTimeFormatterFunc(dateTimeFormat string) FormatterFunc","Funname":"createDateTimeFormatterFunc","Returntype":"FormatterFunc","Args":"dateTimeFormat string"},{"Uniquefunname":"func createUTCDateTimeFormatterFunc(dateTimeFormat string) FormatterFunc","Funname":"createUTCDateTimeFormatterFunc","Returntype":"FormatterFunc","Args":"dateTimeFormat string"},{"Uniquefunname":"func errorAliasReserved(name string) error","Funname":"errorAliasReserved","Returntype":"error","Args":"name string"},{"Uniquefunname":"func (formatter *formatter) extractFormatterFunc(index int) (FormatterFunc, int, error)","Funname":"extractFormatterFunc","Returntype":"(FormatterFunc, int, error)","Args":"index int"},{"Uniquefunname":"func (formatter *formatter) extractLetterSequence(index int) string","Funname":"extractLetterSequence","Returntype":"string","Args":"index int"},{"Uniquefunname":"func (formatter *formatter) findFormatterFunc(letters string) (FormatterFunc, int, bool)","Funname":"findFormatterFunc","Returntype":"(FormatterFunc, int, bool)","Args":"letters string"},{"Uniquefunname":"func findFormatterFuncParametrized(letters string, lettersStartIndex int)(FormatterFunc, int, bool, error)","Funname":"findFormatterFuncParametrized","Returntype":"(FormatterFunc, int, bool, error)","Args":"letters string, lettersStartIndex int"},{"Uniquefunname":"func (formatter *formatter) findparameter(startIndex int) (string, int, bool, error)","Funname":"findparameter","Returntype":"(string, int, bool, error)","Args":"startIndex int"},{"Uniquefunname":"func formatterFile(message string, level LogLevel, context LogContextInterface) interface","Funname":"formatterFile","Returntype":"interface{}","Args":"message string, level LogLevel, context LogContextInterface"},{"Uniquefunname":"func formatterFullPath(message string, level LogLevel, context LogContextInterface)interface{}","Funname":"formatterFullPath","Returntype":"interface{}","Args":"message string, level LogLevel, context LogContextInterface"},{"Uniquefunname":"func formatterLEV(message string, level LogLevel, context LogContextInterface) interface","Funname":"formatterLEV","Returntype":"interface{}","Args":"message string, level LogLevel, context LogContextInterface"},{"Uniquefunname":"func formatterLEVEL(message string, level LogLevel, context LogContextInterface) interface","Funname":"formatterLEVEL","Returntype":"interface{}","Args":"message string, level LogLevel, context LogContextInterface"},{"Uniquefunname":"func formatterLev(message string, level LogLevel, context LogContextInterface) interface","Funname":"formatterLev","Returntype":"interface{}","Args":"message string, level LogLevel, context LogContextInterface"},{"Uniquefunname":"func formatterLevel(message string, level LogLevel, context LogContextInterface) interface","Funname":"formatterLevel","Returntype":"interface{}","Args":"message string, level LogLevel, context LogContextInterface"},{"Uniquefunname":"func formatterLine(message string, level LogLevel, context LogContextInterface) interface","Funname":"formatterLine","Returntype":"interface{}","Args":"message string, level LogLevel, context LogContextInterface"},{"Uniquefunname":"func formatterMsg(message string, level LogLevel, context LogContextInterface) interface","Funname":"formatterMsg","Returntype":"interface{}","Args":"message string, level LogLevel, context LogContextInterface"},{"Uniquefunname":"func formatterNs(message string, level LogLevel, context LogContextInterface) interface","Funname":"formatterNs","Returntype":"interface{}","Args":"message string, level LogLevel, context LogContextInterface"},{"Uniquefunname":"func formatterRelFile(message string, level LogLevel, context LogContextInterface) interface","Funname":"formatterRelFile","Returntype":"interface{}","Args":"message string, level LogLevel, context LogContextInterface"},{"Uniquefunname":"func formatterTime(message string, level LogLevel, context LogContextInterface) interface","Funname":"formatterTime","Returntype":"interface{}","Args":"message string, level LogLevel, context LogContextInterface"},{"Uniquefunname":"func formatterUTCNs(message string, level LogLevel, context LogContextInterface) interface","Funname":"formatterUTCNs","Returntype":"interface{}","Args":"message string, level LogLevel, context LogContextInterface"},{"Uniquefunname":"func formatterUTCTime(message string, level LogLevel, context LogContextInterface) interface","Funname":"formatterUTCTime","Returntype":"interface{}","Args":"message string, level LogLevel, context LogContextInterface"},{"Uniquefunname":"func formatterl(message string, level LogLevel, context LogContextInterface) interface","Funname":"formatterl","Returntype":"interface{}","Args":"message string, level LogLevel, context LogContextInterface"},{"Uniquefunname":"func formattern(message string, level LogLevel, context LogContextInterface) interface","Funname":"formattern","Returntype":"interface{}","Args":"message string, level LogLevel, context LogContextInterface"},{"Uniquefunname":"func formattert(message string, level LogLevel, context LogContextInterface) interface","Funname":"formattert","Returntype":"interface{}","Args":"message string, level LogLevel, context LogContextInterface"},{"Uniquefunname":"func init()","Funname":"init","Returntype":"","Args":""},{"Uniquefunname":"func seelog.FormatterFunction(message string, level LogLevel, context LogContextInterface)interface{}","Funname":"seelog.FormatterFunction","Returntype":"interface{}","Args":"message string, level LogLevel, context LogContextInterface"},{"Uniquefunname":"func seelog.FormatterFunctionShort(message string, level LogLevel, context LogContextInterface)interface{}","Funname":"seelog.FormatterFunctionShort","Returntype":"interface{}","Args":"message string, level LogLevel, context LogContextInterface"},{"Uniquefunname":"func NewFormatter(formatString string) (*formatter, error)","Funname":"seelog.NewFormatter","Returntype":"(*formatter, error)","Args":"formatString string"},{"Uniquefunname":"func RegisterCustomFormatter(name string, creator FormatterFuncCreator) error","Funname":"seelog.RegisterCustomFormatter","Returntype":"error","Args":"name string, creator FormatterFuncCreator"},{"Uniquefunname":"func buildFormatterFuncs(formatter *formatter) error","Funname":"seelog.buildFormatterFuncs","Returntype":"error","Args":"formatter *formatter"},{"Uniquefunname":"func createANSIEscapeFunc(escapeCodeString string) FormatterFunc","Funname":"seelog.createANSIEscapeFunc","Returntype":"FormatterFunc","Args":"escapeCodeString string"},{"Uniquefunname":"func createDateTimeFormatterFunc(dateTimeFormat string) FormatterFunc","Funname":"seelog.createDateTimeFormatterFunc","Returntype":"FormatterFunc","Args":"dateTimeFormat string"},{"Uniquefunname":"func createUTCDateTimeFormatterFunc(dateTimeFormat string) FormatterFunc","Funname":"seelog.createUTCDateTimeFormatterFunc","Returntype":"FormatterFunc","Args":"dateTimeFormat string"},{"Uniquefunname":"func errorAliasReserved(name string) error","Funname":"seelog.errorAliasReserved","Returntype":"error","Args":"name string"},{"Uniquefunname":"func seelog.formatter.Format(message string, level LogLevel, context LogContextInterface)string","Funname":"seelog.formatter.Format","Returntype":"string","Args":"message string, level LogLevel, context LogContextInterface"},{"Uniquefunname":"func (formatter *formatter) String() string","Funname":"seelog.formatter.String","Returntype":"string","Args":""},{"Uniquefunname":"func (formatter *formatter) extractFormatterFunc(index int) (FormatterFunc, int, error)","Funname":"seelog.formatter.extractFormatterFunc","Returntype":"(FormatterFunc, int, error)","Args":"index int"},{"Uniquefunname":"func (formatter *formatter) extractLetterSequence(index int) string","Funname":"seelog.formatter.extractLetterSequence","Returntype":"string","Args":"index int"},{"Uniquefunname":"func (formatter *formatter) findFormatterFunc(letters string) (FormatterFunc, int, bool)","Funname":"seelog.formatter.findFormatterFunc","Returntype":"(FormatterFunc, int, bool)","Args":"letters string"},{"Uniquefunname":"func seelog.formatter.findFormatterFuncParametrized(letters string, lettersStartIndex int)(FormatterFunc, int, bool, error)","Funname":"seelog.formatter.findFormatterFuncParametrized","Returntype":"(FormatterFunc, int, bool, error)","Args":"letters string, lettersStartIndex int"},{"Uniquefunname":"func (formatter *formatter) findparameter(startIndex int) (string, int, bool, error)","Funname":"seelog.formatter.findparameter","Returntype":"(string, int, bool, error)","Args":"startIndex int"},{"Uniquefunname":"func formatterFile(message string, level LogLevel, context LogContextInterface) interface","Funname":"seelog.formatterFile","Returntype":"interface{}","Args":"message string, level LogLevel, context LogContextInterface"},{"Uniquefunname":"func seelog.formatterFullPath(message string, level LogLevel, context LogContextInterface)interface{}","Funname":"seelog.formatterFullPath","Returntype":"interface{}","Args":"message string, level LogLevel, context LogContextInterface"},{"Uniquefunname":"func formatterLEV(message string, level LogLevel, context LogContextInterface) interface","Funname":"seelog.formatterLEV","Returntype":"interface{}","Args":"message string, level LogLevel, context LogContextInterface"},{"Uniquefunname":"func formatterLEVEL(message string, level LogLevel, context LogContextInterface) interface","Funname":"seelog.formatterLEVEL","Returntype":"interface{}","Args":"message string, level LogLevel, context LogContextInterface"},{"Uniquefunname":"func formatterLev(message string, level LogLevel, context LogContextInterface) interface","Funname":"seelog.formatterLev","Returntype":"interface{}","Args":"message string, level LogLevel, context LogContextInterface"},{"Uniquefunname":"func formatterLevel(message string, level LogLevel, context LogContextInterface) interface","Funname":"seelog.formatterLevel","Returntype":"interface{}","Args":"message string, level LogLevel, context LogContextInterface"},{"Uniquefunname":"func formatterLine(message string, level LogLevel, context LogContextInterface) interface","Funname":"seelog.formatterLine","Returntype":"interface{}","Args":"message string, level LogLevel, context LogContextInterface"},{"Uniquefunname":"func formatterMsg(message string, level LogLevel, context LogContextInterface) interface","Funname":"seelog.formatterMsg","Returntype":"interface{}","Args":"message string, level LogLevel, context LogContextInterface"},{"Uniquefunname":"func formatterNs(message string, level LogLevel, context LogContextInterface) interface","Funname":"seelog.formatterNs","Returntype":"interface{}","Args":"message string, level LogLevel, context LogContextInterface"},{"Uniquefunname":"func formatterRelFile(message string, level LogLevel, context LogContextInterface) interface","Funname":"seelog.formatterRelFile","Returntype":"interface{}","Args":"message string, level LogLevel, context LogContextInterface"},{"Uniquefunname":"func formatterTime(message string, level LogLevel, context LogContextInterface) interface","Funname":"seelog.formatterTime","Returntype":"interface{}","Args":"message string, level LogLevel, context LogContextInterface"},{"Uniquefunname":"func formatterUTCNs(message string, level LogLevel, context LogContextInterface) interface","Funname":"seelog.formatterUTCNs","Returntype":"interface{}","Args":"message string, level LogLevel, context LogContextInterface"},{"Uniquefunname":"func formatterUTCTime(message string, level LogLevel, context LogContextInterface) interface","Funname":"seelog.formatterUTCTime","Returntype":"interface{}","Args":"message string, level LogLevel, context LogContextInterface"},{"Uniquefunname":"func formatterl(message string, level LogLevel, context LogContextInterface) interface","Funname":"seelog.formatterl","Returntype":"interface{}","Args":"message string, level LogLevel, context LogContextInterface"},{"Uniquefunname":"func formattern(message string, level LogLevel, context LogContextInterface) interface","Funname":"seelog.formattern","Returntype":"interface{}","Args":"message string, level LogLevel, context LogContextInterface"},{"Uniquefunname":"func formattert(message string, level LogLevel, context LogContextInterface) interface","Funname":"seelog.formattert","Returntype":"interface{}","Args":"message string, level LogLevel, context LogContextInterface"},{"Uniquefunname":"func init()","Funname":"seelog.init","Returntype":"","Args":""}],"Records":[{"Name":"const:seelog","Fields":["seelog.DateDefaultFormat","seelog.FormatterSymbol","seelog.TimeFormat","seelog.formatterParameterEnd","seelog.formatterParameterStart","seelog.wrongEscapeCode","seelog.wrongLogLevel"]},{"Name":"var:seelog","Fields":["seelog.DefaultFormatter","seelog.DefaultMsgFormat","seelog.formatterFuncs","seelog.formatterFuncsParameterized","seelog.levelToShortString","seelog.levelToShortestString","seelog.levelToString","seelog.msgonlyformatter"]},{"Name":"struct:seelog.formatter","Fields":["seelog.formatter.fmtString string","seelog.formatter.fmtStringOriginal string","seelog.formatter.formatterFuncs []FormatterFunc"]}]}
{"Filepath":"vendor/src/github.com/cihub/seelog/format_test.go","Functions":[{"Uniquefunname":"func TestCustomFormatterRegistration(t *testing.T)","Funname":"TestCustomFormatterRegistration","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestDateFormat(t *testing.T)","Funname":"TestDateFormat","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestDateParameterizedFormat(t *testing.T)","Funname":"TestDateParameterizedFormat","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestFormats(t *testing.T)","Funname":"TestFormats","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func createTestFormatter(format string) FormatterFunc","Funname":"createTestFormatter","Returntype":"FormatterFunc","Args":"format string"},{"Uniquefunname":"func TestCustomFormatterRegistration(t *testing.T)","Funname":"seelog.TestCustomFormatterRegistration","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestDateFormat(t *testing.T)","Funname":"seelog.TestDateFormat","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestDateParameterizedFormat(t *testing.T)","Funname":"seelog.TestDateParameterizedFormat","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestFormats(t *testing.T)","Funname":"seelog.TestFormats","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func createTestFormatter(format string) FormatterFunc","Funname":"seelog.createTestFormatter","Returntype":"FormatterFunc","Args":"format string"}],"Records":[{"Name":"const:seelog","Fields":["seelog.TestFuncName"]},{"Name":"struct:seelog.formatTest","Fields":["seelog.formatTest.errorExpected bool","seelog.formatTest.expectedOutput string","seelog.formatTest.formatString string","seelog.formatTest.input string","seelog.formatTest.inputLogLevel LogLevel"]},{"Name":"var:seelog","Fields":["seelog.formatTests"]}]}
{"Filepath":"vendor/src/github.com/cihub/seelog/internals_baseerror.go","Functions":[{"Uniquefunname":"func (be baseError) Error() string","Funname":"Error","Returntype":"string","Args":""},{"Uniquefunname":"func (be baseError) Error() string","Funname":"seelog.baseError.Error","Returntype":"string","Args":""}],"Records":[{"Name":"struct:seelog.baseError","Fields":["seelog.baseError.message string"]}]}
{"Filepath":"vendor/src/github.com/cihub/seelog/internals_byteverifiers_test.go","Functions":[{"Uniquefunname":"func (verifier *bytesVerifier) Close() error","Funname":"Close","Returntype":"error","Args":""},{"Uniquefunname":"func (writer *nullWriter) Close() error","Funname":"Close","Returntype":"error","Args":""},{"Uniquefunname":"func (verifier *bytesVerifier) ExpectBytes(bytes []byte)","Funname":"ExpectBytes","Returntype":"","Args":"bytes []byte"},{"Uniquefunname":"func (verifier *bytesVerifier) MustNotExpect()","Funname":"MustNotExpect","Returntype":"","Args":""},{"Uniquefunname":"func (verifier *bytesVerifier) Write(bytes []byte) (n int, err error)","Funname":"Write","Returntype":"(n int, err error)","Args":"bytes []byte"},{"Uniquefunname":"func (writer *nullWriter) Write(bytes []byte) (n int, err error)","Funname":"Write","Returntype":"(n int, err error)","Args":"bytes []byte"},{"Uniquefunname":"func newBytesVerifier(t *testing.T) (*bytesVerifier, error)","Funname":"newBytesVerifier","Returntype":"(*bytesVerifier, error)","Args":"t *testing.T"},{"Uniquefunname":"func (verifier *bytesVerifier) Close() error","Funname":"seelog.bytesVerifier.Close","Returntype":"error","Args":""},{"Uniquefunname":"func (verifier *bytesVerifier) ExpectBytes(bytes []byte)","Funname":"seelog.bytesVerifier.ExpectBytes","Returntype":"","Args":"bytes []byte"},{"Uniquefunname":"func (verifier *bytesVerifier) MustNotExpect()","Funname":"seelog.bytesVerifier.MustNotExpect","Returntype":"","Args":""},{"Uniquefunname":"func (verifier *bytesVerifier) Write(bytes []byte) (n int, err error)","Funname":"seelog.bytesVerifier.Write","Returntype":"(n int, err error)","Args":"bytes []byte"},{"Uniquefunname":"func newBytesVerifier(t *testing.T) (*bytesVerifier, error)","Funname":"seelog.newBytesVerifier","Returntype":"(*bytesVerifier, error)","Args":"t *testing.T"},{"Uniquefunname":"func (writer *nullWriter) Close() error","Funname":"seelog.nullWriter.Close","Returntype":"error","Args":""},{"Uniquefunname":"func (writer *nullWriter) Write(bytes []byte) (n int, err error)","Funname":"seelog.nullWriter.Write","Returntype":"(n int, err error)","Args":"bytes []byte"}],"Records":[{"Name":"struct:seelog.bytesVerifier","Fields":["seelog.bytesVerifier.expectedBytes []byte","seelog.bytesVerifier.testEnv *testing.T","seelog.bytesVerifier.waitingForInput bool","seelog.bytesVerifier.writtenData []byte"]}]}
{"Filepath":"vendor/src/github.com/cihub/seelog/internals_fsutils.go","Functions":[{"Uniquefunname":"func copyFile(sf *os.File, dst string) (int64, error)","Funname":"copyFile","Returntype":"(int64, error)","Args":"sf *os.File, dst string"},{"Uniquefunname":"func createDirectory(dirPath string) error","Funname":"createDirectory","Returntype":"error","Args":"dirPath string"},{"Uniquefunname":"func createZip(archiveName string, files map[string][]byte) error","Funname":"createZip","Returntype":"error","Args":"archiveName string, files map[string][]byte"},{"Uniquefunname":"func fileExists(path string) (bool, error)","Funname":"fileExists","Returntype":"(bool, error)","Args":"path string"},{"Uniquefunname":"func getAllSubdirAbsPaths(dirPath string) (res []string, err error)","Funname":"getAllSubdirAbsPaths","Returntype":"(res []string, err error)","Args":"dirPath string"},{"Uniquefunname":"func getDirFilePaths(dirPath string, fpFilter filePathFilter, pathIsName bool)([]string, error)","Funname":"getDirFilePaths","Returntype":"([]string, error)","Args":"dirPath string, fpFilter filePathFilter, pathIsName bool"},{"Uniquefunname":"func getOpenFilesByDirectoryAsync(dirPaths []string, fFilter fileFilter, filesInDirMap map[string][]*os.File,)error","Funname":"getOpenFilesByDirectoryAsync","Returntype":"error","Args":"dirPaths []string, fFilter fileFilter, filesInDirMap map[string][]*os.File,"},{"Uniquefunname":"func getOpenFilesInDir(dirPath string, fFilter fileFilter) ([]*os.File, error)","Funname":"getOpenFilesInDir","Returntype":"([]*os.File, error)","Args":"dirPath string, fFilter fileFilter"},{"Uniquefunname":"func getSubdirAbsPaths(dirPath string) ([]string, error)","Funname":"getSubdirAbsPaths","Returntype":"([]string, error)","Args":"dirPath string"},{"Uniquefunname":"func getSubdirNames(dirPath string) ([]string, error)","Funname":"getSubdirNames","Returntype":"([]string, error)","Args":"dirPath string"},{"Uniquefunname":"func isRegular(m os.FileMode) bool","Funname":"isRegular","Returntype":"bool","Args":"m os.FileMode"},{"Uniquefunname":"func newCannotOpenFileError(fname string) *cannotOpenFileError","Funname":"newCannotOpenFileError","Returntype":"*cannotOpenFileError","Args":"fname string"},{"Uniquefunname":"func newNotDirectoryError(dname string) *notDirectoryError","Funname":"newNotDirectoryError","Returntype":"*notDirectoryError","Args":"dname string"},{"Uniquefunname":"func copyFile(sf *os.File, dst string) (int64, error)","Funname":"seelog.copyFile","Returntype":"(int64, error)","Args":"sf *os.File, dst string"},{"Uniquefunname":"func createDirectory(dirPath string) error","Funname":"seelog.createDirectory","Returntype":"error","Args":"dirPath string"},{"Uniquefunname":"func createZip(archiveName string, files map[string][]byte) error","Funname":"seelog.createZip","Returntype":"error","Args":"archiveName string, files map[string][]byte"},{"Uniquefunname":"func fileExists(path string) (bool, error)","Funname":"seelog.fileExists","Returntype":"(bool, error)","Args":"path string"},{"Uniquefunname":"func getAllSubdirAbsPaths(dirPath string) (res []string, err error)","Funname":"seelog.getAllSubdirAbsPaths","Returntype":"(res []string, err error)","Args":"dirPath string"},{"Uniquefunname":"func seelog.getDirFilePaths(dirPath string, fpFilter filePathFilter, pathIsName bool)([]string, error)","Funname":"seelog.getDirFilePaths","Returntype":"([]string, error)","Args":"dirPath string, fpFilter filePathFilter, pathIsName bool"},{"Uniquefunname":"func seelog.getOpenFilesByDirectoryAsync(dirPaths []string, fFilter fileFilter, filesInDirMap map[string][]*os.File,)error","Funname":"seelog.getOpenFilesByDirectoryAsync","Returntype":"error","Args":"dirPaths []string, fFilter fileFilter, filesInDirMap map[string][]*os.File,"},{"Uniquefunname":"func getOpenFilesInDir(dirPath string, fFilter fileFilter) ([]*os.File, error)","Funname":"seelog.getOpenFilesInDir","Returntype":"([]*os.File, error)","Args":"dirPath string, fFilter fileFilter"},{"Uniquefunname":"func getSubdirAbsPaths(dirPath string) ([]string, error)","Funname":"seelog.getSubdirAbsPaths","Returntype":"([]string, error)","Args":"dirPath string"},{"Uniquefunname":"func getSubdirNames(dirPath string) ([]string, error)","Funname":"seelog.getSubdirNames","Returntype":"([]string, error)","Args":"dirPath string"},{"Uniquefunname":"func isRegular(m os.FileMode) bool","Funname":"seelog.isRegular","Returntype":"bool","Args":"m os.FileMode"},{"Uniquefunname":"func newCannotOpenFileError(fname string) *cannotOpenFileError","Funname":"seelog.newCannotOpenFileError","Returntype":"*cannotOpenFileError","Args":"fname string"},{"Uniquefunname":"func newNotDirectoryError(dname string) *notDirectoryError","Funname":"seelog.newNotDirectoryError","Returntype":"*notDirectoryError","Args":"dname string"},{"Uniquefunname":"func tryRemoveFile(filePath string) (err error)","Funname":"seelog.tryRemoveFile","Returntype":"(err error)","Args":"filePath string"},{"Uniquefunname":"func unzip(archiveName string) (map[string][]byte, error)","Funname":"seelog.unzip","Returntype":"(map[string][]byte, error)","Args":"archiveName string"},{"Uniquefunname":"func tryRemoveFile(filePath string) (err error)","Funname":"tryRemoveFile","Returntype":"(err error)","Args":"filePath string"},{"Uniquefunname":"func unzip(archiveName string) (map[string][]byte, error)","Funname":"unzip","Returntype":"(map[string][]byte, error)","Args":"archiveName string"}],"Records":[{"Name":"const:seelog","Fields":["seelog.defaultDirectoryPermissions","seelog.defaultFilePermissions","seelog.maxDirNumberReadAsync"]}]}
{"Filepath":"vendor/src/github.com/cihub/seelog/internals_xmlnode.go","Functions":[{"Uniquefunname":"func (node *xmlNode) String() string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func (node *xmlNode) add(child *xmlNode)","Funname":"add","Returntype":"","Args":"child *xmlNode"},{"Uniquefunname":"func getNextToken(xmlParser *xml.Decoder) (tok xml.Token, err error)","Funname":"getNextToken","Returntype":"(tok xml.Token, err error)","Args":"xmlParser *xml.Decoder"},{"Uniquefunname":"func (node *xmlNode) hasChildren() bool","Funname":"hasChildren","Returntype":"bool","Args":""},{"Uniquefunname":"func newNode() *xmlNode","Funname":"newNode","Returntype":"*xmlNode","Args":""},{"Uniquefunname":"func getNextToken(xmlParser *xml.Decoder) (tok xml.Token, err error)","Funname":"seelog.getNextToken","Returntype":"(tok xml.Token, err error)","Args":"xmlParser *xml.Decoder"},{"Uniquefunname":"func newNode() *xmlNode","Funname":"seelog.newNode","Returntype":"*xmlNode","Args":""},{"Uniquefunname":"func unmarshalConfig(reader io.Reader) (*xmlNode, error)","Funname":"seelog.unmarshalConfig","Returntype":"(*xmlNode, error)","Args":"reader io.Reader"},{"Uniquefunname":"func unmarshalNode(xmlParser *xml.Decoder, curToken xml.Token) (node *xmlNode, err error)","Funname":"seelog.unmarshalNode","Returntype":"(node *xmlNode, err error)","Args":"xmlParser *xml.Decoder, curToken xml.Token"},{"Uniquefunname":"func (node *xmlNode) String() string","Funname":"seelog.xmlNode.String","Returntype":"string","Args":""},{"Uniquefunname":"func (node *xmlNode) add(child *xmlNode)","Funname":"seelog.xmlNode.add","Returntype":"","Args":"child *xmlNode"},{"Uniquefunname":"func (node *xmlNode) hasChildren() bool","Funname":"seelog.xmlNode.hasChildren","Returntype":"bool","Args":""},{"Uniquefunname":"func (node *xmlNode) unmarshal(startEl xml.StartElement) error","Funname":"seelog.xmlNode.unmarshal","Returntype":"error","Args":"startEl xml.StartElement"},{"Uniquefunname":"func (node *xmlNode) unmarshal(startEl xml.StartElement) error","Funname":"unmarshal","Returntype":"error","Args":"startEl xml.StartElement"},{"Uniquefunname":"func unmarshalConfig(reader io.Reader) (*xmlNode, error)","Funname":"unmarshalConfig","Returntype":"(*xmlNode, error)","Args":"reader io.Reader"},{"Uniquefunname":"func unmarshalNode(xmlParser *xml.Decoder, curToken xml.Token) (node *xmlNode, err error)","Funname":"unmarshalNode","Returntype":"(node *xmlNode, err error)","Args":"xmlParser *xml.Decoder, curToken xml.Token"}],"Records":[{"Name":"struct:seelog.xmlNode","Fields":["seelog.xmlNode.attributes map[string]string","seelog.xmlNode.children []*xmlNode","seelog.xmlNode.name string","seelog.xmlNode.value string"]}]}
{"Filepath":"vendor/src/github.com/cihub/seelog/internals_xmlnode_test.go","Functions":[{"Uniquefunname":"func TestXmlNode(t *testing.T)","Funname":"TestXmlNode","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func getXMLTests() []xmlNodeTest","Funname":"getXMLTests","Returntype":"[]xmlNodeTest","Args":""},{"Uniquefunname":"func TestXmlNode(t *testing.T)","Funname":"seelog.TestXmlNode","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func getXMLTests() []xmlNodeTest","Funname":"seelog.getXMLTests","Returntype":"[]xmlNodeTest","Args":""}],"Records":[{"Name":"var:seelog","Fields":["seelog.testEnv","seelog.xmlNodeTests"]},{"Name":"struct:seelog.xmlNodeTest","Fields":["seelog.xmlNodeTest.errorExpected bool","seelog.xmlNodeTest.expected interface{}","seelog.xmlNodeTest.inputXML string","seelog.xmlNodeTest.testName string"]}]}
{"Filepath":"vendor/src/github.com/cihub/seelog/log.go","Functions":[{"Uniquefunname":"func Critical(v ...interface","Funname":"Critical","Returntype":"error","Args":"v ...interface{}"},{"Uniquefunname":"func Criticalf(format string, params ...interface","Funname":"Criticalf","Returntype":"error","Args":"format string, params ...interface{}"},{"Uniquefunname":"func Debug(v ...interface","Funname":"Debug","Returntype":"","Args":"v ...interface{}"},{"Uniquefunname":"func Debugf(format string, params ...interface","Funname":"Debugf","Returntype":"","Args":"format string, params ...interface{}"},{"Uniquefunname":"func Error(v ...interface","Funname":"Error","Returntype":"error","Args":"v ...interface{}"},{"Uniquefunname":"func Errorf(format string, params ...interface","Funname":"Errorf","Returntype":"error","Args":"format string, params ...interface{}"},{"Uniquefunname":"func Flush()","Funname":"Flush","Returntype":"","Args":""},{"Uniquefunname":"func Info(v ...interface","Funname":"Info","Returntype":"","Args":"v ...interface{}"},{"Uniquefunname":"func Infof(format string, params ...interface","Funname":"Infof","Returntype":"","Args":"format string, params ...interface{}"},{"Uniquefunname":"func ReplaceLogger(logger LoggerInterface) error","Funname":"ReplaceLogger","Returntype":"error","Args":"logger LoggerInterface"},{"Uniquefunname":"func Trace(v ...interface","Funname":"Trace","Returntype":"","Args":"v ...interface{}"},{"Uniquefunname":"func Tracef(format string, params ...interface","Funname":"Tracef","Returntype":"","Args":"format string, params ...interface{}"},{"Uniquefunname":"func UseLogger(logger LoggerInterface) error","Funname":"UseLogger","Returntype":"error","Args":"logger LoggerInterface"},{"Uniquefunname":"func Warn(v ...interface","Funname":"Warn","Returntype":"error","Args":"v ...interface{}"},{"Uniquefunname":"func Warnf(format string, params ...interface","Funname":"Warnf","Returntype":"error","Args":"format string, params ...interface{}"},{"Uniquefunname":"func createLoggerFromFullConfig(config *configForParsing) (LoggerInterface, error)","Funname":"createLoggerFromFullConfig","Returntype":"(LoggerInterface, error)","Args":"config *configForParsing"},{"Uniquefunname":"func init()","Funname":"init","Returntype":"","Args":""},{"Uniquefunname":"func Critical(v ...interface","Funname":"seelog.Critical","Returntype":"error","Args":"v ...interface{}"},{"Uniquefunname":"func Criticalf(format string, params ...interface","Funname":"seelog.Criticalf","Returntype":"error","Args":"format string, params ...interface{}"},{"Uniquefunname":"func Debug(v ...interface","Funname":"seelog.Debug","Returntype":"","Args":"v ...interface{}"},{"Uniquefunname":"func Debugf(format string, params ...interface","Funname":"seelog.Debugf","Returntype":"","Args":"format string, params ...interface{}"},{"Uniquefunname":"func Error(v ...interface","Funname":"seelog.Error","Returntype":"error","Args":"v ...interface{}"},{"Uniquefunname":"func Errorf(format string, params ...interface","Funname":"seelog.Errorf","Returntype":"error","Args":"format string, params ...interface{}"},{"Uniquefunname":"func Flush()","Funname":"seelog.Flush","Returntype":"","Args":""},{"Uniquefunname":"func Info(v ...interface","Funname":"seelog.Info","Returntype":"","Args":"v ...interface{}"},{"Uniquefunname":"func Infof(format string, params ...interface","Funname":"seelog.Infof","Returntype":"","Args":"format string, params ...interface{}"},{"Uniquefunname":"func ReplaceLogger(logger LoggerInterface) error","Funname":"seelog.ReplaceLogger","Returntype":"error","Args":"logger LoggerInterface"},{"Uniquefunname":"func Trace(v ...interface","Funname":"seelog.Trace","Returntype":"","Args":"v ...interface{}"},{"Uniquefunname":"func Tracef(format string, params ...interface","Funname":"seelog.Tracef","Returntype":"","Args":"format string, params ...interface{}"},{"Uniquefunname":"func UseLogger(logger LoggerInterface) error","Funname":"seelog.UseLogger","Returntype":"error","Args":"logger LoggerInterface"},{"Uniquefunname":"func Warn(v ...interface","Funname":"seelog.Warn","Returntype":"error","Args":"v ...interface{}"},{"Uniquefunname":"func Warnf(format string, params ...interface","Funname":"seelog.Warnf","Returntype":"error","Args":"format string, params ...interface{}"},{"Uniquefunname":"func createLoggerFromFullConfig(config *configForParsing) (LoggerInterface, error)","Funname":"seelog.createLoggerFromFullConfig","Returntype":"(LoggerInterface, error)","Args":"config *configForParsing"},{"Uniquefunname":"func init()","Funname":"seelog.init","Returntype":"","Args":""}],"Records":[{"Name":"var:seelog","Fields":["seelog.Current","seelog.Default","seelog.Disabled","seelog.pkgOperationsMutex"]},{"Name":"const:seelog","Fields":["seelog.loggerFuncCallDepth","seelog.staticFuncCallDepth"]}]}
{"Filepath":"vendor/src/github.com/cihub/seelog/logger.go","Functions":[{"Uniquefunname":"func (cLogger *commonLogger) Closed() bool","Funname":"Closed","Returntype":"bool","Args":""},{"Uniquefunname":"func (cLogger *commonLogger) Critical(v ...interface","Funname":"Critical","Returntype":"error","Args":"v ...interface{}"},{"Uniquefunname":"func (cLogger *commonLogger) Criticalf(format string, params ...interface","Funname":"Criticalf","Returntype":"error","Args":"format string, params ...interface{}"},{"Uniquefunname":"func (cLogger *commonLogger) Debug(v ...interface","Funname":"Debug","Returntype":"","Args":"v ...interface{}"},{"Uniquefunname":"func (cLogger *commonLogger) Debugf(format string, params ...interface","Funname":"Debugf","Returntype":"","Args":"format string, params ...interface{}"},{"Uniquefunname":"func (cLogger *commonLogger) Error(v ...interface","Funname":"Error","Returntype":"error","Args":"v ...interface{}"},{"Uniquefunname":"func (cLogger *commonLogger) Errorf(format string, params ...interface","Funname":"Errorf","Returntype":"error","Args":"format string, params ...interface{}"},{"Uniquefunname":"func (cLogger *commonLogger) Info(v ...interface","Funname":"Info","Returntype":"","Args":"v ...interface{}"},{"Uniquefunname":"func (cLogger *commonLogger) Infof(format string, params ...interface","Funname":"Infof","Returntype":"","Args":"format string, params ...interface{}"},{"Uniquefunname":"func (cLogger *commonLogger) SetAdditionalStackDepth(depth int) error","Funname":"SetAdditionalStackDepth","Returntype":"error","Args":"depth int"},{"Uniquefunname":"func (cLogger *commonLogger) SetContext(c interface","Funname":"SetContext","Returntype":"","Args":"c interface{}"},{"Uniquefunname":"func (message *logFormattedMessage) String() string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func (message *logMessage) String() string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func (cLogger *commonLogger) Trace(v ...interface","Funname":"Trace","Returntype":"","Args":"v ...interface{}"},{"Uniquefunname":"func (cLogger *commonLogger) Tracef(format string, params ...interface","Funname":"Tracef","Returntype":"","Args":"format string, params ...interface{}"},{"Uniquefunname":"func (cLogger *commonLogger) Warn(v ...interface","Funname":"Warn","Returntype":"error","Args":"v ...interface{}"},{"Uniquefunname":"func (cLogger *commonLogger) Warnf(format string, params ...interface","Funname":"Warnf","Returntype":"error","Args":"format string, params ...interface{}"},{"Uniquefunname":"func (cLogger *commonLogger) criticalWithCallDepth(callDepth int, message fmt.Stringer)","Funname":"criticalWithCallDepth","Returntype":"","Args":"callDepth int, message fmt.Stringer"},{"Uniquefunname":"func (cLogger *commonLogger) debugWithCallDepth(callDepth int, message fmt.Stringer)","Funname":"debugWithCallDepth","Returntype":"","Args":"callDepth int, message fmt.Stringer"},{"Uniquefunname":"func (cLogger *commonLogger) errorWithCallDepth(callDepth int, message fmt.Stringer)","Funname":"errorWithCallDepth","Returntype":"","Args":"callDepth int, message fmt.Stringer"},{"Uniquefunname":"func (cLogger *commonLogger) fillUnusedLevels()","Funname":"fillUnusedLevels","Returntype":"","Args":""},{"Uniquefunname":"func (cLogger *commonLogger) fillUnusedLevelsByContraint(constraint logLevelConstraints)","Funname":"fillUnusedLevelsByContraint","Returntype":"","Args":"constraint logLevelConstraints"},{"Uniquefunname":"func (cLogger *commonLogger) infoWithCallDepth(callDepth int, message fmt.Stringer)","Funname":"infoWithCallDepth","Returntype":"","Args":"callDepth int, message fmt.Stringer"},{"Uniquefunname":"func (cLogger *commonLogger) isAllowed(level LogLevel, context LogContextInterface) bool","Funname":"isAllowed","Returntype":"bool","Args":"level LogLevel, context LogContextInterface"},{"Uniquefunname":"func (cLogger *commonLogger) log(level LogLevel, message fmt.Stringer, stackCallDepth int)","Funname":"log","Returntype":"","Args":"level LogLevel, message fmt.Stringer, stackCallDepth int"},{"Uniquefunname":"func newCommonLogger(config *logConfig, internalLogger innerLoggerInterface) *commonLogger","Funname":"newCommonLogger","Returntype":"*commonLogger","Args":"config *logConfig, internalLogger innerLoggerInterface"},{"Uniquefunname":"func newLogFormattedMessage(format string, params []interface","Funname":"newLogFormattedMessage","Returntype":"*logFormattedMessage","Args":"format string, params []interface{}"},{"Uniquefunname":"func newLogMessage(params []interface","Funname":"newLogMessage","Returntype":"fmt.Stringer","Args":"params []interface{}"},{"Uniquefunname":"func processLogMsg(level LogLevel, message fmt.Stringer, context LogContextInterface)","Funname":"processLogMsg","Returntype":"","Args":"level LogLevel, message fmt.Stringer, context LogContextInterface"},{"Uniquefunname":"func reportInternalError(err error)","Funname":"reportInternalError","Returntype":"","Args":"err error"},{"Uniquefunname":"func (cLogger *commonLogger) Closed() bool","Funname":"seelog.commonLogger.Closed","Returntype":"bool","Args":""},{"Uniquefunname":"func (cLogger *commonLogger) Critical(v ...interface","Funname":"seelog.commonLogger.Critical","Returntype":"error","Args":"v ...interface{}"},{"Uniquefunname":"func (cLogger *commonLogger) Criticalf(format string, params ...interface","Funname":"seelog.commonLogger.Criticalf","Returntype":"error","Args":"format string, params ...interface{}"},{"Uniquefunname":"func (cLogger *commonLogger) Debug(v ...interface","Funname":"seelog.commonLogger.Debug","Returntype":"","Args":"v ...interface{}"},{"Uniquefunname":"func (cLogger *commonLogger) Debugf(format string, params ...interface","Funname":"seelog.commonLogger.Debugf","Returntype":"","Args":"format string, params ...interface{}"},{"Uniquefunname":"func (cLogger *commonLogger) Error(v ...interface","Funname":"seelog.commonLogger.Error","Returntype":"error","Args":"v ...interface{}"},{"Uniquefunname":"func (cLogger *commonLogger) Errorf(format string, params ...interface","Funname":"seelog.commonLogger.Errorf","Returntype":"error","Args":"format string, params ...interface{}"},{"Uniquefunname":"func (cLogger *commonLogger) Info(v ...interface","Funname":"seelog.commonLogger.Info","Returntype":"","Args":"v ...interface{}"},{"Uniquefunname":"func (cLogger *commonLogger) Infof(format string, params ...interface","Funname":"seelog.commonLogger.Infof","Returntype":"","Args":"format string, params ...interface{}"},{"Uniquefunname":"func (cLogger *commonLogger) SetAdditionalStackDepth(depth int) error","Funname":"seelog.commonLogger.SetAdditionalStackDepth","Returntype":"error","Args":"depth int"},{"Uniquefunname":"func (cLogger *commonLogger) SetContext(c interface","Funname":"seelog.commonLogger.SetContext","Returntype":"","Args":"c interface{}"},{"Uniquefunname":"func (cLogger *commonLogger) Trace(v ...interface","Funname":"seelog.commonLogger.Trace","Returntype":"","Args":"v ...interface{}"},{"Uniquefunname":"func (cLogger *commonLogger) Tracef(format string, params ...interface","Funname":"seelog.commonLogger.Tracef","Returntype":"","Args":"format string, params ...interface{}"},{"Uniquefunname":"func (cLogger *commonLogger) Warn(v ...interface","Funname":"seelog.commonLogger.Warn","Returntype":"error","Args":"v ...interface{}"},{"Uniquefunname":"func (cLogger *commonLogger) Warnf(format string, params ...interface","Funname":"seelog.commonLogger.Warnf","Returntype":"error","Args":"format string, params ...interface{}"},{"Uniquefunname":"func (cLogger *commonLogger) criticalWithCallDepth(callDepth int, message fmt.Stringer)","Funname":"seelog.commonLogger.criticalWithCallDepth","Returntype":"","Args":"callDepth int, message fmt.Stringer"},{"Uniquefunname":"func (cLogger *commonLogger) debugWithCallDepth(callDepth int, message fmt.Stringer)","Funname":"seelog.commonLogger.debugWithCallDepth","Returntype":"","Args":"callDepth int, message fmt.Stringer"},{"Uniquefunname":"func (cLogger *commonLogger) errorWithCallDepth(callDepth int, message fmt.Stringer)","Funname":"seelog.commonLogger.errorWithCallDepth","Returntype":"","Args":"callDepth int, message fmt.Stringer"},{"Uniquefunname":"func (cLogger *commonLogger) fillUnusedLevels()","Funname":"seelog.commonLogger.fillUnusedLevels","Returntype":"","Args":""},{"Uniquefunname":"func (cLogger *commonLogger) fillUnusedLevelsByContraint(constraint logLevelConstraints)","Funname":"seelog.commonLogger.fillUnusedLevelsByContraint","Returntype":"","Args":"constraint logLevelConstraints"},{"Uniquefunname":"func (cLogger *commonLogger) infoWithCallDepth(callDepth int, message fmt.Stringer)","Funname":"seelog.commonLogger.infoWithCallDepth","Returntype":"","Args":"callDepth int, message fmt.Stringer"},{"Uniquefunname":"func (cLogger *commonLogger) isAllowed(level LogLevel, context LogContextInterface) bool","Funname":"seelog.commonLogger.isAllowed","Returntype":"bool","Args":"level LogLevel, context LogContextInterface"},{"Uniquefunname":"func (cLogger *commonLogger) log(level LogLevel, message fmt.Stringer, stackCallDepth int)","Funname":"seelog.commonLogger.log","Returntype":"","Args":"level LogLevel, message fmt.Stringer, stackCallDepth int"},{"Uniquefunname":"func seelog.commonLogger.processLogMsg(level LogLevel, message fmt.Stringer, context LogContextInterface)","Funname":"seelog.commonLogger.processLogMsg","Returntype":"","Args":"level LogLevel, message fmt.Stringer, context LogContextInterface"},{"Uniquefunname":"func (cLogger *commonLogger) traceWithCallDepth(callDepth int, message fmt.Stringer)","Funname":"seelog.commonLogger.traceWithCallDepth","Returntype":"","Args":"callDepth int, message fmt.Stringer"},{"Uniquefunname":"func (cLogger *commonLogger) warnWithCallDepth(callDepth int, message fmt.Stringer)","Funname":"seelog.commonLogger.warnWithCallDepth","Returntype":"","Args":"callDepth int, message fmt.Stringer"},{"Uniquefunname":"func (message *logFormattedMessage) String() string","Funname":"seelog.logFormattedMessage.String","Returntype":"string","Args":""},{"Uniquefunname":"func (message *logMessage) String() string","Funname":"seelog.logMessage.String","Returntype":"string","Args":""},{"Uniquefunname":"func newCommonLogger(config *logConfig, internalLogger innerLoggerInterface) *commonLogger","Funname":"seelog.newCommonLogger","Returntype":"*commonLogger","Args":"config *logConfig, internalLogger innerLoggerInterface"},{"Uniquefunname":"func newLogFormattedMessage(format string, params []interface","Funname":"seelog.newLogFormattedMessage","Returntype":"*logFormattedMessage","Args":"format string, params []interface{}"},{"Uniquefunname":"func newLogMessage(params []interface","Funname":"seelog.newLogMessage","Returntype":"fmt.Stringer","Args":"params []interface{}"},{"Uniquefunname":"func reportInternalError(err error)","Funname":"seelog.reportInternalError","Returntype":"","Args":"err error"},{"Uniquefunname":"func (cLogger *commonLogger) traceWithCallDepth(callDepth int, message fmt.Stringer)","Funname":"traceWithCallDepth","Returntype":"","Args":"callDepth int, message fmt.Stringer"},{"Uniquefunname":"func (cLogger *commonLogger) warnWithCallDepth(callDepth int, message fmt.Stringer)","Funname":"warnWithCallDepth","Returntype":"","Args":"callDepth int, message fmt.Stringer"}],"Records":[{"Name":"interface","Fields":["seelog.LoggerInterface","seelog.innerLoggerInterface"]},{"Name":"struct:seelog.commonLogger","Fields":["seelog.commonLogger.addStackDepth int","seelog.commonLogger.closed bool","seelog.commonLogger.closedM sync.RWMutex","seelog.commonLogger.config *logConfig","seelog.commonLogger.contextCache allowedContextCache","seelog.commonLogger.customContext interface{}","seelog.commonLogger.innerLogger innerLoggerInterface","seelog.commonLogger.m sync.Mutex","seelog.commonLogger.unusedLevels []bool"]},{"Name":"struct:seelog.logFormattedMessage","Fields":["seelog.logFormattedMessage.format string","seelog.logFormattedMessage.params []interface{}"]},{"Name":"struct:seelog.logMessage","Fields":["seelog.logMessage.params []interface{}"]}]}
{"Filepath":"vendor/src/github.com/cihub/seelog/writers_bufferedwriter.go","Functions":[{"Uniquefunname":"func (bufWriter *bufferedWriter) Close() error","Funname":"Close","Returntype":"error","Args":""},{"Uniquefunname":"func (bufWriter *bufferedWriter) Flush()","Funname":"Flush","Returntype":"","Args":""},{"Uniquefunname":"func NewBufferedWriter(innerWriter io.Writer, bufferSize int, flushPeriod time.Duration)(*bufferedWriter, error)","Funname":"NewBufferedWriter","Returntype":"(*bufferedWriter, error)","Args":"innerWriter io.Writer, bufferSize int, flushPeriod time.Duration"},{"Uniquefunname":"func (bufWriter *bufferedWriter) String() string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func (bufWriter *bufferedWriter) Write(bytes []byte) (n int, err error)","Funname":"Write","Returntype":"(n int, err error)","Args":"bytes []byte"},{"Uniquefunname":"func (bufWriter *bufferedWriter) flushBuffer()","Funname":"flushBuffer","Returntype":"","Args":""},{"Uniquefunname":"func (bufWriter *bufferedWriter) flushInner() (n int, err error)","Funname":"flushInner","Returntype":"(n int, err error)","Args":""},{"Uniquefunname":"func (bufWriter *bufferedWriter) flushPeriodically()","Funname":"flushPeriodically","Returntype":"","Args":""},{"Uniquefunname":"func seelog.NewBufferedWriter(innerWriter io.Writer, bufferSize int, flushPeriod time.Duration)(*bufferedWriter, error)","Funname":"seelog.NewBufferedWriter","Returntype":"(*bufferedWriter, error)","Args":"innerWriter io.Writer, bufferSize int, flushPeriod time.Duration"},{"Uniquefunname":"func (bufWriter *bufferedWriter) Close() error","Funname":"seelog.bufferedWriter.Close","Returntype":"error","Args":""},{"Uniquefunname":"func (bufWriter *bufferedWriter) Flush()","Funname":"seelog.bufferedWriter.Flush","Returntype":"","Args":""},{"Uniquefunname":"func (bufWriter *bufferedWriter) String() string","Funname":"seelog.bufferedWriter.String","Returntype":"string","Args":""},{"Uniquefunname":"func (bufWriter *bufferedWriter) Write(bytes []byte) (n int, err error)","Funname":"seelog.bufferedWriter.Write","Returntype":"(n int, err error)","Args":"bytes []byte"},{"Uniquefunname":"func (bufWriter *bufferedWriter) flushBuffer()","Funname":"seelog.bufferedWriter.flushBuffer","Returntype":"","Args":""},{"Uniquefunname":"func (bufWriter *bufferedWriter) flushInner() (n int, err error)","Funname":"seelog.bufferedWriter.flushInner","Returntype":"(n int, err error)","Args":""},{"Uniquefunname":"func (bufWriter *bufferedWriter) flushPeriodically()","Funname":"seelog.bufferedWriter.flushPeriodically","Returntype":"","Args":""},{"Uniquefunname":"func (bufWriter *bufferedWriter) writeBigChunk(bytes []byte) (n int, err error)","Funname":"seelog.bufferedWriter.writeBigChunk","Returntype":"(n int, err error)","Args":"bytes []byte"},{"Uniquefunname":"func (bufWriter *bufferedWriter) writeBigChunk(bytes []byte) (n int, err error)","Funname":"writeBigChunk","Returntype":"(n int, err error)","Args":"bytes []byte"}],"Records":[{"Name":"struct:seelog.bufferedWriter","Fields":["seelog.bufferedWriter.buffer *bufio.Writer","seelog.bufferedWriter.bufferMutex *sync.Mutex","seelog.bufferedWriter.bufferSize int","seelog.bufferedWriter.flushPeriod time.Duration","seelog.bufferedWriter.innerWriter io.Writer"]}]}
{"Filepath":"vendor/src/github.com/cihub/seelog/writers_bufferedwriter_test.go","Functions":[{"Uniquefunname":"func TestBigMessageMustPassMemoryBuffer(t *testing.T)","Funname":"TestBigMessageMustPassMemoryBuffer","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestChunkWriteOnFilling(t *testing.T)","Funname":"TestChunkWriteOnFilling","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestFlushByTimePeriod(t *testing.T)","Funname":"TestFlushByTimePeriod","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestBigMessageMustPassMemoryBuffer(t *testing.T)","Funname":"seelog.TestBigMessageMustPassMemoryBuffer","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestChunkWriteOnFilling(t *testing.T)","Funname":"seelog.TestChunkWriteOnFilling","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestFlushByTimePeriod(t *testing.T)","Funname":"seelog.TestFlushByTimePeriod","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/cihub/seelog/writers_connwriter.go","Functions":[{"Uniquefunname":"func (connWriter *connWriter) Close() error","Funname":"Close","Returntype":"error","Args":""},{"Uniquefunname":"func NewConnWriter(netName string, addr string, reconnectOnMsg bool) *connWriter","Funname":"NewConnWriter","Returntype":"*connWriter","Args":"netName string, addr string, reconnectOnMsg bool"},{"Uniquefunname":"func (connWriter *connWriter) String() string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func (connWriter *connWriter) Write(bytes []byte) (n int, err error)","Funname":"Write","Returntype":"(n int, err error)","Args":"bytes []byte"},{"Uniquefunname":"func (connWriter *connWriter) connect() error","Funname":"connect","Returntype":"error","Args":""},{"Uniquefunname":"func (connWriter *connWriter) neededConnectOnMsg() bool","Funname":"neededConnectOnMsg","Returntype":"bool","Args":""},{"Uniquefunname":"func newTLSWriter(netName string, addr string, reconnectOnMsg bool, config *tls.Config)*connWriter","Funname":"newTLSWriter","Returntype":"*connWriter","Args":"netName string, addr string, reconnectOnMsg bool, config *tls.Config"},{"Uniquefunname":"func NewConnWriter(netName string, addr string, reconnectOnMsg bool) *connWriter","Funname":"seelog.NewConnWriter","Returntype":"*connWriter","Args":"netName string, addr string, reconnectOnMsg bool"},{"Uniquefunname":"func (connWriter *connWriter) Close() error","Funname":"seelog.connWriter.Close","Returntype":"error","Args":""},{"Uniquefunname":"func (connWriter *connWriter) String() string","Funname":"seelog.connWriter.String","Returntype":"string","Args":""},{"Uniquefunname":"func (connWriter *connWriter) Write(bytes []byte) (n int, err error)","Funname":"seelog.connWriter.Write","Returntype":"(n int, err error)","Args":"bytes []byte"},{"Uniquefunname":"func (connWriter *connWriter) connect() error","Funname":"seelog.connWriter.connect","Returntype":"error","Args":""},{"Uniquefunname":"func (connWriter *connWriter) neededConnectOnMsg() bool","Funname":"seelog.connWriter.neededConnectOnMsg","Returntype":"bool","Args":""},{"Uniquefunname":"func seelog.newTLSWriter(netName string, addr string, reconnectOnMsg bool, config *tls.Config)*connWriter","Funname":"seelog.newTLSWriter","Returntype":"*connWriter","Args":"netName string, addr string, reconnectOnMsg bool, config *tls.Config"}],"Records":[{"Name":"struct:seelog.connWriter","Fields":["seelog.connWriter.addr string","seelog.connWriter.configTLS *tls.Config","seelog.connWriter.innerWriter io.WriteCloser","seelog.connWriter.net string","seelog.connWriter.reconnect bool","seelog.connWriter.reconnectOnMsg bool","seelog.connWriter.useTLS bool"]}]}
{"Filepath":"vendor/src/github.com/cihub/seelog/writers_consolewriter.go","Functions":[{"Uniquefunname":"func NewConsoleWriter() (writer *consoleWriter, err error)","Funname":"NewConsoleWriter","Returntype":"(writer *consoleWriter, err error)","Args":""},{"Uniquefunname":"func (console *consoleWriter) String() string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func (console *consoleWriter) Write(bytes []byte) (int, error)","Funname":"Write","Returntype":"(int, error)","Args":"bytes []byte"},{"Uniquefunname":"func NewConsoleWriter() (writer *consoleWriter, err error)","Funname":"seelog.NewConsoleWriter","Returntype":"(writer *consoleWriter, err error)","Args":""},{"Uniquefunname":"func (console *consoleWriter) String() string","Funname":"seelog.consoleWriter.String","Returntype":"string","Args":""},{"Uniquefunname":"func (console *consoleWriter) Write(bytes []byte) (int, error)","Funname":"seelog.consoleWriter.Write","Returntype":"(int, error)","Args":"bytes []byte"}],"Records":null}
{"Filepath":"vendor/src/github.com/cihub/seelog/writers_filewriter.go","Functions":[{"Uniquefunname":"func (fw *fileWriter) Close() error","Funname":"Close","Returntype":"error","Args":""},{"Uniquefunname":"func NewFileWriter(fileName string) (writer *fileWriter, err error)","Funname":"NewFileWriter","Returntype":"(writer *fileWriter, err error)","Args":"fileName string"},{"Uniquefunname":"func (fw *fileWriter) String() string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func (fw *fileWriter) Write(bytes []byte) (n int, err error)","Funname":"Write","Returntype":"(n int, err error)","Args":"bytes []byte"},{"Uniquefunname":"func (fw *fileWriter) createFile() error","Funname":"createFile","Returntype":"error","Args":""},{"Uniquefunname":"func NewFileWriter(fileName string) (writer *fileWriter, err error)","Funname":"seelog.NewFileWriter","Returntype":"(writer *fileWriter, err error)","Args":"fileName string"},{"Uniquefunname":"func (fw *fileWriter) Close() error","Funname":"seelog.fileWriter.Close","Returntype":"error","Args":""},{"Uniquefunname":"func (fw *fileWriter) String() string","Funname":"seelog.fileWriter.String","Returntype":"string","Args":""},{"Uniquefunname":"func (fw *fileWriter) Write(bytes []byte) (n int, err error)","Funname":"seelog.fileWriter.Write","Returntype":"(n int, err error)","Args":"bytes []byte"},{"Uniquefunname":"func (fw *fileWriter) createFile() error","Funname":"seelog.fileWriter.createFile","Returntype":"error","Args":""}],"Records":[{"Name":"struct:seelog.fileWriter","Fields":["seelog.fileWriter.fileName string","seelog.fileWriter.innerWriter io.WriteCloser"]}]}
{"Filepath":"vendor/src/github.com/cihub/seelog/writers_filewriter_test.go","Functions":[{"Uniquefunname":"func NewFileWriterTester(testCases []*fileWriterTestCase, writerGetter func(*fileWriterTestCase) (io.WriteCloser, error), t *testing.T)*fileWriterTester","Funname":"NewFileWriterTester","Returntype":"*fileWriterTester","Args":"testCases []*fileWriterTestCase, writerGetter func(*fileWriterTestCase) (io.WriteCloser, error), t *testing.T"},{"Uniquefunname":"func TestSimpleFileWriter(t *testing.T)","Funname":"TestSimpleFileWriter","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func checkJustRequiredFilesExist(testCase *fileWriterTestCase, files []string)","Funname":"checkJustRequiredFilesExist","Returntype":"","Args":"testCase *fileWriterTestCase, files []string"},{"Uniquefunname":"func checkRequiredFilesExist(testCase *fileWriterTestCase, files []string)","Funname":"checkRequiredFilesExist","Returntype":"","Args":"testCase *fileWriterTestCase, files []string"},{"Uniquefunname":"func cleanupWriterTest(t *testing.T)","Funname":"cleanupWriterTest","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func createSimplefileWriterTestCase(fileName string, writeCount int) *fileWriterTestCase","Funname":"createSimplefileWriterTestCase","Returntype":"*fileWriterTestCase","Args":"fileName string, writeCount int"},{"Uniquefunname":"func getWriterTestResultFiles() ([]string, error)","Funname":"getWriterTestResultFiles","Returntype":"([]string, error)","Args":""},{"Uniquefunname":"func isWriterTestFile(fn string) bool","Funname":"isWriterTestFile","Returntype":"bool","Args":"fn string"},{"Uniquefunname":"func (tester *fileWriterTester) performWrite(fileWriter io.Writer, count int)","Funname":"performWrite","Returntype":"","Args":"fileWriter io.Writer, count int"},{"Uniquefunname":"func seelog.NewFileWriterTester(testCases []*fileWriterTestCase, writerGetter func(*fileWriterTestCase) (io.WriteCloser, error), t *testing.T)*fileWriterTester","Funname":"seelog.NewFileWriterTester","Returntype":"*fileWriterTester","Args":"testCases []*fileWriterTestCase, writerGetter func(*fileWriterTestCase) (io.WriteCloser, error), t *testing.T"},{"Uniquefunname":"func TestSimpleFileWriter(t *testing.T)","Funname":"seelog.TestSimpleFileWriter","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func cleanupWriterTest(t *testing.T)","Funname":"seelog.cleanupWriterTest","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func createSimplefileWriterTestCase(fileName string, writeCount int) *fileWriterTestCase","Funname":"seelog.createSimplefileWriterTestCase","Returntype":"*fileWriterTestCase","Args":"fileName string, writeCount int"},{"Uniquefunname":"func seelog.fileWriterTester.checkJustRequiredFilesExist(testCase *fileWriterTestCase, files []string)","Funname":"seelog.fileWriterTester.checkJustRequiredFilesExist","Returntype":"","Args":"testCase *fileWriterTestCase, files []string"},{"Uniquefunname":"func seelog.fileWriterTester.checkRequiredFilesExist(testCase *fileWriterTestCase, files []string)","Funname":"seelog.fileWriterTester.checkRequiredFilesExist","Returntype":"","Args":"testCase *fileWriterTestCase, files []string"},{"Uniquefunname":"func (tester *fileWriterTester) performWrite(fileWriter io.Writer, count int)","Funname":"seelog.fileWriterTester.performWrite","Returntype":"","Args":"fileWriter io.Writer, count int"},{"Uniquefunname":"func (tester *fileWriterTester) test()","Funname":"seelog.fileWriterTester.test","Returntype":"","Args":""},{"Uniquefunname":"func (tester *fileWriterTester) testCase(testCase *fileWriterTestCase, testNum int)","Funname":"seelog.fileWriterTester.testCase","Returntype":"","Args":"testCase *fileWriterTestCase, testNum int"},{"Uniquefunname":"func getWriterTestResultFiles() ([]string, error)","Funname":"seelog.getWriterTestResultFiles","Returntype":"([]string, error)","Args":""},{"Uniquefunname":"func isWriterTestFile(fn string) bool","Funname":"seelog.isWriterTestFile","Returntype":"bool","Args":"fn string"},{"Uniquefunname":"func simplefileWriterGetter(testCase *fileWriterTestCase) (io.WriteCloser, error)","Funname":"seelog.simplefileWriterGetter","Returntype":"(io.WriteCloser, error)","Args":"testCase *fileWriterTestCase"},{"Uniquefunname":"func simplefileWriterGetter(testCase *fileWriterTestCase) (io.WriteCloser, error)","Funname":"simplefileWriterGetter","Returntype":"(io.WriteCloser, error)","Args":"testCase *fileWriterTestCase"},{"Uniquefunname":"func (tester *fileWriterTester) test()","Funname":"test","Returntype":"","Args":""},{"Uniquefunname":"func (tester *fileWriterTester) testCase(testCase *fileWriterTestCase, testNum int)","Funname":"testCase","Returntype":"","Args":"testCase *fileWriterTestCase, testNum int"}],"Records":[{"Name":"var:seelog","Fields":["seelog.bytesFileTest","seelog.simplefileWriterTests"]},{"Name":"struct:seelog.fileWriterTestCase","Fields":["seelog.fileWriterTestCase.datePattern string","seelog.fileWriterTestCase.fileName string","seelog.fileWriterTestCase.fileSize int64","seelog.fileWriterTestCase.files []string","seelog.fileWriterTestCase.maxRolls int","seelog.fileWriterTestCase.nameMode rollingNameMode","seelog.fileWriterTestCase.resFiles []string","seelog.fileWriterTestCase.rollingType rollingType","seelog.fileWriterTestCase.writeCount int"]},{"Name":"struct:seelog.fileWriterTester","Fields":["seelog.fileWriterTester.t *testing.T","seelog.fileWriterTester.testCases []*fileWriterTestCase","seelog.fileWriterTester.writerGetter func(*fileWriterTestCase) (io.WriteCloser, error)"]},{"Name":"const:seelog","Fields":["seelog.messageLen"]}]}
{"Filepath":"vendor/src/github.com/cihub/seelog/writers_formattedwriter.go","Functions":[{"Uniquefunname":"func (formattedWriter *formattedWriter) Format() *formatter","Funname":"Format","Returntype":"*formatter","Args":""},{"Uniquefunname":"func NewFormattedWriter(writer io.Writer, formatter *formatter) (*formattedWriter, error)","Funname":"NewFormattedWriter","Returntype":"(*formattedWriter, error)","Args":"writer io.Writer, formatter *formatter"},{"Uniquefunname":"func (formattedWriter *formattedWriter) String() string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func Write(message string, level LogLevel, context LogContextInterface)error","Funname":"Write","Returntype":"error","Args":"message string, level LogLevel, context LogContextInterface"},{"Uniquefunname":"func (formattedWriter *formattedWriter) Writer() io.Writer","Funname":"Writer","Returntype":"io.Writer","Args":""},{"Uniquefunname":"func NewFormattedWriter(writer io.Writer, formatter *formatter) (*formattedWriter, error)","Funname":"seelog.NewFormattedWriter","Returntype":"(*formattedWriter, error)","Args":"writer io.Writer, formatter *formatter"},{"Uniquefunname":"func (formattedWriter *formattedWriter) Format() *formatter","Funname":"seelog.formattedWriter.Format","Returntype":"*formatter","Args":""},{"Uniquefunname":"func (formattedWriter *formattedWriter) String() string","Funname":"seelog.formattedWriter.String","Returntype":"string","Args":""},{"Uniquefunname":"func seelog.formattedWriter.Write(message string, level LogLevel, context LogContextInterface)error","Funname":"seelog.formattedWriter.Write","Returntype":"error","Args":"message string, level LogLevel, context LogContextInterface"},{"Uniquefunname":"func (formattedWriter *formattedWriter) Writer() io.Writer","Funname":"seelog.formattedWriter.Writer","Returntype":"io.Writer","Args":""}],"Records":[{"Name":"struct:seelog.formattedWriter","Fields":["seelog.formattedWriter.formatter *formatter","seelog.formattedWriter.writer io.Writer"]}]}
{"Filepath":"vendor/src/github.com/cihub/seelog/writers_formattedwriter_test.go","Functions":[{"Uniquefunname":"func TestformattedWriter(t *testing.T)","Funname":"TestformattedWriter","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestformattedWriter(t *testing.T)","Funname":"seelog.TestformattedWriter","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/cihub/seelog/writers_rollingfilewriter.go","Functions":[{"Uniquefunname":"func (rw *rollingFileWriter) Close() error","Funname":"Close","Returntype":"error","Args":""},{"Uniquefunname":"func Len()int","Funname":"Len","Returntype":"int","Args":""},{"Uniquefunname":"func Len()int","Funname":"Len","Returntype":"int","Args":""},{"Uniquefunname":"func (p rollSizeFileTailsSlice) Less(i, j int) bool","Funname":"Less","Returntype":"bool","Args":"i, j int"},{"Uniquefunname":"func (p rollTimeFileTailsSlice) Less(i, j int) bool","Funname":"Less","Returntype":"bool","Args":"i, j int"},{"Uniquefunname":"func NewRollingFileWriterSize(fpath string, atype rollingArchiveType, apath string, maxSize int64, maxRolls int, namemode rollingNameMode)(*rollingFileWriterSize, error)","Funname":"NewRollingFileWriterSize","Returntype":"(*rollingFileWriterSize, error)","Args":"fpath string, atype rollingArchiveType, apath string, maxSize int64, maxRolls int, namemode rollingNameMode"},{"Uniquefunname":"func NewRollingFileWriterTime(fpath string, atype rollingArchiveType, apath string, maxr int, timePattern string, interval rollingIntervalType, namemode rollingNameMode)(*rollingFileWriterTime, error)","Funname":"NewRollingFileWriterTime","Returntype":"(*rollingFileWriterTime, error)","Args":"fpath string, atype rollingArchiveType, apath string, maxr int, timePattern string, interval rollingIntervalType, namemode rollingNameMode"},{"Uniquefunname":"func (rws *rollingFileWriterSize) String() string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func (rwt *rollingFileWriterTime) String() string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func Swap(i, j int)","Funname":"Swap","Returntype":"","Args":"i, j int"},{"Uniquefunname":"func Swap(i, j int)","Funname":"Swap","Returntype":"","Args":"i, j int"},{"Uniquefunname":"func (rw *rollingFileWriter) Write(bytes []byte) (n int, err error)","Funname":"Write","Returntype":"(n int, err error)","Args":"bytes []byte"},{"Uniquefunname":"func (rw *rollingFileWriter) createFileAndFolderIfNeeded() error","Funname":"createFileAndFolderIfNeeded","Returntype":"error","Args":""},{"Uniquefunname":"func (rw *rollingFileWriter) createFullFileName(originalName, rollname string) string","Funname":"createFullFileName","Returntype":"string","Args":"originalName, rollname string"},{"Uniquefunname":"func (rw *rollingFileWriter) deleteOldRolls(history []string) error","Funname":"deleteOldRolls","Returntype":"error","Args":"history []string"},{"Uniquefunname":"func (rws *rollingFileWriterSize) getCurrentModifiedFileName(originalFileName string) string","Funname":"getCurrentModifiedFileName","Returntype":"string","Args":"originalFileName string"},{"Uniquefunname":"func (rwt *rollingFileWriterTime) getCurrentModifiedFileName(originalFileName string) string","Funname":"getCurrentModifiedFileName","Returntype":"string","Args":"originalFileName string"},{"Uniquefunname":"func (rw *rollingFileWriter) getFileRollName(fileName string) string","Funname":"getFileRollName","Returntype":"string","Args":"fileName string"},{"Uniquefunname":"func (rws *rollingFileWriterSize) getNewHistoryRollFileName(lastRollName string) string","Funname":"getNewHistoryRollFileName","Returntype":"string","Args":"lastRollName string"},{"Uniquefunname":"func (rwt *rollingFileWriterTime) getNewHistoryRollFileName(lastRollName string) string","Funname":"getNewHistoryRollFileName","Returntype":"string","Args":"lastRollName string"},{"Uniquefunname":"func (rw *rollingFileWriter) getSortedLogHistory() ([]string, error)","Funname":"getSortedLogHistory","Returntype":"([]string, error)","Args":""},{"Uniquefunname":"func (rw *rollingFileWriter) hasRollName(file string) bool","Funname":"hasRollName","Returntype":"bool","Args":"file string"},{"Uniquefunname":"func (rws *rollingFileWriterSize) isFileRollNameValid(rname string) bool","Funname":"isFileRollNameValid","Returntype":"bool","Args":"rname string"},{"Uniquefunname":"func (rwt *rollingFileWriterTime) isFileRollNameValid(rname string) bool","Funname":"isFileRollNameValid","Returntype":"bool","Args":"rname string"},{"Uniquefunname":"func (rws *rollingFileWriterSize) needsToRoll() (bool, error)","Funname":"needsToRoll","Returntype":"(bool, error)","Args":""},{"Uniquefunname":"func (rwt *rollingFileWriterTime) needsToRoll() (bool, error)","Funname":"needsToRoll","Returntype":"(bool, error)","Args":""},{"Uniquefunname":"func newRollingFileWriter(fpath string, rtype rollingType, atype rollingArchiveType, apath string, maxr int, namemode rollingNameMode)(*rollingFileWriter, error)","Funname":"newRollingFileWriter","Returntype":"(*rollingFileWriter, error)","Args":"fpath string, rtype rollingType, atype rollingArchiveType, apath string, maxr int, namemode rollingNameMode"},{"Uniquefunname":"func rollingArchiveTypeFromString(rollingArchiveTypeStr string) (rollingArchiveType, bool)","Funname":"rollingArchiveTypeFromString","Returntype":"(rollingArchiveType, bool)","Args":"rollingArchiveTypeStr string"},{"Uniquefunname":"func rollingIntervalTypeFromString(rollingTypeStr string) (rollingIntervalType, bool)","Funname":"rollingIntervalTypeFromString","Returntype":"(rollingIntervalType, bool)","Args":"rollingTypeStr string"},{"Uniquefunname":"func rollingNameModeFromString(rollingNameStr string) (rollingNameMode, bool)","Funname":"rollingNameModeFromString","Returntype":"(rollingNameMode, bool)","Args":"rollingNameStr string"},{"Uniquefunname":"func rollingTypeFromString(rollingTypeStr string) (rollingType, bool)","Funname":"rollingTypeFromString","Returntype":"(rollingType, bool)","Args":"rollingTypeStr string"},{"Uniquefunname":"func seelog.NewRollingFileWriterSize(fpath string, atype rollingArchiveType, apath string, maxSize int64, maxRolls int, namemode rollingNameMode)(*rollingFileWriterSize, error)","Funname":"seelog.NewRollingFileWriterSize","Returntype":"(*rollingFileWriterSize, error)","Args":"fpath string, atype rollingArchiveType, apath string, maxSize int64, maxRolls int, namemode rollingNameMode"},{"Uniquefunname":"func seelog.NewRollingFileWriterTime(fpath string, atype rollingArchiveType, apath string, maxr int, timePattern string, interval rollingIntervalType, namemode rollingNameMode)(*rollingFileWriterTime, error)","Funname":"seelog.NewRollingFileWriterTime","Returntype":"(*rollingFileWriterTime, error)","Args":"fpath string, atype rollingArchiveType, apath string, maxr int, timePattern string, interval rollingIntervalType, namemode rollingNameMode"},{"Uniquefunname":"func seelog.newRollingFileWriter(fpath string, rtype rollingType, atype rollingArchiveType, apath string, maxr int, namemode rollingNameMode)(*rollingFileWriter, error)","Funname":"seelog.newRollingFileWriter","Returntype":"(*rollingFileWriter, error)","Args":"fpath string, rtype rollingType, atype rollingArchiveType, apath string, maxr int, namemode rollingNameMode"},{"Uniquefunname":"func seelog.rollSizeFileTailsSlice.Len()int","Funname":"seelog.rollSizeFileTailsSlice.Len","Returntype":"int","Args":""},{"Uniquefunname":"func (p rollSizeFileTailsSlice) Less(i, j int) bool","Funname":"seelog.rollSizeFileTailsSlice.Less","Returntype":"bool","Args":"i, j int"},{"Uniquefunname":"func seelog.rollSizeFileTailsSlice.Swap(i, j int)","Funname":"seelog.rollSizeFileTailsSlice.Swap","Returntype":"","Args":"i, j int"},{"Uniquefunname":"func seelog.rollTimeFileTailsSlice.Len()int","Funname":"seelog.rollTimeFileTailsSlice.Len","Returntype":"int","Args":""},{"Uniquefunname":"func (p rollTimeFileTailsSlice) Less(i, j int) bool","Funname":"seelog.rollTimeFileTailsSlice.Less","Returntype":"bool","Args":"i, j int"},{"Uniquefunname":"func seelog.rollTimeFileTailsSlice.Swap(i, j int)","Funname":"seelog.rollTimeFileTailsSlice.Swap","Returntype":"","Args":"i, j int"},{"Uniquefunname":"func rollingArchiveTypeFromString(rollingArchiveTypeStr string) (rollingArchiveType, bool)","Funname":"seelog.rollingArchiveTypeFromString","Returntype":"(rollingArchiveType, bool)","Args":"rollingArchiveTypeStr string"},{"Uniquefunname":"func (rw *rollingFileWriter) Close() error","Funname":"seelog.rollingFileWriter.Close","Returntype":"error","Args":""},{"Uniquefunname":"func (rw *rollingFileWriter) Write(bytes []byte) (n int, err error)","Funname":"seelog.rollingFileWriter.Write","Returntype":"(n int, err error)","Args":"bytes []byte"},{"Uniquefunname":"func (rw *rollingFileWriter) createFileAndFolderIfNeeded() error","Funname":"seelog.rollingFileWriter.createFileAndFolderIfNeeded","Returntype":"error","Args":""},{"Uniquefunname":"func (rw *rollingFileWriter) createFullFileName(originalName, rollname string) string","Funname":"seelog.rollingFileWriter.createFullFileName","Returntype":"string","Args":"originalName, rollname string"},{"Uniquefunname":"func (rw *rollingFileWriter) deleteOldRolls(history []string) error","Funname":"seelog.rollingFileWriter.deleteOldRolls","Returntype":"error","Args":"history []string"},{"Uniquefunname":"func (rw *rollingFileWriter) getFileRollName(fileName string) string","Funname":"seelog.rollingFileWriter.getFileRollName","Returntype":"string","Args":"fileName string"},{"Uniquefunname":"func (rw *rollingFileWriter) getSortedLogHistory() ([]string, error)","Funname":"seelog.rollingFileWriter.getSortedLogHistory","Returntype":"([]string, error)","Args":""},{"Uniquefunname":"func (rw *rollingFileWriter) hasRollName(file string) bool","Funname":"seelog.rollingFileWriter.hasRollName","Returntype":"bool","Args":"file string"},{"Uniquefunname":"func (rws *rollingFileWriterSize) String() string","Funname":"seelog.rollingFileWriterSize.String","Returntype":"string","Args":""},{"Uniquefunname":"func (rws *rollingFileWriterSize) getCurrentModifiedFileName(originalFileName string) string","Funname":"seelog.rollingFileWriterSize.getCurrentModifiedFileName","Returntype":"string","Args":"originalFileName string"},{"Uniquefunname":"func (rws *rollingFileWriterSize) getNewHistoryRollFileName(lastRollName string) string","Funname":"seelog.rollingFileWriterSize.getNewHistoryRollFileName","Returntype":"string","Args":"lastRollName string"},{"Uniquefunname":"func (rws *rollingFileWriterSize) isFileRollNameValid(rname string) bool","Funname":"seelog.rollingFileWriterSize.isFileRollNameValid","Returntype":"bool","Args":"rname string"},{"Uniquefunname":"func (rws *rollingFileWriterSize) needsToRoll() (bool, error)","Funname":"seelog.rollingFileWriterSize.needsToRoll","Returntype":"(bool, error)","Args":""},{"Uniquefunname":"func (rws *rollingFileWriterSize) sortFileRollNamesAsc(fs []string) ([]string, error)","Funname":"seelog.rollingFileWriterSize.sortFileRollNamesAsc","Returntype":"([]string, error)","Args":"fs []string"},{"Uniquefunname":"func (rwt *rollingFileWriterTime) String() string","Funname":"seelog.rollingFileWriterTime.String","Returntype":"string","Args":""},{"Uniquefunname":"func (rwt *rollingFileWriterTime) getCurrentModifiedFileName(originalFileName string) string","Funname":"seelog.rollingFileWriterTime.getCurrentModifiedFileName","Returntype":"string","Args":"originalFileName string"},{"Uniquefunname":"func (rwt *rollingFileWriterTime) getNewHistoryRollFileName(lastRollName string) string","Funname":"seelog.rollingFileWriterTime.getNewHistoryRollFileName","Returntype":"string","Args":"lastRollName string"},{"Uniquefunname":"func (rwt *rollingFileWriterTime) isFileRollNameValid(rname string) bool","Funname":"seelog.rollingFileWriterTime.isFileRollNameValid","Returntype":"bool","Args":"rname string"},{"Uniquefunname":"func (rwt *rollingFileWriterTime) needsToRoll() (bool, error)","Funname":"seelog.rollingFileWriterTime.needsToRoll","Returntype":"(bool, error)","Args":""},{"Uniquefunname":"func (rwt *rollingFileWriterTime) sortFileRollNamesAsc(fs []string) ([]string, error)","Funname":"seelog.rollingFileWriterTime.sortFileRollNamesAsc","Returntype":"([]string, error)","Args":"fs []string"},{"Uniquefunname":"func rollingIntervalTypeFromString(rollingTypeStr string) (rollingIntervalType, bool)","Funname":"seelog.rollingIntervalTypeFromString","Returntype":"(rollingIntervalType, bool)","Args":"rollingTypeStr string"},{"Uniquefunname":"func rollingNameModeFromString(rollingNameStr string) (rollingNameMode, bool)","Funname":"seelog.rollingNameModeFromString","Returntype":"(rollingNameMode, bool)","Args":"rollingNameStr string"},{"Uniquefunname":"func rollingTypeFromString(rollingTypeStr string) (rollingType, bool)","Funname":"seelog.rollingTypeFromString","Returntype":"(rollingType, bool)","Args":"rollingTypeStr string"},{"Uniquefunname":"func (rws *rollingFileWriterSize) sortFileRollNamesAsc(fs []string) ([]string, error)","Funname":"sortFileRollNamesAsc","Returntype":"([]string, error)","Args":"fs []string"},{"Uniquefunname":"func (rwt *rollingFileWriterTime) sortFileRollNamesAsc(fs []string) ([]string, error)","Funname":"sortFileRollNamesAsc","Returntype":"([]string, error)","Args":"fs []string"}],"Records":[{"Name":"struct:seelog.rollTimeFileTailsSlice","Fields":["seelog.rollTimeFileTailsSlice.data []string","seelog.rollTimeFileTailsSlice.pattern string"]},{"Name":"interface","Fields":["seelog.rollerVirtual"]},{"Name":"const:seelog","Fields":["seelog.rollingArchiveNone","seelog.rollingArchiveZip","seelog.rollingIntervalAny","seelog.rollingIntervalDaily","seelog.rollingLogHistoryDelimiter","seelog.rollingNameModePostfix","seelog.rollingNameModePrefix","seelog.rollingTypeSize","seelog.rollingTypeTime"]},{"Name":"var:seelog","Fields":["seelog.rollingArchiveTypesDefaultNames","seelog.rollingArchiveTypesStringRepresentation","seelog.rollingInvervalTypesStringRepresentation","seelog.rollingNameModesStringRepresentation","seelog.rollingTypesStringRepresentation"]},{"Name":"struct:seelog.rollingFileWriter","Fields":["seelog.rollingFileWriter.archivePath string","seelog.rollingFileWriter.archiveType rollingArchiveType","seelog.rollingFileWriter.currentDirPath string","seelog.rollingFileWriter.currentFile *os.File","seelog.rollingFileWriter.currentFileSize int64","seelog.rollingFileWriter.fileName string","seelog.rollingFileWriter.maxRolls int","seelog.rollingFileWriter.nameMode rollingNameMode","seelog.rollingFileWriter.originalFileName string","seelog.rollingFileWriter.rollingType rollingType","seelog.rollingFileWriter.self rollerVirtual"]},{"Name":"struct:seelog.rollingFileWriterSize","Fields":["seelog.rollingFileWriterSize.maxFileSize int64"]},{"Name":"struct:seelog.rollingFileWriterTime","Fields":["seelog.rollingFileWriterTime.currentTimeFileName string","seelog.rollingFileWriterTime.interval rollingIntervalType","seelog.rollingFileWriterTime.timePattern string"]}]}
{"Filepath":"vendor/src/github.com/cihub/seelog/writers_rollingfilewriter_test.go","Functions":[{"Uniquefunname":"func TestRollingFileWriter(t *testing.T)","Funname":"TestRollingFileWriter","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func createRollingDatefileWriterTestCase(files []string, fileName string, datePattern string, writeCount int, resFiles []string, nameMode rollingNameMode)*fileWriterTestCase","Funname":"createRollingDatefileWriterTestCase","Returntype":"*fileWriterTestCase","Args":"files []string, fileName string, datePattern string, writeCount int, resFiles []string, nameMode rollingNameMode"},{"Uniquefunname":"func createRollingSizeFileWriterTestCase(files []string, fileName string, fileSize int64, maxRolls int, writeCount int, resFiles []string, nameMode rollingNameMode)*fileWriterTestCase","Funname":"createRollingSizeFileWriterTestCase","Returntype":"*fileWriterTestCase","Args":"files []string, fileName string, fileSize int64, maxRolls int, writeCount int, resFiles []string, nameMode rollingNameMode"},{"Uniquefunname":"func rollingFileWriterGetter(testCase *fileWriterTestCase) (io.WriteCloser, error)","Funname":"rollingFileWriterGetter","Returntype":"(io.WriteCloser, error)","Args":"testCase *fileWriterTestCase"},{"Uniquefunname":"func TestRollingFileWriter(t *testing.T)","Funname":"seelog.TestRollingFileWriter","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func seelog.createRollingDatefileWriterTestCase(files []string, fileName string, datePattern string, writeCount int, resFiles []string, nameMode rollingNameMode)*fileWriterTestCase","Funname":"seelog.createRollingDatefileWriterTestCase","Returntype":"*fileWriterTestCase","Args":"files []string, fileName string, datePattern string, writeCount int, resFiles []string, nameMode rollingNameMode"},{"Uniquefunname":"func seelog.createRollingSizeFileWriterTestCase(files []string, fileName string, fileSize int64, maxRolls int, writeCount int, resFiles []string, nameMode rollingNameMode)*fileWriterTestCase","Funname":"seelog.createRollingSizeFileWriterTestCase","Returntype":"*fileWriterTestCase","Args":"files []string, fileName string, fileSize int64, maxRolls int, writeCount int, resFiles []string, nameMode rollingNameMode"},{"Uniquefunname":"func rollingFileWriterGetter(testCase *fileWriterTestCase) (io.WriteCloser, error)","Funname":"seelog.rollingFileWriterGetter","Returntype":"(io.WriteCloser, error)","Args":"testCase *fileWriterTestCase"}],"Records":[{"Name":"var:seelog","Fields":["seelog.rollingfileWriterTests"]}]}
{"Filepath":"vendor/src/github.com/cihub/seelog/writers_smtpwriter.go","Functions":[{"Uniquefunname":"func (smtpw *smtpWriter) Close() error","Funname":"Close","Returntype":"error","Args":""},{"Uniquefunname":"func NewSMTPWriter(sa, sn string, ras []string, hn, hp, un, pwd string, cacdps []string, subj string, headers []string)*smtpWriter","Funname":"NewSMTPWriter","Returntype":"*smtpWriter","Args":"sa, sn string, ras []string, hn, hp, un, pwd string, cacdps []string, subj string, headers []string"},{"Uniquefunname":"func (smtpw *smtpWriter) Write(data []byte) (int, error)","Funname":"Write","Returntype":"(int, error)","Args":"data []byte"},{"Uniquefunname":"func getTLSConfig(pemFileDirPaths []string, hostName string) (config *tls.Config, err error)","Funname":"getTLSConfig","Returntype":"(config *tls.Config, err error)","Args":"pemFileDirPaths []string, hostName string"},{"Uniquefunname":"func prepareMessage(senderAddr, senderName, subject string, body []byte, headers []string)[]byte","Funname":"prepareMessage","Returntype":"[]byte","Args":"senderAddr, senderName, subject string, body []byte, headers []string"},{"Uniquefunname":"func seelog.NewSMTPWriter(sa, sn string, ras []string, hn, hp, un, pwd string, cacdps []string, subj string, headers []string)*smtpWriter","Funname":"seelog.NewSMTPWriter","Returntype":"*smtpWriter","Args":"sa, sn string, ras []string, hn, hp, un, pwd string, cacdps []string, subj string, headers []string"},{"Uniquefunname":"func getTLSConfig(pemFileDirPaths []string, hostName string) (config *tls.Config, err error)","Funname":"seelog.getTLSConfig","Returntype":"(config *tls.Config, err error)","Args":"pemFileDirPaths []string, hostName string"},{"Uniquefunname":"func seelog.prepareMessage(senderAddr, senderName, subject string, body []byte, headers []string)[]byte","Funname":"seelog.prepareMessage","Returntype":"[]byte","Args":"senderAddr, senderName, subject string, body []byte, headers []string"},{"Uniquefunname":"func seelog.sendMailWithTLSConfig(config *tls.Config, addr string, a smtp.Auth, from string, to []string, msg []byte)error","Funname":"seelog.sendMailWithTLSConfig","Returntype":"error","Args":"config *tls.Config, addr string, a smtp.Auth, from string, to []string, msg []byte"},{"Uniquefunname":"func (smtpw *smtpWriter) Close() error","Funname":"seelog.smtpWriter.Close","Returntype":"error","Args":""},{"Uniquefunname":"func (smtpw *smtpWriter) Write(data []byte) (int, error)","Funname":"seelog.smtpWriter.Write","Returntype":"(int, error)","Args":"data []byte"},{"Uniquefunname":"func sendMailWithTLSConfig(config *tls.Config, addr string, a smtp.Auth, from string, to []string, msg []byte)error","Funname":"sendMailWithTLSConfig","Returntype":"error","Args":"config *tls.Config, addr string, a smtp.Auth, from string, to []string, msg []byte"}],"Records":[{"Name":"const:seelog","Fields":["seelog.DefaultSubjectPhrase","seelog.rfc5321SubjectPattern"]},{"Name":"struct:seelog.smtpWriter","Fields":["seelog.smtpWriter.auth smtp.Auth","seelog.smtpWriter.caCertDirPaths []string","seelog.smtpWriter.hostName string","seelog.smtpWriter.hostNameWithPort string","seelog.smtpWriter.hostPort string","seelog.smtpWriter.mailHeaders []string","seelog.smtpWriter.recipientAddresses []string","seelog.smtpWriter.senderAddress string","seelog.smtpWriter.senderName string","seelog.smtpWriter.subject string"]}]}
{"Filepath":"vendor/src/github.com/codegangsta/cli/app.go","Functions":[{"Uniquefunname":"func (a *App) Command(name string) *Command","Funname":"Command","Returntype":"*Command","Args":"name string"},{"Uniquefunname":"func NewApp() *App","Funname":"NewApp","Returntype":"*App","Args":""},{"Uniquefunname":"func (a *App) Run(arguments []string) (err error)","Funname":"Run","Returntype":"(err error)","Args":"arguments []string"},{"Uniquefunname":"func (a *App) RunAndExitOnError()","Funname":"RunAndExitOnError","Returntype":"","Args":""},{"Uniquefunname":"func (a *App) RunAsSubcommand(ctx *Context) (err error)","Funname":"RunAsSubcommand","Returntype":"(err error)","Args":"ctx *Context"},{"Uniquefunname":"func (a Author) String() string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func (a *App) appendFlag(flag Flag)","Funname":"appendFlag","Returntype":"","Args":"flag Flag"},{"Uniquefunname":"func (a *App) Command(name string) *Command","Funname":"cli.App.Command","Returntype":"*Command","Args":"name string"},{"Uniquefunname":"func (a *App) Run(arguments []string) (err error)","Funname":"cli.App.Run","Returntype":"(err error)","Args":"arguments []string"},{"Uniquefunname":"func (a *App) RunAndExitOnError()","Funname":"cli.App.RunAndExitOnError","Returntype":"","Args":""},{"Uniquefunname":"func (a *App) RunAsSubcommand(ctx *Context) (err error)","Funname":"cli.App.RunAsSubcommand","Returntype":"(err error)","Args":"ctx *Context"},{"Uniquefunname":"func (a *App) appendFlag(flag Flag)","Funname":"cli.App.appendFlag","Returntype":"","Args":"flag Flag"},{"Uniquefunname":"func (a *App) hasFlag(flag Flag) bool","Funname":"cli.App.hasFlag","Returntype":"bool","Args":"flag Flag"},{"Uniquefunname":"func (a Author) String() string","Funname":"cli.Author.String","Returntype":"string","Args":""},{"Uniquefunname":"func NewApp() *App","Funname":"cli.NewApp","Returntype":"*App","Args":""},{"Uniquefunname":"func compileTime() time.Time","Funname":"cli.compileTime","Returntype":"time.Time","Args":""},{"Uniquefunname":"func compileTime() time.Time","Funname":"compileTime","Returntype":"time.Time","Args":""},{"Uniquefunname":"func (a *App) hasFlag(flag Flag) bool","Funname":"hasFlag","Returntype":"bool","Args":"flag Flag"}],"Records":[{"Name":"struct:cli.App","Fields":["cli.App.Action func(context *Context)","cli.App.After func(context *Context) error","cli.App.ArgsUsage string","cli.App.Author string","cli.App.Authors []Author","cli.App.BashComplete func(context *Context)","cli.App.Before func(context *Context) error","cli.App.CommandNotFound func(context *Context, command string)","cli.App.Commands []Command","cli.App.Compiled time.Time","cli.App.Copyright string","cli.App.Email string","cli.App.EnableBashCompletion bool","cli.App.Flags []Flag","cli.App.HelpName string","cli.App.HideHelp bool","cli.App.HideVersion bool","cli.App.Name string","cli.App.OnUsageError func(context *Context, err error, isSubcommand bool) error","cli.App.Usage string","cli.App.UsageText string","cli.App.Version string","cli.App.Writer io.Writer"]},{"Name":"struct:cli.Author","Fields":["cli.Author.Email string","cli.Author.Name string"]}]}
{"Filepath":"vendor/src/github.com/codegangsta/cli/app_test.go","Functions":[{"Uniquefunname":"func ExampleApp_Run()","Funname":"ExampleApp_Run","Returntype":"","Args":""},{"Uniquefunname":"func ExampleApp_Run_bashComplete()","Funname":"ExampleApp_Run_bashComplete","Returntype":"","Args":""},{"Uniquefunname":"func ExampleApp_Run_help()","Funname":"ExampleApp_Run_help","Returntype":"","Args":""},{"Uniquefunname":"func ExampleApp_Run_subcommand()","Funname":"ExampleApp_Run_subcommand","Returntype":"","Args":""},{"Uniquefunname":"func (fw *mockWriter) GetWritten() (b []byte)","Funname":"GetWritten","Returntype":"(b []byte)","Args":""},{"Uniquefunname":"func TestAppCommandNotFound(t *testing.T)","Funname":"TestAppCommandNotFound","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestAppHelpPrinter(t *testing.T)","Funname":"TestAppHelpPrinter","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestAppNoHelpFlag(t *testing.T)","Funname":"TestAppNoHelpFlag","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestAppVersionPrinter(t *testing.T)","Funname":"TestAppVersionPrinter","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestApp_AfterFunc(t *testing.T)","Funname":"TestApp_AfterFunc","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestApp_BeforeFunc(t *testing.T)","Funname":"TestApp_BeforeFunc","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestApp_Command(t *testing.T)","Funname":"TestApp_Command","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestApp_CommandWithArgBeforeFlags(t *testing.T)","Funname":"TestApp_CommandWithArgBeforeFlags","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestApp_CommandWithDash(t *testing.T)","Funname":"TestApp_CommandWithDash","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestApp_CommandWithFlagBeforeTerminator(t *testing.T)","Funname":"TestApp_CommandWithFlagBeforeTerminator","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestApp_CommandWithNoFlagBeforeTerminator(t *testing.T)","Funname":"TestApp_CommandWithNoFlagBeforeTerminator","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestApp_DefaultStdout(t *testing.T)","Funname":"TestApp_DefaultStdout","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestApp_Float64Flag(t *testing.T)","Funname":"TestApp_Float64Flag","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestApp_OnUsageError_WithWrongFlagValue(t *testing.T)","Funname":"TestApp_OnUsageError_WithWrongFlagValue","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestApp_OnUsageError_WithWrongFlagValue_ForSubcommand(t *testing.T)","Funname":"TestApp_OnUsageError_WithWrongFlagValue_ForSubcommand","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestApp_ParseSliceFlags(t *testing.T)","Funname":"TestApp_ParseSliceFlags","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestApp_ParseSliceFlagsWithMissingValue(t *testing.T)","Funname":"TestApp_ParseSliceFlagsWithMissingValue","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestApp_Run(t *testing.T)","Funname":"TestApp_Run","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestApp_RunAsSubcommandParseFlags(t *testing.T)","Funname":"TestApp_RunAsSubcommandParseFlags","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestApp_Run_CommandHelpName(t *testing.T)","Funname":"TestApp_Run_CommandHelpName","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestApp_Run_CommandSubcommandHelpName(t *testing.T)","Funname":"TestApp_Run_CommandSubcommandHelpName","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestApp_Run_CommandWithSubcommandHasHelpTopic(t *testing.T)","Funname":"TestApp_Run_CommandWithSubcommandHasHelpTopic","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestApp_Run_DoesNotOverwriteErrorFromBefore(t *testing.T)","Funname":"TestApp_Run_DoesNotOverwriteErrorFromBefore","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestApp_Run_Help(t *testing.T)","Funname":"TestApp_Run_Help","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestApp_Run_SubcommandDoesNotOverwriteErrorFromBefore(t *testing.T)","Funname":"TestApp_Run_SubcommandDoesNotOverwriteErrorFromBefore","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestApp_Run_SubcommandFullPath(t *testing.T)","Funname":"TestApp_Run_SubcommandFullPath","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestApp_Run_SubcommandHelpName(t *testing.T)","Funname":"TestApp_Run_SubcommandHelpName","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestApp_Run_Version(t *testing.T)","Funname":"TestApp_Run_Version","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestApp_SetStdout(t *testing.T)","Funname":"TestApp_SetStdout","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestGlobalFlag(t *testing.T)","Funname":"TestGlobalFlag","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestGlobalFlagsInSubcommands(t *testing.T)","Funname":"TestGlobalFlagsInSubcommands","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func (fw *mockWriter) Write(p []byte) (n int, err error)","Funname":"Write","Returntype":"(n int, err error)","Args":"p []byte"},{"Uniquefunname":"func ExampleApp_Run()","Funname":"cli.ExampleApp_Run","Returntype":"","Args":""},{"Uniquefunname":"func ExampleApp_Run_bashComplete()","Funname":"cli.ExampleApp_Run_bashComplete","Returntype":"","Args":""},{"Uniquefunname":"func ExampleApp_Run_help()","Funname":"cli.ExampleApp_Run_help","Returntype":"","Args":""},{"Uniquefunname":"func ExampleApp_Run_subcommand()","Funname":"cli.ExampleApp_Run_subcommand","Returntype":"","Args":""},{"Uniquefunname":"func TestAppCommandNotFound(t *testing.T)","Funname":"cli.TestAppCommandNotFound","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestAppHelpPrinter(t *testing.T)","Funname":"cli.TestAppHelpPrinter","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestAppNoHelpFlag(t *testing.T)","Funname":"cli.TestAppNoHelpFlag","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestAppVersionPrinter(t *testing.T)","Funname":"cli.TestAppVersionPrinter","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestApp_AfterFunc(t *testing.T)","Funname":"cli.TestApp_AfterFunc","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestApp_BeforeFunc(t *testing.T)","Funname":"cli.TestApp_BeforeFunc","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestApp_Command(t *testing.T)","Funname":"cli.TestApp_Command","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestApp_CommandWithArgBeforeFlags(t *testing.T)","Funname":"cli.TestApp_CommandWithArgBeforeFlags","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestApp_CommandWithDash(t *testing.T)","Funname":"cli.TestApp_CommandWithDash","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestApp_CommandWithFlagBeforeTerminator(t *testing.T)","Funname":"cli.TestApp_CommandWithFlagBeforeTerminator","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestApp_CommandWithNoFlagBeforeTerminator(t *testing.T)","Funname":"cli.TestApp_CommandWithNoFlagBeforeTerminator","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestApp_DefaultStdout(t *testing.T)","Funname":"cli.TestApp_DefaultStdout","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestApp_Float64Flag(t *testing.T)","Funname":"cli.TestApp_Float64Flag","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestApp_OnUsageError_WithWrongFlagValue(t *testing.T)","Funname":"cli.TestApp_OnUsageError_WithWrongFlagValue","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestApp_OnUsageError_WithWrongFlagValue_ForSubcommand(t *testing.T)","Funname":"cli.TestApp_OnUsageError_WithWrongFlagValue_ForSubcommand","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestApp_ParseSliceFlags(t *testing.T)","Funname":"cli.TestApp_ParseSliceFlags","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestApp_ParseSliceFlagsWithMissingValue(t *testing.T)","Funname":"cli.TestApp_ParseSliceFlagsWithMissingValue","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestApp_Run(t *testing.T)","Funname":"cli.TestApp_Run","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestApp_RunAsSubcommandParseFlags(t *testing.T)","Funname":"cli.TestApp_RunAsSubcommandParseFlags","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestApp_Run_CommandHelpName(t *testing.T)","Funname":"cli.TestApp_Run_CommandHelpName","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestApp_Run_CommandSubcommandHelpName(t *testing.T)","Funname":"cli.TestApp_Run_CommandSubcommandHelpName","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestApp_Run_CommandWithSubcommandHasHelpTopic(t *testing.T)","Funname":"cli.TestApp_Run_CommandWithSubcommandHasHelpTopic","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestApp_Run_DoesNotOverwriteErrorFromBefore(t *testing.T)","Funname":"cli.TestApp_Run_DoesNotOverwriteErrorFromBefore","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestApp_Run_Help(t *testing.T)","Funname":"cli.TestApp_Run_Help","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestApp_Run_SubcommandDoesNotOverwriteErrorFromBefore(t *testing.T)","Funname":"cli.TestApp_Run_SubcommandDoesNotOverwriteErrorFromBefore","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestApp_Run_SubcommandFullPath(t *testing.T)","Funname":"cli.TestApp_Run_SubcommandFullPath","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestApp_Run_SubcommandHelpName(t *testing.T)","Funname":"cli.TestApp_Run_SubcommandHelpName","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestApp_Run_Version(t *testing.T)","Funname":"cli.TestApp_Run_Version","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestApp_SetStdout(t *testing.T)","Funname":"cli.TestApp_SetStdout","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestGlobalFlag(t *testing.T)","Funname":"cli.TestGlobalFlag","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestGlobalFlagsInSubcommands(t *testing.T)","Funname":"cli.TestGlobalFlagsInSubcommands","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func (fw *mockWriter) GetWritten() (b []byte)","Funname":"cli.mockWriter.GetWritten","Returntype":"(b []byte)","Args":""},{"Uniquefunname":"func (fw *mockWriter) Write(p []byte) (n int, err error)","Funname":"cli.mockWriter.Write","Returntype":"(n int, err error)","Args":"p []byte"}],"Records":[{"Name":"var:cli","Fields":["cli.commandAppTests"]},{"Name":"struct:cli.mockWriter","Fields":["cli.mockWriter.written []byte"]}]}
{"Filepath":"vendor/src/github.com/codegangsta/cli/cli.go","Functions":[{"Uniquefunname":"func (m MultiError) Error() string","Funname":"Error","Returntype":"string","Args":""},{"Uniquefunname":"func NewMultiError(err ...error) MultiError","Funname":"NewMultiError","Returntype":"MultiError","Args":"err ...error"},{"Uniquefunname":"func (m MultiError) Error() string","Funname":"cli.MultiError.Error","Returntype":"string","Args":""},{"Uniquefunname":"func NewMultiError(err ...error) MultiError","Funname":"cli.NewMultiError","Returntype":"MultiError","Args":"err ...error"}],"Records":[{"Name":"struct:cli.MultiError","Fields":["cli.MultiError.Errors []error"]}]}
{"Filepath":"vendor/src/github.com/codegangsta/cli/command.go","Functions":[{"Uniquefunname":"func (c Command) FullName() string","Funname":"FullName","Returntype":"string","Args":""},{"Uniquefunname":"func (c Command) HasName(name string) bool","Funname":"HasName","Returntype":"bool","Args":"name string"},{"Uniquefunname":"func (c Command) Names() []string","Funname":"Names","Returntype":"[]string","Args":""},{"Uniquefunname":"func (c Command) Run(ctx *Context) (err error)","Funname":"Run","Returntype":"(err error)","Args":"ctx *Context"},{"Uniquefunname":"func (c Command) FullName() string","Funname":"cli.Command.FullName","Returntype":"string","Args":""},{"Uniquefunname":"func (c Command) HasName(name string) bool","Funname":"cli.Command.HasName","Returntype":"bool","Args":"name string"},{"Uniquefunname":"func (c Command) Names() []string","Funname":"cli.Command.Names","Returntype":"[]string","Args":""},{"Uniquefunname":"func (c Command) Run(ctx *Context) (err error)","Funname":"cli.Command.Run","Returntype":"(err error)","Args":"ctx *Context"},{"Uniquefunname":"func (c Command) startApp(ctx *Context) error","Funname":"cli.Command.startApp","Returntype":"error","Args":"ctx *Context"},{"Uniquefunname":"func (c Command) startApp(ctx *Context) error","Funname":"startApp","Returntype":"error","Args":"ctx *Context"}],"Records":[{"Name":"struct:cli.Command","Fields":["cli.Command.Action func(context *Context)","cli.Command.After func(context *Context) error","cli.Command.Aliases []string","cli.Command.ArgsUsage string","cli.Command.BashComplete func(context *Context)","cli.Command.Before func(context *Context) error","cli.Command.Description string","cli.Command.Flags []Flag","cli.Command.HelpName string","cli.Command.HideHelp bool","cli.Command.Name string","cli.Command.OnUsageError func(context *Context, err error) error","cli.Command.ShortName string","cli.Command.SkipFlagParsing bool","cli.Command.Subcommands []Command","cli.Command.Usage string","cli.Command.UsageText string","cli.Command.commandNamePath []string"]}]}
{"Filepath":"vendor/src/github.com/codegangsta/cli/command_test.go","Functions":[{"Uniquefunname":"func TestCommandFlagParsing(t *testing.T)","Funname":"TestCommandFlagParsing","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestCommand_OnUsageError_WithWrongFlagValue(t *testing.T)","Funname":"TestCommand_OnUsageError_WithWrongFlagValue","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestCommand_Run_DoesNotOverwriteErrorFromBefore(t *testing.T)","Funname":"TestCommand_Run_DoesNotOverwriteErrorFromBefore","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestCommandFlagParsing(t *testing.T)","Funname":"cli.TestCommandFlagParsing","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestCommand_OnUsageError_WithWrongFlagValue(t *testing.T)","Funname":"cli.TestCommand_OnUsageError_WithWrongFlagValue","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestCommand_Run_DoesNotOverwriteErrorFromBefore(t *testing.T)","Funname":"cli.TestCommand_Run_DoesNotOverwriteErrorFromBefore","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/codegangsta/cli/context.go","Functions":[{"Uniquefunname":"func (c *Context) Args() Args","Funname":"Args","Returntype":"Args","Args":""},{"Uniquefunname":"func (c *Context) Bool(name string) bool","Funname":"Bool","Returntype":"bool","Args":"name string"},{"Uniquefunname":"func (c *Context) BoolT(name string) bool","Funname":"BoolT","Returntype":"bool","Args":"name string"},{"Uniquefunname":"func (c *Context) Duration(name string) time.Duration","Funname":"Duration","Returntype":"time.Duration","Args":"name string"},{"Uniquefunname":"func (a Args) First() string","Funname":"First","Returntype":"string","Args":""},{"Uniquefunname":"func (c *Context) FlagNames() (names []string)","Funname":"FlagNames","Returntype":"(names []string)","Args":""},{"Uniquefunname":"func (c *Context) Float64(name string) float64","Funname":"Float64","Returntype":"float64","Args":"name string"},{"Uniquefunname":"func (c *Context) Generic(name string) interface","Funname":"Generic","Returntype":"interface{}","Args":"name string"},{"Uniquefunname":"func (a Args) Get(n int) string","Funname":"Get","Returntype":"string","Args":"n int"},{"Uniquefunname":"func (c *Context) GlobalBool(name string) bool","Funname":"GlobalBool","Returntype":"bool","Args":"name string"},{"Uniquefunname":"func (c *Context) GlobalDuration(name string) time.Duration","Funname":"GlobalDuration","Returntype":"time.Duration","Args":"name string"},{"Uniquefunname":"func (c *Context) GlobalFlagNames() (names []string)","Funname":"GlobalFlagNames","Returntype":"(names []string)","Args":""},{"Uniquefunname":"func (c *Context) GlobalGeneric(name string) interface","Funname":"GlobalGeneric","Returntype":"interface{}","Args":"name string"},{"Uniquefunname":"func (c *Context) GlobalInt(name string) int","Funname":"GlobalInt","Returntype":"int","Args":"name string"},{"Uniquefunname":"func (c *Context) GlobalIntSlice(name string) []int","Funname":"GlobalIntSlice","Returntype":"[]int","Args":"name string"},{"Uniquefunname":"func (c *Context) GlobalIsSet(name string) bool","Funname":"GlobalIsSet","Returntype":"bool","Args":"name string"},{"Uniquefunname":"func (c *Context) GlobalString(name string) string","Funname":"GlobalString","Returntype":"string","Args":"name string"},{"Uniquefunname":"func (c *Context) GlobalStringSlice(name string) []string","Funname":"GlobalStringSlice","Returntype":"[]string","Args":"name string"},{"Uniquefunname":"func (c *Context) Int(name string) int","Funname":"Int","Returntype":"int","Args":"name string"},{"Uniquefunname":"func (c *Context) IntSlice(name string) []int","Funname":"IntSlice","Returntype":"[]int","Args":"name string"},{"Uniquefunname":"func (c *Context) IsSet(name string) bool","Funname":"IsSet","Returntype":"bool","Args":"name string"},{"Uniquefunname":"func (c *Context) NArg() int","Funname":"NArg","Returntype":"int","Args":""},{"Uniquefunname":"func NewContext(app *App, set *flag.FlagSet, parentCtx *Context) *Context","Funname":"NewContext","Returntype":"*Context","Args":"app *App, set *flag.FlagSet, parentCtx *Context"},{"Uniquefunname":"func (c *Context) NumFlags() int","Funname":"NumFlags","Returntype":"int","Args":""},{"Uniquefunname":"func (c *Context) Parent() *Context","Funname":"Parent","Returntype":"*Context","Args":""},{"Uniquefunname":"func (a Args) Present() bool","Funname":"Present","Returntype":"bool","Args":""},{"Uniquefunname":"func (c *Context) String(name string) string","Funname":"String","Returntype":"string","Args":"name string"},{"Uniquefunname":"func (c *Context) StringSlice(name string) []string","Funname":"StringSlice","Returntype":"[]string","Args":"name string"},{"Uniquefunname":"func (a Args) Swap(from, to int) error","Funname":"Swap","Returntype":"error","Args":"from, to int"},{"Uniquefunname":"func (a Args) Tail() []string","Funname":"Tail","Returntype":"[]string","Args":""},{"Uniquefunname":"func (a Args) First() string","Funname":"cli.Args.First","Returntype":"string","Args":""},{"Uniquefunname":"func (a Args) Get(n int) string","Funname":"cli.Args.Get","Returntype":"string","Args":"n int"},{"Uniquefunname":"func (a Args) Present() bool","Funname":"cli.Args.Present","Returntype":"bool","Args":""},{"Uniquefunname":"func (a Args) Swap(from, to int) error","Funname":"cli.Args.Swap","Returntype":"error","Args":"from, to int"},{"Uniquefunname":"func (a Args) Tail() []string","Funname":"cli.Args.Tail","Returntype":"[]string","Args":""},{"Uniquefunname":"func (c *Context) Args() Args","Funname":"cli.Context.Args","Returntype":"Args","Args":""},{"Uniquefunname":"func (c *Context) Bool(name string) bool","Funname":"cli.Context.Bool","Returntype":"bool","Args":"name string"},{"Uniquefunname":"func (c *Context) BoolT(name string) bool","Funname":"cli.Context.BoolT","Returntype":"bool","Args":"name string"},{"Uniquefunname":"func (c *Context) Duration(name string) time.Duration","Funname":"cli.Context.Duration","Returntype":"time.Duration","Args":"name string"},{"Uniquefunname":"func (c *Context) FlagNames() (names []string)","Funname":"cli.Context.FlagNames","Returntype":"(names []string)","Args":""},{"Uniquefunname":"func (c *Context) Float64(name string) float64","Funname":"cli.Context.Float64","Returntype":"float64","Args":"name string"},{"Uniquefunname":"func (c *Context) Generic(name string) interface","Funname":"cli.Context.Generic","Returntype":"interface{}","Args":"name string"},{"Uniquefunname":"func (c *Context) GlobalBool(name string) bool","Funname":"cli.Context.GlobalBool","Returntype":"bool","Args":"name string"},{"Uniquefunname":"func (c *Context) GlobalDuration(name string) time.Duration","Funname":"cli.Context.GlobalDuration","Returntype":"time.Duration","Args":"name string"},{"Uniquefunname":"func (c *Context) GlobalFlagNames() (names []string)","Funname":"cli.Context.GlobalFlagNames","Returntype":"(names []string)","Args":""},{"Uniquefunname":"func (c *Context) GlobalGeneric(name string) interface","Funname":"cli.Context.GlobalGeneric","Returntype":"interface{}","Args":"name string"},{"Uniquefunname":"func (c *Context) GlobalInt(name string) int","Funname":"cli.Context.GlobalInt","Returntype":"int","Args":"name string"},{"Uniquefunname":"func (c *Context) GlobalIntSlice(name string) []int","Funname":"cli.Context.GlobalIntSlice","Returntype":"[]int","Args":"name string"},{"Uniquefunname":"func (c *Context) GlobalIsSet(name string) bool","Funname":"cli.Context.GlobalIsSet","Returntype":"bool","Args":"name string"},{"Uniquefunname":"func (c *Context) GlobalString(name string) string","Funname":"cli.Context.GlobalString","Returntype":"string","Args":"name string"},{"Uniquefunname":"func (c *Context) GlobalStringSlice(name string) []string","Funname":"cli.Context.GlobalStringSlice","Returntype":"[]string","Args":"name string"},{"Uniquefunname":"func (c *Context) Int(name string) int","Funname":"cli.Context.Int","Returntype":"int","Args":"name string"},{"Uniquefunname":"func (c *Context) IntSlice(name string) []int","Funname":"cli.Context.IntSlice","Returntype":"[]int","Args":"name string"},{"Uniquefunname":"func (c *Context) IsSet(name string) bool","Funname":"cli.Context.IsSet","Returntype":"bool","Args":"name string"},{"Uniquefunname":"func (c *Context) NArg() int","Funname":"cli.Context.NArg","Returntype":"int","Args":""},{"Uniquefunname":"func (c *Context) NumFlags() int","Funname":"cli.Context.NumFlags","Returntype":"int","Args":""},{"Uniquefunname":"func (c *Context) Parent() *Context","Funname":"cli.Context.Parent","Returntype":"*Context","Args":""},{"Uniquefunname":"func (c *Context) String(name string) string","Funname":"cli.Context.String","Returntype":"string","Args":"name string"},{"Uniquefunname":"func (c *Context) StringSlice(name string) []string","Funname":"cli.Context.StringSlice","Returntype":"[]string","Args":"name string"},{"Uniquefunname":"func NewContext(app *App, set *flag.FlagSet, parentCtx *Context) *Context","Funname":"cli.NewContext","Returntype":"*Context","Args":"app *App, set *flag.FlagSet, parentCtx *Context"},{"Uniquefunname":"func copyFlag(name string, ff *flag.Flag, set *flag.FlagSet)","Funname":"cli.copyFlag","Returntype":"","Args":"name string, ff *flag.Flag, set *flag.FlagSet"},{"Uniquefunname":"func lookupBool(name string, set *flag.FlagSet) bool","Funname":"cli.lookupBool","Returntype":"bool","Args":"name string, set *flag.FlagSet"},{"Uniquefunname":"func lookupBoolT(name string, set *flag.FlagSet) bool","Funname":"cli.lookupBoolT","Returntype":"bool","Args":"name string, set *flag.FlagSet"},{"Uniquefunname":"func lookupDuration(name string, set *flag.FlagSet) time.Duration","Funname":"cli.lookupDuration","Returntype":"time.Duration","Args":"name string, set *flag.FlagSet"},{"Uniquefunname":"func lookupFloat64(name string, set *flag.FlagSet) float64","Funname":"cli.lookupFloat64","Returntype":"float64","Args":"name string, set *flag.FlagSet"},{"Uniquefunname":"func lookupGeneric(name string, set *flag.FlagSet) interface","Funname":"cli.lookupGeneric","Returntype":"interface{}","Args":"name string, set *flag.FlagSet"},{"Uniquefunname":"func lookupGlobalFlagSet(name string, ctx *Context) *flag.FlagSet","Funname":"cli.lookupGlobalFlagSet","Returntype":"*flag.FlagSet","Args":"name string, ctx *Context"},{"Uniquefunname":"func lookupInt(name string, set *flag.FlagSet) int","Funname":"cli.lookupInt","Returntype":"int","Args":"name string, set *flag.FlagSet"},{"Uniquefunname":"func lookupIntSlice(name string, set *flag.FlagSet) []int","Funname":"cli.lookupIntSlice","Returntype":"[]int","Args":"name string, set *flag.FlagSet"},{"Uniquefunname":"func lookupString(name string, set *flag.FlagSet) string","Funname":"cli.lookupString","Returntype":"string","Args":"name string, set *flag.FlagSet"},{"Uniquefunname":"func lookupStringSlice(name string, set *flag.FlagSet) []string","Funname":"cli.lookupStringSlice","Returntype":"[]string","Args":"name string, set *flag.FlagSet"},{"Uniquefunname":"func normalizeFlags(flags []Flag, set *flag.FlagSet) error","Funname":"cli.normalizeFlags","Returntype":"error","Args":"flags []Flag, set *flag.FlagSet"},{"Uniquefunname":"func copyFlag(name string, ff *flag.Flag, set *flag.FlagSet)","Funname":"copyFlag","Returntype":"","Args":"name string, ff *flag.Flag, set *flag.FlagSet"},{"Uniquefunname":"func lookupBool(name string, set *flag.FlagSet) bool","Funname":"lookupBool","Returntype":"bool","Args":"name string, set *flag.FlagSet"},{"Uniquefunname":"func lookupBoolT(name string, set *flag.FlagSet) bool","Funname":"lookupBoolT","Returntype":"bool","Args":"name string, set *flag.FlagSet"},{"Uniquefunname":"func lookupDuration(name string, set *flag.FlagSet) time.Duration","Funname":"lookupDuration","Returntype":"time.Duration","Args":"name string, set *flag.FlagSet"},{"Uniquefunname":"func lookupFloat64(name string, set *flag.FlagSet) float64","Funname":"lookupFloat64","Returntype":"float64","Args":"name string, set *flag.FlagSet"},{"Uniquefunname":"func lookupGeneric(name string, set *flag.FlagSet) interface","Funname":"lookupGeneric","Returntype":"interface{}","Args":"name string, set *flag.FlagSet"},{"Uniquefunname":"func lookupGlobalFlagSet(name string, ctx *Context) *flag.FlagSet","Funname":"lookupGlobalFlagSet","Returntype":"*flag.FlagSet","Args":"name string, ctx *Context"},{"Uniquefunname":"func lookupInt(name string, set *flag.FlagSet) int","Funname":"lookupInt","Returntype":"int","Args":"name string, set *flag.FlagSet"},{"Uniquefunname":"func lookupIntSlice(name string, set *flag.FlagSet) []int","Funname":"lookupIntSlice","Returntype":"[]int","Args":"name string, set *flag.FlagSet"},{"Uniquefunname":"func lookupString(name string, set *flag.FlagSet) string","Funname":"lookupString","Returntype":"string","Args":"name string, set *flag.FlagSet"},{"Uniquefunname":"func lookupStringSlice(name string, set *flag.FlagSet) []string","Funname":"lookupStringSlice","Returntype":"[]string","Args":"name string, set *flag.FlagSet"},{"Uniquefunname":"func normalizeFlags(flags []Flag, set *flag.FlagSet) error","Funname":"normalizeFlags","Returntype":"error","Args":"flags []Flag, set *flag.FlagSet"}],"Records":[{"Name":"struct:cli.Context","Fields":["cli.Context.App *App","cli.Context.Command Command","cli.Context.flagSet *flag.FlagSet","cli.Context.globalSetFlags map[string]bool","cli.Context.parentContext *Context","cli.Context.setFlags map[string]bool"]}]}
{"Filepath":"vendor/src/github.com/codegangsta/cli/context_test.go","Functions":[{"Uniquefunname":"func TestContext_Args(t *testing.T)","Funname":"TestContext_Args","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestContext_Bool(t *testing.T)","Funname":"TestContext_Bool","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestContext_BoolT(t *testing.T)","Funname":"TestContext_BoolT","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestContext_Duration(t *testing.T)","Funname":"TestContext_Duration","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestContext_GlobalIsSet(t *testing.T)","Funname":"TestContext_GlobalIsSet","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestContext_Int(t *testing.T)","Funname":"TestContext_Int","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestContext_IsSet(t *testing.T)","Funname":"TestContext_IsSet","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestContext_NArg(t *testing.T)","Funname":"TestContext_NArg","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestContext_NumFlags(t *testing.T)","Funname":"TestContext_NumFlags","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestContext_String(t *testing.T)","Funname":"TestContext_String","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestNewContext(t *testing.T)","Funname":"TestNewContext","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestContext_Args(t *testing.T)","Funname":"cli.TestContext_Args","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestContext_Bool(t *testing.T)","Funname":"cli.TestContext_Bool","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestContext_BoolT(t *testing.T)","Funname":"cli.TestContext_BoolT","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestContext_Duration(t *testing.T)","Funname":"cli.TestContext_Duration","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestContext_GlobalIsSet(t *testing.T)","Funname":"cli.TestContext_GlobalIsSet","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestContext_Int(t *testing.T)","Funname":"cli.TestContext_Int","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestContext_IsSet(t *testing.T)","Funname":"cli.TestContext_IsSet","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestContext_NArg(t *testing.T)","Funname":"cli.TestContext_NArg","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestContext_NumFlags(t *testing.T)","Funname":"cli.TestContext_NumFlags","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestContext_String(t *testing.T)","Funname":"cli.TestContext_String","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestNewContext(t *testing.T)","Funname":"cli.TestNewContext","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/codegangsta/cli/flag.go","Functions":[{"Uniquefunname":"func (f BoolFlag) Apply(set *flag.FlagSet)","Funname":"Apply","Returntype":"","Args":"set *flag.FlagSet"},{"Uniquefunname":"func (f BoolTFlag) Apply(set *flag.FlagSet)","Funname":"Apply","Returntype":"","Args":"set *flag.FlagSet"},{"Uniquefunname":"func (f DurationFlag) Apply(set *flag.FlagSet)","Funname":"Apply","Returntype":"","Args":"set *flag.FlagSet"},{"Uniquefunname":"func (f Float64Flag) Apply(set *flag.FlagSet)","Funname":"Apply","Returntype":"","Args":"set *flag.FlagSet"},{"Uniquefunname":"func (f GenericFlag) Apply(set *flag.FlagSet)","Funname":"Apply","Returntype":"","Args":"set *flag.FlagSet"},{"Uniquefunname":"func (f IntFlag) Apply(set *flag.FlagSet)","Funname":"Apply","Returntype":"","Args":"set *flag.FlagSet"},{"Uniquefunname":"func (f IntSliceFlag) Apply(set *flag.FlagSet)","Funname":"Apply","Returntype":"","Args":"set *flag.FlagSet"},{"Uniquefunname":"func (f StringFlag) Apply(set *flag.FlagSet)","Funname":"Apply","Returntype":"","Args":"set *flag.FlagSet"},{"Uniquefunname":"func (f StringSliceFlag) Apply(set *flag.FlagSet)","Funname":"Apply","Returntype":"","Args":"set *flag.FlagSet"},{"Uniquefunname":"func (f GenericFlag) FormatValueHelp() string","Funname":"FormatValueHelp","Returntype":"string","Args":""},{"Uniquefunname":"func (f StringFlag) FormatValueHelp() string","Funname":"FormatValueHelp","Returntype":"string","Args":""},{"Uniquefunname":"func (f BoolFlag) GetName() string","Funname":"GetName","Returntype":"string","Args":""},{"Uniquefunname":"func (f BoolTFlag) GetName() string","Funname":"GetName","Returntype":"string","Args":""},{"Uniquefunname":"func (f DurationFlag) GetName() string","Funname":"GetName","Returntype":"string","Args":""},{"Uniquefunname":"func (f Float64Flag) GetName() string","Funname":"GetName","Returntype":"string","Args":""},{"Uniquefunname":"func (f GenericFlag) GetName() string","Funname":"GetName","Returntype":"string","Args":""},{"Uniquefunname":"func (f IntFlag) GetName() string","Funname":"GetName","Returntype":"string","Args":""},{"Uniquefunname":"func (f IntSliceFlag) GetName() string","Funname":"GetName","Returntype":"string","Args":""},{"Uniquefunname":"func (f StringFlag) GetName() string","Funname":"GetName","Returntype":"string","Args":""},{"Uniquefunname":"func (f StringSliceFlag) GetName() string","Funname":"GetName","Returntype":"string","Args":""},{"Uniquefunname":"func (f *IntSlice) Set(value string) error","Funname":"Set","Returntype":"error","Args":"value string"},{"Uniquefunname":"func (f *StringSlice) Set(value string) error","Funname":"Set","Returntype":"error","Args":"value string"},{"Uniquefunname":"func (f *IntSlice) String() string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func (f *StringSlice) String() string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func (f BoolFlag) String() string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func (f BoolTFlag) String() string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func (f DurationFlag) String() string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func (f Float64Flag) String() string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func (f GenericFlag) String() string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func (f IntFlag) String() string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func (f IntSliceFlag) String() string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func (f StringFlag) String() string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func (f StringSliceFlag) String() string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func (f *IntSlice) Value() []int","Funname":"Value","Returntype":"[]int","Args":""},{"Uniquefunname":"func (f *StringSlice) Value() []string","Funname":"Value","Returntype":"[]string","Args":""},{"Uniquefunname":"func (f BoolFlag) Apply(set *flag.FlagSet)","Funname":"cli.BoolFlag.Apply","Returntype":"","Args":"set *flag.FlagSet"},{"Uniquefunname":"func (f BoolFlag) GetName() string","Funname":"cli.BoolFlag.GetName","Returntype":"string","Args":""},{"Uniquefunname":"func (f BoolFlag) String() string","Funname":"cli.BoolFlag.String","Returntype":"string","Args":""},{"Uniquefunname":"func (f BoolTFlag) Apply(set *flag.FlagSet)","Funname":"cli.BoolTFlag.Apply","Returntype":"","Args":"set *flag.FlagSet"},{"Uniquefunname":"func (f BoolTFlag) GetName() string","Funname":"cli.BoolTFlag.GetName","Returntype":"string","Args":""},{"Uniquefunname":"func (f BoolTFlag) String() string","Funname":"cli.BoolTFlag.String","Returntype":"string","Args":""},{"Uniquefunname":"func (f DurationFlag) Apply(set *flag.FlagSet)","Funname":"cli.DurationFlag.Apply","Returntype":"","Args":"set *flag.FlagSet"},{"Uniquefunname":"func (f DurationFlag) GetName() string","Funname":"cli.DurationFlag.GetName","Returntype":"string","Args":""},{"Uniquefunname":"func (f DurationFlag) String() string","Funname":"cli.DurationFlag.String","Returntype":"string","Args":""},{"Uniquefunname":"func (f Float64Flag) Apply(set *flag.FlagSet)","Funname":"cli.Float64Flag.Apply","Returntype":"","Args":"set *flag.FlagSet"},{"Uniquefunname":"func (f Float64Flag) GetName() string","Funname":"cli.Float64Flag.GetName","Returntype":"string","Args":""},{"Uniquefunname":"func (f Float64Flag) String() string","Funname":"cli.Float64Flag.String","Returntype":"string","Args":""},{"Uniquefunname":"func (f GenericFlag) Apply(set *flag.FlagSet)","Funname":"cli.GenericFlag.Apply","Returntype":"","Args":"set *flag.FlagSet"},{"Uniquefunname":"func (f GenericFlag) FormatValueHelp() string","Funname":"cli.GenericFlag.FormatValueHelp","Returntype":"string","Args":""},{"Uniquefunname":"func (f GenericFlag) GetName() string","Funname":"cli.GenericFlag.GetName","Returntype":"string","Args":""},{"Uniquefunname":"func (f GenericFlag) String() string","Funname":"cli.GenericFlag.String","Returntype":"string","Args":""},{"Uniquefunname":"func (f IntFlag) Apply(set *flag.FlagSet)","Funname":"cli.IntFlag.Apply","Returntype":"","Args":"set *flag.FlagSet"},{"Uniquefunname":"func (f IntFlag) GetName() string","Funname":"cli.IntFlag.GetName","Returntype":"string","Args":""},{"Uniquefunname":"func (f IntFlag) String() string","Funname":"cli.IntFlag.String","Returntype":"string","Args":""},{"Uniquefunname":"func (f *IntSlice) Set(value string) error","Funname":"cli.IntSlice.Set","Returntype":"error","Args":"value string"},{"Uniquefunname":"func (f *IntSlice) String() string","Funname":"cli.IntSlice.String","Returntype":"string","Args":""},{"Uniquefunname":"func (f *IntSlice) Value() []int","Funname":"cli.IntSlice.Value","Returntype":"[]int","Args":""},{"Uniquefunname":"func (f IntSliceFlag) Apply(set *flag.FlagSet)","Funname":"cli.IntSliceFlag.Apply","Returntype":"","Args":"set *flag.FlagSet"},{"Uniquefunname":"func (f IntSliceFlag) GetName() string","Funname":"cli.IntSliceFlag.GetName","Returntype":"string","Args":""},{"Uniquefunname":"func (f IntSliceFlag) String() string","Funname":"cli.IntSliceFlag.String","Returntype":"string","Args":""},{"Uniquefunname":"func (f StringFlag) Apply(set *flag.FlagSet)","Funname":"cli.StringFlag.Apply","Returntype":"","Args":"set *flag.FlagSet"},{"Uniquefunname":"func (f StringFlag) FormatValueHelp() string","Funname":"cli.StringFlag.FormatValueHelp","Returntype":"string","Args":""},{"Uniquefunname":"func (f StringFlag) GetName() string","Funname":"cli.StringFlag.GetName","Returntype":"string","Args":""},{"Uniquefunname":"func (f StringFlag) String() string","Funname":"cli.StringFlag.String","Returntype":"string","Args":""},{"Uniquefunname":"func (f *StringSlice) Set(value string) error","Funname":"cli.StringSlice.Set","Returntype":"error","Args":"value string"},{"Uniquefunname":"func (f *StringSlice) String() string","Funname":"cli.StringSlice.String","Returntype":"string","Args":""},{"Uniquefunname":"func (f *StringSlice) Value() []string","Funname":"cli.StringSlice.Value","Returntype":"[]string","Args":""},{"Uniquefunname":"func (f StringSliceFlag) Apply(set *flag.FlagSet)","Funname":"cli.StringSliceFlag.Apply","Returntype":"","Args":"set *flag.FlagSet"},{"Uniquefunname":"func (f StringSliceFlag) GetName() string","Funname":"cli.StringSliceFlag.GetName","Returntype":"string","Args":""},{"Uniquefunname":"func (f StringSliceFlag) String() string","Funname":"cli.StringSliceFlag.String","Returntype":"string","Args":""},{"Uniquefunname":"func eachName(longName string, fn func(string))","Funname":"cli.eachName","Returntype":"","Args":"longName string, fn func(string)"},{"Uniquefunname":"func flagSet(name string, flags []Flag) *flag.FlagSet","Funname":"cli.flagSet","Returntype":"*flag.FlagSet","Args":"name string, flags []Flag"},{"Uniquefunname":"func prefixFor(name string) (prefix string)","Funname":"cli.prefixFor","Returntype":"(prefix string)","Args":"name string"},{"Uniquefunname":"func prefixedNames(fullName string) (prefixed string)","Funname":"cli.prefixedNames","Returntype":"(prefixed string)","Args":"fullName string"},{"Uniquefunname":"func withEnvHint(envVar, str string) string","Funname":"cli.withEnvHint","Returntype":"string","Args":"envVar, str string"},{"Uniquefunname":"func eachName(longName string, fn func(string))","Funname":"eachName","Returntype":"","Args":"longName string, fn func(string)"},{"Uniquefunname":"func flagSet(name string, flags []Flag) *flag.FlagSet","Funname":"flagSet","Returntype":"*flag.FlagSet","Args":"name string, flags []Flag"},{"Uniquefunname":"func prefixFor(name string) (prefix string)","Funname":"prefixFor","Returntype":"(prefix string)","Args":"name string"},{"Uniquefunname":"func prefixedNames(fullName string) (prefixed string)","Funname":"prefixedNames","Returntype":"(prefixed string)","Args":"fullName string"},{"Uniquefunname":"func withEnvHint(envVar, str string) string","Funname":"withEnvHint","Returntype":"string","Args":"envVar, str string"}],"Records":[{"Name":"var:cli","Fields":["cli.BashCompletionFlag","cli.HelpFlag","cli.VersionFlag"]},{"Name":"struct:cli.BoolFlag","Fields":["cli.BoolFlag.Destination *bool","cli.BoolFlag.EnvVar string","cli.BoolFlag.Name string","cli.BoolFlag.Usage string"]},{"Name":"struct:cli.BoolTFlag","Fields":["cli.BoolTFlag.Destination *bool","cli.BoolTFlag.EnvVar string","cli.BoolTFlag.Name string","cli.BoolTFlag.Usage string"]},{"Name":"struct:cli.DurationFlag","Fields":["cli.DurationFlag.Destination *time.Duration","cli.DurationFlag.EnvVar string","cli.DurationFlag.Name string","cli.DurationFlag.Usage string","cli.DurationFlag.Value time.Duration"]},{"Name":"interface","Fields":["cli.Flag","cli.Generic"]},{"Name":"struct:cli.Float64Flag","Fields":["cli.Float64Flag.Destination *float64","cli.Float64Flag.EnvVar string","cli.Float64Flag.Name string","cli.Float64Flag.Usage string","cli.Float64Flag.Value float64"]},{"Name":"struct:cli.GenericFlag","Fields":["cli.GenericFlag.EnvVar string","cli.GenericFlag.Name string","cli.GenericFlag.Usage string","cli.GenericFlag.Value Generic"]},{"Name":"struct:cli.IntFlag","Fields":["cli.IntFlag.Destination *int","cli.IntFlag.EnvVar string","cli.IntFlag.Name string","cli.IntFlag.Usage string","cli.IntFlag.Value int"]},{"Name":"struct:cli.IntSliceFlag","Fields":["cli.IntSliceFlag.EnvVar string","cli.IntSliceFlag.Name string","cli.IntSliceFlag.Usage string","cli.IntSliceFlag.Value *IntSlice"]},{"Name":"struct:cli.StringFlag","Fields":["cli.StringFlag.Destination *string","cli.StringFlag.EnvVar string","cli.StringFlag.Name string","cli.StringFlag.Usage string","cli.StringFlag.Value string"]},{"Name":"struct:cli.StringSliceFlag","Fields":["cli.StringSliceFlag.EnvVar string","cli.StringSliceFlag.Name string","cli.StringSliceFlag.Usage string","cli.StringSliceFlag.Value *StringSlice"]}]}
{"Filepath":"vendor/src/github.com/codegangsta/cli/flag_test.go","Functions":[{"Uniquefunname":"func (p *Parser) Set(value string) error","Funname":"Set","Returntype":"error","Args":"value string"},{"Uniquefunname":"func (p *Parser) String() string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func TestBoolFlagHelpOutput(t *testing.T)","Funname":"TestBoolFlagHelpOutput","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestDurationFlagHelpOutput(t *testing.T)","Funname":"TestDurationFlagHelpOutput","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestDurationFlagWithEnvVarHelpOutput(t *testing.T)","Funname":"TestDurationFlagWithEnvVarHelpOutput","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestFloat64FlagHelpOutput(t *testing.T)","Funname":"TestFloat64FlagHelpOutput","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestFloat64FlagWithEnvVarHelpOutput(t *testing.T)","Funname":"TestFloat64FlagWithEnvVarHelpOutput","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestGenericFlagHelpOutput(t *testing.T)","Funname":"TestGenericFlagHelpOutput","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestGenericFlagWithEnvVarHelpOutput(t *testing.T)","Funname":"TestGenericFlagWithEnvVarHelpOutput","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestIntFlagHelpOutput(t *testing.T)","Funname":"TestIntFlagHelpOutput","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestIntFlagWithEnvVarHelpOutput(t *testing.T)","Funname":"TestIntFlagWithEnvVarHelpOutput","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestIntSliceFlagHelpOutput(t *testing.T)","Funname":"TestIntSliceFlagHelpOutput","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestIntSliceFlagWithEnvVarHelpOutput(t *testing.T)","Funname":"TestIntSliceFlagWithEnvVarHelpOutput","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestParseDestinationBool(t *testing.T)","Funname":"TestParseDestinationBool","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestParseDestinationBoolT(t *testing.T)","Funname":"TestParseDestinationBoolT","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestParseDestinationFloat64(t *testing.T)","Funname":"TestParseDestinationFloat64","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestParseDestinationInt(t *testing.T)","Funname":"TestParseDestinationInt","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestParseDestinationString(t *testing.T)","Funname":"TestParseDestinationString","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestParseGeneric(t *testing.T)","Funname":"TestParseGeneric","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestParseGenericFromEnv(t *testing.T)","Funname":"TestParseGenericFromEnv","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestParseGenericFromEnvCascade(t *testing.T)","Funname":"TestParseGenericFromEnvCascade","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestParseMultiBool(t *testing.T)","Funname":"TestParseMultiBool","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestParseMultiBoolFromEnv(t *testing.T)","Funname":"TestParseMultiBoolFromEnv","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestParseMultiBoolFromEnvCascade(t *testing.T)","Funname":"TestParseMultiBoolFromEnvCascade","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestParseMultiBoolT(t *testing.T)","Funname":"TestParseMultiBoolT","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestParseMultiBoolTFromEnv(t *testing.T)","Funname":"TestParseMultiBoolTFromEnv","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestParseMultiBoolTFromEnvCascade(t *testing.T)","Funname":"TestParseMultiBoolTFromEnvCascade","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestParseMultiFloat64(t *testing.T)","Funname":"TestParseMultiFloat64","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestParseMultiFloat64FromEnv(t *testing.T)","Funname":"TestParseMultiFloat64FromEnv","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestParseMultiFloat64FromEnvCascade(t *testing.T)","Funname":"TestParseMultiFloat64FromEnvCascade","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestParseMultiInt(t *testing.T)","Funname":"TestParseMultiInt","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestParseMultiIntFromEnv(t *testing.T)","Funname":"TestParseMultiIntFromEnv","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestParseMultiIntFromEnvCascade(t *testing.T)","Funname":"TestParseMultiIntFromEnvCascade","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestParseMultiIntSlice(t *testing.T)","Funname":"TestParseMultiIntSlice","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestParseMultiIntSliceFromEnv(t *testing.T)","Funname":"TestParseMultiIntSliceFromEnv","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestParseMultiIntSliceFromEnvCascade(t *testing.T)","Funname":"TestParseMultiIntSliceFromEnvCascade","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestParseMultiString(t *testing.T)","Funname":"TestParseMultiString","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestParseMultiStringFromEnv(t *testing.T)","Funname":"TestParseMultiStringFromEnv","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestParseMultiStringFromEnvCascade(t *testing.T)","Funname":"TestParseMultiStringFromEnvCascade","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestParseMultiStringSlice(t *testing.T)","Funname":"TestParseMultiStringSlice","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestParseMultiStringSliceFromEnv(t *testing.T)","Funname":"TestParseMultiStringSliceFromEnv","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestParseMultiStringSliceFromEnvCascade(t *testing.T)","Funname":"TestParseMultiStringSliceFromEnvCascade","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestStringFlagHelpOutput(t *testing.T)","Funname":"TestStringFlagHelpOutput","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestStringFlagWithEnvVarHelpOutput(t *testing.T)","Funname":"TestStringFlagWithEnvVarHelpOutput","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestStringSliceFlagHelpOutput(t *testing.T)","Funname":"TestStringSliceFlagHelpOutput","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestStringSliceFlagWithEnvVarHelpOutput(t *testing.T)","Funname":"TestStringSliceFlagWithEnvVarHelpOutput","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func (p *Parser) Set(value string) error","Funname":"cli.Parser.Set","Returntype":"error","Args":"value string"},{"Uniquefunname":"func (p *Parser) String() string","Funname":"cli.Parser.String","Returntype":"string","Args":""},{"Uniquefunname":"func TestBoolFlagHelpOutput(t *testing.T)","Funname":"cli.TestBoolFlagHelpOutput","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestDurationFlagHelpOutput(t *testing.T)","Funname":"cli.TestDurationFlagHelpOutput","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestDurationFlagWithEnvVarHelpOutput(t *testing.T)","Funname":"cli.TestDurationFlagWithEnvVarHelpOutput","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestFloat64FlagHelpOutput(t *testing.T)","Funname":"cli.TestFloat64FlagHelpOutput","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestFloat64FlagWithEnvVarHelpOutput(t *testing.T)","Funname":"cli.TestFloat64FlagWithEnvVarHelpOutput","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestGenericFlagHelpOutput(t *testing.T)","Funname":"cli.TestGenericFlagHelpOutput","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestGenericFlagWithEnvVarHelpOutput(t *testing.T)","Funname":"cli.TestGenericFlagWithEnvVarHelpOutput","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestIntFlagHelpOutput(t *testing.T)","Funname":"cli.TestIntFlagHelpOutput","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestIntFlagWithEnvVarHelpOutput(t *testing.T)","Funname":"cli.TestIntFlagWithEnvVarHelpOutput","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestIntSliceFlagHelpOutput(t *testing.T)","Funname":"cli.TestIntSliceFlagHelpOutput","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestIntSliceFlagWithEnvVarHelpOutput(t *testing.T)","Funname":"cli.TestIntSliceFlagWithEnvVarHelpOutput","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestParseDestinationBool(t *testing.T)","Funname":"cli.TestParseDestinationBool","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestParseDestinationBoolT(t *testing.T)","Funname":"cli.TestParseDestinationBoolT","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestParseDestinationFloat64(t *testing.T)","Funname":"cli.TestParseDestinationFloat64","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestParseDestinationInt(t *testing.T)","Funname":"cli.TestParseDestinationInt","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestParseDestinationString(t *testing.T)","Funname":"cli.TestParseDestinationString","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestParseGeneric(t *testing.T)","Funname":"cli.TestParseGeneric","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestParseGenericFromEnv(t *testing.T)","Funname":"cli.TestParseGenericFromEnv","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestParseGenericFromEnvCascade(t *testing.T)","Funname":"cli.TestParseGenericFromEnvCascade","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestParseMultiBool(t *testing.T)","Funname":"cli.TestParseMultiBool","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestParseMultiBoolFromEnv(t *testing.T)","Funname":"cli.TestParseMultiBoolFromEnv","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestParseMultiBoolFromEnvCascade(t *testing.T)","Funname":"cli.TestParseMultiBoolFromEnvCascade","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestParseMultiBoolT(t *testing.T)","Funname":"cli.TestParseMultiBoolT","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestParseMultiBoolTFromEnv(t *testing.T)","Funname":"cli.TestParseMultiBoolTFromEnv","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestParseMultiBoolTFromEnvCascade(t *testing.T)","Funname":"cli.TestParseMultiBoolTFromEnvCascade","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestParseMultiFloat64(t *testing.T)","Funname":"cli.TestParseMultiFloat64","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestParseMultiFloat64FromEnv(t *testing.T)","Funname":"cli.TestParseMultiFloat64FromEnv","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestParseMultiFloat64FromEnvCascade(t *testing.T)","Funname":"cli.TestParseMultiFloat64FromEnvCascade","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestParseMultiInt(t *testing.T)","Funname":"cli.TestParseMultiInt","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestParseMultiIntFromEnv(t *testing.T)","Funname":"cli.TestParseMultiIntFromEnv","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestParseMultiIntFromEnvCascade(t *testing.T)","Funname":"cli.TestParseMultiIntFromEnvCascade","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestParseMultiIntSlice(t *testing.T)","Funname":"cli.TestParseMultiIntSlice","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestParseMultiIntSliceFromEnv(t *testing.T)","Funname":"cli.TestParseMultiIntSliceFromEnv","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestParseMultiIntSliceFromEnvCascade(t *testing.T)","Funname":"cli.TestParseMultiIntSliceFromEnvCascade","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestParseMultiString(t *testing.T)","Funname":"cli.TestParseMultiString","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestParseMultiStringFromEnv(t *testing.T)","Funname":"cli.TestParseMultiStringFromEnv","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestParseMultiStringFromEnvCascade(t *testing.T)","Funname":"cli.TestParseMultiStringFromEnvCascade","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestParseMultiStringSlice(t *testing.T)","Funname":"cli.TestParseMultiStringSlice","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestParseMultiStringSliceFromEnv(t *testing.T)","Funname":"cli.TestParseMultiStringSliceFromEnv","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestParseMultiStringSliceFromEnvCascade(t *testing.T)","Funname":"cli.TestParseMultiStringSliceFromEnvCascade","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestStringFlagHelpOutput(t *testing.T)","Funname":"cli.TestStringFlagHelpOutput","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestStringFlagWithEnvVarHelpOutput(t *testing.T)","Funname":"cli.TestStringFlagWithEnvVarHelpOutput","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestStringSliceFlagHelpOutput(t *testing.T)","Funname":"cli.TestStringSliceFlagHelpOutput","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestStringSliceFlagWithEnvVarHelpOutput(t *testing.T)","Funname":"cli.TestStringSliceFlagWithEnvVarHelpOutput","Returntype":"","Args":"t *testing.T"}],"Records":[{"Name":"var:cli","Fields":["cli.boolFlagTests","cli.durationFlagTests","cli.float64FlagTests","cli.genericFlagTests","cli.intFlagTests","cli.intSliceFlagTests","cli.stringFlagTests","cli.stringSliceFlagTests"]}]}
{"Filepath":"vendor/src/github.com/codegangsta/cli/help.go","Functions":[{"Uniquefunname":"func DefaultAppComplete(c *Context)","Funname":"DefaultAppComplete","Returntype":"","Args":"c *Context"},{"Uniquefunname":"func ShowAppHelp(c *Context)","Funname":"ShowAppHelp","Returntype":"","Args":"c *Context"},{"Uniquefunname":"func ShowCommandCompletions(ctx *Context, command string)","Funname":"ShowCommandCompletions","Returntype":"","Args":"ctx *Context, command string"},{"Uniquefunname":"func ShowCommandHelp(ctx *Context, command string)","Funname":"ShowCommandHelp","Returntype":"","Args":"ctx *Context, command string"},{"Uniquefunname":"func ShowCompletions(c *Context)","Funname":"ShowCompletions","Returntype":"","Args":"c *Context"},{"Uniquefunname":"func ShowSubcommandHelp(c *Context)","Funname":"ShowSubcommandHelp","Returntype":"","Args":"c *Context"},{"Uniquefunname":"func ShowVersion(c *Context)","Funname":"ShowVersion","Returntype":"","Args":"c *Context"},{"Uniquefunname":"func checkCommandCompletions(c *Context, name string) bool","Funname":"checkCommandCompletions","Returntype":"bool","Args":"c *Context, name string"},{"Uniquefunname":"func checkCommandHelp(c *Context, name string) bool","Funname":"checkCommandHelp","Returntype":"bool","Args":"c *Context, name string"},{"Uniquefunname":"func checkCompletions(c *Context) bool","Funname":"checkCompletions","Returntype":"bool","Args":"c *Context"},{"Uniquefunname":"func checkHelp(c *Context) bool","Funname":"checkHelp","Returntype":"bool","Args":"c *Context"},{"Uniquefunname":"func checkSubcommandHelp(c *Context) bool","Funname":"checkSubcommandHelp","Returntype":"bool","Args":"c *Context"},{"Uniquefunname":"func checkVersion(c *Context) bool","Funname":"checkVersion","Returntype":"bool","Args":"c *Context"},{"Uniquefunname":"func DefaultAppComplete(c *Context)","Funname":"cli.DefaultAppComplete","Returntype":"","Args":"c *Context"},{"Uniquefunname":"func ShowAppHelp(c *Context)","Funname":"cli.ShowAppHelp","Returntype":"","Args":"c *Context"},{"Uniquefunname":"func ShowCommandCompletions(ctx *Context, command string)","Funname":"cli.ShowCommandCompletions","Returntype":"","Args":"ctx *Context, command string"},{"Uniquefunname":"func ShowCommandHelp(ctx *Context, command string)","Funname":"cli.ShowCommandHelp","Returntype":"","Args":"ctx *Context, command string"},{"Uniquefunname":"func ShowCompletions(c *Context)","Funname":"cli.ShowCompletions","Returntype":"","Args":"c *Context"},{"Uniquefunname":"func ShowSubcommandHelp(c *Context)","Funname":"cli.ShowSubcommandHelp","Returntype":"","Args":"c *Context"},{"Uniquefunname":"func ShowVersion(c *Context)","Funname":"cli.ShowVersion","Returntype":"","Args":"c *Context"},{"Uniquefunname":"func checkCommandCompletions(c *Context, name string) bool","Funname":"cli.checkCommandCompletions","Returntype":"bool","Args":"c *Context, name string"},{"Uniquefunname":"func checkCommandHelp(c *Context, name string) bool","Funname":"cli.checkCommandHelp","Returntype":"bool","Args":"c *Context, name string"},{"Uniquefunname":"func checkCompletions(c *Context) bool","Funname":"cli.checkCompletions","Returntype":"bool","Args":"c *Context"},{"Uniquefunname":"func checkHelp(c *Context) bool","Funname":"cli.checkHelp","Returntype":"bool","Args":"c *Context"},{"Uniquefunname":"func checkSubcommandHelp(c *Context) bool","Funname":"cli.checkSubcommandHelp","Returntype":"bool","Args":"c *Context"},{"Uniquefunname":"func checkVersion(c *Context) bool","Funname":"cli.checkVersion","Returntype":"bool","Args":"c *Context"},{"Uniquefunname":"func printHelp(out io.Writer, templ string, data interface","Funname":"cli.printHelp","Returntype":"","Args":"out io.Writer, templ string, data interface{}"},{"Uniquefunname":"func printVersion(c *Context)","Funname":"cli.printVersion","Returntype":"","Args":"c *Context"},{"Uniquefunname":"func printHelp(out io.Writer, templ string, data interface","Funname":"printHelp","Returntype":"","Args":"out io.Writer, templ string, data interface{}"},{"Uniquefunname":"func printVersion(c *Context)","Funname":"printVersion","Returntype":"","Args":"c *Context"}],"Records":[{"Name":"var:cli","Fields":["cli.AppHelpTemplate","cli.CommandHelpTemplate","cli.HelpPrinter","cli.SubcommandHelpTemplate","cli.VersionPrinter","cli.helpCommand","cli.helpSubcommand"]}]}
{"Filepath":"vendor/src/github.com/codegangsta/cli/help_test.go","Functions":[{"Uniquefunname":"func Test_Help_Custom_Flags(t *testing.T)","Funname":"Test_Help_Custom_Flags","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func Test_ShowAppHelp_NoAuthor(t *testing.T)","Funname":"Test_ShowAppHelp_NoAuthor","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func Test_ShowAppHelp_NoVersion(t *testing.T)","Funname":"Test_ShowAppHelp_NoVersion","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func Test_Version_Custom_Flags(t *testing.T)","Funname":"Test_Version_Custom_Flags","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func Test_Help_Custom_Flags(t *testing.T)","Funname":"cli.Test_Help_Custom_Flags","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func Test_ShowAppHelp_NoAuthor(t *testing.T)","Funname":"cli.Test_ShowAppHelp_NoAuthor","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func Test_ShowAppHelp_NoVersion(t *testing.T)","Funname":"cli.Test_ShowAppHelp_NoVersion","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func Test_Version_Custom_Flags(t *testing.T)","Funname":"cli.Test_Version_Custom_Flags","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/codegangsta/cli/helpers_test.go","Functions":[{"Uniquefunname":"func expect(t *testing.T, a interface","Funname":"cli.expect","Returntype":"","Args":"t *testing.T, a interface{}, b interface{}"},{"Uniquefunname":"func refute(t *testing.T, a interface","Funname":"cli.refute","Returntype":"","Args":"t *testing.T, a interface{}, b interface{}"},{"Uniquefunname":"func expect(t *testing.T, a interface","Funname":"expect","Returntype":"","Args":"t *testing.T, a interface{}, b interface{}"},{"Uniquefunname":"func refute(t *testing.T, a interface","Funname":"refute","Returntype":"","Args":"t *testing.T, a interface{}, b interface{}"}],"Records":null}
{"Filepath":"vendor/src/github.com/codegangsta/cli/altsrc/flag.go","Functions":[{"Uniquefunname":"func (f *BoolFlag) Apply(set *flag.FlagSet)","Funname":"Apply","Returntype":"","Args":"set *flag.FlagSet"},{"Uniquefunname":"func (f *BoolTFlag) Apply(set *flag.FlagSet)","Funname":"Apply","Returntype":"","Args":"set *flag.FlagSet"},{"Uniquefunname":"func (f *DurationFlag) Apply(set *flag.FlagSet)","Funname":"Apply","Returntype":"","Args":"set *flag.FlagSet"},{"Uniquefunname":"func (f *Float64Flag) Apply(set *flag.FlagSet)","Funname":"Apply","Returntype":"","Args":"set *flag.FlagSet"},{"Uniquefunname":"func (f *GenericFlag) Apply(set *flag.FlagSet)","Funname":"Apply","Returntype":"","Args":"set *flag.FlagSet"},{"Uniquefunname":"func (f *IntFlag) Apply(set *flag.FlagSet)","Funname":"Apply","Returntype":"","Args":"set *flag.FlagSet"},{"Uniquefunname":"func (f *IntSliceFlag) Apply(set *flag.FlagSet)","Funname":"Apply","Returntype":"","Args":"set *flag.FlagSet"},{"Uniquefunname":"func (f *StringFlag) Apply(set *flag.FlagSet)","Funname":"Apply","Returntype":"","Args":"set *flag.FlagSet"},{"Uniquefunname":"func (f *StringSliceFlag) Apply(set *flag.FlagSet)","Funname":"Apply","Returntype":"","Args":"set *flag.FlagSet"},{"Uniquefunname":"func (f *BoolFlag) ApplyInputSourceValue(context *cli.Context, isc InputSourceContext) error","Funname":"ApplyInputSourceValue","Returntype":"error","Args":"context *cli.Context, isc InputSourceContext"},{"Uniquefunname":"func (f *BoolTFlag) ApplyInputSourceValue(context *cli.Context, isc InputSourceContext) error","Funname":"ApplyInputSourceValue","Returntype":"error","Args":"context *cli.Context, isc InputSourceContext"},{"Uniquefunname":"func ApplyInputSourceValue(context *cli.Context, isc InputSourceContext)error","Funname":"ApplyInputSourceValue","Returntype":"error","Args":"context *cli.Context, isc InputSourceContext"},{"Uniquefunname":"func ApplyInputSourceValue(context *cli.Context, isc InputSourceContext)error","Funname":"ApplyInputSourceValue","Returntype":"error","Args":"context *cli.Context, isc InputSourceContext"},{"Uniquefunname":"func ApplyInputSourceValue(context *cli.Context, isc InputSourceContext)error","Funname":"ApplyInputSourceValue","Returntype":"error","Args":"context *cli.Context, isc InputSourceContext"},{"Uniquefunname":"func (f *IntFlag) ApplyInputSourceValue(context *cli.Context, isc InputSourceContext) error","Funname":"ApplyInputSourceValue","Returntype":"error","Args":"context *cli.Context, isc InputSourceContext"},{"Uniquefunname":"func ApplyInputSourceValue(context *cli.Context, isc InputSourceContext)error","Funname":"ApplyInputSourceValue","Returntype":"error","Args":"context *cli.Context, isc InputSourceContext"},{"Uniquefunname":"func (f *StringFlag) ApplyInputSourceValue(context *cli.Context, isc InputSourceContext) error","Funname":"ApplyInputSourceValue","Returntype":"error","Args":"context *cli.Context, isc InputSourceContext"},{"Uniquefunname":"func ApplyInputSourceValue(context *cli.Context, isc InputSourceContext)error","Funname":"ApplyInputSourceValue","Returntype":"error","Args":"context *cli.Context, isc InputSourceContext"},{"Uniquefunname":"func ApplyInputSourceValues(context *cli.Context, inputSourceContext InputSourceContext, flags []cli.Flag)error","Funname":"ApplyInputSourceValues","Returntype":"error","Args":"context *cli.Context, inputSourceContext InputSourceContext, flags []cli.Flag"},{"Uniquefunname":"func InitInputSource(flags []cli.Flag, createInputSource func() (InputSourceContext, error))func(context *cli.Context) error","Funname":"InitInputSource","Returntype":"func(context *cli.Context) error","Args":"flags []cli.Flag, createInputSource func() (InputSourceContext, error)"},{"Uniquefunname":"func InitInputSourceWithContext(flags []cli.Flag, createInputSource func(context *cli.Context) (InputSourceContext, error))func(context *cli.Context) error","Funname":"InitInputSourceWithContext","Returntype":"func(context *cli.Context) error","Args":"flags []cli.Flag, createInputSource func(context *cli.Context) (InputSourceContext, error)"},{"Uniquefunname":"func NewBoolFlag(flag cli.BoolFlag) *BoolFlag","Funname":"NewBoolFlag","Returntype":"*BoolFlag","Args":"flag cli.BoolFlag"},{"Uniquefunname":"func NewBoolTFlag(flag cli.BoolTFlag) *BoolTFlag","Funname":"NewBoolTFlag","Returntype":"*BoolTFlag","Args":"flag cli.BoolTFlag"},{"Uniquefunname":"func NewDurationFlag(flag cli.DurationFlag) *DurationFlag","Funname":"NewDurationFlag","Returntype":"*DurationFlag","Args":"flag cli.DurationFlag"},{"Uniquefunname":"func NewFloat64Flag(flag cli.Float64Flag) *Float64Flag","Funname":"NewFloat64Flag","Returntype":"*Float64Flag","Args":"flag cli.Float64Flag"},{"Uniquefunname":"func NewGenericFlag(flag cli.GenericFlag) *GenericFlag","Funname":"NewGenericFlag","Returntype":"*GenericFlag","Args":"flag cli.GenericFlag"},{"Uniquefunname":"func NewIntFlag(flag cli.IntFlag) *IntFlag","Funname":"NewIntFlag","Returntype":"*IntFlag","Args":"flag cli.IntFlag"},{"Uniquefunname":"func NewIntSliceFlag(flag cli.IntSliceFlag) *IntSliceFlag","Funname":"NewIntSliceFlag","Returntype":"*IntSliceFlag","Args":"flag cli.IntSliceFlag"},{"Uniquefunname":"func NewStringFlag(flag cli.StringFlag) *StringFlag","Funname":"NewStringFlag","Returntype":"*StringFlag","Args":"flag cli.StringFlag"},{"Uniquefunname":"func NewStringSliceFlag(flag cli.StringSliceFlag) *StringSliceFlag","Funname":"NewStringSliceFlag","Returntype":"*StringSliceFlag","Args":"flag cli.StringSliceFlag"},{"Uniquefunname":"func altsrc.ApplyInputSourceValues(context *cli.Context, inputSourceContext InputSourceContext, flags []cli.Flag)error","Funname":"altsrc.ApplyInputSourceValues","Returntype":"error","Args":"context *cli.Context, inputSourceContext InputSourceContext, flags []cli.Flag"},{"Uniquefunname":"func (f *BoolFlag) Apply(set *flag.FlagSet)","Funname":"altsrc.BoolFlag.Apply","Returntype":"","Args":"set *flag.FlagSet"},{"Uniquefunname":"func (f *BoolFlag) ApplyInputSourceValue(context *cli.Context, isc InputSourceContext) error","Funname":"altsrc.BoolFlag.ApplyInputSourceValue","Returntype":"error","Args":"context *cli.Context, isc InputSourceContext"},{"Uniquefunname":"func (f *BoolTFlag) Apply(set *flag.FlagSet)","Funname":"altsrc.BoolTFlag.Apply","Returntype":"","Args":"set *flag.FlagSet"},{"Uniquefunname":"func (f *BoolTFlag) ApplyInputSourceValue(context *cli.Context, isc InputSourceContext) error","Funname":"altsrc.BoolTFlag.ApplyInputSourceValue","Returntype":"error","Args":"context *cli.Context, isc InputSourceContext"},{"Uniquefunname":"func (f *DurationFlag) Apply(set *flag.FlagSet)","Funname":"altsrc.DurationFlag.Apply","Returntype":"","Args":"set *flag.FlagSet"},{"Uniquefunname":"func altsrc.DurationFlag.ApplyInputSourceValue(context *cli.Context, isc InputSourceContext)error","Funname":"altsrc.DurationFlag.ApplyInputSourceValue","Returntype":"error","Args":"context *cli.Context, isc InputSourceContext"},{"Uniquefunname":"func (f *Float64Flag) Apply(set *flag.FlagSet)","Funname":"altsrc.Float64Flag.Apply","Returntype":"","Args":"set *flag.FlagSet"},{"Uniquefunname":"func altsrc.Float64Flag.ApplyInputSourceValue(context *cli.Context, isc InputSourceContext)error","Funname":"altsrc.Float64Flag.ApplyInputSourceValue","Returntype":"error","Args":"context *cli.Context, isc InputSourceContext"},{"Uniquefunname":"func (f *GenericFlag) Apply(set *flag.FlagSet)","Funname":"altsrc.GenericFlag.Apply","Returntype":"","Args":"set *flag.FlagSet"},{"Uniquefunname":"func altsrc.GenericFlag.ApplyInputSourceValue(context *cli.Context, isc InputSourceContext)error","Funname":"altsrc.GenericFlag.ApplyInputSourceValue","Returntype":"error","Args":"context *cli.Context, isc InputSourceContext"},{"Uniquefunname":"func altsrc.InitInputSource(flags []cli.Flag, createInputSource func() (InputSourceContext, error))func(context *cli.Context) error","Funname":"altsrc.InitInputSource","Returntype":"func(context *cli.Context) error","Args":"flags []cli.Flag, createInputSource func() (InputSourceContext, error)"},{"Uniquefunname":"func altsrc.InitInputSourceWithContext(flags []cli.Flag, createInputSource func(context *cli.Context) (InputSourceContext, error))func(context *cli.Context) error","Funname":"altsrc.InitInputSourceWithContext","Returntype":"func(context *cli.Context) error","Args":"flags []cli.Flag, createInputSource func(context *cli.Context) (InputSourceContext, error)"},{"Uniquefunname":"func (f *IntFlag) Apply(set *flag.FlagSet)","Funname":"altsrc.IntFlag.Apply","Returntype":"","Args":"set *flag.FlagSet"},{"Uniquefunname":"func (f *IntFlag) ApplyInputSourceValue(context *cli.Context, isc InputSourceContext) error","Funname":"altsrc.IntFlag.ApplyInputSourceValue","Returntype":"error","Args":"context *cli.Context, isc InputSourceContext"},{"Uniquefunname":"func (f *IntSliceFlag) Apply(set *flag.FlagSet)","Funname":"altsrc.IntSliceFlag.Apply","Returntype":"","Args":"set *flag.FlagSet"},{"Uniquefunname":"func altsrc.IntSliceFlag.ApplyInputSourceValue(context *cli.Context, isc InputSourceContext)error","Funname":"altsrc.IntSliceFlag.ApplyInputSourceValue","Returntype":"error","Args":"context *cli.Context, isc InputSourceContext"},{"Uniquefunname":"func NewBoolFlag(flag cli.BoolFlag) *BoolFlag","Funname":"altsrc.NewBoolFlag","Returntype":"*BoolFlag","Args":"flag cli.BoolFlag"},{"Uniquefunname":"func NewBoolTFlag(flag cli.BoolTFlag) *BoolTFlag","Funname":"altsrc.NewBoolTFlag","Returntype":"*BoolTFlag","Args":"flag cli.BoolTFlag"},{"Uniquefunname":"func NewDurationFlag(flag cli.DurationFlag) *DurationFlag","Funname":"altsrc.NewDurationFlag","Returntype":"*DurationFlag","Args":"flag cli.DurationFlag"},{"Uniquefunname":"func NewFloat64Flag(flag cli.Float64Flag) *Float64Flag","Funname":"altsrc.NewFloat64Flag","Returntype":"*Float64Flag","Args":"flag cli.Float64Flag"},{"Uniquefunname":"func NewGenericFlag(flag cli.GenericFlag) *GenericFlag","Funname":"altsrc.NewGenericFlag","Returntype":"*GenericFlag","Args":"flag cli.GenericFlag"},{"Uniquefunname":"func NewIntFlag(flag cli.IntFlag) *IntFlag","Funname":"altsrc.NewIntFlag","Returntype":"*IntFlag","Args":"flag cli.IntFlag"},{"Uniquefunname":"func NewIntSliceFlag(flag cli.IntSliceFlag) *IntSliceFlag","Funname":"altsrc.NewIntSliceFlag","Returntype":"*IntSliceFlag","Args":"flag cli.IntSliceFlag"},{"Uniquefunname":"func NewStringFlag(flag cli.StringFlag) *StringFlag","Funname":"altsrc.NewStringFlag","Returntype":"*StringFlag","Args":"flag cli.StringFlag"},{"Uniquefunname":"func NewStringSliceFlag(flag cli.StringSliceFlag) *StringSliceFlag","Funname":"altsrc.NewStringSliceFlag","Returntype":"*StringSliceFlag","Args":"flag cli.StringSliceFlag"},{"Uniquefunname":"func (f *StringFlag) Apply(set *flag.FlagSet)","Funname":"altsrc.StringFlag.Apply","Returntype":"","Args":"set *flag.FlagSet"},{"Uniquefunname":"func (f *StringFlag) ApplyInputSourceValue(context *cli.Context, isc InputSourceContext) error","Funname":"altsrc.StringFlag.ApplyInputSourceValue","Returntype":"error","Args":"context *cli.Context, isc InputSourceContext"},{"Uniquefunname":"func (f *StringSliceFlag) Apply(set *flag.FlagSet)","Funname":"altsrc.StringSliceFlag.Apply","Returntype":"","Args":"set *flag.FlagSet"},{"Uniquefunname":"func altsrc.StringSliceFlag.ApplyInputSourceValue(context *cli.Context, isc InputSourceContext)error","Funname":"altsrc.StringSliceFlag.ApplyInputSourceValue","Returntype":"error","Args":"context *cli.Context, isc InputSourceContext"},{"Uniquefunname":"func eachName(longName string, fn func(string))","Funname":"altsrc.eachName","Returntype":"","Args":"longName string, fn func(string)"},{"Uniquefunname":"func float64ToString(f float64) string","Funname":"altsrc.float64ToString","Returntype":"string","Args":"f float64"},{"Uniquefunname":"func isEnvVarSet(envVars string) bool","Funname":"altsrc.isEnvVarSet","Returntype":"bool","Args":"envVars string"},{"Uniquefunname":"func eachName(longName string, fn func(string))","Funname":"eachName","Returntype":"","Args":"longName string, fn func(string)"},{"Uniquefunname":"func float64ToString(f float64) string","Funname":"float64ToString","Returntype":"string","Args":"f float64"},{"Uniquefunname":"func isEnvVarSet(envVars string) bool","Funname":"isEnvVarSet","Returntype":"bool","Args":"envVars string"}],"Records":[{"Name":"struct:altsrc.BoolFlag","Fields":["altsrc.BoolFlag.set *flag.FlagSet"]},{"Name":"struct:altsrc.BoolTFlag","Fields":["altsrc.BoolTFlag.set *flag.FlagSet"]},{"Name":"struct:altsrc.DurationFlag","Fields":["altsrc.DurationFlag.set *flag.FlagSet"]},{"Name":"interface","Fields":["altsrc.FlagInputSourceExtension"]},{"Name":"struct:altsrc.Float64Flag","Fields":["altsrc.Float64Flag.set *flag.FlagSet"]},{"Name":"struct:altsrc.GenericFlag","Fields":["altsrc.GenericFlag.set *flag.FlagSet"]},{"Name":"struct:altsrc.IntFlag","Fields":["altsrc.IntFlag.set *flag.FlagSet"]},{"Name":"struct:altsrc.IntSliceFlag","Fields":["altsrc.IntSliceFlag.set *flag.FlagSet"]},{"Name":"struct:altsrc.StringFlag","Fields":["altsrc.StringFlag.set *flag.FlagSet"]},{"Name":"struct:altsrc.StringSliceFlag","Fields":["altsrc.StringSliceFlag.set *flag.FlagSet"]}]}
{"Filepath":"vendor/src/github.com/codegangsta/cli/altsrc/flag_test.go","Functions":[{"Uniquefunname":"func (p *Parser) Set(value string) error","Funname":"Set","Returntype":"error","Args":"value string"},{"Uniquefunname":"func (p *Parser) String() string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func TestBoolApplyInputSourceMethodContextSet(t *testing.T)","Funname":"TestBoolApplyInputSourceMethodContextSet","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestBoolApplyInputSourceMethodEnvVarSet(t *testing.T)","Funname":"TestBoolApplyInputSourceMethodEnvVarSet","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestBoolApplyInputSourceMethodSet(t *testing.T)","Funname":"TestBoolApplyInputSourceMethodSet","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestBoolTApplyInputSourceMethodContextSet(t *testing.T)","Funname":"TestBoolTApplyInputSourceMethodContextSet","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestBoolTApplyInputSourceMethodEnvVarSet(t *testing.T)","Funname":"TestBoolTApplyInputSourceMethodEnvVarSet","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestBoolTApplyInputSourceMethodSet(t *testing.T)","Funname":"TestBoolTApplyInputSourceMethodSet","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestDurationApplyInputSourceMethodContextSet(t *testing.T)","Funname":"TestDurationApplyInputSourceMethodContextSet","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestDurationApplyInputSourceMethodEnvVarSet(t *testing.T)","Funname":"TestDurationApplyInputSourceMethodEnvVarSet","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestDurationApplyInputSourceMethodSet(t *testing.T)","Funname":"TestDurationApplyInputSourceMethodSet","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestFloat64ApplyInputSourceMethodContextSet(t *testing.T)","Funname":"TestFloat64ApplyInputSourceMethodContextSet","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestFloat64ApplyInputSourceMethodEnvVarSet(t *testing.T)","Funname":"TestFloat64ApplyInputSourceMethodEnvVarSet","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestFloat64ApplyInputSourceMethodSet(t *testing.T)","Funname":"TestFloat64ApplyInputSourceMethodSet","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestGenericApplyInputSourceMethodContextSet(t *testing.T)","Funname":"TestGenericApplyInputSourceMethodContextSet","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestGenericApplyInputSourceMethodEnvVarSet(t *testing.T)","Funname":"TestGenericApplyInputSourceMethodEnvVarSet","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestGenericApplyInputSourceValue(t *testing.T)","Funname":"TestGenericApplyInputSourceValue","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestIntApplyInputSourceMethodContextSet(t *testing.T)","Funname":"TestIntApplyInputSourceMethodContextSet","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestIntApplyInputSourceMethodEnvVarSet(t *testing.T)","Funname":"TestIntApplyInputSourceMethodEnvVarSet","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestIntApplyInputSourceMethodSet(t *testing.T)","Funname":"TestIntApplyInputSourceMethodSet","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestIntSliceApplyInputSourceMethodContextSet(t *testing.T)","Funname":"TestIntSliceApplyInputSourceMethodContextSet","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestIntSliceApplyInputSourceMethodEnvVarSet(t *testing.T)","Funname":"TestIntSliceApplyInputSourceMethodEnvVarSet","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestIntSliceApplyInputSourceValue(t *testing.T)","Funname":"TestIntSliceApplyInputSourceValue","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestStringApplyInputSourceMethodContextSet(t *testing.T)","Funname":"TestStringApplyInputSourceMethodContextSet","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestStringApplyInputSourceMethodEnvVarSet(t *testing.T)","Funname":"TestStringApplyInputSourceMethodEnvVarSet","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestStringApplyInputSourceMethodSet(t *testing.T)","Funname":"TestStringApplyInputSourceMethodSet","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestStringSliceApplyInputSourceMethodContextSet(t *testing.T)","Funname":"TestStringSliceApplyInputSourceMethodContextSet","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestStringSliceApplyInputSourceMethodEnvVarSet(t *testing.T)","Funname":"TestStringSliceApplyInputSourceMethodEnvVarSet","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestStringSliceApplyInputSourceValue(t *testing.T)","Funname":"TestStringSliceApplyInputSourceValue","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func (p *Parser) Set(value string) error","Funname":"altsrc.Parser.Set","Returntype":"error","Args":"value string"},{"Uniquefunname":"func (p *Parser) String() string","Funname":"altsrc.Parser.String","Returntype":"string","Args":""},{"Uniquefunname":"func TestBoolApplyInputSourceMethodContextSet(t *testing.T)","Funname":"altsrc.TestBoolApplyInputSourceMethodContextSet","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestBoolApplyInputSourceMethodEnvVarSet(t *testing.T)","Funname":"altsrc.TestBoolApplyInputSourceMethodEnvVarSet","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestBoolApplyInputSourceMethodSet(t *testing.T)","Funname":"altsrc.TestBoolApplyInputSourceMethodSet","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestBoolTApplyInputSourceMethodContextSet(t *testing.T)","Funname":"altsrc.TestBoolTApplyInputSourceMethodContextSet","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestBoolTApplyInputSourceMethodEnvVarSet(t *testing.T)","Funname":"altsrc.TestBoolTApplyInputSourceMethodEnvVarSet","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestBoolTApplyInputSourceMethodSet(t *testing.T)","Funname":"altsrc.TestBoolTApplyInputSourceMethodSet","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestDurationApplyInputSourceMethodContextSet(t *testing.T)","Funname":"altsrc.TestDurationApplyInputSourceMethodContextSet","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestDurationApplyInputSourceMethodEnvVarSet(t *testing.T)","Funname":"altsrc.TestDurationApplyInputSourceMethodEnvVarSet","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestDurationApplyInputSourceMethodSet(t *testing.T)","Funname":"altsrc.TestDurationApplyInputSourceMethodSet","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestFloat64ApplyInputSourceMethodContextSet(t *testing.T)","Funname":"altsrc.TestFloat64ApplyInputSourceMethodContextSet","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestFloat64ApplyInputSourceMethodEnvVarSet(t *testing.T)","Funname":"altsrc.TestFloat64ApplyInputSourceMethodEnvVarSet","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestFloat64ApplyInputSourceMethodSet(t *testing.T)","Funname":"altsrc.TestFloat64ApplyInputSourceMethodSet","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestGenericApplyInputSourceMethodContextSet(t *testing.T)","Funname":"altsrc.TestGenericApplyInputSourceMethodContextSet","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestGenericApplyInputSourceMethodEnvVarSet(t *testing.T)","Funname":"altsrc.TestGenericApplyInputSourceMethodEnvVarSet","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestGenericApplyInputSourceValue(t *testing.T)","Funname":"altsrc.TestGenericApplyInputSourceValue","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestIntApplyInputSourceMethodContextSet(t *testing.T)","Funname":"altsrc.TestIntApplyInputSourceMethodContextSet","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestIntApplyInputSourceMethodEnvVarSet(t *testing.T)","Funname":"altsrc.TestIntApplyInputSourceMethodEnvVarSet","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestIntApplyInputSourceMethodSet(t *testing.T)","Funname":"altsrc.TestIntApplyInputSourceMethodSet","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestIntSliceApplyInputSourceMethodContextSet(t *testing.T)","Funname":"altsrc.TestIntSliceApplyInputSourceMethodContextSet","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestIntSliceApplyInputSourceMethodEnvVarSet(t *testing.T)","Funname":"altsrc.TestIntSliceApplyInputSourceMethodEnvVarSet","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestIntSliceApplyInputSourceValue(t *testing.T)","Funname":"altsrc.TestIntSliceApplyInputSourceValue","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestStringApplyInputSourceMethodContextSet(t *testing.T)","Funname":"altsrc.TestStringApplyInputSourceMethodContextSet","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestStringApplyInputSourceMethodEnvVarSet(t *testing.T)","Funname":"altsrc.TestStringApplyInputSourceMethodEnvVarSet","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestStringApplyInputSourceMethodSet(t *testing.T)","Funname":"altsrc.TestStringApplyInputSourceMethodSet","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestStringSliceApplyInputSourceMethodContextSet(t *testing.T)","Funname":"altsrc.TestStringSliceApplyInputSourceMethodContextSet","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestStringSliceApplyInputSourceMethodEnvVarSet(t *testing.T)","Funname":"altsrc.TestStringSliceApplyInputSourceMethodEnvVarSet","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestStringSliceApplyInputSourceValue(t *testing.T)","Funname":"altsrc.TestStringSliceApplyInputSourceValue","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func runTest(t *testing.T, test testApplyInputSource) *cli.Context","Funname":"altsrc.runTest","Returntype":"*cli.Context","Args":"t *testing.T, test testApplyInputSource"},{"Uniquefunname":"func runTest(t *testing.T, test testApplyInputSource) *cli.Context","Funname":"runTest","Returntype":"*cli.Context","Args":"t *testing.T, test testApplyInputSource"}],"Records":[{"Name":"struct:altsrc.testApplyInputSource","Fields":["altsrc.testApplyInputSource.ContextValue flag.Value","altsrc.testApplyInputSource.ContextValueString string","altsrc.testApplyInputSource.EnvVarName string","altsrc.testApplyInputSource.EnvVarValue string","altsrc.testApplyInputSource.Expected string","altsrc.testApplyInputSource.Flag FlagInputSourceExtension","altsrc.testApplyInputSource.FlagName string","altsrc.testApplyInputSource.FlagSetName string","altsrc.testApplyInputSource.MapValue interface{}"]}]}
{"Filepath":"vendor/src/github.com/codegangsta/cli/altsrc/helpers_test.go","Functions":[{"Uniquefunname":"func expect(t *testing.T, a interface","Funname":"altsrc.expect","Returntype":"","Args":"t *testing.T, a interface{}, b interface{}"},{"Uniquefunname":"func refute(t *testing.T, a interface","Funname":"altsrc.refute","Returntype":"","Args":"t *testing.T, a interface{}, b interface{}"},{"Uniquefunname":"func expect(t *testing.T, a interface","Funname":"expect","Returntype":"","Args":"t *testing.T, a interface{}, b interface{}"},{"Uniquefunname":"func refute(t *testing.T, a interface","Funname":"refute","Returntype":"","Args":"t *testing.T, a interface{}, b interface{}"}],"Records":null}
{"Filepath":"vendor/src/github.com/codegangsta/cli/altsrc/input_source_context.go","Functions":null,"Records":[{"Name":"interface","Fields":["altsrc.InputSourceContext"]}]}
{"Filepath":"vendor/src/github.com/codegangsta/cli/altsrc/map_input_source.go","Functions":[{"Uniquefunname":"func (fsm *MapInputSource) Bool(name string) (bool, error)","Funname":"Bool","Returntype":"(bool, error)","Args":"name string"},{"Uniquefunname":"func (fsm *MapInputSource) BoolT(name string) (bool, error)","Funname":"BoolT","Returntype":"(bool, error)","Args":"name string"},{"Uniquefunname":"func (fsm *MapInputSource) Duration(name string) (time.Duration, error)","Funname":"Duration","Returntype":"(time.Duration, error)","Args":"name string"},{"Uniquefunname":"func (fsm *MapInputSource) Float64(name string) (float64, error)","Funname":"Float64","Returntype":"(float64, error)","Args":"name string"},{"Uniquefunname":"func (fsm *MapInputSource) Generic(name string) (cli.Generic, error)","Funname":"Generic","Returntype":"(cli.Generic, error)","Args":"name string"},{"Uniquefunname":"func (fsm *MapInputSource) Int(name string) (int, error)","Funname":"Int","Returntype":"(int, error)","Args":"name string"},{"Uniquefunname":"func (fsm *MapInputSource) IntSlice(name string) ([]int, error)","Funname":"IntSlice","Returntype":"([]int, error)","Args":"name string"},{"Uniquefunname":"func (fsm *MapInputSource) String(name string) (string, error)","Funname":"String","Returntype":"(string, error)","Args":"name string"},{"Uniquefunname":"func (fsm *MapInputSource) StringSlice(name string) ([]string, error)","Funname":"StringSlice","Returntype":"([]string, error)","Args":"name string"},{"Uniquefunname":"func (fsm *MapInputSource) Bool(name string) (bool, error)","Funname":"altsrc.MapInputSource.Bool","Returntype":"(bool, error)","Args":"name string"},{"Uniquefunname":"func (fsm *MapInputSource) BoolT(name string) (bool, error)","Funname":"altsrc.MapInputSource.BoolT","Returntype":"(bool, error)","Args":"name string"},{"Uniquefunname":"func (fsm *MapInputSource) Duration(name string) (time.Duration, error)","Funname":"altsrc.MapInputSource.Duration","Returntype":"(time.Duration, error)","Args":"name string"},{"Uniquefunname":"func (fsm *MapInputSource) Float64(name string) (float64, error)","Funname":"altsrc.MapInputSource.Float64","Returntype":"(float64, error)","Args":"name string"},{"Uniquefunname":"func (fsm *MapInputSource) Generic(name string) (cli.Generic, error)","Funname":"altsrc.MapInputSource.Generic","Returntype":"(cli.Generic, error)","Args":"name string"},{"Uniquefunname":"func (fsm *MapInputSource) Int(name string) (int, error)","Funname":"altsrc.MapInputSource.Int","Returntype":"(int, error)","Args":"name string"},{"Uniquefunname":"func (fsm *MapInputSource) IntSlice(name string) ([]int, error)","Funname":"altsrc.MapInputSource.IntSlice","Returntype":"([]int, error)","Args":"name string"},{"Uniquefunname":"func (fsm *MapInputSource) String(name string) (string, error)","Funname":"altsrc.MapInputSource.String","Returntype":"(string, error)","Args":"name string"},{"Uniquefunname":"func (fsm *MapInputSource) StringSlice(name string) ([]string, error)","Funname":"altsrc.MapInputSource.StringSlice","Returntype":"([]string, error)","Args":"name string"},{"Uniquefunname":"func incorrectTypeForFlagError(name, expectedTypeName string, value interface","Funname":"altsrc.incorrectTypeForFlagError","Returntype":"error","Args":"name, expectedTypeName string, value interface{}"},{"Uniquefunname":"func incorrectTypeForFlagError(name, expectedTypeName string, value interface","Funname":"incorrectTypeForFlagError","Returntype":"error","Args":"name, expectedTypeName string, value interface{}"}],"Records":[{"Name":"struct:altsrc.MapInputSource","Fields":["altsrc.MapInputSource.valueMap map[string]interface{}"]}]}
{"Filepath":"vendor/src/github.com/codegangsta/cli/altsrc/yaml_command_test.go","Functions":[{"Uniquefunname":"func TestCommandYamlFileFlagHasDefaultGlobalEnvYamlSetGlobalEnvWins(t *testing.T)","Funname":"TestCommandYamlFileFlagHasDefaultGlobalEnvYamlSetGlobalEnvWins","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestCommandYamlFileTest(t *testing.T)","Funname":"TestCommandYamlFileTest","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestCommandYamlFileTestDefaultValueFileWins(t *testing.T)","Funname":"TestCommandYamlFileTestDefaultValueFileWins","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestCommandYamlFileTestGlobalEnvVarWins(t *testing.T)","Funname":"TestCommandYamlFileTestGlobalEnvVarWins","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestCommandYamlFileTestSpecifiedFlagWins(t *testing.T)","Funname":"TestCommandYamlFileTestSpecifiedFlagWins","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestCommandYamlFileFlagHasDefaultGlobalEnvYamlSetGlobalEnvWins(t *testing.T)","Funname":"altsrc.TestCommandYamlFileFlagHasDefaultGlobalEnvYamlSetGlobalEnvWins","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestCommandYamlFileTest(t *testing.T)","Funname":"altsrc.TestCommandYamlFileTest","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestCommandYamlFileTestDefaultValueFileWins(t *testing.T)","Funname":"altsrc.TestCommandYamlFileTestDefaultValueFileWins","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestCommandYamlFileTestGlobalEnvVarWins(t *testing.T)","Funname":"altsrc.TestCommandYamlFileTestGlobalEnvVarWins","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestCommandYamlFileTestSpecifiedFlagWins(t *testing.T)","Funname":"altsrc.TestCommandYamlFileTestSpecifiedFlagWins","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/codegangsta/cli/altsrc/yaml_file_loader.go","Functions":[{"Uniquefunname":"func NewYamlSourceFromFile(file string) (InputSourceContext, error)","Funname":"NewYamlSourceFromFile","Returntype":"(InputSourceContext, error)","Args":"file string"},{"Uniquefunname":"func NewYamlSourceFromFlagFunc(flagFileName string) func(InputSourceContext, error)","Funname":"NewYamlSourceFromFlagFunc","Returntype":"func(InputSourceContext, error)","Args":"flagFileName string"},{"Uniquefunname":"func NewYamlSourceFromFile(file string) (InputSourceContext, error)","Funname":"altsrc.NewYamlSourceFromFile","Returntype":"(InputSourceContext, error)","Args":"file string"},{"Uniquefunname":"func NewYamlSourceFromFlagFunc(flagFileName string) func(InputSourceContext, error)","Funname":"altsrc.NewYamlSourceFromFlagFunc","Returntype":"func(InputSourceContext, error)","Args":"flagFileName string"},{"Uniquefunname":"func loadDataFrom(filePath string) ([]byte, error)","Funname":"altsrc.loadDataFrom","Returntype":"([]byte, error)","Args":"filePath string"},{"Uniquefunname":"func readCommandYaml(filePath string, container interface","Funname":"altsrc.readCommandYaml","Returntype":"(err error)","Args":"filePath string, container interface{}"},{"Uniquefunname":"func loadDataFrom(filePath string) ([]byte, error)","Funname":"loadDataFrom","Returntype":"([]byte, error)","Args":"filePath string"},{"Uniquefunname":"func readCommandYaml(filePath string, container interface","Funname":"readCommandYaml","Returntype":"(err error)","Args":"filePath string, container interface{}"}],"Records":[{"Name":"struct:altsrc.yamlSourceContext","Fields":["altsrc.yamlSourceContext.FilePath string"]}]}
{"Filepath":"vendor/src/github.com/howeyc/fsnotify/example_test.go","Functions":[{"Uniquefunname":"func ExampleNewWatcher()","Funname":"ExampleNewWatcher","Returntype":"","Args":""},{"Uniquefunname":"func ExampleNewWatcher()","Funname":"fsnotify_test.ExampleNewWatcher","Returntype":"","Args":""}],"Records":null}
{"Filepath":"vendor/src/github.com/howeyc/fsnotify/fsnotify.go","Functions":[{"Uniquefunname":"func (w *Watcher) RemoveWatch(path string) error","Funname":"RemoveWatch","Returntype":"error","Args":"path string"},{"Uniquefunname":"func (e *FileEvent) String() string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func (w *Watcher) Watch(path string) error","Funname":"Watch","Returntype":"error","Args":"path string"},{"Uniquefunname":"func (w *Watcher) WatchFlags(path string, flags uint32) error","Funname":"WatchFlags","Returntype":"error","Args":"path string, flags uint32"},{"Uniquefunname":"func (e *FileEvent) String() string","Funname":"fsnotify.FileEvent.String","Returntype":"string","Args":""},{"Uniquefunname":"func (w *Watcher) RemoveWatch(path string) error","Funname":"fsnotify.Watcher.RemoveWatch","Returntype":"error","Args":"path string"},{"Uniquefunname":"func (w *Watcher) Watch(path string) error","Funname":"fsnotify.Watcher.Watch","Returntype":"error","Args":"path string"},{"Uniquefunname":"func (w *Watcher) WatchFlags(path string, flags uint32) error","Funname":"fsnotify.Watcher.WatchFlags","Returntype":"error","Args":"path string, flags uint32"},{"Uniquefunname":"func (w *Watcher) purgeEvents()","Funname":"fsnotify.Watcher.purgeEvents","Returntype":"","Args":""},{"Uniquefunname":"func (w *Watcher) purgeEvents()","Funname":"purgeEvents","Returntype":"","Args":""}],"Records":[{"Name":"const:fsnotify","Fields":["fsnotify.FSN_ALL","fsnotify.FSN_CREATE","fsnotify.FSN_DELETE","fsnotify.FSN_MODIFY","fsnotify.FSN_RENAME"]}]}
{"Filepath":"vendor/src/github.com/howeyc/fsnotify/fsnotify_bsd.go","Functions":[{"Uniquefunname":"func (w *Watcher) Close() error","Funname":"Close","Returntype":"error","Args":""},{"Uniquefunname":"func (e *FileEvent) IsAttrib() bool","Funname":"IsAttrib","Returntype":"bool","Args":""},{"Uniquefunname":"func IsCreate()bool","Funname":"IsCreate","Returntype":"bool","Args":""},{"Uniquefunname":"func IsDelete()bool","Funname":"IsDelete","Returntype":"bool","Args":""},{"Uniquefunname":"func (e *FileEvent) IsModify() bool","Funname":"IsModify","Returntype":"bool","Args":""},{"Uniquefunname":"func IsRename()bool","Funname":"IsRename","Returntype":"bool","Args":""},{"Uniquefunname":"func NewWatcher() (*Watcher, error)","Funname":"NewWatcher","Returntype":"(*Watcher, error)","Args":""},{"Uniquefunname":"func (w *Watcher) addWatch(path string, flags uint32) error","Funname":"addWatch","Returntype":"error","Args":"path string, flags uint32"},{"Uniquefunname":"func (e *FileEvent) IsAttrib() bool","Funname":"fsnotify.FileEvent.IsAttrib","Returntype":"bool","Args":""},{"Uniquefunname":"func fsnotify.FileEvent.IsCreate()bool","Funname":"fsnotify.FileEvent.IsCreate","Returntype":"bool","Args":""},{"Uniquefunname":"func fsnotify.FileEvent.IsDelete()bool","Funname":"fsnotify.FileEvent.IsDelete","Returntype":"bool","Args":""},{"Uniquefunname":"func (e *FileEvent) IsModify() bool","Funname":"fsnotify.FileEvent.IsModify","Returntype":"bool","Args":""},{"Uniquefunname":"func fsnotify.FileEvent.IsRename()bool","Funname":"fsnotify.FileEvent.IsRename","Returntype":"bool","Args":""},{"Uniquefunname":"func NewWatcher() (*Watcher, error)","Funname":"fsnotify.NewWatcher","Returntype":"(*Watcher, error)","Args":""},{"Uniquefunname":"func (w *Watcher) Close() error","Funname":"fsnotify.Watcher.Close","Returntype":"error","Args":""},{"Uniquefunname":"func (w *Watcher) addWatch(path string, flags uint32) error","Funname":"fsnotify.Watcher.addWatch","Returntype":"error","Args":"path string, flags uint32"},{"Uniquefunname":"func (w *Watcher) readEvents()","Funname":"fsnotify.Watcher.readEvents","Returntype":"","Args":""},{"Uniquefunname":"func (w *Watcher) removeWatch(path string) error","Funname":"fsnotify.Watcher.removeWatch","Returntype":"error","Args":"path string"},{"Uniquefunname":"func (w *Watcher) sendDirectoryChangeEvents(dirPath string)","Funname":"fsnotify.Watcher.sendDirectoryChangeEvents","Returntype":"","Args":"dirPath string"},{"Uniquefunname":"func (w *Watcher) watch(path string) error","Funname":"fsnotify.Watcher.watch","Returntype":"error","Args":"path string"},{"Uniquefunname":"func (w *Watcher) watchDirectoryFiles(dirPath string) error","Funname":"fsnotify.Watcher.watchDirectoryFiles","Returntype":"error","Args":"dirPath string"},{"Uniquefunname":"func (w *Watcher) readEvents()","Funname":"readEvents","Returntype":"","Args":""},{"Uniquefunname":"func (w *Watcher) removeWatch(path string) error","Funname":"removeWatch","Returntype":"error","Args":"path string"},{"Uniquefunname":"func (w *Watcher) sendDirectoryChangeEvents(dirPath string)","Funname":"sendDirectoryChangeEvents","Returntype":"","Args":"dirPath string"},{"Uniquefunname":"func (w *Watcher) watch(path string) error","Funname":"watch","Returntype":"error","Args":"path string"},{"Uniquefunname":"func (w *Watcher) watchDirectoryFiles(dirPath string) error","Funname":"watchDirectoryFiles","Returntype":"error","Args":"dirPath string"}],"Records":[{"Name":"struct:fsnotify.FileEvent","Fields":["fsnotify.FileEvent.Name string","fsnotify.FileEvent.create bool","fsnotify.FileEvent.mask uint32"]},{"Name":"struct:fsnotify.Watcher","Fields":["fsnotify.Watcher.Error chan error","fsnotify.Watcher.Event chan *FileEvent","fsnotify.Watcher.done chan bool","fsnotify.Watcher.enFlags map[string]uint32","fsnotify.Watcher.enmut sync.Mutex","fsnotify.Watcher.ewmut sync.Mutex","fsnotify.Watcher.externalWatches map[string]bool","fsnotify.Watcher.femut sync.Mutex","fsnotify.Watcher.fileExists map[string]bool","fsnotify.Watcher.finfo map[int]os.FileInfo","fsnotify.Watcher.fsnFlags map[string]uint32","fsnotify.Watcher.fsnmut sync.Mutex","fsnotify.Watcher.internalEvent chan *FileEvent","fsnotify.Watcher.isClosed bool","fsnotify.Watcher.kq int","fsnotify.Watcher.mu sync.Mutex","fsnotify.Watcher.paths map[int]string","fsnotify.Watcher.pmut sync.Mutex","fsnotify.Watcher.watches map[string]int","fsnotify.Watcher.wmut sync.Mutex"]},{"Name":"const:fsnotify","Fields":["fsnotify.keventWaitTime","fsnotify.sys_NOTE_ALLEVENTS","fsnotify.sys_NOTE_ATTRIB","fsnotify.sys_NOTE_DELETE","fsnotify.sys_NOTE_EXTEND","fsnotify.sys_NOTE_LINK","fsnotify.sys_NOTE_RENAME","fsnotify.sys_NOTE_REVOKE","fsnotify.sys_NOTE_WRITE"]}]}
{"Filepath":"vendor/src/github.com/howeyc/fsnotify/fsnotify_linux.go","Functions":[{"Uniquefunname":"func (w *Watcher) Close() error","Funname":"Close","Returntype":"error","Args":""},{"Uniquefunname":"func (e *FileEvent) IsAttrib() bool","Funname":"IsAttrib","Returntype":"bool","Args":""},{"Uniquefunname":"func (e *FileEvent) IsCreate() bool","Funname":"IsCreate","Returntype":"bool","Args":""},{"Uniquefunname":"func (e *FileEvent) IsDelete() bool","Funname":"IsDelete","Returntype":"bool","Args":""},{"Uniquefunname":"func (e *FileEvent) IsModify() bool","Funname":"IsModify","Returntype":"bool","Args":""},{"Uniquefunname":"func (e *FileEvent) IsRename() bool","Funname":"IsRename","Returntype":"bool","Args":""},{"Uniquefunname":"func NewWatcher() (*Watcher, error)","Funname":"NewWatcher","Returntype":"(*Watcher, error)","Args":""},{"Uniquefunname":"func (w *Watcher) addWatch(path string, flags uint32) error","Funname":"addWatch","Returntype":"error","Args":"path string, flags uint32"},{"Uniquefunname":"func (e *FileEvent) IsAttrib() bool","Funname":"fsnotify.FileEvent.IsAttrib","Returntype":"bool","Args":""},{"Uniquefunname":"func (e *FileEvent) IsCreate() bool","Funname":"fsnotify.FileEvent.IsCreate","Returntype":"bool","Args":""},{"Uniquefunname":"func (e *FileEvent) IsDelete() bool","Funname":"fsnotify.FileEvent.IsDelete","Returntype":"bool","Args":""},{"Uniquefunname":"func (e *FileEvent) IsModify() bool","Funname":"fsnotify.FileEvent.IsModify","Returntype":"bool","Args":""},{"Uniquefunname":"func (e *FileEvent) IsRename() bool","Funname":"fsnotify.FileEvent.IsRename","Returntype":"bool","Args":""},{"Uniquefunname":"func (e *FileEvent) ignoreLinux() bool","Funname":"fsnotify.FileEvent.ignoreLinux","Returntype":"bool","Args":""},{"Uniquefunname":"func NewWatcher() (*Watcher, error)","Funname":"fsnotify.NewWatcher","Returntype":"(*Watcher, error)","Args":""},{"Uniquefunname":"func (w *Watcher) Close() error","Funname":"fsnotify.Watcher.Close","Returntype":"error","Args":""},{"Uniquefunname":"func (w *Watcher) addWatch(path string, flags uint32) error","Funname":"fsnotify.Watcher.addWatch","Returntype":"error","Args":"path string, flags uint32"},{"Uniquefunname":"func (w *Watcher) readEvents()","Funname":"fsnotify.Watcher.readEvents","Returntype":"","Args":""},{"Uniquefunname":"func (w *Watcher) removeWatch(path string) error","Funname":"fsnotify.Watcher.removeWatch","Returntype":"error","Args":"path string"},{"Uniquefunname":"func (w *Watcher) watch(path string) error","Funname":"fsnotify.Watcher.watch","Returntype":"error","Args":"path string"},{"Uniquefunname":"func (e *FileEvent) ignoreLinux() bool","Funname":"ignoreLinux","Returntype":"bool","Args":""},{"Uniquefunname":"func (w *Watcher) readEvents()","Funname":"readEvents","Returntype":"","Args":""},{"Uniquefunname":"func (w *Watcher) removeWatch(path string) error","Funname":"removeWatch","Returntype":"error","Args":"path string"},{"Uniquefunname":"func (w *Watcher) watch(path string) error","Funname":"watch","Returntype":"error","Args":"path string"}],"Records":[{"Name":"struct:fsnotify.FileEvent","Fields":["fsnotify.FileEvent.Name string","fsnotify.FileEvent.cookie uint32","fsnotify.FileEvent.mask uint32"]},{"Name":"struct:fsnotify.Watcher","Fields":["fsnotify.Watcher.Error chan error","fsnotify.Watcher.Event chan *FileEvent","fsnotify.Watcher.done chan bool","fsnotify.Watcher.fd int","fsnotify.Watcher.fsnFlags map[string]uint32","fsnotify.Watcher.fsnmut sync.Mutex","fsnotify.Watcher.internalEvent chan *FileEvent","fsnotify.Watcher.isClosed bool","fsnotify.Watcher.mu sync.Mutex","fsnotify.Watcher.paths map[int]string","fsnotify.Watcher.watches map[string]*watch"]},{"Name":"const:fsnotify","Fields":["fsnotify.sys_AGNOSTIC_EVENTS","fsnotify.sys_IN_ACCESS","fsnotify.sys_IN_ALL_EVENTS","fsnotify.sys_IN_ATTRIB","fsnotify.sys_IN_CLOSE","fsnotify.sys_IN_CLOSE_NOWRITE","fsnotify.sys_IN_CLOSE_WRITE","fsnotify.sys_IN_CREATE","fsnotify.sys_IN_DELETE","fsnotify.sys_IN_DELETE_SELF","fsnotify.sys_IN_DONT_FOLLOW","fsnotify.sys_IN_IGNORED","fsnotify.sys_IN_ISDIR","fsnotify.sys_IN_MODIFY","fsnotify.sys_IN_MOVE","fsnotify.sys_IN_MOVED_FROM","fsnotify.sys_IN_MOVED_TO","fsnotify.sys_IN_MOVE_SELF","fsnotify.sys_IN_ONESHOT","fsnotify.sys_IN_ONLYDIR","fsnotify.sys_IN_OPEN","fsnotify.sys_IN_Q_OVERFLOW","fsnotify.sys_IN_UNMOUNT"]},{"Name":"struct:fsnotify.watch","Fields":["fsnotify.watch.flags uint32","fsnotify.watch.wd uint32"]}]}
{"Filepath":"vendor/src/github.com/howeyc/fsnotify/fsnotify_open_bsd.go","Functions":null,"Records":[{"Name":"const:fsnotify","Fields":["fsnotify.open_FLAGS"]}]}
{"Filepath":"vendor/src/github.com/howeyc/fsnotify/fsnotify_open_darwin.go","Functions":null,"Records":[{"Name":"const:fsnotify","Fields":["fsnotify.open_FLAGS"]}]}
{"Filepath":"vendor/src/github.com/howeyc/fsnotify/fsnotify_symlink_test.go","Functions":[{"Uniquefunname":"func TestFsnotifyFakeSymlink(t *testing.T)","Funname":"TestFsnotifyFakeSymlink","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestFsnotifyFakeSymlink(t *testing.T)","Funname":"fsnotify.TestFsnotifyFakeSymlink","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/howeyc/fsnotify/fsnotify_test.go","Functions":[{"Uniquefunname":"func TestFsnotifyAttrib(t *testing.T)","Funname":"TestFsnotifyAttrib","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestFsnotifyClose(t *testing.T)","Funname":"TestFsnotifyClose","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestFsnotifyDeleteWatchedDir(t *testing.T)","Funname":"TestFsnotifyDeleteWatchedDir","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestFsnotifyDirOnly(t *testing.T)","Funname":"TestFsnotifyDirOnly","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestFsnotifyMultipleCreates(t *testing.T)","Funname":"TestFsnotifyMultipleCreates","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestFsnotifyMultipleOperations(t *testing.T)","Funname":"TestFsnotifyMultipleOperations","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestFsnotifyRename(t *testing.T)","Funname":"TestFsnotifyRename","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestFsnotifyRenameToCreate(t *testing.T)","Funname":"TestFsnotifyRenameToCreate","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestFsnotifyRenameToOverwrite(t *testing.T)","Funname":"TestFsnotifyRenameToOverwrite","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestFsnotifySubDir(t *testing.T)","Funname":"TestFsnotifySubDir","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestRemovalOfWatch(t *testing.T)","Funname":"TestRemovalOfWatch","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func addWatch(t *testing.T, watcher *Watcher, dir string)","Funname":"addWatch","Returntype":"","Args":"t *testing.T, watcher *Watcher, dir string"},{"Uniquefunname":"func TestFsnotifyAttrib(t *testing.T)","Funname":"fsnotify.TestFsnotifyAttrib","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestFsnotifyClose(t *testing.T)","Funname":"fsnotify.TestFsnotifyClose","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestFsnotifyDeleteWatchedDir(t *testing.T)","Funname":"fsnotify.TestFsnotifyDeleteWatchedDir","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestFsnotifyDirOnly(t *testing.T)","Funname":"fsnotify.TestFsnotifyDirOnly","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestFsnotifyMultipleCreates(t *testing.T)","Funname":"fsnotify.TestFsnotifyMultipleCreates","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestFsnotifyMultipleOperations(t *testing.T)","Funname":"fsnotify.TestFsnotifyMultipleOperations","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestFsnotifyRename(t *testing.T)","Funname":"fsnotify.TestFsnotifyRename","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestFsnotifyRenameToCreate(t *testing.T)","Funname":"fsnotify.TestFsnotifyRenameToCreate","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestFsnotifyRenameToOverwrite(t *testing.T)","Funname":"fsnotify.TestFsnotifyRenameToOverwrite","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestFsnotifySubDir(t *testing.T)","Funname":"fsnotify.TestFsnotifySubDir","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestRemovalOfWatch(t *testing.T)","Funname":"fsnotify.TestRemovalOfWatch","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func addWatch(t *testing.T, watcher *Watcher, dir string)","Funname":"fsnotify.addWatch","Returntype":"","Args":"t *testing.T, watcher *Watcher, dir string"},{"Uniquefunname":"func (c *counter) increment()","Funname":"fsnotify.counter.increment","Returntype":"","Args":""},{"Uniquefunname":"func (c *counter) reset()","Funname":"fsnotify.counter.reset","Returntype":"","Args":""},{"Uniquefunname":"func (c *counter) value() int32","Funname":"fsnotify.counter.value","Returntype":"int32","Args":""},{"Uniquefunname":"func newWatcher(t *testing.T) *Watcher","Funname":"fsnotify.newWatcher","Returntype":"*Watcher","Args":"t *testing.T"},{"Uniquefunname":"func tempMkdir(t *testing.T) string","Funname":"fsnotify.tempMkdir","Returntype":"string","Args":"t *testing.T"},{"Uniquefunname":"func testRename(file1, file2 string) error","Funname":"fsnotify.testRename","Returntype":"error","Args":"file1, file2 string"},{"Uniquefunname":"func (c *counter) increment()","Funname":"increment","Returntype":"","Args":""},{"Uniquefunname":"func newWatcher(t *testing.T) *Watcher","Funname":"newWatcher","Returntype":"*Watcher","Args":"t *testing.T"},{"Uniquefunname":"func (c *counter) reset()","Funname":"reset","Returntype":"","Args":""},{"Uniquefunname":"func tempMkdir(t *testing.T) string","Funname":"tempMkdir","Returntype":"string","Args":"t *testing.T"},{"Uniquefunname":"func testRename(file1, file2 string) error","Funname":"testRename","Returntype":"error","Args":"file1, file2 string"},{"Uniquefunname":"func (c *counter) value() int32","Funname":"value","Returntype":"int32","Args":""}],"Records":[{"Name":"struct:fsnotify.counter","Fields":["fsnotify.counter.val int32"]}]}
{"Filepath":"vendor/src/github.com/howeyc/fsnotify/fsnotify_windows.go","Functions":[{"Uniquefunname":"func (w *Watcher) AddWatch(path string, flags uint32) error","Funname":"AddWatch","Returntype":"error","Args":"path string, flags uint32"},{"Uniquefunname":"func (w *Watcher) Close() error","Funname":"Close","Returntype":"error","Args":""},{"Uniquefunname":"func (e *FileEvent) IsAttrib() bool","Funname":"IsAttrib","Returntype":"bool","Args":""},{"Uniquefunname":"func IsCreate()bool","Funname":"IsCreate","Returntype":"bool","Args":""},{"Uniquefunname":"func (e *FileEvent) IsDelete() bool","Funname":"IsDelete","Returntype":"bool","Args":""},{"Uniquefunname":"func (e *FileEvent) IsModify() bool","Funname":"IsModify","Returntype":"bool","Args":""},{"Uniquefunname":"func (e *FileEvent) IsRename() bool","Funname":"IsRename","Returntype":"bool","Args":""},{"Uniquefunname":"func NewWatcher() (*Watcher, error)","Funname":"NewWatcher","Returntype":"(*Watcher, error)","Args":""},{"Uniquefunname":"func (w *Watcher) addWatch(pathname string, flags uint64) error","Funname":"addWatch","Returntype":"error","Args":"pathname string, flags uint64"},{"Uniquefunname":"func (w *Watcher) deleteWatch(watch *watch)","Funname":"deleteWatch","Returntype":"","Args":"watch *watch"},{"Uniquefunname":"func (e *FileEvent) IsAttrib() bool","Funname":"fsnotify.FileEvent.IsAttrib","Returntype":"bool","Args":""},{"Uniquefunname":"func fsnotify.FileEvent.IsCreate()bool","Funname":"fsnotify.FileEvent.IsCreate","Returntype":"bool","Args":""},{"Uniquefunname":"func (e *FileEvent) IsDelete() bool","Funname":"fsnotify.FileEvent.IsDelete","Returntype":"bool","Args":""},{"Uniquefunname":"func (e *FileEvent) IsModify() bool","Funname":"fsnotify.FileEvent.IsModify","Returntype":"bool","Args":""},{"Uniquefunname":"func (e *FileEvent) IsRename() bool","Funname":"fsnotify.FileEvent.IsRename","Returntype":"bool","Args":""},{"Uniquefunname":"func NewWatcher() (*Watcher, error)","Funname":"fsnotify.NewWatcher","Returntype":"(*Watcher, error)","Args":""},{"Uniquefunname":"func (w *Watcher) AddWatch(path string, flags uint32) error","Funname":"fsnotify.Watcher.AddWatch","Returntype":"error","Args":"path string, flags uint32"},{"Uniquefunname":"func (w *Watcher) Close() error","Funname":"fsnotify.Watcher.Close","Returntype":"error","Args":""},{"Uniquefunname":"func (w *Watcher) addWatch(pathname string, flags uint64) error","Funname":"fsnotify.Watcher.addWatch","Returntype":"error","Args":"pathname string, flags uint64"},{"Uniquefunname":"func (w *Watcher) deleteWatch(watch *watch)","Funname":"fsnotify.Watcher.deleteWatch","Returntype":"","Args":"watch *watch"},{"Uniquefunname":"func (w *Watcher) readEvents()","Funname":"fsnotify.Watcher.readEvents","Returntype":"","Args":""},{"Uniquefunname":"func (w *Watcher) remWatch(pathname string) error","Funname":"fsnotify.Watcher.remWatch","Returntype":"error","Args":"pathname string"},{"Uniquefunname":"func (w *Watcher) removeWatch(path string) error","Funname":"fsnotify.Watcher.removeWatch","Returntype":"error","Args":"path string"},{"Uniquefunname":"func (w *Watcher) sendEvent(name string, mask uint64) bool","Funname":"fsnotify.Watcher.sendEvent","Returntype":"bool","Args":"name string, mask uint64"},{"Uniquefunname":"func (w *Watcher) startRead(watch *watch) error","Funname":"fsnotify.Watcher.startRead","Returntype":"error","Args":"watch *watch"},{"Uniquefunname":"func (w *Watcher) wakeupReader() error","Funname":"fsnotify.Watcher.wakeupReader","Returntype":"error","Args":""},{"Uniquefunname":"func (w *Watcher) watch(path string) error","Funname":"fsnotify.Watcher.watch","Returntype":"error","Args":"path string"},{"Uniquefunname":"func getDir(pathname string) (dir string, err error)","Funname":"fsnotify.getDir","Returntype":"(dir string, err error)","Args":"pathname string"},{"Uniquefunname":"func getIno(path string) (ino *inode, err error)","Funname":"fsnotify.getIno","Returntype":"(ino *inode, err error)","Args":"path string"},{"Uniquefunname":"func toFSnotifyFlags(action uint32) uint64","Funname":"fsnotify.toFSnotifyFlags","Returntype":"uint64","Args":"action uint32"},{"Uniquefunname":"func toWindowsFlags(mask uint64) uint32","Funname":"fsnotify.toWindowsFlags","Returntype":"uint32","Args":"mask uint64"},{"Uniquefunname":"func (m watchMap) get(ino *inode) *watch","Funname":"fsnotify.watchMap.get","Returntype":"*watch","Args":"ino *inode"},{"Uniquefunname":"func (m watchMap) set(ino *inode, watch *watch)","Funname":"fsnotify.watchMap.set","Returntype":"","Args":"ino *inode, watch *watch"},{"Uniquefunname":"func (m watchMap) get(ino *inode) *watch","Funname":"get","Returntype":"*watch","Args":"ino *inode"},{"Uniquefunname":"func getDir(pathname string) (dir string, err error)","Funname":"getDir","Returntype":"(dir string, err error)","Args":"pathname string"},{"Uniquefunname":"func getIno(path string) (ino *inode, err error)","Funname":"getIno","Returntype":"(ino *inode, err error)","Args":"path string"},{"Uniquefunname":"func (w *Watcher) readEvents()","Funname":"readEvents","Returntype":"","Args":""},{"Uniquefunname":"func (w *Watcher) remWatch(pathname string) error","Funname":"remWatch","Returntype":"error","Args":"pathname string"},{"Uniquefunname":"func (w *Watcher) removeWatch(path string) error","Funname":"removeWatch","Returntype":"error","Args":"path string"},{"Uniquefunname":"func (w *Watcher) sendEvent(name string, mask uint64) bool","Funname":"sendEvent","Returntype":"bool","Args":"name string, mask uint64"},{"Uniquefunname":"func (m watchMap) set(ino *inode, watch *watch)","Funname":"set","Returntype":"","Args":"ino *inode, watch *watch"},{"Uniquefunname":"func (w *Watcher) startRead(watch *watch) error","Funname":"startRead","Returntype":"error","Args":"watch *watch"},{"Uniquefunname":"func toFSnotifyFlags(action uint32) uint64","Funname":"toFSnotifyFlags","Returntype":"uint64","Args":"action uint32"},{"Uniquefunname":"func toWindowsFlags(mask uint64) uint32","Funname":"toWindowsFlags","Returntype":"uint32","Args":"mask uint64"},{"Uniquefunname":"func (w *Watcher) wakeupReader() error","Funname":"wakeupReader","Returntype":"error","Args":""},{"Uniquefunname":"func (w *Watcher) watch(path string) error","Funname":"watch","Returntype":"error","Args":"path string"}],"Records":[{"Name":"struct:fsnotify.FileEvent","Fields":["fsnotify.FileEvent.Name string","fsnotify.FileEvent.cookie uint32","fsnotify.FileEvent.mask uint32"]},{"Name":"struct:fsnotify.Watcher","Fields":["fsnotify.Watcher.Error chan error","fsnotify.Watcher.Event chan *FileEvent","fsnotify.Watcher.cookie uint32","fsnotify.Watcher.fsnFlags map[string]uint32","fsnotify.Watcher.fsnmut sync.Mutex","fsnotify.Watcher.input chan *input","fsnotify.Watcher.internalEvent chan *FileEvent","fsnotify.Watcher.isClosed bool","fsnotify.Watcher.mu sync.Mutex","fsnotify.Watcher.port syscall.Handle","fsnotify.Watcher.quit chan chan\u003c- error","fsnotify.Watcher.watches watchMap"]},{"Name":"struct:fsnotify.inode","Fields":["fsnotify.inode.handle syscall.Handle","fsnotify.inode.index uint64","fsnotify.inode.volume uint32"]},{"Name":"struct:fsnotify.input","Fields":["fsnotify.input.flags uint32","fsnotify.input.op int","fsnotify.input.path string","fsnotify.input.reply chan error"]},{"Name":"const:fsnotify","Fields":["fsnotify.opAddWatch","fsnotify.opRemoveWatch","fsnotify.provisional","fsnotify.sys_ERROR_MORE_DATA","fsnotify.sys_FS_ACCESS","fsnotify.sys_FS_ALL_EVENTS","fsnotify.sys_FS_ATTRIB","fsnotify.sys_FS_CLOSE","fsnotify.sys_FS_CREATE","fsnotify.sys_FS_DELETE","fsnotify.sys_FS_DELETE_SELF","fsnotify.sys_FS_IGNORED","fsnotify.sys_FS_MODIFY","fsnotify.sys_FS_MOVE","fsnotify.sys_FS_MOVED_FROM","fsnotify.sys_FS_MOVED_TO","fsnotify.sys_FS_MOVE_SELF","fsnotify.sys_FS_ONESHOT","fsnotify.sys_FS_ONLYDIR","fsnotify.sys_FS_Q_OVERFLOW"]},{"Name":"struct:fsnotify.watch","Fields":["fsnotify.watch.buf [4096]byte","fsnotify.watch.ino *inode","fsnotify.watch.mask uint64","fsnotify.watch.names map[string]uint64","fsnotify.watch.ov syscall.Overlapped","fsnotify.watch.path string","fsnotify.watch.rename string"]}]}
{"Filepath":"vendor/src/github.com/hpcloud/tail/tail.go","Functions":[{"Uniquefunname":"func (tail *Tail) Cleanup()","Funname":"Cleanup","Returntype":"","Args":""},{"Uniquefunname":"func NewLine(text string) *Line","Funname":"NewLine","Returntype":"*Line","Args":"text string"},{"Uniquefunname":"func (tail *Tail) Stop() error","Funname":"Stop","Returntype":"error","Args":""},{"Uniquefunname":"func (tail *Tail) StopAtEOF() error","Funname":"StopAtEOF","Returntype":"error","Args":""},{"Uniquefunname":"func TailFile(filename string, config Config) (*Tail, error)","Funname":"TailFile","Returntype":"(*Tail, error)","Args":"filename string, config Config"},{"Uniquefunname":"func (tail *Tail) Tell() (offset int64, err error)","Funname":"Tell","Returntype":"(offset int64, err error)","Args":""},{"Uniquefunname":"func (tail *Tail) close()","Funname":"close","Returntype":"","Args":""},{"Uniquefunname":"func (tail *Tail) closeFile()","Funname":"closeFile","Returntype":"","Args":""},{"Uniquefunname":"func (tail *Tail) openReader()","Funname":"openReader","Returntype":"","Args":""},{"Uniquefunname":"func (tail *Tail) readLine() (string, error)","Funname":"readLine","Returntype":"(string, error)","Args":""},{"Uniquefunname":"func (tail *Tail) reopen() error","Funname":"reopen","Returntype":"error","Args":""},{"Uniquefunname":"func (tail *Tail) seekEnd() error","Funname":"seekEnd","Returntype":"error","Args":""},{"Uniquefunname":"func (tail *Tail) seekTo(pos SeekInfo) error","Funname":"seekTo","Returntype":"error","Args":"pos SeekInfo"},{"Uniquefunname":"func (tail *Tail) sendLine(line string) bool","Funname":"sendLine","Returntype":"bool","Args":"line string"},{"Uniquefunname":"func NewLine(text string) *Line","Funname":"tail.NewLine","Returntype":"*Line","Args":"text string"},{"Uniquefunname":"func (tail *Tail) Cleanup()","Funname":"tail.Tail.Cleanup","Returntype":"","Args":""},{"Uniquefunname":"func (tail *Tail) Stop() error","Funname":"tail.Tail.Stop","Returntype":"error","Args":""},{"Uniquefunname":"func (tail *Tail) StopAtEOF() error","Funname":"tail.Tail.StopAtEOF","Returntype":"error","Args":""},{"Uniquefunname":"func (tail *Tail) Tell() (offset int64, err error)","Funname":"tail.Tail.Tell","Returntype":"(offset int64, err error)","Args":""},{"Uniquefunname":"func (tail *Tail) close()","Funname":"tail.Tail.close","Returntype":"","Args":""},{"Uniquefunname":"func (tail *Tail) closeFile()","Funname":"tail.Tail.closeFile","Returntype":"","Args":""},{"Uniquefunname":"func (tail *Tail) openReader()","Funname":"tail.Tail.openReader","Returntype":"","Args":""},{"Uniquefunname":"func (tail *Tail) readLine() (string, error)","Funname":"tail.Tail.readLine","Returntype":"(string, error)","Args":""},{"Uniquefunname":"func (tail *Tail) reopen() error","Funname":"tail.Tail.reopen","Returntype":"error","Args":""},{"Uniquefunname":"func (tail *Tail) seekEnd() error","Funname":"tail.Tail.seekEnd","Returntype":"error","Args":""},{"Uniquefunname":"func (tail *Tail) seekTo(pos SeekInfo) error","Funname":"tail.Tail.seekTo","Returntype":"error","Args":"pos SeekInfo"},{"Uniquefunname":"func (tail *Tail) sendLine(line string) bool","Funname":"tail.Tail.sendLine","Returntype":"bool","Args":"line string"},{"Uniquefunname":"func (tail *Tail) tailFileSync()","Funname":"tail.Tail.tailFileSync","Returntype":"","Args":""},{"Uniquefunname":"func (tail *Tail) waitForChanges() error","Funname":"tail.Tail.waitForChanges","Returntype":"error","Args":""},{"Uniquefunname":"func TailFile(filename string, config Config) (*Tail, error)","Funname":"tail.TailFile","Returntype":"(*Tail, error)","Args":"filename string, config Config"},{"Uniquefunname":"func (tail *Tail) tailFileSync()","Funname":"tailFileSync","Returntype":"","Args":""},{"Uniquefunname":"func (tail *Tail) waitForChanges() error","Funname":"waitForChanges","Returntype":"error","Args":""}],"Records":[{"Name":"struct:tail.Config","Fields":["tail.Config.Follow bool","tail.Config.Location *SeekInfo","tail.Config.Logger logger","tail.Config.MaxLineSize int","tail.Config.MustExist bool","tail.Config.Pipe bool","tail.Config.Poll bool","tail.Config.RateLimiter *ratelimiter.LeakyBucket","tail.Config.ReOpen bool"]},{"Name":"var:tail","Fields":["tail.DefaultLogger","tail.DiscardingLogger","tail.ErrStop","tail.errStopAtEOF"]},{"Name":"struct:tail.Line","Fields":["tail.Line.Err error","tail.Line.Text string","tail.Line.Time time.Time"]},{"Name":"struct:tail.SeekInfo","Fields":["tail.SeekInfo.Offset int64","tail.SeekInfo.Whence int"]},{"Name":"struct:tail.Tail","Fields":["tail.Tail.Filename string","tail.Tail.Lines chan *Line","tail.Tail.changes *watch.FileChanges","tail.Tail.file *os.File","tail.Tail.lk sync.Mutex","tail.Tail.reader *bufio.Reader","tail.Tail.watcher watch.FileWatcher"]},{"Name":"interface","Fields":["tail.logger"]}]}
{"Filepath":"vendor/src/github.com/hpcloud/tail/tail_posix.go","Functions":[{"Uniquefunname":"func OpenFile(name string) (file *os.File, err error)","Funname":"OpenFile","Returntype":"(file *os.File, err error)","Args":"name string"},{"Uniquefunname":"func OpenFile(name string) (file *os.File, err error)","Funname":"tail.OpenFile","Returntype":"(file *os.File, err error)","Args":"name string"}],"Records":null}
{"Filepath":"vendor/src/github.com/hpcloud/tail/tail_test.go","Functions":[{"Uniquefunname":"func (t TailTest) AppendFile(name string, contents string)","Funname":"AppendFile","Returntype":"","Args":"name string, contents string"},{"Uniquefunname":"func (t TailTest) AppendToFile(name string, contents string)","Funname":"AppendToFile","Returntype":"","Args":"name string, contents string"},{"Uniquefunname":"func (t TailTest) Cleanup(tail *Tail, stop bool)","Funname":"Cleanup","Returntype":"","Args":"tail *Tail, stop bool"},{"Uniquefunname":"func (t TailTest) CreateFile(name string, contents string)","Funname":"CreateFile","Returntype":"","Args":"name string, contents string"},{"Uniquefunname":"func NewTailTest(name string, t *testing.T) TailTest","Funname":"NewTailTest","Returntype":"TailTest","Args":"name string, t *testing.T"},{"Uniquefunname":"func (t TailTest) ReadLines(tail *Tail, lines []string)","Funname":"ReadLines","Returntype":"","Args":"tail *Tail, lines []string"},{"Uniquefunname":"func (t TailTest) RemoveFile(name string)","Funname":"RemoveFile","Returntype":"","Args":"name string"},{"Uniquefunname":"func (t TailTest) RenameFile(oldname string, newname string)","Funname":"RenameFile","Returntype":"","Args":"oldname string, newname string"},{"Uniquefunname":"func (t TailTest) StartTail(name string, config Config) *Tail","Funname":"StartTail","Returntype":"*Tail","Args":"name string, config Config"},{"Uniquefunname":"func TestBlockUntilExists(t *testing.T)","Funname":"TestBlockUntilExists","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestInotify_WaitForCreateThenMove(t *testing.T)","Funname":"TestInotify_WaitForCreateThenMove","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestLocationEnd(t *testing.T)","Funname":"TestLocationEnd","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestLocationFull(t *testing.T)","Funname":"TestLocationFull","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestLocationFullDontFollow(t *testing.T)","Funname":"TestLocationFullDontFollow","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestLocationMiddle(t *testing.T)","Funname":"TestLocationMiddle","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestMain(m *testing.M)","Funname":"TestMain","Returntype":"","Args":"m *testing.M"},{"Uniquefunname":"func TestMaxLineSizeFollow(t *testing.T)","Funname":"TestMaxLineSizeFollow","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestMaxLineSizeNoFollow(t *testing.T)","Funname":"TestMaxLineSizeNoFollow","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestMustExist(t *testing.T)","Funname":"TestMustExist","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestOver4096ByteLine(t *testing.T)","Funname":"TestOver4096ByteLine","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestOver4096ByteLineWithSetMaxLineSize(t *testing.T)","Funname":"TestOver4096ByteLineWithSetMaxLineSize","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestRateLimiting(t *testing.T)","Funname":"TestRateLimiting","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestReOpenInotify(t *testing.T)","Funname":"TestReOpenInotify","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestReOpenPolling(t *testing.T)","Funname":"TestReOpenPolling","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestReSeekInotify(t *testing.T)","Funname":"TestReSeekInotify","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestReSeekPolling(t *testing.T)","Funname":"TestReSeekPolling","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestStop(t *testing.T)","Funname":"TestStop","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestStopAtEOF(t *testing.T)","Funname":"TestStopAtEOF","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTell(t *testing.T)","Funname":"TestTell","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestWaitsForFileToExist(t *testing.T)","Funname":"TestWaitsForFileToExist","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestWaitsForFileToExistRelativePath(t *testing.T)","Funname":"TestWaitsForFileToExistRelativePath","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func (t TailTest) TruncateFile(name string, contents string)","Funname":"TruncateFile","Returntype":"","Args":"name string, contents string"},{"Uniquefunname":"func (t TailTest) VerifyTailOutput(tail *Tail, lines []string, expectEOF bool)","Funname":"VerifyTailOutput","Returntype":"","Args":"tail *Tail, lines []string, expectEOF bool"},{"Uniquefunname":"func init()","Funname":"init","Returntype":"","Args":""},{"Uniquefunname":"func maxLineSize(t *testing.T, follow bool, fileContent string, expected []string)","Funname":"maxLineSize","Returntype":"","Args":"t *testing.T, follow bool, fileContent string, expected []string"},{"Uniquefunname":"func reOpen(t *testing.T, poll bool)","Funname":"reOpen","Returntype":"","Args":"t *testing.T, poll bool"},{"Uniquefunname":"func reSeek(t *testing.T, poll bool)","Funname":"reSeek","Returntype":"","Args":"t *testing.T, poll bool"},{"Uniquefunname":"func NewTailTest(name string, t *testing.T) TailTest","Funname":"tail.NewTailTest","Returntype":"TailTest","Args":"name string, t *testing.T"},{"Uniquefunname":"func (t TailTest) AppendFile(name string, contents string)","Funname":"tail.TailTest.AppendFile","Returntype":"","Args":"name string, contents string"},{"Uniquefunname":"func (t TailTest) AppendToFile(name string, contents string)","Funname":"tail.TailTest.AppendToFile","Returntype":"","Args":"name string, contents string"},{"Uniquefunname":"func (t TailTest) Cleanup(tail *Tail, stop bool)","Funname":"tail.TailTest.Cleanup","Returntype":"","Args":"tail *Tail, stop bool"},{"Uniquefunname":"func (t TailTest) CreateFile(name string, contents string)","Funname":"tail.TailTest.CreateFile","Returntype":"","Args":"name string, contents string"},{"Uniquefunname":"func (t TailTest) ReadLines(tail *Tail, lines []string)","Funname":"tail.TailTest.ReadLines","Returntype":"","Args":"tail *Tail, lines []string"},{"Uniquefunname":"func (t TailTest) RemoveFile(name string)","Funname":"tail.TailTest.RemoveFile","Returntype":"","Args":"name string"},{"Uniquefunname":"func (t TailTest) RenameFile(oldname string, newname string)","Funname":"tail.TailTest.RenameFile","Returntype":"","Args":"oldname string, newname string"},{"Uniquefunname":"func (t TailTest) StartTail(name string, config Config) *Tail","Funname":"tail.TailTest.StartTail","Returntype":"*Tail","Args":"name string, config Config"},{"Uniquefunname":"func (t TailTest) TruncateFile(name string, contents string)","Funname":"tail.TailTest.TruncateFile","Returntype":"","Args":"name string, contents string"},{"Uniquefunname":"func (t TailTest) VerifyTailOutput(tail *Tail, lines []string, expectEOF bool)","Funname":"tail.TailTest.VerifyTailOutput","Returntype":"","Args":"tail *Tail, lines []string, expectEOF bool"},{"Uniquefunname":"func TestBlockUntilExists(t *testing.T)","Funname":"tail.TestBlockUntilExists","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestInotify_WaitForCreateThenMove(t *testing.T)","Funname":"tail.TestInotify_WaitForCreateThenMove","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestLocationEnd(t *testing.T)","Funname":"tail.TestLocationEnd","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestLocationFull(t *testing.T)","Funname":"tail.TestLocationFull","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestLocationFullDontFollow(t *testing.T)","Funname":"tail.TestLocationFullDontFollow","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestLocationMiddle(t *testing.T)","Funname":"tail.TestLocationMiddle","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestMain(m *testing.M)","Funname":"tail.TestMain","Returntype":"","Args":"m *testing.M"},{"Uniquefunname":"func TestMaxLineSizeFollow(t *testing.T)","Funname":"tail.TestMaxLineSizeFollow","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestMaxLineSizeNoFollow(t *testing.T)","Funname":"tail.TestMaxLineSizeNoFollow","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestMustExist(t *testing.T)","Funname":"tail.TestMustExist","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestOver4096ByteLine(t *testing.T)","Funname":"tail.TestOver4096ByteLine","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestOver4096ByteLineWithSetMaxLineSize(t *testing.T)","Funname":"tail.TestOver4096ByteLineWithSetMaxLineSize","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestRateLimiting(t *testing.T)","Funname":"tail.TestRateLimiting","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestReOpenInotify(t *testing.T)","Funname":"tail.TestReOpenInotify","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestReOpenPolling(t *testing.T)","Funname":"tail.TestReOpenPolling","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestReSeekInotify(t *testing.T)","Funname":"tail.TestReSeekInotify","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestReSeekPolling(t *testing.T)","Funname":"tail.TestReSeekPolling","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestStop(t *testing.T)","Funname":"tail.TestStop","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestStopAtEOF(t *testing.T)","Funname":"tail.TestStopAtEOF","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTell(t *testing.T)","Funname":"tail.TestTell","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestWaitsForFileToExist(t *testing.T)","Funname":"tail.TestWaitsForFileToExist","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestWaitsForFileToExistRelativePath(t *testing.T)","Funname":"tail.TestWaitsForFileToExistRelativePath","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func init()","Funname":"tail.init","Returntype":"","Args":""},{"Uniquefunname":"func maxLineSize(t *testing.T, follow bool, fileContent string, expected []string)","Funname":"tail.maxLineSize","Returntype":"","Args":"t *testing.T, follow bool, fileContent string, expected []string"},{"Uniquefunname":"func reOpen(t *testing.T, poll bool)","Funname":"tail.reOpen","Returntype":"","Args":"t *testing.T, poll bool"},{"Uniquefunname":"func reSeek(t *testing.T, poll bool)","Funname":"tail.reSeek","Returntype":"","Args":"t *testing.T, poll bool"}],"Records":[{"Name":"struct:tail.TailTest","Fields":["tail.TailTest.Name string","tail.TailTest.done chan struct{}","tail.TailTest.path string"]}]}
{"Filepath":"vendor/src/github.com/hpcloud/tail/tail_windows.go","Functions":[{"Uniquefunname":"func OpenFile(name string) (file *os.File, err error)","Funname":"OpenFile","Returntype":"(file *os.File, err error)","Args":"name string"},{"Uniquefunname":"func OpenFile(name string) (file *os.File, err error)","Funname":"tail.OpenFile","Returntype":"(file *os.File, err error)","Args":"name string"}],"Records":null}
{"Filepath":"vendor/src/github.com/hpcloud/tail/cmd/gotail/gotail.go","Functions":[{"Uniquefunname":"func args2config() (tail.Config, int64)","Funname":"args2config","Returntype":"(tail.Config, int64)","Args":""},{"Uniquefunname":"func main()","Funname":"main","Returntype":"","Args":""},{"Uniquefunname":"func args2config() (tail.Config, int64)","Funname":"main.args2config","Returntype":"(tail.Config, int64)","Args":""},{"Uniquefunname":"func main()","Funname":"main.main","Returntype":"","Args":""},{"Uniquefunname":"func tailFile(filename string, config tail.Config, done chan bool)","Funname":"main.tailFile","Returntype":"","Args":"filename string, config tail.Config, done chan bool"},{"Uniquefunname":"func tailFile(filename string, config tail.Config, done chan bool)","Funname":"tailFile","Returntype":"","Args":"filename string, config tail.Config, done chan bool"}],"Records":null}
{"Filepath":"vendor/src/github.com/hpcloud/tail/ratelimiter/leakybucket.go","Functions":[{"Uniquefunname":"func (b *LeakyBucketSer) DeSerialise() *LeakyBucket","Funname":"DeSerialise","Returntype":"*LeakyBucket","Args":""},{"Uniquefunname":"func (b *LeakyBucket) DrainedAt() time.Time","Funname":"DrainedAt","Returntype":"time.Time","Args":""},{"Uniquefunname":"func NewLeakyBucket(size uint16, leakInterval time.Duration) *LeakyBucket","Funname":"NewLeakyBucket","Returntype":"*LeakyBucket","Args":"size uint16, leakInterval time.Duration"},{"Uniquefunname":"func (b *LeakyBucket) Pour(amount uint16) bool","Funname":"Pour","Returntype":"bool","Args":"amount uint16"},{"Uniquefunname":"func (b *LeakyBucket) Serialise() *LeakyBucketSer","Funname":"Serialise","Returntype":"*LeakyBucketSer","Args":""},{"Uniquefunname":"func (b *LeakyBucket) TimeSinceLastUpdate() time.Duration","Funname":"TimeSinceLastUpdate","Returntype":"time.Duration","Args":""},{"Uniquefunname":"func (b *LeakyBucket) TimeToDrain() time.Duration","Funname":"TimeToDrain","Returntype":"time.Duration","Args":""},{"Uniquefunname":"func (b *LeakyBucket) DrainedAt() time.Time","Funname":"ratelimiter.LeakyBucket.DrainedAt","Returntype":"time.Time","Args":""},{"Uniquefunname":"func (b *LeakyBucket) Pour(amount uint16) bool","Funname":"ratelimiter.LeakyBucket.Pour","Returntype":"bool","Args":"amount uint16"},{"Uniquefunname":"func (b *LeakyBucket) Serialise() *LeakyBucketSer","Funname":"ratelimiter.LeakyBucket.Serialise","Returntype":"*LeakyBucketSer","Args":""},{"Uniquefunname":"func (b *LeakyBucket) TimeSinceLastUpdate() time.Duration","Funname":"ratelimiter.LeakyBucket.TimeSinceLastUpdate","Returntype":"time.Duration","Args":""},{"Uniquefunname":"func (b *LeakyBucket) TimeToDrain() time.Duration","Funname":"ratelimiter.LeakyBucket.TimeToDrain","Returntype":"time.Duration","Args":""},{"Uniquefunname":"func (b *LeakyBucket) updateFill()","Funname":"ratelimiter.LeakyBucket.updateFill","Returntype":"","Args":""},{"Uniquefunname":"func (b *LeakyBucketSer) DeSerialise() *LeakyBucket","Funname":"ratelimiter.LeakyBucketSer.DeSerialise","Returntype":"*LeakyBucket","Args":""},{"Uniquefunname":"func NewLeakyBucket(size uint16, leakInterval time.Duration) *LeakyBucket","Funname":"ratelimiter.NewLeakyBucket","Returntype":"*LeakyBucket","Args":"size uint16, leakInterval time.Duration"},{"Uniquefunname":"func (b *LeakyBucket) updateFill()","Funname":"updateFill","Returntype":"","Args":""}],"Records":[{"Name":"struct:ratelimiter.LeakyBucket","Fields":["ratelimiter.LeakyBucket.Fill float64","ratelimiter.LeakyBucket.Lastupdate time.Time","ratelimiter.LeakyBucket.LeakInterval time.Duration","ratelimiter.LeakyBucket.Now func() time.Time","ratelimiter.LeakyBucket.Size uint16"]},{"Name":"struct:ratelimiter.LeakyBucketSer","Fields":["ratelimiter.LeakyBucketSer.Fill float64","ratelimiter.LeakyBucketSer.Lastupdate time.Time","ratelimiter.LeakyBucketSer.LeakInterval time.Duration","ratelimiter.LeakyBucketSer.Size uint16"]}]}
{"Filepath":"vendor/src/github.com/hpcloud/tail/ratelimiter/leakybucket_test.go","Functions":[{"Uniquefunname":"func TestPour(t *testing.T)","Funname":"TestPour","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTimeSinceLastUpdate(t *testing.T)","Funname":"TestTimeSinceLastUpdate","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTimeToDrain(t *testing.T)","Funname":"TestTimeToDrain","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestPour(t *testing.T)","Funname":"ratelimiter.TestPour","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTimeSinceLastUpdate(t *testing.T)","Funname":"ratelimiter.TestTimeSinceLastUpdate","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTimeToDrain(t *testing.T)","Funname":"ratelimiter.TestTimeToDrain","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/hpcloud/tail/ratelimiter/memory.go","Functions":[{"Uniquefunname":"func (m *Memory) GarbageCollect()","Funname":"GarbageCollect","Returntype":"","Args":""},{"Uniquefunname":"func (m *Memory) GetBucketFor(key string) (*LeakyBucket, error)","Funname":"GetBucketFor","Returntype":"(*LeakyBucket, error)","Args":"key string"},{"Uniquefunname":"func NewMemory() *Memory","Funname":"NewMemory","Returntype":"*Memory","Args":""},{"Uniquefunname":"func (m *Memory) SetBucketFor(key string, bucket LeakyBucket) error","Funname":"SetBucketFor","Returntype":"error","Args":"key string, bucket LeakyBucket"},{"Uniquefunname":"func (m *Memory) GarbageCollect()","Funname":"ratelimiter.Memory.GarbageCollect","Returntype":"","Args":""},{"Uniquefunname":"func (m *Memory) GetBucketFor(key string) (*LeakyBucket, error)","Funname":"ratelimiter.Memory.GetBucketFor","Returntype":"(*LeakyBucket, error)","Args":"key string"},{"Uniquefunname":"func (m *Memory) SetBucketFor(key string, bucket LeakyBucket) error","Funname":"ratelimiter.Memory.SetBucketFor","Returntype":"error","Args":"key string, bucket LeakyBucket"},{"Uniquefunname":"func NewMemory() *Memory","Funname":"ratelimiter.NewMemory","Returntype":"*Memory","Args":""}],"Records":[{"Name":"const:ratelimiter","Fields":["ratelimiter.GC_PERIOD","ratelimiter.GC_SIZE"]},{"Name":"struct:ratelimiter.Memory","Fields":["ratelimiter.Memory.lastGCCollected time.Time","ratelimiter.Memory.store map[string]LeakyBucket"]}]}
{"Filepath":"vendor/src/github.com/hpcloud/tail/ratelimiter/storage.go","Functions":null,"Records":[{"Name":"interface","Fields":["ratelimiter.Storage"]}]}
{"Filepath":"vendor/src/github.com/hpcloud/tail/util/util.go","Functions":[{"Uniquefunname":"func Fatal(format string, v ...interface","Funname":"Fatal","Returntype":"","Args":"format string, v ...interface{}"},{"Uniquefunname":"func PartitionString(s string, chunkSize int) []string","Funname":"PartitionString","Returntype":"[]string","Args":"s string, chunkSize int"},{"Uniquefunname":"func Fatal(format string, v ...interface","Funname":"util.Fatal","Returntype":"","Args":"format string, v ...interface{}"},{"Uniquefunname":"func PartitionString(s string, chunkSize int) []string","Funname":"util.PartitionString","Returntype":"[]string","Args":"s string, chunkSize int"}],"Records":[{"Name":"var:util","Fields":["util.LOGGER"]}]}
{"Filepath":"vendor/src/github.com/hpcloud/tail/vendor/gopkg.in/fsnotify/fsnotify.v1/fsnotify.go","Functions":[{"Uniquefunname":"func (e Event) String() string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func (e Event) String() string","Funname":"fsnotify.Event.String","Returntype":"string","Args":""}],"Records":[{"Name":"const:fsnotify","Fields":["fsnotify.Chmod","fsnotify.Create","fsnotify.Remove","fsnotify.Rename","fsnotify.Write"]},{"Name":"struct:fsnotify.Event","Fields":["fsnotify.Event.Name string","fsnotify.Event.Op Op"]}]}
{"Filepath":"vendor/src/github.com/hpcloud/tail/vendor/gopkg.in/fsnotify/fsnotify.v1/inotify.go","Functions":[{"Uniquefunname":"func (w *Watcher) Add(name string) error","Funname":"Add","Returntype":"error","Args":"name string"},{"Uniquefunname":"func (w *Watcher) Close() error","Funname":"Close","Returntype":"error","Args":""},{"Uniquefunname":"func NewWatcher() (*Watcher, error)","Funname":"NewWatcher","Returntype":"(*Watcher, error)","Args":""},{"Uniquefunname":"func (w *Watcher) Remove(name string) error","Funname":"Remove","Returntype":"error","Args":"name string"},{"Uniquefunname":"func (e *Event) ignoreLinux(mask uint32) bool","Funname":"fsnotify.Event.ignoreLinux","Returntype":"bool","Args":"mask uint32"},{"Uniquefunname":"func NewWatcher() (*Watcher, error)","Funname":"fsnotify.NewWatcher","Returntype":"(*Watcher, error)","Args":""},{"Uniquefunname":"func (w *Watcher) Add(name string) error","Funname":"fsnotify.Watcher.Add","Returntype":"error","Args":"name string"},{"Uniquefunname":"func (w *Watcher) Close() error","Funname":"fsnotify.Watcher.Close","Returntype":"error","Args":""},{"Uniquefunname":"func (w *Watcher) Remove(name string) error","Funname":"fsnotify.Watcher.Remove","Returntype":"error","Args":"name string"},{"Uniquefunname":"func (w *Watcher) isClosed() bool","Funname":"fsnotify.Watcher.isClosed","Returntype":"bool","Args":""},{"Uniquefunname":"func (w *Watcher) readEvents()","Funname":"fsnotify.Watcher.readEvents","Returntype":"","Args":""},{"Uniquefunname":"func newEvent(name string, mask uint32) Event","Funname":"fsnotify.newEvent","Returntype":"Event","Args":"name string, mask uint32"},{"Uniquefunname":"func (e *Event) ignoreLinux(mask uint32) bool","Funname":"ignoreLinux","Returntype":"bool","Args":"mask uint32"},{"Uniquefunname":"func (w *Watcher) isClosed() bool","Funname":"isClosed","Returntype":"bool","Args":""},{"Uniquefunname":"func newEvent(name string, mask uint32) Event","Funname":"newEvent","Returntype":"Event","Args":"name string, mask uint32"},{"Uniquefunname":"func (w *Watcher) readEvents()","Funname":"readEvents","Returntype":"","Args":""}],"Records":[{"Name":"struct:fsnotify.Watcher","Fields":["fsnotify.Watcher.Errors chan error","fsnotify.Watcher.Events chan Event","fsnotify.Watcher.done chan struct{}","fsnotify.Watcher.doneResp chan struct{}","fsnotify.Watcher.fd int","fsnotify.Watcher.mu sync.Mutex","fsnotify.Watcher.paths map[int]string","fsnotify.Watcher.poller *fdPoller","fsnotify.Watcher.watches map[string]*watch"]},{"Name":"struct:fsnotify.watch","Fields":["fsnotify.watch.flags uint32","fsnotify.watch.wd uint32"]}]}
{"Filepath":"vendor/src/github.com/hpcloud/tail/vendor/gopkg.in/fsnotify/fsnotify.v1/inotify_poller.go","Functions":[{"Uniquefunname":"func (poller *fdPoller) clearWake() error","Funname":"clearWake","Returntype":"error","Args":""},{"Uniquefunname":"func (poller *fdPoller) close()","Funname":"close","Returntype":"","Args":""},{"Uniquefunname":"func emptyPoller(fd int) *fdPoller","Funname":"emptyPoller","Returntype":"*fdPoller","Args":"fd int"},{"Uniquefunname":"func emptyPoller(fd int) *fdPoller","Funname":"fsnotify.emptyPoller","Returntype":"*fdPoller","Args":"fd int"},{"Uniquefunname":"func (poller *fdPoller) clearWake() error","Funname":"fsnotify.fdPoller.clearWake","Returntype":"error","Args":""},{"Uniquefunname":"func (poller *fdPoller) close()","Funname":"fsnotify.fdPoller.close","Returntype":"","Args":""},{"Uniquefunname":"func (poller *fdPoller) wait() (bool, error)","Funname":"fsnotify.fdPoller.wait","Returntype":"(bool, error)","Args":""},{"Uniquefunname":"func (poller *fdPoller) wake() error","Funname":"fsnotify.fdPoller.wake","Returntype":"error","Args":""},{"Uniquefunname":"func newFdPoller(fd int) (*fdPoller, error)","Funname":"fsnotify.newFdPoller","Returntype":"(*fdPoller, error)","Args":"fd int"},{"Uniquefunname":"func newFdPoller(fd int) (*fdPoller, error)","Funname":"newFdPoller","Returntype":"(*fdPoller, error)","Args":"fd int"},{"Uniquefunname":"func (poller *fdPoller) wait() (bool, error)","Funname":"wait","Returntype":"(bool, error)","Args":""},{"Uniquefunname":"func (poller *fdPoller) wake() error","Funname":"wake","Returntype":"error","Args":""}],"Records":[{"Name":"struct:fsnotify.fdPoller","Fields":["fsnotify.fdPoller.epfd int","fsnotify.fdPoller.fd int","fsnotify.fdPoller.pipe [2]int"]}]}
{"Filepath":"vendor/src/github.com/hpcloud/tail/vendor/gopkg.in/fsnotify/fsnotify.v1/kqueue.go","Functions":[{"Uniquefunname":"func (w *Watcher) Add(name string) error","Funname":"Add","Returntype":"error","Args":"name string"},{"Uniquefunname":"func (w *Watcher) Close() error","Funname":"Close","Returntype":"error","Args":""},{"Uniquefunname":"func NewWatcher() (*Watcher, error)","Funname":"NewWatcher","Returntype":"(*Watcher, error)","Args":""},{"Uniquefunname":"func (w *Watcher) Remove(name string) error","Funname":"Remove","Returntype":"error","Args":"name string"},{"Uniquefunname":"func (w *Watcher) addWatch(name string, flags uint32) error","Funname":"addWatch","Returntype":"error","Args":"name string, flags uint32"},{"Uniquefunname":"func durationToTimespec(d time.Duration) syscall.Timespec","Funname":"durationToTimespec","Returntype":"syscall.Timespec","Args":"d time.Duration"},{"Uniquefunname":"func NewWatcher() (*Watcher, error)","Funname":"fsnotify.NewWatcher","Returntype":"(*Watcher, error)","Args":""},{"Uniquefunname":"func (w *Watcher) Add(name string) error","Funname":"fsnotify.Watcher.Add","Returntype":"error","Args":"name string"},{"Uniquefunname":"func (w *Watcher) Close() error","Funname":"fsnotify.Watcher.Close","Returntype":"error","Args":""},{"Uniquefunname":"func (w *Watcher) Remove(name string) error","Funname":"fsnotify.Watcher.Remove","Returntype":"error","Args":"name string"},{"Uniquefunname":"func (w *Watcher) addWatch(name string, flags uint32) error","Funname":"fsnotify.Watcher.addWatch","Returntype":"error","Args":"name string, flags uint32"},{"Uniquefunname":"func (w *Watcher) internalWatch(name string, fileInfo os.FileInfo) error","Funname":"fsnotify.Watcher.internalWatch","Returntype":"error","Args":"name string, fileInfo os.FileInfo"},{"Uniquefunname":"func (w *Watcher) readEvents()","Funname":"fsnotify.Watcher.readEvents","Returntype":"","Args":""},{"Uniquefunname":"func (w *Watcher) sendDirectoryChangeEvents(dirPath string)","Funname":"fsnotify.Watcher.sendDirectoryChangeEvents","Returntype":"","Args":"dirPath string"},{"Uniquefunname":"func (w *Watcher) watchDirectoryFiles(dirPath string) error","Funname":"fsnotify.Watcher.watchDirectoryFiles","Returntype":"error","Args":"dirPath string"},{"Uniquefunname":"func durationToTimespec(d time.Duration) syscall.Timespec","Funname":"fsnotify.durationToTimespec","Returntype":"syscall.Timespec","Args":"d time.Duration"},{"Uniquefunname":"func kqueue() (kq int, err error)","Funname":"fsnotify.kqueue","Returntype":"(kq int, err error)","Args":""},{"Uniquefunname":"func newCreateEvent(name string) Event","Funname":"fsnotify.newCreateEvent","Returntype":"Event","Args":"name string"},{"Uniquefunname":"func newEvent(name string, mask uint32) Event","Funname":"fsnotify.newEvent","Returntype":"Event","Args":"name string, mask uint32"},{"Uniquefunname":"func fsnotify.read(kq int, events []syscall.Kevent_t, timeout *syscall.Timespec)([]syscall.Kevent_t, error)","Funname":"fsnotify.read","Returntype":"([]syscall.Kevent_t, error)","Args":"kq int, events []syscall.Kevent_t, timeout *syscall.Timespec"},{"Uniquefunname":"func register(kq int, fds []int, flags int, fflags uint32) error","Funname":"fsnotify.register","Returntype":"error","Args":"kq int, fds []int, flags int, fflags uint32"},{"Uniquefunname":"func (w *Watcher) internalWatch(name string, fileInfo os.FileInfo) error","Funname":"internalWatch","Returntype":"error","Args":"name string, fileInfo os.FileInfo"},{"Uniquefunname":"func kqueue() (kq int, err error)","Funname":"kqueue","Returntype":"(kq int, err error)","Args":""},{"Uniquefunname":"func newCreateEvent(name string) Event","Funname":"newCreateEvent","Returntype":"Event","Args":"name string"},{"Uniquefunname":"func newEvent(name string, mask uint32) Event","Funname":"newEvent","Returntype":"Event","Args":"name string, mask uint32"},{"Uniquefunname":"func read(kq int, events []syscall.Kevent_t, timeout *syscall.Timespec)([]syscall.Kevent_t, error)","Funname":"read","Returntype":"([]syscall.Kevent_t, error)","Args":"kq int, events []syscall.Kevent_t, timeout *syscall.Timespec"},{"Uniquefunname":"func (w *Watcher) readEvents()","Funname":"readEvents","Returntype":"","Args":""},{"Uniquefunname":"func register(kq int, fds []int, flags int, fflags uint32) error","Funname":"register","Returntype":"error","Args":"kq int, fds []int, flags int, fflags uint32"},{"Uniquefunname":"func (w *Watcher) sendDirectoryChangeEvents(dirPath string)","Funname":"sendDirectoryChangeEvents","Returntype":"","Args":"dirPath string"},{"Uniquefunname":"func (w *Watcher) watchDirectoryFiles(dirPath string) error","Funname":"watchDirectoryFiles","Returntype":"error","Args":"dirPath string"}],"Records":[{"Name":"struct:fsnotify.Watcher","Fields":["fsnotify.Watcher.Errors chan error","fsnotify.Watcher.Events chan Event","fsnotify.Watcher.dirFlags map[string]uint32","fsnotify.Watcher.done chan bool","fsnotify.Watcher.externalWatches map[string]bool","fsnotify.Watcher.fileExists map[string]bool","fsnotify.Watcher.isClosed bool","fsnotify.Watcher.kq int","fsnotify.Watcher.mu sync.Mutex","fsnotify.Watcher.paths map[int]pathInfo","fsnotify.Watcher.watches map[string]int"]},{"Name":"var:fsnotify","Fields":["fsnotify.keventWaitTime"]},{"Name":"const:fsnotify","Fields":["fsnotify.noteAllEvents"]},{"Name":"struct:fsnotify.pathInfo","Fields":["fsnotify.pathInfo.isDir bool","fsnotify.pathInfo.name string"]}]}
{"Filepath":"vendor/src/github.com/hpcloud/tail/vendor/gopkg.in/fsnotify/fsnotify.v1/open_mode_bsd.go","Functions":null,"Records":[{"Name":"const:fsnotify","Fields":["fsnotify.openMode"]}]}
{"Filepath":"vendor/src/github.com/hpcloud/tail/vendor/gopkg.in/fsnotify/fsnotify.v1/open_mode_darwin.go","Functions":null,"Records":[{"Name":"const:fsnotify","Fields":["fsnotify.openMode"]}]}
{"Filepath":"vendor/src/github.com/hpcloud/tail/vendor/gopkg.in/fsnotify/fsnotify.v1/windows.go","Functions":[{"Uniquefunname":"func (w *Watcher) Add(name string) error","Funname":"Add","Returntype":"error","Args":"name string"},{"Uniquefunname":"func (w *Watcher) Close() error","Funname":"Close","Returntype":"error","Args":""},{"Uniquefunname":"func NewWatcher() (*Watcher, error)","Funname":"NewWatcher","Returntype":"(*Watcher, error)","Args":""},{"Uniquefunname":"func (w *Watcher) Remove(name string) error","Funname":"Remove","Returntype":"error","Args":"name string"},{"Uniquefunname":"func (w *Watcher) addWatch(pathname string, flags uint64) error","Funname":"addWatch","Returntype":"error","Args":"pathname string, flags uint64"},{"Uniquefunname":"func (w *Watcher) deleteWatch(watch *watch)","Funname":"deleteWatch","Returntype":"","Args":"watch *watch"},{"Uniquefunname":"func NewWatcher() (*Watcher, error)","Funname":"fsnotify.NewWatcher","Returntype":"(*Watcher, error)","Args":""},{"Uniquefunname":"func (w *Watcher) Add(name string) error","Funname":"fsnotify.Watcher.Add","Returntype":"error","Args":"name string"},{"Uniquefunname":"func (w *Watcher) Close() error","Funname":"fsnotify.Watcher.Close","Returntype":"error","Args":""},{"Uniquefunname":"func (w *Watcher) Remove(name string) error","Funname":"fsnotify.Watcher.Remove","Returntype":"error","Args":"name string"},{"Uniquefunname":"func (w *Watcher) addWatch(pathname string, flags uint64) error","Funname":"fsnotify.Watcher.addWatch","Returntype":"error","Args":"pathname string, flags uint64"},{"Uniquefunname":"func (w *Watcher) deleteWatch(watch *watch)","Funname":"fsnotify.Watcher.deleteWatch","Returntype":"","Args":"watch *watch"},{"Uniquefunname":"func (w *Watcher) readEvents()","Funname":"fsnotify.Watcher.readEvents","Returntype":"","Args":""},{"Uniquefunname":"func (w *Watcher) remWatch(pathname string) error","Funname":"fsnotify.Watcher.remWatch","Returntype":"error","Args":"pathname string"},{"Uniquefunname":"func (w *Watcher) sendEvent(name string, mask uint64) bool","Funname":"fsnotify.Watcher.sendEvent","Returntype":"bool","Args":"name string, mask uint64"},{"Uniquefunname":"func (w *Watcher) startRead(watch *watch) error","Funname":"fsnotify.Watcher.startRead","Returntype":"error","Args":"watch *watch"},{"Uniquefunname":"func (w *Watcher) wakeupReader() error","Funname":"fsnotify.Watcher.wakeupReader","Returntype":"error","Args":""},{"Uniquefunname":"func getDir(pathname string) (dir string, err error)","Funname":"fsnotify.getDir","Returntype":"(dir string, err error)","Args":"pathname string"},{"Uniquefunname":"func getIno(path string) (ino *inode, err error)","Funname":"fsnotify.getIno","Returntype":"(ino *inode, err error)","Args":"path string"},{"Uniquefunname":"func newEvent(name string, mask uint32) Event","Funname":"fsnotify.newEvent","Returntype":"Event","Args":"name string, mask uint32"},{"Uniquefunname":"func toFSnotifyFlags(action uint32) uint64","Funname":"fsnotify.toFSnotifyFlags","Returntype":"uint64","Args":"action uint32"},{"Uniquefunname":"func toWindowsFlags(mask uint64) uint32","Funname":"fsnotify.toWindowsFlags","Returntype":"uint32","Args":"mask uint64"},{"Uniquefunname":"func (m watchMap) get(ino *inode) *watch","Funname":"fsnotify.watchMap.get","Returntype":"*watch","Args":"ino *inode"},{"Uniquefunname":"func (m watchMap) set(ino *inode, watch *watch)","Funname":"fsnotify.watchMap.set","Returntype":"","Args":"ino *inode, watch *watch"},{"Uniquefunname":"func (m watchMap) get(ino *inode) *watch","Funname":"get","Returntype":"*watch","Args":"ino *inode"},{"Uniquefunname":"func getDir(pathname string) (dir string, err error)","Funname":"getDir","Returntype":"(dir string, err error)","Args":"pathname string"},{"Uniquefunname":"func getIno(path string) (ino *inode, err error)","Funname":"getIno","Returntype":"(ino *inode, err error)","Args":"path string"},{"Uniquefunname":"func newEvent(name string, mask uint32) Event","Funname":"newEvent","Returntype":"Event","Args":"name string, mask uint32"},{"Uniquefunname":"func (w *Watcher) readEvents()","Funname":"readEvents","Returntype":"","Args":""},{"Uniquefunname":"func (w *Watcher) remWatch(pathname string) error","Funname":"remWatch","Returntype":"error","Args":"pathname string"},{"Uniquefunname":"func (w *Watcher) sendEvent(name string, mask uint64) bool","Funname":"sendEvent","Returntype":"bool","Args":"name string, mask uint64"},{"Uniquefunname":"func (m watchMap) set(ino *inode, watch *watch)","Funname":"set","Returntype":"","Args":"ino *inode, watch *watch"},{"Uniquefunname":"func (w *Watcher) startRead(watch *watch) error","Funname":"startRead","Returntype":"error","Args":"watch *watch"},{"Uniquefunname":"func toFSnotifyFlags(action uint32) uint64","Funname":"toFSnotifyFlags","Returntype":"uint64","Args":"action uint32"},{"Uniquefunname":"func toWindowsFlags(mask uint64) uint32","Funname":"toWindowsFlags","Returntype":"uint32","Args":"mask uint64"},{"Uniquefunname":"func (w *Watcher) wakeupReader() error","Funname":"wakeupReader","Returntype":"error","Args":""}],"Records":[{"Name":"struct:fsnotify.Watcher","Fields":["fsnotify.Watcher.Errors chan error","fsnotify.Watcher.Events chan Event","fsnotify.Watcher.input chan *input","fsnotify.Watcher.isClosed bool","fsnotify.Watcher.mu sync.Mutex","fsnotify.Watcher.port syscall.Handle","fsnotify.Watcher.quit chan chan\u003c- error","fsnotify.Watcher.watches watchMap"]},{"Name":"struct:fsnotify.inode","Fields":["fsnotify.inode.handle syscall.Handle","fsnotify.inode.index uint64","fsnotify.inode.volume uint32"]},{"Name":"struct:fsnotify.input","Fields":["fsnotify.input.flags uint32","fsnotify.input.op int","fsnotify.input.path string","fsnotify.input.reply chan error"]},{"Name":"const:fsnotify","Fields":["fsnotify.opAddWatch","fsnotify.opRemoveWatch","fsnotify.provisional","fsnotify.sys_FS_ACCESS","fsnotify.sys_FS_ALL_EVENTS","fsnotify.sys_FS_ATTRIB","fsnotify.sys_FS_CLOSE","fsnotify.sys_FS_CREATE","fsnotify.sys_FS_DELETE","fsnotify.sys_FS_DELETE_SELF","fsnotify.sys_FS_IGNORED","fsnotify.sys_FS_MODIFY","fsnotify.sys_FS_MOVE","fsnotify.sys_FS_MOVED_FROM","fsnotify.sys_FS_MOVED_TO","fsnotify.sys_FS_MOVE_SELF","fsnotify.sys_FS_ONESHOT","fsnotify.sys_FS_ONLYDIR","fsnotify.sys_FS_Q_OVERFLOW"]},{"Name":"struct:fsnotify.watch","Fields":["fsnotify.watch.buf [4096]byte","fsnotify.watch.ino *inode","fsnotify.watch.mask uint64","fsnotify.watch.names map[string]uint64","fsnotify.watch.ov syscall.Overlapped","fsnotify.watch.path string","fsnotify.watch.rename string"]}]}
{"Filepath":"vendor/src/github.com/hpcloud/tail/vendor/gopkg.in/tomb.v1/tomb.go","Functions":[{"Uniquefunname":"func (t *Tomb) Dead() \u003c-chan struct","Funname":"Dead","Returntype":"\u003c-chan struct{}","Args":""},{"Uniquefunname":"func (t *Tomb) Done()","Funname":"Done","Returntype":"","Args":""},{"Uniquefunname":"func (t *Tomb) Dying() \u003c-chan struct","Funname":"Dying","Returntype":"\u003c-chan struct{}","Args":""},{"Uniquefunname":"func (t *Tomb) Err() (reason error)","Funname":"Err","Returntype":"(reason error)","Args":""},{"Uniquefunname":"func (t *Tomb) Kill(reason error)","Funname":"Kill","Returntype":"","Args":"reason error"},{"Uniquefunname":"func (t *Tomb) Killf(f string, a ...interface","Funname":"Killf","Returntype":"error","Args":"f string, a ...interface{}"},{"Uniquefunname":"func (t *Tomb) Wait() error","Funname":"Wait","Returntype":"error","Args":""},{"Uniquefunname":"func (t *Tomb) init()","Funname":"init","Returntype":"","Args":""},{"Uniquefunname":"func (t *Tomb) Dead() \u003c-chan struct","Funname":"tomb.Tomb.Dead","Returntype":"\u003c-chan struct{}","Args":""},{"Uniquefunname":"func (t *Tomb) Done()","Funname":"tomb.Tomb.Done","Returntype":"","Args":""},{"Uniquefunname":"func (t *Tomb) Dying() \u003c-chan struct","Funname":"tomb.Tomb.Dying","Returntype":"\u003c-chan struct{}","Args":""},{"Uniquefunname":"func (t *Tomb) Err() (reason error)","Funname":"tomb.Tomb.Err","Returntype":"(reason error)","Args":""},{"Uniquefunname":"func (t *Tomb) Kill(reason error)","Funname":"tomb.Tomb.Kill","Returntype":"","Args":"reason error"},{"Uniquefunname":"func (t *Tomb) Killf(f string, a ...interface","Funname":"tomb.Tomb.Killf","Returntype":"error","Args":"f string, a ...interface{}"},{"Uniquefunname":"func (t *Tomb) Wait() error","Funname":"tomb.Tomb.Wait","Returntype":"error","Args":""},{"Uniquefunname":"func (t *Tomb) init()","Funname":"tomb.Tomb.init","Returntype":"","Args":""}],"Records":[{"Name":"var:tomb","Fields":["tomb.ErrDying","tomb.ErrStillAlive"]},{"Name":"struct:tomb.Tomb","Fields":["tomb.Tomb.dead chan struct{}","tomb.Tomb.dying chan struct{}","tomb.Tomb.m sync.Mutex","tomb.Tomb.reason error"]}]}
{"Filepath":"vendor/src/github.com/hpcloud/tail/watch/filechanges.go","Functions":[{"Uniquefunname":"func NewFileChanges() *FileChanges","Funname":"NewFileChanges","Returntype":"*FileChanges","Args":""},{"Uniquefunname":"func (fc *FileChanges) NotifyDeleted()","Funname":"NotifyDeleted","Returntype":"","Args":""},{"Uniquefunname":"func (fc *FileChanges) NotifyModified()","Funname":"NotifyModified","Returntype":"","Args":""},{"Uniquefunname":"func (fc *FileChanges) NotifyTruncated()","Funname":"NotifyTruncated","Returntype":"","Args":""},{"Uniquefunname":"func sendOnlyIfEmpty(ch chan bool)","Funname":"sendOnlyIfEmpty","Returntype":"","Args":"ch chan bool"},{"Uniquefunname":"func (fc *FileChanges) NotifyDeleted()","Funname":"watch.FileChanges.NotifyDeleted","Returntype":"","Args":""},{"Uniquefunname":"func (fc *FileChanges) NotifyModified()","Funname":"watch.FileChanges.NotifyModified","Returntype":"","Args":""},{"Uniquefunname":"func (fc *FileChanges) NotifyTruncated()","Funname":"watch.FileChanges.NotifyTruncated","Returntype":"","Args":""},{"Uniquefunname":"func NewFileChanges() *FileChanges","Funname":"watch.NewFileChanges","Returntype":"*FileChanges","Args":""},{"Uniquefunname":"func sendOnlyIfEmpty(ch chan bool)","Funname":"watch.sendOnlyIfEmpty","Returntype":"","Args":"ch chan bool"}],"Records":[{"Name":"struct:watch.FileChanges","Fields":["watch.FileChanges.Deleted chan bool","watch.FileChanges.Modified chan bool","watch.FileChanges.Truncated chan bool"]}]}
{"Filepath":"vendor/src/github.com/hpcloud/tail/watch/inotify.go","Functions":[{"Uniquefunname":"func (fw *InotifyFileWatcher) BlockUntilExists(t *tomb.Tomb) error","Funname":"BlockUntilExists","Returntype":"error","Args":"t *tomb.Tomb"},{"Uniquefunname":"func (fw *InotifyFileWatcher) ChangeEvents(t *tomb.Tomb, pos int64) (*FileChanges, error)","Funname":"ChangeEvents","Returntype":"(*FileChanges, error)","Args":"t *tomb.Tomb, pos int64"},{"Uniquefunname":"func NewInotifyFileWatcher(filename string) *InotifyFileWatcher","Funname":"NewInotifyFileWatcher","Returntype":"*InotifyFileWatcher","Args":"filename string"},{"Uniquefunname":"func (fw *InotifyFileWatcher) BlockUntilExists(t *tomb.Tomb) error","Funname":"watch.InotifyFileWatcher.BlockUntilExists","Returntype":"error","Args":"t *tomb.Tomb"},{"Uniquefunname":"func (fw *InotifyFileWatcher) ChangeEvents(t *tomb.Tomb, pos int64) (*FileChanges, error)","Funname":"watch.InotifyFileWatcher.ChangeEvents","Returntype":"(*FileChanges, error)","Args":"t *tomb.Tomb, pos int64"},{"Uniquefunname":"func NewInotifyFileWatcher(filename string) *InotifyFileWatcher","Funname":"watch.NewInotifyFileWatcher","Returntype":"*InotifyFileWatcher","Args":"filename string"}],"Records":[{"Name":"struct:watch.InotifyFileWatcher","Fields":["watch.InotifyFileWatcher.Filename string","watch.InotifyFileWatcher.Size int64"]}]}
{"Filepath":"vendor/src/github.com/hpcloud/tail/watch/inotify_tracker.go","Functions":[{"Uniquefunname":"func Cleanup(fname string) error","Funname":"Cleanup","Returntype":"error","Args":"fname string"},{"Uniquefunname":"func Events(fname string) \u003c-chan fsnotify.Event","Funname":"Events","Returntype":"\u003c-chan fsnotify.Event","Args":"fname string"},{"Uniquefunname":"func RemoveWatch(fname string) error","Funname":"RemoveWatch","Returntype":"error","Args":"fname string"},{"Uniquefunname":"func RemoveWatchCreate(fname string) error","Funname":"RemoveWatchCreate","Returntype":"error","Args":"fname string"},{"Uniquefunname":"func Watch(fname string) error","Funname":"Watch","Returntype":"error","Args":"fname string"},{"Uniquefunname":"func WatchCreate(fname string) error","Funname":"WatchCreate","Returntype":"error","Args":"fname string"},{"Uniquefunname":"func (shared *InotifyTracker) addWatch(winfo *watchInfo) error","Funname":"addWatch","Returntype":"error","Args":"winfo *watchInfo"},{"Uniquefunname":"func (this *watchInfo) isCreate() bool","Funname":"isCreate","Returntype":"bool","Args":""},{"Uniquefunname":"func remove(winfo *watchInfo) error","Funname":"remove","Returntype":"error","Args":"winfo *watchInfo"},{"Uniquefunname":"func (shared *InotifyTracker) removeWatch(winfo *watchInfo) error","Funname":"removeWatch","Returntype":"error","Args":"winfo *watchInfo"},{"Uniquefunname":"func (shared *InotifyTracker) run()","Funname":"run","Returntype":"","Args":""},{"Uniquefunname":"func (shared *InotifyTracker) sendEvent(event fsnotify.Event)","Funname":"sendEvent","Returntype":"","Args":"event fsnotify.Event"},{"Uniquefunname":"func watch(winfo *watchInfo) error","Funname":"watch","Returntype":"error","Args":"winfo *watchInfo"},{"Uniquefunname":"func Cleanup(fname string) error","Funname":"watch.Cleanup","Returntype":"error","Args":"fname string"},{"Uniquefunname":"func Events(fname string) \u003c-chan fsnotify.Event","Funname":"watch.Events","Returntype":"\u003c-chan fsnotify.Event","Args":"fname string"},{"Uniquefunname":"func (shared *InotifyTracker) addWatch(winfo *watchInfo) error","Funname":"watch.InotifyTracker.addWatch","Returntype":"error","Args":"winfo *watchInfo"},{"Uniquefunname":"func (shared *InotifyTracker) removeWatch(winfo *watchInfo) error","Funname":"watch.InotifyTracker.removeWatch","Returntype":"error","Args":"winfo *watchInfo"},{"Uniquefunname":"func (shared *InotifyTracker) run()","Funname":"watch.InotifyTracker.run","Returntype":"","Args":""},{"Uniquefunname":"func (shared *InotifyTracker) sendEvent(event fsnotify.Event)","Funname":"watch.InotifyTracker.sendEvent","Returntype":"","Args":"event fsnotify.Event"},{"Uniquefunname":"func RemoveWatch(fname string) error","Funname":"watch.RemoveWatch","Returntype":"error","Args":"fname string"},{"Uniquefunname":"func RemoveWatchCreate(fname string) error","Funname":"watch.RemoveWatchCreate","Returntype":"error","Args":"fname string"},{"Uniquefunname":"func Watch(fname string) error","Funname":"watch.Watch","Returntype":"error","Args":"fname string"},{"Uniquefunname":"func WatchCreate(fname string) error","Funname":"watch.WatchCreate","Returntype":"error","Args":"fname string"},{"Uniquefunname":"func remove(winfo *watchInfo) error","Funname":"watch.remove","Returntype":"error","Args":"winfo *watchInfo"},{"Uniquefunname":"func watch(winfo *watchInfo) error","Funname":"watch.watch","Returntype":"error","Args":"winfo *watchInfo"},{"Uniquefunname":"func (this *watchInfo) isCreate() bool","Funname":"watch.watchInfo.isCreate","Returntype":"bool","Args":""}],"Records":[{"Name":"struct:watch.InotifyTracker","Fields":["watch.InotifyTracker.chans map[string]chan fsnotify.Event","watch.InotifyTracker.done map[string]chan bool","watch.InotifyTracker.error chan error","watch.InotifyTracker.mux sync.Mutex","watch.InotifyTracker.remove chan *watchInfo","watch.InotifyTracker.watch chan *watchInfo","watch.InotifyTracker.watchNums map[string]int","watch.InotifyTracker.watcher *fsnotify.Watcher"]},{"Name":"var:watch","Fields":["watch.go","watch.goRun","watch.once","watch.shared"]},{"Name":"struct:watch.watchInfo","Fields":["watch.watchInfo.fname string","watch.watchInfo.op fsnotify.Op"]}]}
{"Filepath":"vendor/src/github.com/hpcloud/tail/watch/polling.go","Functions":[{"Uniquefunname":"func (fw *PollingFileWatcher) BlockUntilExists(t *tomb.Tomb) error","Funname":"BlockUntilExists","Returntype":"error","Args":"t *tomb.Tomb"},{"Uniquefunname":"func (fw *PollingFileWatcher) ChangeEvents(t *tomb.Tomb, pos int64) (*FileChanges, error)","Funname":"ChangeEvents","Returntype":"(*FileChanges, error)","Args":"t *tomb.Tomb, pos int64"},{"Uniquefunname":"func NewPollingFileWatcher(filename string) *PollingFileWatcher","Funname":"NewPollingFileWatcher","Returntype":"*PollingFileWatcher","Args":"filename string"},{"Uniquefunname":"func init()","Funname":"init","Returntype":"","Args":""},{"Uniquefunname":"func NewPollingFileWatcher(filename string) *PollingFileWatcher","Funname":"watch.NewPollingFileWatcher","Returntype":"*PollingFileWatcher","Args":"filename string"},{"Uniquefunname":"func (fw *PollingFileWatcher) BlockUntilExists(t *tomb.Tomb) error","Funname":"watch.PollingFileWatcher.BlockUntilExists","Returntype":"error","Args":"t *tomb.Tomb"},{"Uniquefunname":"func (fw *PollingFileWatcher) ChangeEvents(t *tomb.Tomb, pos int64) (*FileChanges, error)","Funname":"watch.PollingFileWatcher.ChangeEvents","Returntype":"(*FileChanges, error)","Args":"t *tomb.Tomb, pos int64"},{"Uniquefunname":"func init()","Funname":"watch.init","Returntype":"","Args":""}],"Records":[{"Name":"var:watch","Fields":["watch.POLL_DURATION"]},{"Name":"struct:watch.PollingFileWatcher","Fields":["watch.PollingFileWatcher.Filename string","watch.PollingFileWatcher.Size int64"]}]}
{"Filepath":"vendor/src/github.com/hpcloud/tail/watch/watch.go","Functions":null,"Records":[{"Name":"interface","Fields":["watch.FileWatcher"]}]}
{"Filepath":"vendor/src/github.com/hpcloud/tail/winfile/winfile.go","Functions":[{"Uniquefunname":"func Open(path string, mode int, perm uint32) (fd syscall.Handle, err error)","Funname":"Open","Returntype":"(fd syscall.Handle, err error)","Args":"path string, mode int, perm uint32"},{"Uniquefunname":"func OpenFile(name string, flag int, perm os.FileMode) (file *os.File, err error)","Funname":"OpenFile","Returntype":"(file *os.File, err error)","Args":"name string, flag int, perm os.FileMode"},{"Uniquefunname":"func makeInheritSa() *syscall.SecurityAttributes","Funname":"makeInheritSa","Returntype":"*syscall.SecurityAttributes","Args":""},{"Uniquefunname":"func syscallMode(i os.FileMode) (o uint32)","Funname":"syscallMode","Returntype":"(o uint32)","Args":"i os.FileMode"},{"Uniquefunname":"func Open(path string, mode int, perm uint32) (fd syscall.Handle, err error)","Funname":"winfile.Open","Returntype":"(fd syscall.Handle, err error)","Args":"path string, mode int, perm uint32"},{"Uniquefunname":"func OpenFile(name string, flag int, perm os.FileMode) (file *os.File, err error)","Funname":"winfile.OpenFile","Returntype":"(file *os.File, err error)","Args":"name string, flag int, perm os.FileMode"},{"Uniquefunname":"func makeInheritSa() *syscall.SecurityAttributes","Funname":"winfile.makeInheritSa","Returntype":"*syscall.SecurityAttributes","Args":""},{"Uniquefunname":"func syscallMode(i os.FileMode) (o uint32)","Funname":"winfile.syscallMode","Returntype":"(o uint32)","Args":"i os.FileMode"}],"Records":null}
{"Filepath":"vendor/src/github.com/knqyf263/go-deb-version/version.go","Functions":[{"Uniquefunname":"func (v1 Version) Compare(v2 Version) int","Funname":"Compare","Returntype":"int","Args":"v2 Version"},{"Uniquefunname":"func (v1 *Version) Equal(v2 Version) bool","Funname":"Equal","Returntype":"bool","Args":"v2 Version"},{"Uniquefunname":"func (v1 *Version) GreaterThan(v2 Version) bool","Funname":"GreaterThan","Returntype":"bool","Args":"v2 Version"},{"Uniquefunname":"func (v1 Version) LessThan(v2 Version) bool","Funname":"LessThan","Returntype":"bool","Args":"v2 Version"},{"Uniquefunname":"func NewVersion(ver string) (version Version, err error)","Funname":"NewVersion","Returntype":"(version Version, err error)","Args":"ver string"},{"Uniquefunname":"func (v1 Version) String() string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func compare(v1, v2 string) int","Funname":"compare","Returntype":"int","Args":"v1, v2 string"},{"Uniquefunname":"func compareString(s1, s2 string) int","Funname":"compareString","Returntype":"int","Args":"s1, s2 string"},{"Uniquefunname":"func extract(version string) (defaultNumSlice, defaultStringSlice)","Funname":"extract","Returntype":"(defaultNumSlice, defaultStringSlice)","Args":"version string"},{"Uniquefunname":"func (n defaultNumSlice) get(i int) int","Funname":"get","Returntype":"int","Args":"i int"},{"Uniquefunname":"func (s defaultStringSlice) get(i int) string","Funname":"get","Returntype":"string","Args":"i int"},{"Uniquefunname":"func order(r rune) int","Funname":"order","Returntype":"int","Args":"r rune"},{"Uniquefunname":"func verifyDebianRevision(str string) error","Funname":"verifyDebianRevision","Returntype":"error","Args":"str string"},{"Uniquefunname":"func verifyUpstreamVersion(str string) error","Funname":"verifyUpstreamVersion","Returntype":"error","Args":"str string"},{"Uniquefunname":"func NewVersion(ver string) (version Version, err error)","Funname":"version.NewVersion","Returntype":"(version Version, err error)","Args":"ver string"},{"Uniquefunname":"func (v1 Version) Compare(v2 Version) int","Funname":"version.Version.Compare","Returntype":"int","Args":"v2 Version"},{"Uniquefunname":"func (v1 *Version) Equal(v2 Version) bool","Funname":"version.Version.Equal","Returntype":"bool","Args":"v2 Version"},{"Uniquefunname":"func (v1 *Version) GreaterThan(v2 Version) bool","Funname":"version.Version.GreaterThan","Returntype":"bool","Args":"v2 Version"},{"Uniquefunname":"func (v1 Version) LessThan(v2 Version) bool","Funname":"version.Version.LessThan","Returntype":"bool","Args":"v2 Version"},{"Uniquefunname":"func (v1 Version) String() string","Funname":"version.Version.String","Returntype":"string","Args":""},{"Uniquefunname":"func compare(v1, v2 string) int","Funname":"version.compare","Returntype":"int","Args":"v1, v2 string"},{"Uniquefunname":"func compareString(s1, s2 string) int","Funname":"version.compareString","Returntype":"int","Args":"s1, s2 string"},{"Uniquefunname":"func (n defaultNumSlice) get(i int) int","Funname":"version.defaultNumSlice.get","Returntype":"int","Args":"i int"},{"Uniquefunname":"func (s defaultStringSlice) get(i int) string","Funname":"version.defaultStringSlice.get","Returntype":"string","Args":"i int"},{"Uniquefunname":"func extract(version string) (defaultNumSlice, defaultStringSlice)","Funname":"version.extract","Returntype":"(defaultNumSlice, defaultStringSlice)","Args":"version string"},{"Uniquefunname":"func order(r rune) int","Funname":"version.order","Returntype":"int","Args":"r rune"},{"Uniquefunname":"func verifyDebianRevision(str string) error","Funname":"version.verifyDebianRevision","Returntype":"error","Args":"str string"},{"Uniquefunname":"func verifyUpstreamVersion(str string) error","Funname":"version.verifyUpstreamVersion","Returntype":"error","Args":"str string"}],"Records":[{"Name":"struct:version.Version","Fields":["version.Version.debianRevision string","version.Version.epoch int","version.Version.upstreamVersion string"]},{"Name":"var:version","Fields":["version.digitRegexp","version.nonDigitRegexp"]}]}
{"Filepath":"vendor/src/github.com/knqyf263/go-deb-version/version_test.go","Functions":[{"Uniquefunname":"func TestCompare(t *testing.T)","Funname":"TestCompare","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestCompareString(t *testing.T)","Funname":"TestCompareString","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestEqual(t *testing.T)","Funname":"TestEqual","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestExtract(t *testing.T)","Funname":"TestExtract","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestGreaterThan(t *testing.T)","Funname":"TestGreaterThan","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestLessThan(t *testing.T)","Funname":"TestLessThan","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestNewVersion(t *testing.T)","Funname":"TestNewVersion","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestOrder(t *testing.T)","Funname":"TestOrder","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestString(t *testing.T)","Funname":"TestString","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestVersion(t *testing.T)","Funname":"TestVersion","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestCompare(t *testing.T)","Funname":"version.TestCompare","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestCompareString(t *testing.T)","Funname":"version.TestCompareString","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestEqual(t *testing.T)","Funname":"version.TestEqual","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestExtract(t *testing.T)","Funname":"version.TestExtract","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestGreaterThan(t *testing.T)","Funname":"version.TestGreaterThan","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestLessThan(t *testing.T)","Funname":"version.TestLessThan","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestNewVersion(t *testing.T)","Funname":"version.TestNewVersion","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestOrder(t *testing.T)","Funname":"version.TestOrder","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestString(t *testing.T)","Funname":"version.TestString","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestVersion(t *testing.T)","Funname":"version.TestVersion","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/ginkgo_dsl.go","Functions":[{"Uniquefunname":"func AfterEach(body interface","Funname":"AfterEach","Returntype":"bool","Args":"body interface{}, timeout ...float64"},{"Uniquefunname":"func AfterSuite(body interface","Funname":"AfterSuite","Returntype":"bool","Args":"body interface{}, timeout ...float64"},{"Uniquefunname":"func BeforeEach(body interface","Funname":"BeforeEach","Returntype":"bool","Args":"body interface{}, timeout ...float64"},{"Uniquefunname":"func BeforeSuite(body interface","Funname":"BeforeSuite","Returntype":"bool","Args":"body interface{}, timeout ...float64"},{"Uniquefunname":"func By(text string, callbacks ...func())","Funname":"By","Returntype":"","Args":"text string, callbacks ...func()"},{"Uniquefunname":"func Context(text string, body func()) bool","Funname":"Context","Returntype":"bool","Args":"text string, body func()"},{"Uniquefunname":"func CurrentGinkgoTestDescription() GinkgoTestDescription","Funname":"CurrentGinkgoTestDescription","Returntype":"GinkgoTestDescription","Args":""},{"Uniquefunname":"func Describe(text string, body func()) bool","Funname":"Describe","Returntype":"bool","Args":"text string, body func()"},{"Uniquefunname":"func FContext(text string, body func()) bool","Funname":"FContext","Returntype":"bool","Args":"text string, body func()"},{"Uniquefunname":"func FDescribe(text string, body func()) bool","Funname":"FDescribe","Returntype":"bool","Args":"text string, body func()"},{"Uniquefunname":"func FIt(text string, body interface","Funname":"FIt","Returntype":"bool","Args":"text string, body interface{}, timeout ...float64"},{"Uniquefunname":"func FMeasure(text string, body interface","Funname":"FMeasure","Returntype":"bool","Args":"text string, body interface{}, samples int"},{"Uniquefunname":"func FSpecify(text string, body interface","Funname":"FSpecify","Returntype":"bool","Args":"text string, body interface{}, timeout ...float64"},{"Uniquefunname":"func FWhen(text string, body func()) bool","Funname":"FWhen","Returntype":"bool","Args":"text string, body func()"},{"Uniquefunname":"func Fail(message string, callerSkip ...int)","Funname":"Fail","Returntype":"","Args":"message string, callerSkip ...int"},{"Uniquefunname":"func GinkgoParallelNode() int","Funname":"GinkgoParallelNode","Returntype":"int","Args":""},{"Uniquefunname":"func GinkgoRandomSeed() int64","Funname":"GinkgoRandomSeed","Returntype":"int64","Args":""},{"Uniquefunname":"func GinkgoRecover()","Funname":"GinkgoRecover","Returntype":"","Args":""},{"Uniquefunname":"func GinkgoT(optionalOffset ...int) GinkgoTInterface","Funname":"GinkgoT","Returntype":"GinkgoTInterface","Args":"optionalOffset ...int"},{"Uniquefunname":"func It(text string, body interface","Funname":"It","Returntype":"bool","Args":"text string, body interface{}, timeout ...float64"},{"Uniquefunname":"func JustAfterEach(body interface","Funname":"JustAfterEach","Returntype":"bool","Args":"body interface{}, timeout ...float64"},{"Uniquefunname":"func JustBeforeEach(body interface","Funname":"JustBeforeEach","Returntype":"bool","Args":"body interface{}, timeout ...float64"},{"Uniquefunname":"func Measure(text string, body interface","Funname":"Measure","Returntype":"bool","Args":"text string, body interface{}, samples int"},{"Uniquefunname":"func PContext(text string, body func()) bool","Funname":"PContext","Returntype":"bool","Args":"text string, body func()"},{"Uniquefunname":"func PDescribe(text string, body func()) bool","Funname":"PDescribe","Returntype":"bool","Args":"text string, body func()"},{"Uniquefunname":"func PIt(text string, _ ...interface","Funname":"PIt","Returntype":"bool","Args":"text string, _ ...interface{}"},{"Uniquefunname":"func PMeasure(text string, _ ...interface","Funname":"PMeasure","Returntype":"bool","Args":"text string, _ ...interface{}"},{"Uniquefunname":"func PSpecify(text string, is ...interface","Funname":"PSpecify","Returntype":"bool","Args":"text string, is ...interface{}"},{"Uniquefunname":"func PWhen(text string, body func()) bool","Funname":"PWhen","Returntype":"bool","Args":"text string, body func()"},{"Uniquefunname":"func RunSpecs(t GinkgoTestingT, description string) bool","Funname":"RunSpecs","Returntype":"bool","Args":"t GinkgoTestingT, description string"},{"Uniquefunname":"func RunSpecsWithCustomReporters(t GinkgoTestingT, description string, specReporters []Reporter)bool","Funname":"RunSpecsWithCustomReporters","Returntype":"bool","Args":"t GinkgoTestingT, description string, specReporters []Reporter"},{"Uniquefunname":"func RunSpecsWithDefaultAndCustomReporters(t GinkgoTestingT, description string, specReporters []Reporter)bool","Funname":"RunSpecsWithDefaultAndCustomReporters","Returntype":"bool","Args":"t GinkgoTestingT, description string, specReporters []Reporter"},{"Uniquefunname":"func Skip(message string, callerSkip ...int)","Funname":"Skip","Returntype":"","Args":"message string, callerSkip ...int"},{"Uniquefunname":"func Specify(text string, body interface","Funname":"Specify","Returntype":"bool","Args":"text string, body interface{}, timeout ...float64"},{"Uniquefunname":"func SynchronizedAfterSuite(allNodesBody interface{}, node1Body interface{}, timeout ...float64)bool","Funname":"SynchronizedAfterSuite","Returntype":"bool","Args":"allNodesBody interface{}, node1Body interface{}, timeout ...float64"},{"Uniquefunname":"func SynchronizedBeforeSuite(node1Body interface{}, allNodesBody interface{}, timeout ...float64)bool","Funname":"SynchronizedBeforeSuite","Returntype":"bool","Args":"node1Body interface{}, allNodesBody interface{}, timeout ...float64"},{"Uniquefunname":"func When(text string, body func()) bool","Funname":"When","Returntype":"bool","Args":"text string, body func()"},{"Uniquefunname":"func XContext(text string, body func()) bool","Funname":"XContext","Returntype":"bool","Args":"text string, body func()"},{"Uniquefunname":"func XDescribe(text string, body func()) bool","Funname":"XDescribe","Returntype":"bool","Args":"text string, body func()"},{"Uniquefunname":"func XIt(text string, _ ...interface","Funname":"XIt","Returntype":"bool","Args":"text string, _ ...interface{}"},{"Uniquefunname":"func XMeasure(text string, _ ...interface","Funname":"XMeasure","Returntype":"bool","Args":"text string, _ ...interface{}"},{"Uniquefunname":"func XSpecify(text string, is ...interface","Funname":"XSpecify","Returntype":"bool","Args":"text string, is ...interface{}"},{"Uniquefunname":"func XWhen(text string, body func()) bool","Funname":"XWhen","Returntype":"bool","Args":"text string, body func()"},{"Uniquefunname":"func buildDefaultReporter() Reporter","Funname":"buildDefaultReporter","Returntype":"Reporter","Args":""},{"Uniquefunname":"func AfterEach(body interface","Funname":"ginkgo.AfterEach","Returntype":"bool","Args":"body interface{}, timeout ...float64"},{"Uniquefunname":"func AfterSuite(body interface","Funname":"ginkgo.AfterSuite","Returntype":"bool","Args":"body interface{}, timeout ...float64"},{"Uniquefunname":"func BeforeEach(body interface","Funname":"ginkgo.BeforeEach","Returntype":"bool","Args":"body interface{}, timeout ...float64"},{"Uniquefunname":"func BeforeSuite(body interface","Funname":"ginkgo.BeforeSuite","Returntype":"bool","Args":"body interface{}, timeout ...float64"},{"Uniquefunname":"func By(text string, callbacks ...func())","Funname":"ginkgo.By","Returntype":"","Args":"text string, callbacks ...func()"},{"Uniquefunname":"func Context(text string, body func()) bool","Funname":"ginkgo.Context","Returntype":"bool","Args":"text string, body func()"},{"Uniquefunname":"func CurrentGinkgoTestDescription() GinkgoTestDescription","Funname":"ginkgo.CurrentGinkgoTestDescription","Returntype":"GinkgoTestDescription","Args":""},{"Uniquefunname":"func Describe(text string, body func()) bool","Funname":"ginkgo.Describe","Returntype":"bool","Args":"text string, body func()"},{"Uniquefunname":"func FContext(text string, body func()) bool","Funname":"ginkgo.FContext","Returntype":"bool","Args":"text string, body func()"},{"Uniquefunname":"func FDescribe(text string, body func()) bool","Funname":"ginkgo.FDescribe","Returntype":"bool","Args":"text string, body func()"},{"Uniquefunname":"func FIt(text string, body interface","Funname":"ginkgo.FIt","Returntype":"bool","Args":"text string, body interface{}, timeout ...float64"},{"Uniquefunname":"func FMeasure(text string, body interface","Funname":"ginkgo.FMeasure","Returntype":"bool","Args":"text string, body interface{}, samples int"},{"Uniquefunname":"func FSpecify(text string, body interface","Funname":"ginkgo.FSpecify","Returntype":"bool","Args":"text string, body interface{}, timeout ...float64"},{"Uniquefunname":"func FWhen(text string, body func()) bool","Funname":"ginkgo.FWhen","Returntype":"bool","Args":"text string, body func()"},{"Uniquefunname":"func Fail(message string, callerSkip ...int)","Funname":"ginkgo.Fail","Returntype":"","Args":"message string, callerSkip ...int"},{"Uniquefunname":"func GinkgoParallelNode() int","Funname":"ginkgo.GinkgoParallelNode","Returntype":"int","Args":""},{"Uniquefunname":"func GinkgoRandomSeed() int64","Funname":"ginkgo.GinkgoRandomSeed","Returntype":"int64","Args":""},{"Uniquefunname":"func GinkgoRecover()","Funname":"ginkgo.GinkgoRecover","Returntype":"","Args":""},{"Uniquefunname":"func GinkgoT(optionalOffset ...int) GinkgoTInterface","Funname":"ginkgo.GinkgoT","Returntype":"GinkgoTInterface","Args":"optionalOffset ...int"},{"Uniquefunname":"func It(text string, body interface","Funname":"ginkgo.It","Returntype":"bool","Args":"text string, body interface{}, timeout ...float64"},{"Uniquefunname":"func JustAfterEach(body interface","Funname":"ginkgo.JustAfterEach","Returntype":"bool","Args":"body interface{}, timeout ...float64"},{"Uniquefunname":"func JustBeforeEach(body interface","Funname":"ginkgo.JustBeforeEach","Returntype":"bool","Args":"body interface{}, timeout ...float64"},{"Uniquefunname":"func Measure(text string, body interface","Funname":"ginkgo.Measure","Returntype":"bool","Args":"text string, body interface{}, samples int"},{"Uniquefunname":"func PContext(text string, body func()) bool","Funname":"ginkgo.PContext","Returntype":"bool","Args":"text string, body func()"},{"Uniquefunname":"func PDescribe(text string, body func()) bool","Funname":"ginkgo.PDescribe","Returntype":"bool","Args":"text string, body func()"},{"Uniquefunname":"func PIt(text string, _ ...interface","Funname":"ginkgo.PIt","Returntype":"bool","Args":"text string, _ ...interface{}"},{"Uniquefunname":"func PMeasure(text string, _ ...interface","Funname":"ginkgo.PMeasure","Returntype":"bool","Args":"text string, _ ...interface{}"},{"Uniquefunname":"func PSpecify(text string, is ...interface","Funname":"ginkgo.PSpecify","Returntype":"bool","Args":"text string, is ...interface{}"},{"Uniquefunname":"func PWhen(text string, body func()) bool","Funname":"ginkgo.PWhen","Returntype":"bool","Args":"text string, body func()"},{"Uniquefunname":"func RunSpecs(t GinkgoTestingT, description string) bool","Funname":"ginkgo.RunSpecs","Returntype":"bool","Args":"t GinkgoTestingT, description string"},{"Uniquefunname":"func ginkgo.RunSpecsWithCustomReporters(t GinkgoTestingT, description string, specReporters []Reporter)bool","Funname":"ginkgo.RunSpecsWithCustomReporters","Returntype":"bool","Args":"t GinkgoTestingT, description string, specReporters []Reporter"},{"Uniquefunname":"func ginkgo.RunSpecsWithDefaultAndCustomReporters(t GinkgoTestingT, description string, specReporters []Reporter)bool","Funname":"ginkgo.RunSpecsWithDefaultAndCustomReporters","Returntype":"bool","Args":"t GinkgoTestingT, description string, specReporters []Reporter"},{"Uniquefunname":"func Skip(message string, callerSkip ...int)","Funname":"ginkgo.Skip","Returntype":"","Args":"message string, callerSkip ...int"},{"Uniquefunname":"func Specify(text string, body interface","Funname":"ginkgo.Specify","Returntype":"bool","Args":"text string, body interface{}, timeout ...float64"},{"Uniquefunname":"func ginkgo.SynchronizedAfterSuite(allNodesBody interface{}, node1Body interface{}, timeout ...float64)bool","Funname":"ginkgo.SynchronizedAfterSuite","Returntype":"bool","Args":"allNodesBody interface{}, node1Body interface{}, timeout ...float64"},{"Uniquefunname":"func ginkgo.SynchronizedBeforeSuite(node1Body interface{}, allNodesBody interface{}, timeout ...float64)bool","Funname":"ginkgo.SynchronizedBeforeSuite","Returntype":"bool","Args":"node1Body interface{}, allNodesBody interface{}, timeout ...float64"},{"Uniquefunname":"func When(text string, body func()) bool","Funname":"ginkgo.When","Returntype":"bool","Args":"text string, body func()"},{"Uniquefunname":"func XContext(text string, body func()) bool","Funname":"ginkgo.XContext","Returntype":"bool","Args":"text string, body func()"},{"Uniquefunname":"func XDescribe(text string, body func()) bool","Funname":"ginkgo.XDescribe","Returntype":"bool","Args":"text string, body func()"},{"Uniquefunname":"func XIt(text string, _ ...interface","Funname":"ginkgo.XIt","Returntype":"bool","Args":"text string, _ ...interface{}"},{"Uniquefunname":"func XMeasure(text string, _ ...interface","Funname":"ginkgo.XMeasure","Returntype":"bool","Args":"text string, _ ...interface{}"},{"Uniquefunname":"func XSpecify(text string, is ...interface","Funname":"ginkgo.XSpecify","Returntype":"bool","Args":"text string, is ...interface{}"},{"Uniquefunname":"func XWhen(text string, body func()) bool","Funname":"ginkgo.XWhen","Returntype":"bool","Args":"text string, body func()"},{"Uniquefunname":"func buildDefaultReporter() Reporter","Funname":"ginkgo.buildDefaultReporter","Returntype":"Reporter","Args":""},{"Uniquefunname":"func init()","Funname":"ginkgo.init","Returntype":"","Args":""},{"Uniquefunname":"func parseTimeout(timeout ...float64) time.Duration","Funname":"ginkgo.parseTimeout","Returntype":"time.Duration","Args":"timeout ...float64"},{"Uniquefunname":"func init()","Funname":"init","Returntype":"","Args":""},{"Uniquefunname":"func parseTimeout(timeout ...float64) time.Duration","Funname":"parseTimeout","Returntype":"time.Duration","Args":"timeout ...float64"}],"Records":[{"Name":"interface","Fields":["ginkgo.Benchmarker","ginkgo.GinkgoTInterface","ginkgo.GinkgoTestingT"]},{"Name":"const:ginkgo","Fields":["ginkgo.GINKGO_PANIC","ginkgo.GINKGO_VERSION","ginkgo.defaultTimeout"]},{"Name":"struct:ginkgo.GinkgoTestDescription","Fields":["ginkgo.GinkgoTestDescription.ComponentTexts []string","ginkgo.GinkgoTestDescription.Duration time.Duration","ginkgo.GinkgoTestDescription.Failed bool","ginkgo.GinkgoTestDescription.FileName string","ginkgo.GinkgoTestDescription.FullTestText string","ginkgo.GinkgoTestDescription.IsMeasurement bool","ginkgo.GinkgoTestDescription.LineNumber int","ginkgo.GinkgoTestDescription.TestText string"]},{"Name":"var:ginkgo","Fields":["ginkgo.GinkgoWriter","ginkgo.globalFailer","ginkgo.globalSuite"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/config/config.go","Functions":[{"Uniquefunname":"func BuildFlagArgs(prefix string, ginkgo GinkgoConfigType, reporter DefaultReporterConfigType)[]string","Funname":"BuildFlagArgs","Returntype":"[]string","Args":"prefix string, ginkgo GinkgoConfigType, reporter DefaultReporterConfigType"},{"Uniquefunname":"func Flags(flagSet *flag.FlagSet, prefix string, includeParallelFlags bool)","Funname":"Flags","Returntype":"","Args":"flagSet *flag.FlagSet, prefix string, includeParallelFlags bool"},{"Uniquefunname":"func config.BuildFlagArgs(prefix string, ginkgo GinkgoConfigType, reporter DefaultReporterConfigType)[]string","Funname":"config.BuildFlagArgs","Returntype":"[]string","Args":"prefix string, ginkgo GinkgoConfigType, reporter DefaultReporterConfigType"},{"Uniquefunname":"func Flags(flagSet *flag.FlagSet, prefix string, includeParallelFlags bool)","Funname":"config.Flags","Returntype":"","Args":"flagSet *flag.FlagSet, prefix string, includeParallelFlags bool"},{"Uniquefunname":"func processPrefix(prefix string) string","Funname":"config.processPrefix","Returntype":"string","Args":"prefix string"},{"Uniquefunname":"func processPrefix(prefix string) string","Funname":"processPrefix","Returntype":"string","Args":"prefix string"}],"Records":[{"Name":"var:config","Fields":["config.DefaultReporterConfig","config.GinkgoConfig"]},{"Name":"struct:config.DefaultReporterConfigType","Fields":["config.DefaultReporterConfigType.FullTrace bool","config.DefaultReporterConfigType.NoColor bool","config.DefaultReporterConfigType.NoisyPendings bool","config.DefaultReporterConfigType.NoisySkippings bool","config.DefaultReporterConfigType.SlowSpecThreshold float64","config.DefaultReporterConfigType.Succinct bool","config.DefaultReporterConfigType.Verbose bool"]},{"Name":"struct:config.GinkgoConfigType","Fields":["config.GinkgoConfigType.DebugParallel bool","config.GinkgoConfigType.DryRun bool","config.GinkgoConfigType.EmitSpecProgress bool","config.GinkgoConfigType.FailFast bool","config.GinkgoConfigType.FailOnPending bool","config.GinkgoConfigType.FlakeAttempts int","config.GinkgoConfigType.FocusString string","config.GinkgoConfigType.ParallelNode int","config.GinkgoConfigType.ParallelTotal int","config.GinkgoConfigType.RandomSeed int64","config.GinkgoConfigType.RandomizeAllSpecs bool","config.GinkgoConfigType.RegexScansFilePath bool","config.GinkgoConfigType.SkipMeasurements bool","config.GinkgoConfigType.SkipString string","config.GinkgoConfigType.StreamHost string","config.GinkgoConfigType.SyncHost string"]},{"Name":"const:config","Fields":["config.VERSION"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/extensions/table/table.go","Functions":[{"Uniquefunname":"func DescribeTable(description string, itBody interface","Funname":"DescribeTable","Returntype":"bool","Args":"description string, itBody interface{}, entries ...TableEntry"},{"Uniquefunname":"func FDescribeTable(description string, itBody interface","Funname":"FDescribeTable","Returntype":"bool","Args":"description string, itBody interface{}, entries ...TableEntry"},{"Uniquefunname":"func PDescribeTable(description string, itBody interface","Funname":"PDescribeTable","Returntype":"bool","Args":"description string, itBody interface{}, entries ...TableEntry"},{"Uniquefunname":"func XDescribeTable(description string, itBody interface","Funname":"XDescribeTable","Returntype":"bool","Args":"description string, itBody interface{}, entries ...TableEntry"},{"Uniquefunname":"func describeTable(description string, itBody interface{}, entries []TableEntry, pending bool, focused bool)","Funname":"describeTable","Returntype":"","Args":"description string, itBody interface{}, entries []TableEntry, pending bool, focused bool"},{"Uniquefunname":"func DescribeTable(description string, itBody interface","Funname":"table.DescribeTable","Returntype":"bool","Args":"description string, itBody interface{}, entries ...TableEntry"},{"Uniquefunname":"func FDescribeTable(description string, itBody interface","Funname":"table.FDescribeTable","Returntype":"bool","Args":"description string, itBody interface{}, entries ...TableEntry"},{"Uniquefunname":"func PDescribeTable(description string, itBody interface","Funname":"table.PDescribeTable","Returntype":"bool","Args":"description string, itBody interface{}, entries ...TableEntry"},{"Uniquefunname":"func XDescribeTable(description string, itBody interface","Funname":"table.XDescribeTable","Returntype":"bool","Args":"description string, itBody interface{}, entries ...TableEntry"},{"Uniquefunname":"func table.describeTable(description string, itBody interface{}, entries []TableEntry, pending bool, focused bool)","Funname":"table.describeTable","Returntype":"","Args":"description string, itBody interface{}, entries []TableEntry, pending bool, focused bool"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/extensions/table/table_entry.go","Functions":[{"Uniquefunname":"func Entry(description string, parameters ...interface","Funname":"Entry","Returntype":"TableEntry","Args":"description string, parameters ...interface{}"},{"Uniquefunname":"func FEntry(description string, parameters ...interface","Funname":"FEntry","Returntype":"TableEntry","Args":"description string, parameters ...interface{}"},{"Uniquefunname":"func PEntry(description string, parameters ...interface","Funname":"PEntry","Returntype":"TableEntry","Args":"description string, parameters ...interface{}"},{"Uniquefunname":"func XEntry(description string, parameters ...interface","Funname":"XEntry","Returntype":"TableEntry","Args":"description string, parameters ...interface{}"},{"Uniquefunname":"func (t TableEntry) generateIt(itBody reflect.Value)","Funname":"generateIt","Returntype":"","Args":"itBody reflect.Value"},{"Uniquefunname":"func Entry(description string, parameters ...interface","Funname":"table.Entry","Returntype":"TableEntry","Args":"description string, parameters ...interface{}"},{"Uniquefunname":"func FEntry(description string, parameters ...interface","Funname":"table.FEntry","Returntype":"TableEntry","Args":"description string, parameters ...interface{}"},{"Uniquefunname":"func PEntry(description string, parameters ...interface","Funname":"table.PEntry","Returntype":"TableEntry","Args":"description string, parameters ...interface{}"},{"Uniquefunname":"func (t TableEntry) generateIt(itBody reflect.Value)","Funname":"table.TableEntry.generateIt","Returntype":"","Args":"itBody reflect.Value"},{"Uniquefunname":"func XEntry(description string, parameters ...interface","Funname":"table.XEntry","Returntype":"TableEntry","Args":"description string, parameters ...interface{}"}],"Records":[{"Name":"struct:table.TableEntry","Fields":["table.TableEntry.Description string","table.TableEntry.Focused bool","table.TableEntry.Parameters []interface{}","table.TableEntry.Pending bool"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/extensions/table/table_suite_test.go","Functions":[{"Uniquefunname":"func TestTable(t *testing.T)","Funname":"TestTable","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTable(t *testing.T)","Funname":"table_test.TestTable","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/extensions/table/table_test.go","Functions":null,"Records":[{"Name":"var:table_test","Fields":["table_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/ginkgo/bootstrap_command.go","Functions":[{"Uniquefunname":"func BuildBootstrapCommand() *Command","Funname":"BuildBootstrapCommand","Returntype":"*Command","Args":""},{"Uniquefunname":"func determinePackageName(name string, internal bool) string","Funname":"determinePackageName","Returntype":"string","Args":"name string, internal bool"},{"Uniquefunname":"func fileExists(path string) bool","Funname":"fileExists","Returntype":"bool","Args":"path string"},{"Uniquefunname":"func generateBootstrap(agouti, noDot, internal bool, customBootstrapFile string)","Funname":"generateBootstrap","Returntype":"","Args":"agouti, noDot, internal bool, customBootstrapFile string"},{"Uniquefunname":"func getPackageAndFormattedName() (string, string, string)","Funname":"getPackageAndFormattedName","Returntype":"(string, string, string)","Args":""},{"Uniquefunname":"func BuildBootstrapCommand() *Command","Funname":"main.BuildBootstrapCommand","Returntype":"*Command","Args":""},{"Uniquefunname":"func determinePackageName(name string, internal bool) string","Funname":"main.determinePackageName","Returntype":"string","Args":"name string, internal bool"},{"Uniquefunname":"func fileExists(path string) bool","Funname":"main.fileExists","Returntype":"bool","Args":"path string"},{"Uniquefunname":"func generateBootstrap(agouti, noDot, internal bool, customBootstrapFile string)","Funname":"main.generateBootstrap","Returntype":"","Args":"agouti, noDot, internal bool, customBootstrapFile string"},{"Uniquefunname":"func getPackageAndFormattedName() (string, string, string)","Funname":"main.getPackageAndFormattedName","Returntype":"(string, string, string)","Args":""},{"Uniquefunname":"func prettifyPackageName(name string) string","Funname":"main.prettifyPackageName","Returntype":"string","Args":"name string"},{"Uniquefunname":"func prettifyPackageName(name string) string","Funname":"prettifyPackageName","Returntype":"string","Args":"name string"}],"Records":[{"Name":"var:main","Fields":["main.agoutiBootstrapText","main.bootstrapText"]},{"Name":"struct:main.bootstrapData","Fields":["main.bootstrapData.FormattedName string","main.bootstrapData.GinkgoImport string","main.bootstrapData.GomegaImport string","main.bootstrapData.Package string"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/ginkgo/build_command.go","Functions":[{"Uniquefunname":"func BuildBuildCommand() *Command","Funname":"BuildBuildCommand","Returntype":"*Command","Args":""},{"Uniquefunname":"func (r *SpecBuilder) BuildSpecs(args []string, additionalArgs []string)","Funname":"BuildSpecs","Returntype":"","Args":"args []string, additionalArgs []string"},{"Uniquefunname":"func BuildBuildCommand() *Command","Funname":"main.BuildBuildCommand","Returntype":"*Command","Args":""},{"Uniquefunname":"func (r *SpecBuilder) BuildSpecs(args []string, additionalArgs []string)","Funname":"main.SpecBuilder.BuildSpecs","Returntype":"","Args":"args []string, additionalArgs []string"}],"Records":[{"Name":"struct:main.SpecBuilder","Fields":["main.SpecBuilder.commandFlags *RunWatchAndBuildCommandFlags","main.SpecBuilder.interruptHandler *interrupthandler.InterruptHandler"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/ginkgo/convert_command.go","Functions":[{"Uniquefunname":"func BuildConvertCommand() *Command","Funname":"BuildConvertCommand","Returntype":"*Command","Args":""},{"Uniquefunname":"func convertPackage(args []string, additionalArgs []string)","Funname":"convertPackage","Returntype":"","Args":"args []string, additionalArgs []string"},{"Uniquefunname":"func BuildConvertCommand() *Command","Funname":"main.BuildConvertCommand","Returntype":"*Command","Args":""},{"Uniquefunname":"func convertPackage(args []string, additionalArgs []string)","Funname":"main.convertPackage","Returntype":"","Args":"args []string, additionalArgs []string"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/ginkgo/generate_command.go","Functions":[{"Uniquefunname":"func BuildGenerateCommand() *Command","Funname":"BuildGenerateCommand","Returntype":"*Command","Args":""},{"Uniquefunname":"func generateSpec(args []string, agouti, noDot, internal bool)","Funname":"generateSpec","Returntype":"","Args":"args []string, agouti, noDot, internal bool"},{"Uniquefunname":"func generateSpecForSubject(subject string, agouti, noDot, internal bool) error","Funname":"generateSpecForSubject","Returntype":"error","Args":"subject string, agouti, noDot, internal bool"},{"Uniquefunname":"func getPackageImportPath() string","Funname":"getPackageImportPath","Returntype":"string","Args":""},{"Uniquefunname":"func BuildGenerateCommand() *Command","Funname":"main.BuildGenerateCommand","Returntype":"*Command","Args":""},{"Uniquefunname":"func generateSpec(args []string, agouti, noDot, internal bool)","Funname":"main.generateSpec","Returntype":"","Args":"args []string, agouti, noDot, internal bool"},{"Uniquefunname":"func generateSpecForSubject(subject string, agouti, noDot, internal bool) error","Funname":"main.generateSpecForSubject","Returntype":"error","Args":"subject string, agouti, noDot, internal bool"},{"Uniquefunname":"func getPackageImportPath() string","Funname":"main.getPackageImportPath","Returntype":"string","Args":""}],"Records":[{"Name":"var:main","Fields":["main.agoutiSpecText","main.specText"]},{"Name":"struct:main.specData","Fields":["main.specData.DotImportPackage bool","main.specData.IncludeImports bool","main.specData.Package string","main.specData.PackageImportPath string","main.specData.Subject string"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/ginkgo/help_command.go","Functions":[{"Uniquefunname":"func BuildHelpCommand() *Command","Funname":"BuildHelpCommand","Returntype":"*Command","Args":""},{"Uniquefunname":"func BuildHelpCommand() *Command","Funname":"main.BuildHelpCommand","Returntype":"*Command","Args":""},{"Uniquefunname":"func printHelp(args []string, additionalArgs []string)","Funname":"main.printHelp","Returntype":"","Args":"args []string, additionalArgs []string"},{"Uniquefunname":"func printHelp(args []string, additionalArgs []string)","Funname":"printHelp","Returntype":"","Args":"args []string, additionalArgs []string"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/ginkgo/main.go","Functions":[{"Uniquefunname":"func (c *Command) Matches(name string) bool","Funname":"Matches","Returntype":"bool","Args":"name string"},{"Uniquefunname":"func (c *Command) Run(args []string, additionalArgs []string)","Funname":"Run","Returntype":"","Args":"args []string, additionalArgs []string"},{"Uniquefunname":"func commandMatching(name string) (*Command, bool)","Funname":"commandMatching","Returntype":"(*Command, bool)","Args":"name string"},{"Uniquefunname":"func complainAndQuit(complaint string)","Funname":"complainAndQuit","Returntype":"","Args":"complaint string"},{"Uniquefunname":"func findSuites(args []string, recurseForAll bool, skipPackage string, allowPrecompiled bool)([]testsuite.TestSuite, []string)","Funname":"findSuites","Returntype":"([]testsuite.TestSuite, []string)","Args":"args []string, recurseForAll bool, skipPackage string, allowPrecompiled bool"},{"Uniquefunname":"func goFmt(path string)","Funname":"goFmt","Returntype":"","Args":"path string"},{"Uniquefunname":"func init()","Funname":"init","Returntype":"","Args":""},{"Uniquefunname":"func main()","Funname":"main","Returntype":"","Args":""},{"Uniquefunname":"func (c *Command) Matches(name string) bool","Funname":"main.Command.Matches","Returntype":"bool","Args":"name string"},{"Uniquefunname":"func (c *Command) Run(args []string, additionalArgs []string)","Funname":"main.Command.Run","Returntype":"","Args":"args []string, additionalArgs []string"},{"Uniquefunname":"func commandMatching(name string) (*Command, bool)","Funname":"main.commandMatching","Returntype":"(*Command, bool)","Args":"name string"},{"Uniquefunname":"func complainAndQuit(complaint string)","Funname":"main.complainAndQuit","Returntype":"","Args":"complaint string"},{"Uniquefunname":"func main.findSuites(args []string, recurseForAll bool, skipPackage string, allowPrecompiled bool)([]testsuite.TestSuite, []string)","Funname":"main.findSuites","Returntype":"([]testsuite.TestSuite, []string)","Args":"args []string, recurseForAll bool, skipPackage string, allowPrecompiled bool"},{"Uniquefunname":"func goFmt(path string)","Funname":"main.goFmt","Returntype":"","Args":"path string"},{"Uniquefunname":"func init()","Funname":"main.init","Returntype":"","Args":""},{"Uniquefunname":"func main()","Funname":"main.main","Returntype":"","Args":""},{"Uniquefunname":"func pluralizedWord(singular, plural string, count int) string","Funname":"main.pluralizedWord","Returntype":"string","Args":"singular, plural string, count int"},{"Uniquefunname":"func usage()","Funname":"main.usage","Returntype":"","Args":""},{"Uniquefunname":"func usageForCommand(command *Command, longForm bool)","Funname":"main.usageForCommand","Returntype":"","Args":"command *Command, longForm bool"},{"Uniquefunname":"func pluralizedWord(singular, plural string, count int) string","Funname":"pluralizedWord","Returntype":"string","Args":"singular, plural string, count int"},{"Uniquefunname":"func usage()","Funname":"usage","Returntype":"","Args":""},{"Uniquefunname":"func usageForCommand(command *Command, longForm bool)","Funname":"usageForCommand","Returntype":"","Args":"command *Command, longForm bool"}],"Records":[{"Name":"struct:main.Command","Fields":["main.Command.AltName string","main.Command.Command func(args []string, additionalArgs []string)","main.Command.FlagDocSubstitute []string","main.Command.FlagSet *flag.FlagSet","main.Command.Name string","main.Command.SuppressFlagDocumentation bool","main.Command.Usage []string","main.Command.UsageCommand string"]},{"Name":"var:main","Fields":["main.Commands","main.DefaultCommand"]},{"Name":"const:main","Fields":["main.defaultStyle","main.greenColor","main.lightGrayColor","main.redColor"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/ginkgo/nodot_command.go","Functions":[{"Uniquefunname":"func BuildNodotCommand() *Command","Funname":"BuildNodotCommand","Returntype":"*Command","Args":""},{"Uniquefunname":"func findSuiteFile() (string, os.FileMode)","Funname":"findSuiteFile","Returntype":"(string, os.FileMode)","Args":""},{"Uniquefunname":"func BuildNodotCommand() *Command","Funname":"main.BuildNodotCommand","Returntype":"*Command","Args":""},{"Uniquefunname":"func findSuiteFile() (string, os.FileMode)","Funname":"main.findSuiteFile","Returntype":"(string, os.FileMode)","Args":""},{"Uniquefunname":"func updateNodot(args []string, additionalArgs []string)","Funname":"main.updateNodot","Returntype":"","Args":"args []string, additionalArgs []string"},{"Uniquefunname":"func updateNodot(args []string, additionalArgs []string)","Funname":"updateNodot","Returntype":"","Args":"args []string, additionalArgs []string"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/ginkgo/notifications.go","Functions":[{"Uniquefunname":"func NewNotifier(commandFlags *RunWatchAndBuildCommandFlags) *Notifier","Funname":"NewNotifier","Returntype":"*Notifier","Args":"commandFlags *RunWatchAndBuildCommandFlags"},{"Uniquefunname":"func (n *Notifier) RunCommand(suite testsuite.TestSuite, suitePassed bool)","Funname":"RunCommand","Returntype":"","Args":"suite testsuite.TestSuite, suitePassed bool"},{"Uniquefunname":"func (n *Notifier) SendNotification(title string, subtitle string)","Funname":"SendNotification","Returntype":"","Args":"title string, subtitle string"},{"Uniquefunname":"func SendSuiteCompletionNotification(suite testsuite.TestSuite, suitePassed bool)","Funname":"SendSuiteCompletionNotification","Returntype":"","Args":"suite testsuite.TestSuite, suitePassed bool"},{"Uniquefunname":"func (n *Notifier) VerifyNotificationsAreAvailable()","Funname":"VerifyNotificationsAreAvailable","Returntype":"","Args":""},{"Uniquefunname":"func NewNotifier(commandFlags *RunWatchAndBuildCommandFlags) *Notifier","Funname":"main.NewNotifier","Returntype":"*Notifier","Args":"commandFlags *RunWatchAndBuildCommandFlags"},{"Uniquefunname":"func (n *Notifier) RunCommand(suite testsuite.TestSuite, suitePassed bool)","Funname":"main.Notifier.RunCommand","Returntype":"","Args":"suite testsuite.TestSuite, suitePassed bool"},{"Uniquefunname":"func (n *Notifier) SendNotification(title string, subtitle string)","Funname":"main.Notifier.SendNotification","Returntype":"","Args":"title string, subtitle string"},{"Uniquefunname":"func main.Notifier.SendSuiteCompletionNotification(suite testsuite.TestSuite, suitePassed bool)","Funname":"main.Notifier.SendSuiteCompletionNotification","Returntype":"","Args":"suite testsuite.TestSuite, suitePassed bool"},{"Uniquefunname":"func (n *Notifier) VerifyNotificationsAreAvailable()","Funname":"main.Notifier.VerifyNotificationsAreAvailable","Returntype":"","Args":""}],"Records":[{"Name":"struct:main.Notifier","Fields":["main.Notifier.commandFlags *RunWatchAndBuildCommandFlags"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/ginkgo/run_command.go","Functions":[{"Uniquefunname":"func BuildRunCommand() *Command","Funname":"BuildRunCommand","Returntype":"*Command","Args":""},{"Uniquefunname":"func (r *SpecRunner) ComputeSuccinctMode(numSuites int)","Funname":"ComputeSuccinctMode","Returntype":"","Args":"numSuites int"},{"Uniquefunname":"func (r *SpecRunner) RunSpecs(args []string, additionalArgs []string)","Funname":"RunSpecs","Returntype":"","Args":"args []string, additionalArgs []string"},{"Uniquefunname":"func (r *SpecRunner) UpdateSeed()","Funname":"UpdateSeed","Returntype":"","Args":""},{"Uniquefunname":"func (r *SpecRunner) combineCoverprofiles(runners []*testrunner.TestRunner) error","Funname":"combineCoverprofiles","Returntype":"error","Args":"runners []*testrunner.TestRunner"},{"Uniquefunname":"func (r *SpecRunner) getCoverprofile() string","Funname":"getCoverprofile","Returntype":"string","Args":""},{"Uniquefunname":"func (r *SpecRunner) getOutputDir() string","Funname":"getOutputDir","Returntype":"string","Args":""},{"Uniquefunname":"func (r *SpecRunner) isInCoverageMode() bool","Funname":"isInCoverageMode","Returntype":"bool","Args":""},{"Uniquefunname":"func BuildRunCommand() *Command","Funname":"main.BuildRunCommand","Returntype":"*Command","Args":""},{"Uniquefunname":"func (r *SpecRunner) ComputeSuccinctMode(numSuites int)","Funname":"main.SpecRunner.ComputeSuccinctMode","Returntype":"","Args":"numSuites int"},{"Uniquefunname":"func (r *SpecRunner) RunSpecs(args []string, additionalArgs []string)","Funname":"main.SpecRunner.RunSpecs","Returntype":"","Args":"args []string, additionalArgs []string"},{"Uniquefunname":"func (r *SpecRunner) UpdateSeed()","Funname":"main.SpecRunner.UpdateSeed","Returntype":"","Args":""},{"Uniquefunname":"func (r *SpecRunner) combineCoverprofiles(runners []*testrunner.TestRunner) error","Funname":"main.SpecRunner.combineCoverprofiles","Returntype":"error","Args":"runners []*testrunner.TestRunner"},{"Uniquefunname":"func (r *SpecRunner) getCoverprofile() string","Funname":"main.SpecRunner.getCoverprofile","Returntype":"string","Args":""},{"Uniquefunname":"func (r *SpecRunner) getOutputDir() string","Funname":"main.SpecRunner.getOutputDir","Returntype":"string","Args":""},{"Uniquefunname":"func (r *SpecRunner) isInCoverageMode() bool","Funname":"main.SpecRunner.isInCoverageMode","Returntype":"bool","Args":""},{"Uniquefunname":"func (r *SpecRunner) moveCoverprofiles(runners []*testrunner.TestRunner)","Funname":"main.SpecRunner.moveCoverprofiles","Returntype":"","Args":"runners []*testrunner.TestRunner"},{"Uniquefunname":"func (r *SpecRunner) randomizeOrder(runners []*testrunner.TestRunner) []*testrunner.TestRunner","Funname":"main.SpecRunner.randomizeOrder","Returntype":"[]*testrunner.TestRunner","Args":"runners []*testrunner.TestRunner"},{"Uniquefunname":"func orcMessage(iteration int) string","Funname":"main.orcMessage","Returntype":"string","Args":"iteration int"},{"Uniquefunname":"func (r *SpecRunner) moveCoverprofiles(runners []*testrunner.TestRunner)","Funname":"moveCoverprofiles","Returntype":"","Args":"runners []*testrunner.TestRunner"},{"Uniquefunname":"func orcMessage(iteration int) string","Funname":"orcMessage","Returntype":"string","Args":"iteration int"},{"Uniquefunname":"func (r *SpecRunner) randomizeOrder(runners []*testrunner.TestRunner) []*testrunner.TestRunner","Funname":"randomizeOrder","Returntype":"[]*testrunner.TestRunner","Args":"runners []*testrunner.TestRunner"}],"Records":[{"Name":"struct:main.SpecRunner","Fields":["main.SpecRunner.commandFlags *RunWatchAndBuildCommandFlags","main.SpecRunner.interruptHandler *interrupthandler.InterruptHandler","main.SpecRunner.notifier *Notifier","main.SpecRunner.suiteRunner *SuiteRunner"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/ginkgo/run_watch_and_build_command_flags.go","Functions":[{"Uniquefunname":"func NewBuildCommandFlags(flagSet *flag.FlagSet) *RunWatchAndBuildCommandFlags","Funname":"NewBuildCommandFlags","Returntype":"*RunWatchAndBuildCommandFlags","Args":"flagSet *flag.FlagSet"},{"Uniquefunname":"func NewRunCommandFlags(flagSet *flag.FlagSet) *RunWatchAndBuildCommandFlags","Funname":"NewRunCommandFlags","Returntype":"*RunWatchAndBuildCommandFlags","Args":"flagSet *flag.FlagSet"},{"Uniquefunname":"func NewWatchCommandFlags(flagSet *flag.FlagSet) *RunWatchAndBuildCommandFlags","Funname":"NewWatchCommandFlags","Returntype":"*RunWatchAndBuildCommandFlags","Args":"flagSet *flag.FlagSet"},{"Uniquefunname":"func (c *RunWatchAndBuildCommandFlags) boolSlot(slot string) *bool","Funname":"boolSlot","Returntype":"*bool","Args":"slot string"},{"Uniquefunname":"func (c *RunWatchAndBuildCommandFlags) computeNodes()","Funname":"computeNodes","Returntype":"","Args":""},{"Uniquefunname":"func (c *RunWatchAndBuildCommandFlags) flags(mode int)","Funname":"flags","Returntype":"","Args":"mode int"},{"Uniquefunname":"func (c *RunWatchAndBuildCommandFlags) intSlot(slot string) *int","Funname":"intSlot","Returntype":"*int","Args":"slot string"},{"Uniquefunname":"func NewBuildCommandFlags(flagSet *flag.FlagSet) *RunWatchAndBuildCommandFlags","Funname":"main.NewBuildCommandFlags","Returntype":"*RunWatchAndBuildCommandFlags","Args":"flagSet *flag.FlagSet"},{"Uniquefunname":"func NewRunCommandFlags(flagSet *flag.FlagSet) *RunWatchAndBuildCommandFlags","Funname":"main.NewRunCommandFlags","Returntype":"*RunWatchAndBuildCommandFlags","Args":"flagSet *flag.FlagSet"},{"Uniquefunname":"func NewWatchCommandFlags(flagSet *flag.FlagSet) *RunWatchAndBuildCommandFlags","Funname":"main.NewWatchCommandFlags","Returntype":"*RunWatchAndBuildCommandFlags","Args":"flagSet *flag.FlagSet"},{"Uniquefunname":"func (c *RunWatchAndBuildCommandFlags) boolSlot(slot string) *bool","Funname":"main.RunWatchAndBuildCommandFlags.boolSlot","Returntype":"*bool","Args":"slot string"},{"Uniquefunname":"func (c *RunWatchAndBuildCommandFlags) computeNodes()","Funname":"main.RunWatchAndBuildCommandFlags.computeNodes","Returntype":"","Args":""},{"Uniquefunname":"func (c *RunWatchAndBuildCommandFlags) flags(mode int)","Funname":"main.RunWatchAndBuildCommandFlags.flags","Returntype":"","Args":"mode int"},{"Uniquefunname":"func (c *RunWatchAndBuildCommandFlags) intSlot(slot string) *int","Funname":"main.RunWatchAndBuildCommandFlags.intSlot","Returntype":"*int","Args":"slot string"},{"Uniquefunname":"func (c *RunWatchAndBuildCommandFlags) stringSlot(slot string) *string","Funname":"main.RunWatchAndBuildCommandFlags.stringSlot","Returntype":"*string","Args":"slot string"},{"Uniquefunname":"func (c *RunWatchAndBuildCommandFlags) wasSet(flagName string) bool","Funname":"main.RunWatchAndBuildCommandFlags.wasSet","Returntype":"bool","Args":"flagName string"},{"Uniquefunname":"func (c *RunWatchAndBuildCommandFlags) stringSlot(slot string) *string","Funname":"stringSlot","Returntype":"*string","Args":"slot string"},{"Uniquefunname":"func (c *RunWatchAndBuildCommandFlags) wasSet(flagName string) bool","Funname":"wasSet","Returntype":"bool","Args":"flagName string"}],"Records":[{"Name":"struct:main.RunWatchAndBuildCommandFlags","Fields":["main.RunWatchAndBuildCommandFlags.AfterSuiteHook string","main.RunWatchAndBuildCommandFlags.AutoNodes bool","main.RunWatchAndBuildCommandFlags.Depth int","main.RunWatchAndBuildCommandFlags.FlagSet *flag.FlagSet","main.RunWatchAndBuildCommandFlags.GoOpts map[string]interface{}","main.RunWatchAndBuildCommandFlags.KeepGoing bool","main.RunWatchAndBuildCommandFlags.Notify bool","main.RunWatchAndBuildCommandFlags.NumCPU int","main.RunWatchAndBuildCommandFlags.NumCompilers int","main.RunWatchAndBuildCommandFlags.ParallelStream bool","main.RunWatchAndBuildCommandFlags.RandomizeSuites bool","main.RunWatchAndBuildCommandFlags.Recurse bool","main.RunWatchAndBuildCommandFlags.SkipPackage string","main.RunWatchAndBuildCommandFlags.Timeout time.Duration","main.RunWatchAndBuildCommandFlags.UntilItFails bool","main.RunWatchAndBuildCommandFlags.WatchRegExp string"]},{"Name":"const:main","Fields":["main.buildMode","main.runMode","main.watchMode"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/ginkgo/suite_runner.go","Functions":[{"Uniquefunname":"func NewSuiteRunner(notifier *Notifier, interruptHandler *interrupthandler.InterruptHandler)*SuiteRunner","Funname":"NewSuiteRunner","Returntype":"*SuiteRunner","Args":"notifier *Notifier, interruptHandler *interrupthandler.InterruptHandler"},{"Uniquefunname":"func RunSuites(runners []*testrunner.TestRunner, numCompilers int, keepGoing bool, willCompile func(suite testsuite.TestSuite))(testrunner.RunResult, int)","Funname":"RunSuites","Returntype":"(testrunner.RunResult, int)","Args":"runners []*testrunner.TestRunner, numCompilers int, keepGoing bool, willCompile func(suite testsuite.TestSuite)"},{"Uniquefunname":"func compileInParallel(runners []*testrunner.TestRunner, numCompilers int, willCompile func(suite testsuite.TestSuite))chan compilationOutput","Funname":"compileInParallel","Returntype":"chan compilationOutput","Args":"runners []*testrunner.TestRunner, numCompilers int, willCompile func(suite testsuite.TestSuite)"},{"Uniquefunname":"func (r *SuiteRunner) listFailedSuites(suitesThatFailed []testsuite.TestSuite)","Funname":"listFailedSuites","Returntype":"","Args":"suitesThatFailed []testsuite.TestSuite"},{"Uniquefunname":"func main.NewSuiteRunner(notifier *Notifier, interruptHandler *interrupthandler.InterruptHandler)*SuiteRunner","Funname":"main.NewSuiteRunner","Returntype":"*SuiteRunner","Args":"notifier *Notifier, interruptHandler *interrupthandler.InterruptHandler"},{"Uniquefunname":"func main.SuiteRunner.RunSuites(runners []*testrunner.TestRunner, numCompilers int, keepGoing bool, willCompile func(suite testsuite.TestSuite))(testrunner.RunResult, int)","Funname":"main.SuiteRunner.RunSuites","Returntype":"(testrunner.RunResult, int)","Args":"runners []*testrunner.TestRunner, numCompilers int, keepGoing bool, willCompile func(suite testsuite.TestSuite)"},{"Uniquefunname":"func main.SuiteRunner.compileInParallel(runners []*testrunner.TestRunner, numCompilers int, willCompile func(suite testsuite.TestSuite))chan compilationOutput","Funname":"main.SuiteRunner.compileInParallel","Returntype":"chan compilationOutput","Args":"runners []*testrunner.TestRunner, numCompilers int, willCompile func(suite testsuite.TestSuite)"},{"Uniquefunname":"func (r *SuiteRunner) listFailedSuites(suitesThatFailed []testsuite.TestSuite)","Funname":"main.SuiteRunner.listFailedSuites","Returntype":"","Args":"suitesThatFailed []testsuite.TestSuite"}],"Records":[{"Name":"struct:main.SuiteRunner","Fields":["main.SuiteRunner.interruptHandler *interrupthandler.InterruptHandler","main.SuiteRunner.notifier *Notifier"]},{"Name":"struct:main.compilationInput","Fields":["main.compilationInput.result chan compilationOutput","main.compilationInput.runner *testrunner.TestRunner"]},{"Name":"struct:main.compilationOutput","Fields":["main.compilationOutput.err error","main.compilationOutput.runner *testrunner.TestRunner"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/ginkgo/unfocus_command.go","Functions":[{"Uniquefunname":"func BuildUnfocusCommand() *Command","Funname":"BuildUnfocusCommand","Returntype":"*Command","Args":""},{"Uniquefunname":"func BuildUnfocusCommand() *Command","Funname":"main.BuildUnfocusCommand","Returntype":"*Command","Args":""},{"Uniquefunname":"func unfocus(component string)","Funname":"main.unfocus","Returntype":"","Args":"component string"},{"Uniquefunname":"func unfocusSpecs([]string, []string)","Funname":"main.unfocusSpecs","Returntype":"","Args":"[]string, []string"},{"Uniquefunname":"func unfocus(component string)","Funname":"unfocus","Returntype":"","Args":"component string"},{"Uniquefunname":"func unfocusSpecs([]string, []string)","Funname":"unfocusSpecs","Returntype":"","Args":"[]string, []string"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/ginkgo/version_command.go","Functions":[{"Uniquefunname":"func BuildVersionCommand() *Command","Funname":"BuildVersionCommand","Returntype":"*Command","Args":""},{"Uniquefunname":"func BuildVersionCommand() *Command","Funname":"main.BuildVersionCommand","Returntype":"*Command","Args":""},{"Uniquefunname":"func printVersion([]string, []string)","Funname":"main.printVersion","Returntype":"","Args":"[]string, []string"},{"Uniquefunname":"func printVersion([]string, []string)","Funname":"printVersion","Returntype":"","Args":"[]string, []string"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/ginkgo/watch_command.go","Functions":[{"Uniquefunname":"func BuildWatchCommand() *Command","Funname":"BuildWatchCommand","Returntype":"*Command","Args":""},{"Uniquefunname":"func (w *SpecWatcher) ComputeSuccinctMode(numSuites int)","Funname":"ComputeSuccinctMode","Returntype":"","Args":"numSuites int"},{"Uniquefunname":"func (w *SpecWatcher) UpdateSeed()","Funname":"UpdateSeed","Returntype":"","Args":""},{"Uniquefunname":"func (w *SpecWatcher) WatchSpecs(args []string, additionalArgs []string)","Funname":"WatchSpecs","Returntype":"","Args":"args []string, additionalArgs []string"},{"Uniquefunname":"func (w *SpecWatcher) WatchSuites(args []string, additionalArgs []string)","Funname":"WatchSuites","Returntype":"","Args":"args []string, additionalArgs []string"},{"Uniquefunname":"func BuildWatchCommand() *Command","Funname":"main.BuildWatchCommand","Returntype":"*Command","Args":""},{"Uniquefunname":"func (w *SpecWatcher) ComputeSuccinctMode(numSuites int)","Funname":"main.SpecWatcher.ComputeSuccinctMode","Returntype":"","Args":"numSuites int"},{"Uniquefunname":"func (w *SpecWatcher) UpdateSeed()","Funname":"main.SpecWatcher.UpdateSeed","Returntype":"","Args":""},{"Uniquefunname":"func (w *SpecWatcher) WatchSpecs(args []string, additionalArgs []string)","Funname":"main.SpecWatcher.WatchSpecs","Returntype":"","Args":"args []string, additionalArgs []string"},{"Uniquefunname":"func (w *SpecWatcher) WatchSuites(args []string, additionalArgs []string)","Funname":"main.SpecWatcher.WatchSuites","Returntype":"","Args":"args []string, additionalArgs []string"},{"Uniquefunname":"func main.SpecWatcher.runnersForSuites(suites []testsuite.TestSuite, additionalArgs []string)[]*testrunner.TestRunner","Funname":"main.SpecWatcher.runnersForSuites","Returntype":"[]*testrunner.TestRunner","Args":"suites []testsuite.TestSuite, additionalArgs []string"},{"Uniquefunname":"func runnersForSuites(suites []testsuite.TestSuite, additionalArgs []string)[]*testrunner.TestRunner","Funname":"runnersForSuites","Returntype":"[]*testrunner.TestRunner","Args":"suites []testsuite.TestSuite, additionalArgs []string"}],"Records":[{"Name":"struct:main.SpecWatcher","Fields":["main.SpecWatcher.commandFlags *RunWatchAndBuildCommandFlags","main.SpecWatcher.interruptHandler *interrupthandler.InterruptHandler","main.SpecWatcher.notifier *Notifier","main.SpecWatcher.suiteRunner *SuiteRunner"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/ginkgo/convert/ginkgo_ast_nodes.go","Functions":[{"Uniquefunname":"func blockStatementFromDescribe(desc *ast.CallExpr) *ast.BlockStmt","Funname":"blockStatementFromDescribe","Returntype":"*ast.BlockStmt","Args":"desc *ast.CallExpr"},{"Uniquefunname":"func blockStatementFromDescribe(desc *ast.CallExpr) *ast.BlockStmt","Funname":"convert.blockStatementFromDescribe","Returntype":"*ast.BlockStmt","Args":"desc *ast.CallExpr"},{"Uniquefunname":"func createDescribeBlock() *ast.CallExpr","Funname":"convert.createDescribeBlock","Returntype":"*ast.CallExpr","Args":""},{"Uniquefunname":"func createItStatementForTestFunc(testFunc *ast.FuncDecl) *ast.ExprStmt","Funname":"convert.createItStatementForTestFunc","Returntype":"*ast.ExprStmt","Args":"testFunc *ast.FuncDecl"},{"Uniquefunname":"func createVarUnderscoreBlock() *ast.ValueSpec","Funname":"convert.createVarUnderscoreBlock","Returntype":"*ast.ValueSpec","Args":""},{"Uniquefunname":"func namedTestingTArg(node *ast.FuncDecl) string","Funname":"convert.namedTestingTArg","Returntype":"string","Args":"node *ast.FuncDecl"},{"Uniquefunname":"func newGinkgoTFromIdent(ident *ast.Ident) *ast.CallExpr","Funname":"convert.newGinkgoTFromIdent","Returntype":"*ast.CallExpr","Args":"ident *ast.Ident"},{"Uniquefunname":"func newGinkgoTInterface() *ast.Ident","Funname":"convert.newGinkgoTInterface","Returntype":"*ast.Ident","Args":""},{"Uniquefunname":"func rewriteTestName(testName string) string","Funname":"convert.rewriteTestName","Returntype":"string","Args":"testName string"},{"Uniquefunname":"func createDescribeBlock() *ast.CallExpr","Funname":"createDescribeBlock","Returntype":"*ast.CallExpr","Args":""},{"Uniquefunname":"func createItStatementForTestFunc(testFunc *ast.FuncDecl) *ast.ExprStmt","Funname":"createItStatementForTestFunc","Returntype":"*ast.ExprStmt","Args":"testFunc *ast.FuncDecl"},{"Uniquefunname":"func createVarUnderscoreBlock() *ast.ValueSpec","Funname":"createVarUnderscoreBlock","Returntype":"*ast.ValueSpec","Args":""},{"Uniquefunname":"func namedTestingTArg(node *ast.FuncDecl) string","Funname":"namedTestingTArg","Returntype":"string","Args":"node *ast.FuncDecl"},{"Uniquefunname":"func newGinkgoTFromIdent(ident *ast.Ident) *ast.CallExpr","Funname":"newGinkgoTFromIdent","Returntype":"*ast.CallExpr","Args":"ident *ast.Ident"},{"Uniquefunname":"func newGinkgoTInterface() *ast.Ident","Funname":"newGinkgoTInterface","Returntype":"*ast.Ident","Args":""},{"Uniquefunname":"func rewriteTestName(testName string) string","Funname":"rewriteTestName","Returntype":"string","Args":"testName string"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/ginkgo/convert/import.go","Functions":[{"Uniquefunname":"func addGinkgoImports(rootNode *ast.File)","Funname":"addGinkgoImports","Returntype":"","Args":"rootNode *ast.File"},{"Uniquefunname":"func addGinkgoImports(rootNode *ast.File)","Funname":"convert.addGinkgoImports","Returntype":"","Args":"rootNode *ast.File"},{"Uniquefunname":"func createImport(name, path string) *ast.ImportSpec","Funname":"convert.createImport","Returntype":"*ast.ImportSpec","Args":"name, path string"},{"Uniquefunname":"func importsForRootNode(rootNode *ast.File) (imports *ast.GenDecl, err error)","Funname":"convert.importsForRootNode","Returntype":"(imports *ast.GenDecl, err error)","Args":"rootNode *ast.File"},{"Uniquefunname":"func removeTestingImport(rootNode *ast.File)","Funname":"convert.removeTestingImport","Returntype":"","Args":"rootNode *ast.File"},{"Uniquefunname":"func createImport(name, path string) *ast.ImportSpec","Funname":"createImport","Returntype":"*ast.ImportSpec","Args":"name, path string"},{"Uniquefunname":"func importsForRootNode(rootNode *ast.File) (imports *ast.GenDecl, err error)","Funname":"importsForRootNode","Returntype":"(imports *ast.GenDecl, err error)","Args":"rootNode *ast.File"},{"Uniquefunname":"func removeTestingImport(rootNode *ast.File)","Funname":"removeTestingImport","Returntype":"","Args":"rootNode *ast.File"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/ginkgo/convert/package_rewriter.go","Functions":[{"Uniquefunname":"func RewritePackage(packageName string)","Funname":"RewritePackage","Returntype":"","Args":"packageName string"},{"Uniquefunname":"func addGinkgoSuiteForPackage(pkg *build.Package)","Funname":"addGinkgoSuiteForPackage","Returntype":"","Args":"pkg *build.Package"},{"Uniquefunname":"func RewritePackage(packageName string)","Funname":"convert.RewritePackage","Returntype":"","Args":"packageName string"},{"Uniquefunname":"func addGinkgoSuiteForPackage(pkg *build.Package)","Funname":"convert.addGinkgoSuiteForPackage","Returntype":"","Args":"pkg *build.Package"},{"Uniquefunname":"func findTestsInPackage(pkg *build.Package) (testfiles []string)","Funname":"convert.findTestsInPackage","Returntype":"(testfiles []string)","Args":"pkg *build.Package"},{"Uniquefunname":"func goFmtPackage(pkg *build.Package)","Funname":"convert.goFmtPackage","Returntype":"","Args":"pkg *build.Package"},{"Uniquefunname":"func packageWithName(name string) (pkg *build.Package, err error)","Funname":"convert.packageWithName","Returntype":"(pkg *build.Package, err error)","Args":"name string"},{"Uniquefunname":"func findTestsInPackage(pkg *build.Package) (testfiles []string)","Funname":"findTestsInPackage","Returntype":"(testfiles []string)","Args":"pkg *build.Package"},{"Uniquefunname":"func goFmtPackage(pkg *build.Package)","Funname":"goFmtPackage","Returntype":"","Args":"pkg *build.Package"},{"Uniquefunname":"func packageWithName(name string) (pkg *build.Package, err error)","Funname":"packageWithName","Returntype":"(pkg *build.Package, err error)","Args":"name string"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/ginkgo/convert/test_finder.go","Functions":[{"Uniquefunname":"func findTestFuncs(rootNode *ast.File) (testsToRewrite []*ast.FuncDecl)","Funname":"convert.findTestFuncs","Returntype":"(testsToRewrite []*ast.FuncDecl)","Args":"rootNode *ast.File"},{"Uniquefunname":"func receivesTestingT(node *ast.FuncDecl) bool","Funname":"convert.receivesTestingT","Returntype":"bool","Args":"node *ast.FuncDecl"},{"Uniquefunname":"func findTestFuncs(rootNode *ast.File) (testsToRewrite []*ast.FuncDecl)","Funname":"findTestFuncs","Returntype":"(testsToRewrite []*ast.FuncDecl)","Args":"rootNode *ast.File"},{"Uniquefunname":"func receivesTestingT(node *ast.FuncDecl) bool","Funname":"receivesTestingT","Returntype":"bool","Args":"node *ast.FuncDecl"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/ginkgo/convert/testfile_rewriter.go","Functions":[{"Uniquefunname":"func replaceTestingTsInArgsLists(callExpr *ast.CallExpr, testingT string)","Funname":"convert.replaceTestingTsInArgsLists","Returntype":"","Args":"callExpr *ast.CallExpr, testingT string"},{"Uniquefunname":"func replaceTestingTsMethodCalls(selectorExpr *ast.SelectorExpr, testingT string)","Funname":"convert.replaceTestingTsMethodCalls","Returntype":"","Args":"selectorExpr *ast.SelectorExpr, testingT string"},{"Uniquefunname":"func replaceTestingTsWithGinkgoT(statementsBlock *ast.BlockStmt, testingT string)","Funname":"convert.replaceTestingTsWithGinkgoT","Returntype":"","Args":"statementsBlock *ast.BlockStmt, testingT string"},{"Uniquefunname":"func convert.rewriteTestFuncAsItStatement(testFunc *ast.FuncDecl, rootNode *ast.File, describe *ast.CallExpr)","Funname":"convert.rewriteTestFuncAsItStatement","Returntype":"","Args":"testFunc *ast.FuncDecl, rootNode *ast.File, describe *ast.CallExpr"},{"Uniquefunname":"func rewriteTestsInFile(pathToFile string)","Funname":"convert.rewriteTestsInFile","Returntype":"","Args":"pathToFile string"},{"Uniquefunname":"func replaceTestingTsInArgsLists(callExpr *ast.CallExpr, testingT string)","Funname":"replaceTestingTsInArgsLists","Returntype":"","Args":"callExpr *ast.CallExpr, testingT string"},{"Uniquefunname":"func replaceTestingTsMethodCalls(selectorExpr *ast.SelectorExpr, testingT string)","Funname":"replaceTestingTsMethodCalls","Returntype":"","Args":"selectorExpr *ast.SelectorExpr, testingT string"},{"Uniquefunname":"func replaceTestingTsWithGinkgoT(statementsBlock *ast.BlockStmt, testingT string)","Funname":"replaceTestingTsWithGinkgoT","Returntype":"","Args":"statementsBlock *ast.BlockStmt, testingT string"},{"Uniquefunname":"func rewriteTestFuncAsItStatement(testFunc *ast.FuncDecl, rootNode *ast.File, describe *ast.CallExpr)","Funname":"rewriteTestFuncAsItStatement","Returntype":"","Args":"testFunc *ast.FuncDecl, rootNode *ast.File, describe *ast.CallExpr"},{"Uniquefunname":"func rewriteTestsInFile(pathToFile string)","Funname":"rewriteTestsInFile","Returntype":"","Args":"pathToFile string"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/ginkgo/convert/testing_t_rewriter.go","Functions":[{"Uniquefunname":"func replaceNamedTestingTsInKeyValueExpression(kve *ast.KeyValueExpr, testingT string)","Funname":"convert.replaceNamedTestingTsInKeyValueExpression","Returntype":"","Args":"kve *ast.KeyValueExpr, testingT string"},{"Uniquefunname":"func replaceTestingTsInStructType(structType *ast.StructType)","Funname":"convert.replaceTestingTsInStructType","Returntype":"","Args":"structType *ast.StructType"},{"Uniquefunname":"func replaceTypeDeclTestingTsInFuncLiteral(functionLiteral *ast.FuncLit)","Funname":"convert.replaceTypeDeclTestingTsInFuncLiteral","Returntype":"","Args":"functionLiteral *ast.FuncLit"},{"Uniquefunname":"func rewriteOtherFuncsToUseGinkgoT(declarations []ast.Decl)","Funname":"convert.rewriteOtherFuncsToUseGinkgoT","Returntype":"","Args":"declarations []ast.Decl"},{"Uniquefunname":"func walkNodesInRootNodeReplacingTestingT(rootNode *ast.File)","Funname":"convert.walkNodesInRootNodeReplacingTestingT","Returntype":"","Args":"rootNode *ast.File"},{"Uniquefunname":"func replaceNamedTestingTsInKeyValueExpression(kve *ast.KeyValueExpr, testingT string)","Funname":"replaceNamedTestingTsInKeyValueExpression","Returntype":"","Args":"kve *ast.KeyValueExpr, testingT string"},{"Uniquefunname":"func replaceTestingTsInStructType(structType *ast.StructType)","Funname":"replaceTestingTsInStructType","Returntype":"","Args":"structType *ast.StructType"},{"Uniquefunname":"func replaceTypeDeclTestingTsInFuncLiteral(functionLiteral *ast.FuncLit)","Funname":"replaceTypeDeclTestingTsInFuncLiteral","Returntype":"","Args":"functionLiteral *ast.FuncLit"},{"Uniquefunname":"func rewriteOtherFuncsToUseGinkgoT(declarations []ast.Decl)","Funname":"rewriteOtherFuncsToUseGinkgoT","Returntype":"","Args":"declarations []ast.Decl"},{"Uniquefunname":"func walkNodesInRootNodeReplacingTestingT(rootNode *ast.File)","Funname":"walkNodesInRootNodeReplacingTestingT","Returntype":"","Args":"rootNode *ast.File"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/ginkgo/interrupthandler/interrupt_handler.go","Functions":[{"Uniquefunname":"func NewInterruptHandler() *InterruptHandler","Funname":"NewInterruptHandler","Returntype":"*InterruptHandler","Args":""},{"Uniquefunname":"func (h *InterruptHandler) WasInterrupted() bool","Funname":"WasInterrupted","Returntype":"bool","Args":""},{"Uniquefunname":"func (h *InterruptHandler) handleInterrupt()","Funname":"handleInterrupt","Returntype":"","Args":""},{"Uniquefunname":"func (h *InterruptHandler) WasInterrupted() bool","Funname":"interrupthandler.InterruptHandler.WasInterrupted","Returntype":"bool","Args":""},{"Uniquefunname":"func (h *InterruptHandler) handleInterrupt()","Funname":"interrupthandler.InterruptHandler.handleInterrupt","Returntype":"","Args":""},{"Uniquefunname":"func NewInterruptHandler() *InterruptHandler","Funname":"interrupthandler.NewInterruptHandler","Returntype":"*InterruptHandler","Args":""}],"Records":[{"Name":"struct:interrupthandler.InterruptHandler","Fields":["interrupthandler.InterruptHandler.C chan bool","interrupthandler.InterruptHandler.interruptCount int","interrupthandler.InterruptHandler.lock *sync.Mutex"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/ginkgo/interrupthandler/sigquit_swallower_unix.go","Functions":[{"Uniquefunname":"func SwallowSigQuit()","Funname":"SwallowSigQuit","Returntype":"","Args":""},{"Uniquefunname":"func SwallowSigQuit()","Funname":"interrupthandler.SwallowSigQuit","Returntype":"","Args":""}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/ginkgo/interrupthandler/sigquit_swallower_windows.go","Functions":[{"Uniquefunname":"func SwallowSigQuit()","Funname":"SwallowSigQuit","Returntype":"","Args":""},{"Uniquefunname":"func SwallowSigQuit()","Funname":"interrupthandler.SwallowSigQuit","Returntype":"","Args":""}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/ginkgo/nodot/nodot.go","Functions":[{"Uniquefunname":"func ApplyNoDot(data []byte) ([]byte, error)","Funname":"ApplyNoDot","Returntype":"([]byte, error)","Args":"data []byte"},{"Uniquefunname":"func (s nodotSection) containsDeclarationOrType(word string) bool","Funname":"containsDeclarationOrType","Returntype":"bool","Args":"word string"},{"Uniquefunname":"func (s nodotSection) createOrUpdateIn(data []byte) []byte","Funname":"createOrUpdateIn","Returntype":"[]byte","Args":"data []byte"},{"Uniquefunname":"func generateNodotSections() ([]nodotSection, error)","Funname":"generateNodotSections","Returntype":"([]nodotSection, error)","Args":""},{"Uniquefunname":"func getExportedDeclarationsForFile(path string) ([]string, error)","Funname":"getExportedDeclarationsForFile","Returntype":"([]string, error)","Args":"path string"},{"Uniquefunname":"func getExportedDeclerationsForPackage(pkgPath string, filename string, blacklist ...string)([]string, error)","Funname":"getExportedDeclerationsForPackage","Returntype":"([]string, error)","Args":"pkgPath string, filename string, blacklist ...string"},{"Uniquefunname":"func ApplyNoDot(data []byte) ([]byte, error)","Funname":"nodot.ApplyNoDot","Returntype":"([]byte, error)","Args":"data []byte"},{"Uniquefunname":"func generateNodotSections() ([]nodotSection, error)","Funname":"nodot.generateNodotSections","Returntype":"([]nodotSection, error)","Args":""},{"Uniquefunname":"func getExportedDeclarationsForFile(path string) ([]string, error)","Funname":"nodot.getExportedDeclarationsForFile","Returntype":"([]string, error)","Args":"path string"},{"Uniquefunname":"func nodot.getExportedDeclerationsForPackage(pkgPath string, filename string, blacklist ...string)([]string, error)","Funname":"nodot.getExportedDeclerationsForPackage","Returntype":"([]string, error)","Args":"pkgPath string, filename string, blacklist ...string"},{"Uniquefunname":"func (s nodotSection) containsDeclarationOrType(word string) bool","Funname":"nodot.nodotSection.containsDeclarationOrType","Returntype":"bool","Args":"word string"},{"Uniquefunname":"func (s nodotSection) createOrUpdateIn(data []byte) []byte","Funname":"nodot.nodotSection.createOrUpdateIn","Returntype":"[]byte","Args":"data []byte"},{"Uniquefunname":"func (s nodotSection) prefix(declOrType string) string","Funname":"nodot.nodotSection.prefix","Returntype":"string","Args":"declOrType string"},{"Uniquefunname":"func (s nodotSection) prefix(declOrType string) string","Funname":"prefix","Returntype":"string","Args":"declOrType string"}],"Records":[{"Name":"struct:nodot.nodotSection","Fields":["nodot.nodotSection.declarations []string","nodot.nodotSection.name string","nodot.nodotSection.pkg string","nodot.nodotSection.types []string"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/ginkgo/nodot/nodot_suite_test.go","Functions":[{"Uniquefunname":"func TestNodot(t *testing.T)","Funname":"TestNodot","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestNodot(t *testing.T)","Funname":"nodot_test.TestNodot","Returntype":"","Args":"t *testing.T"}],"Records":[{"Name":"var:nodot_test","Fields":["nodot_test.AfterEach","nodot_test.AfterSuite","nodot_test.BeAssignableToTypeOf","nodot_test.BeClosed","nodot_test.BeEmpty","nodot_test.BeEquivalentTo","nodot_test.BeFalse","nodot_test.BeNil","nodot_test.BeNumerically","nodot_test.BeTemporally","nodot_test.BeTrue","nodot_test.BeZero","nodot_test.BeforeEach","nodot_test.BeforeSuite","nodot_test.ConsistOf","nodot_test.Consistently","nodot_test.ConsistentlyWithOffset","nodot_test.ContainElement","nodot_test.ContainSubstring","nodot_test.Context","nodot_test.CurrentGinkgoTestDescription","nodot_test.Describe","nodot_test.Equal","nodot_test.Eventually","nodot_test.EventuallyWithOffset","nodot_test.Expect","nodot_test.ExpectWithOffset","nodot_test.FContext","nodot_test.FDescribe","nodot_test.FIt","nodot_test.FMeasure","nodot_test.Fail","nodot_test.GinkgoParallelNode","nodot_test.GinkgoRecover","nodot_test.GinkgoT","nodot_test.GinkgoWriter","nodot_test.HaveKey","nodot_test.HaveKeyWithValue","nodot_test.HaveLen","nodot_test.HaveOccurred","nodot_test.InterceptGomegaFailures","nodot_test.It","nodot_test.JustAfterEach","nodot_test.JustBeforeEach","nodot_test.MatchError","nodot_test.MatchJSON","nodot_test.MatchRegexp","nodot_test.Measure","nodot_test.PContext","nodot_test.PDescribe","nodot_test.PIt","nodot_test.PMeasure","nodot_test.Panic","nodot_test.Receive","nodot_test.RegisterFailHandler","nodot_test.RegisterTestingT","nodot_test.RunSpecs","nodot_test.RunSpecsWithCustomReporters","nodot_test.RunSpecsWithDefaultAndCustomReporters","nodot_test.SetDefaultConsistentlyDuration","nodot_test.SetDefaultConsistentlyPollingInterval","nodot_test.SetDefaultEventuallyPollingInterval","nodot_test.SetDefaultEventuallyTimeout","nodot_test.SynchronizedAfterSuite","nodot_test.SynchronizedBeforeSuite","nodot_test.XContext","nodot_test.XDescribe","nodot_test.XIt","nodot_test.XMeasure","nodot_test.Ω"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/ginkgo/nodot/nodot_test.go","Functions":null,"Records":[{"Name":"var:nodot_test","Fields":["nodot_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/ginkgo/testrunner/build_args.go","Functions":null,"Records":[{"Name":"var:testrunner","Fields":["testrunner.buildArgs"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/ginkgo/testrunner/build_args_old.go","Functions":null,"Records":[{"Name":"var:testrunner","Fields":["testrunner.buildArgs"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/ginkgo/testrunner/log_writer.go","Functions":[{"Uniquefunname":"func (w *logWriter) Close() error","Funname":"Close","Returntype":"error","Args":""},{"Uniquefunname":"func (w *logWriter) Write(data []byte) (n int, err error)","Funname":"Write","Returntype":"(n int, err error)","Args":"data []byte"},{"Uniquefunname":"func newLogWriter(target io.Writer, node int) *logWriter","Funname":"newLogWriter","Returntype":"*logWriter","Args":"target io.Writer, node int"},{"Uniquefunname":"func (w *logWriter) Close() error","Funname":"testrunner.logWriter.Close","Returntype":"error","Args":""},{"Uniquefunname":"func (w *logWriter) Write(data []byte) (n int, err error)","Funname":"testrunner.logWriter.Write","Returntype":"(n int, err error)","Args":"data []byte"},{"Uniquefunname":"func newLogWriter(target io.Writer, node int) *logWriter","Funname":"testrunner.newLogWriter","Returntype":"*logWriter","Args":"target io.Writer, node int"}],"Records":[{"Name":"struct:testrunner.logWriter","Fields":["testrunner.logWriter.buffer *bytes.Buffer","testrunner.logWriter.lock *sync.Mutex","testrunner.logWriter.log *log.Logger"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/ginkgo/testrunner/run_result.go","Functions":[{"Uniquefunname":"func FailingRunResult() RunResult","Funname":"FailingRunResult","Returntype":"RunResult","Args":""},{"Uniquefunname":"func (r RunResult) Merge(o RunResult) RunResult","Funname":"Merge","Returntype":"RunResult","Args":"o RunResult"},{"Uniquefunname":"func PassingRunResult() RunResult","Funname":"PassingRunResult","Returntype":"RunResult","Args":""},{"Uniquefunname":"func FailingRunResult() RunResult","Funname":"testrunner.FailingRunResult","Returntype":"RunResult","Args":""},{"Uniquefunname":"func PassingRunResult() RunResult","Funname":"testrunner.PassingRunResult","Returntype":"RunResult","Args":""},{"Uniquefunname":"func (r RunResult) Merge(o RunResult) RunResult","Funname":"testrunner.RunResult.Merge","Returntype":"RunResult","Args":"o RunResult"}],"Records":[{"Name":"struct:testrunner.RunResult","Fields":["testrunner.RunResult.HasProgrammaticFocus bool","testrunner.RunResult.Passed bool"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/ginkgo/testrunner/test_runner.go","Functions":[{"Uniquefunname":"func (t *TestRunner) BuildArgs(path string) []string","Funname":"BuildArgs","Returntype":"[]string","Args":"path string"},{"Uniquefunname":"func (t *TestRunner) CleanUp()","Funname":"CleanUp","Returntype":"","Args":""},{"Uniquefunname":"func (t *TestRunner) Compile() error","Funname":"Compile","Returntype":"error","Args":""},{"Uniquefunname":"func (t *TestRunner) CompileTo(path string) error","Funname":"CompileTo","Returntype":"error","Args":"path string"},{"Uniquefunname":"func New(suite testsuite.TestSuite, numCPU int, parallelStream bool, timeout time.Duration, goOpts map[string]interface{}, additionalArgs []string)*TestRunner","Funname":"New","Returntype":"*TestRunner","Args":"suite testsuite.TestSuite, numCPU int, parallelStream bool, timeout time.Duration, goOpts map[string]interface{}, additionalArgs []string"},{"Uniquefunname":"func (t *TestRunner) Run() RunResult","Funname":"Run","Returntype":"RunResult","Args":""},{"Uniquefunname":"func (t *TestRunner) cmd(ginkgoArgs []string, stream io.Writer, node int) *exec.Cmd","Funname":"cmd","Returntype":"*exec.Cmd","Args":"ginkgoArgs []string, stream io.Writer, node int"},{"Uniquefunname":"func (t *TestRunner) combineCoverprofiles()","Funname":"combineCoverprofiles","Returntype":"","Args":""},{"Uniquefunname":"func copyFile(src, dst string) error","Funname":"copyFile","Returntype":"error","Args":"src, dst string"},{"Uniquefunname":"func fileExists(path string) bool","Funname":"fileExists","Returntype":"bool","Args":"path string"},{"Uniquefunname":"func (t *TestRunner) getCoverMode() string","Funname":"getCoverMode","Returntype":"string","Args":""},{"Uniquefunname":"func (t *TestRunner) getCoverPackage() string","Funname":"getCoverPackage","Returntype":"string","Args":""},{"Uniquefunname":"func (t *TestRunner) getCoverProfile() string","Funname":"getCoverProfile","Returntype":"string","Args":""},{"Uniquefunname":"func (t *TestRunner) run(cmd *exec.Cmd, completions chan RunResult) RunResult","Funname":"run","Returntype":"RunResult","Args":"cmd *exec.Cmd, completions chan RunResult"},{"Uniquefunname":"func (t *TestRunner) runAndStreamParallelGinkgoSuite() RunResult","Funname":"runAndStreamParallelGinkgoSuite","Returntype":"RunResult","Args":""},{"Uniquefunname":"func (t *TestRunner) runGoTestSuite() RunResult","Funname":"runGoTestSuite","Returntype":"RunResult","Args":""},{"Uniquefunname":"func (t *TestRunner) runParallelGinkgoSuite() RunResult","Funname":"runParallelGinkgoSuite","Returntype":"RunResult","Args":""},{"Uniquefunname":"func (t *TestRunner) runSerialGinkgoSuite() RunResult","Funname":"runSerialGinkgoSuite","Returntype":"RunResult","Args":""},{"Uniquefunname":"func (t *TestRunner) shouldCombineCoverprofiles() bool","Funname":"shouldCombineCoverprofiles","Returntype":"bool","Args":""},{"Uniquefunname":"func (t *TestRunner) shouldCover() bool","Funname":"shouldCover","Returntype":"bool","Args":""},{"Uniquefunname":"func (t *TestRunner) shouldRequireSuite() bool","Funname":"shouldRequireSuite","Returntype":"bool","Args":""},{"Uniquefunname":"func testrunner.New(suite testsuite.TestSuite, numCPU int, parallelStream bool, timeout time.Duration, goOpts map[string]interface{}, additionalArgs []string)*TestRunner","Funname":"testrunner.New","Returntype":"*TestRunner","Args":"suite testsuite.TestSuite, numCPU int, parallelStream bool, timeout time.Duration, goOpts map[string]interface{}, additionalArgs []string"},{"Uniquefunname":"func (t *TestRunner) BuildArgs(path string) []string","Funname":"testrunner.TestRunner.BuildArgs","Returntype":"[]string","Args":"path string"},{"Uniquefunname":"func (t *TestRunner) CleanUp()","Funname":"testrunner.TestRunner.CleanUp","Returntype":"","Args":""},{"Uniquefunname":"func (t *TestRunner) Compile() error","Funname":"testrunner.TestRunner.Compile","Returntype":"error","Args":""},{"Uniquefunname":"func (t *TestRunner) CompileTo(path string) error","Funname":"testrunner.TestRunner.CompileTo","Returntype":"error","Args":"path string"},{"Uniquefunname":"func (t *TestRunner) Run() RunResult","Funname":"testrunner.TestRunner.Run","Returntype":"RunResult","Args":""},{"Uniquefunname":"func (t *TestRunner) cmd(ginkgoArgs []string, stream io.Writer, node int) *exec.Cmd","Funname":"testrunner.TestRunner.cmd","Returntype":"*exec.Cmd","Args":"ginkgoArgs []string, stream io.Writer, node int"},{"Uniquefunname":"func (t *TestRunner) combineCoverprofiles()","Funname":"testrunner.TestRunner.combineCoverprofiles","Returntype":"","Args":""},{"Uniquefunname":"func (t *TestRunner) getCoverMode() string","Funname":"testrunner.TestRunner.getCoverMode","Returntype":"string","Args":""},{"Uniquefunname":"func (t *TestRunner) getCoverPackage() string","Funname":"testrunner.TestRunner.getCoverPackage","Returntype":"string","Args":""},{"Uniquefunname":"func (t *TestRunner) getCoverProfile() string","Funname":"testrunner.TestRunner.getCoverProfile","Returntype":"string","Args":""},{"Uniquefunname":"func (t *TestRunner) run(cmd *exec.Cmd, completions chan RunResult) RunResult","Funname":"testrunner.TestRunner.run","Returntype":"RunResult","Args":"cmd *exec.Cmd, completions chan RunResult"},{"Uniquefunname":"func (t *TestRunner) runAndStreamParallelGinkgoSuite() RunResult","Funname":"testrunner.TestRunner.runAndStreamParallelGinkgoSuite","Returntype":"RunResult","Args":""},{"Uniquefunname":"func (t *TestRunner) runGoTestSuite() RunResult","Funname":"testrunner.TestRunner.runGoTestSuite","Returntype":"RunResult","Args":""},{"Uniquefunname":"func (t *TestRunner) runParallelGinkgoSuite() RunResult","Funname":"testrunner.TestRunner.runParallelGinkgoSuite","Returntype":"RunResult","Args":""},{"Uniquefunname":"func (t *TestRunner) runSerialGinkgoSuite() RunResult","Funname":"testrunner.TestRunner.runSerialGinkgoSuite","Returntype":"RunResult","Args":""},{"Uniquefunname":"func (t *TestRunner) shouldCombineCoverprofiles() bool","Funname":"testrunner.TestRunner.shouldCombineCoverprofiles","Returntype":"bool","Args":""},{"Uniquefunname":"func (t *TestRunner) shouldCover() bool","Funname":"testrunner.TestRunner.shouldCover","Returntype":"bool","Args":""},{"Uniquefunname":"func (t *TestRunner) shouldRequireSuite() bool","Funname":"testrunner.TestRunner.shouldRequireSuite","Returntype":"bool","Args":""},{"Uniquefunname":"func copyFile(src, dst string) error","Funname":"testrunner.copyFile","Returntype":"error","Args":"src, dst string"},{"Uniquefunname":"func fileExists(path string) bool","Funname":"testrunner.fileExists","Returntype":"bool","Args":"path string"}],"Records":[{"Name":"const:testrunner","Fields":["testrunner.CoverProfileSuffix"]},{"Name":"struct:testrunner.TestRunner","Fields":["testrunner.TestRunner.CoverageFile string","testrunner.TestRunner.Suite testsuite.TestSuite","testrunner.TestRunner.additionalArgs []string","testrunner.TestRunner.compilationTargetPath string","testrunner.TestRunner.compiled bool","testrunner.TestRunner.goOpts map[string]interface{}","testrunner.TestRunner.numCPU int","testrunner.TestRunner.parallelStream bool","testrunner.TestRunner.stderr *bytes.Buffer","testrunner.TestRunner.timeout time.Duration"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/ginkgo/testrunner/test_runner_test.go","Functions":[{"Uniquefunname":"func TestTestRunner(t *testing.T)","Funname":"TestTestRunner","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func boolAddr(s bool) interface","Funname":"boolAddr","Returntype":"interface{}","Args":"s bool"},{"Uniquefunname":"func intAddr(s int) interface","Funname":"intAddr","Returntype":"interface{}","Args":"s int"},{"Uniquefunname":"func strAddr(s string) interface","Funname":"strAddr","Returntype":"interface{}","Args":"s string"},{"Uniquefunname":"func TestTestRunner(t *testing.T)","Funname":"testrunner_test.TestTestRunner","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func boolAddr(s bool) interface","Funname":"testrunner_test.boolAddr","Returntype":"interface{}","Args":"s bool"},{"Uniquefunname":"func intAddr(s int) interface","Funname":"testrunner_test.intAddr","Returntype":"interface{}","Args":"s int"},{"Uniquefunname":"func strAddr(s string) interface","Funname":"testrunner_test.strAddr","Returntype":"interface{}","Args":"s string"}],"Records":[{"Name":"var:testrunner_test","Fields":["testrunner_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/ginkgo/testsuite/test_suite.go","Functions":[{"Uniquefunname":"func New(dir string, files []os.FileInfo) TestSuite","Funname":"New","Returntype":"TestSuite","Args":"dir string, files []os.FileInfo"},{"Uniquefunname":"func PrecompiledTestSuite(path string) (TestSuite, error)","Funname":"PrecompiledTestSuite","Returntype":"(TestSuite, error)","Args":"path string"},{"Uniquefunname":"func SuitesInDir(dir string, recurse bool) []TestSuite","Funname":"SuitesInDir","Returntype":"[]TestSuite","Args":"dir string, recurse bool"},{"Uniquefunname":"func filesHaveGinkgoSuite(dir string, files []os.FileInfo) bool","Funname":"filesHaveGinkgoSuite","Returntype":"bool","Args":"dir string, files []os.FileInfo"},{"Uniquefunname":"func packageNameForSuite(dir string) string","Funname":"packageNameForSuite","Returntype":"string","Args":"dir string"},{"Uniquefunname":"func relPath(dir string) string","Funname":"relPath","Returntype":"string","Args":"dir string"},{"Uniquefunname":"func New(dir string, files []os.FileInfo) TestSuite","Funname":"testsuite.New","Returntype":"TestSuite","Args":"dir string, files []os.FileInfo"},{"Uniquefunname":"func PrecompiledTestSuite(path string) (TestSuite, error)","Funname":"testsuite.PrecompiledTestSuite","Returntype":"(TestSuite, error)","Args":"path string"},{"Uniquefunname":"func SuitesInDir(dir string, recurse bool) []TestSuite","Funname":"testsuite.SuitesInDir","Returntype":"[]TestSuite","Args":"dir string, recurse bool"},{"Uniquefunname":"func filesHaveGinkgoSuite(dir string, files []os.FileInfo) bool","Funname":"testsuite.filesHaveGinkgoSuite","Returntype":"bool","Args":"dir string, files []os.FileInfo"},{"Uniquefunname":"func packageNameForSuite(dir string) string","Funname":"testsuite.packageNameForSuite","Returntype":"string","Args":"dir string"},{"Uniquefunname":"func relPath(dir string) string","Funname":"testsuite.relPath","Returntype":"string","Args":"dir string"}],"Records":[{"Name":"struct:testsuite.TestSuite","Fields":["testsuite.TestSuite.IsGinkgo bool","testsuite.TestSuite.PackageName string","testsuite.TestSuite.Path string","testsuite.TestSuite.Precompiled bool"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/ginkgo/testsuite/testsuite_suite_test.go","Functions":[{"Uniquefunname":"func TestTestsuite(t *testing.T)","Funname":"TestTestsuite","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTestsuite(t *testing.T)","Funname":"testsuite_test.TestTestsuite","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/ginkgo/testsuite/testsuite_test.go","Functions":null,"Records":[{"Name":"var:testsuite_test","Fields":["testsuite_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/ginkgo/testsuite/vendor_check_go15.go","Functions":[{"Uniquefunname":"func vendorExperimentCheck(dir string) bool","Funname":"testsuite.vendorExperimentCheck","Returntype":"bool","Args":"dir string"},{"Uniquefunname":"func vendorExperimentCheck(dir string) bool","Funname":"vendorExperimentCheck","Returntype":"bool","Args":"dir string"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/ginkgo/testsuite/vendor_check_go15_test.go","Functions":null,"Records":[{"Name":"var:testsuite_test","Fields":["testsuite_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/ginkgo/testsuite/vendor_check_go16.go","Functions":[{"Uniquefunname":"func vendorExperimentCheck(dir string) bool","Funname":"testsuite.vendorExperimentCheck","Returntype":"bool","Args":"dir string"},{"Uniquefunname":"func vendorExperimentCheck(dir string) bool","Funname":"vendorExperimentCheck","Returntype":"bool","Args":"dir string"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/ginkgo/watch/delta.go","Functions":[{"Uniquefunname":"func Len()int","Funname":"Len","Returntype":"int","Args":""},{"Uniquefunname":"func Less(i, j int)bool","Funname":"Less","Returntype":"bool","Args":"i, j int"},{"Uniquefunname":"func (d Delta) ModifiedSuites() []*Suite","Funname":"ModifiedSuites","Returntype":"[]*Suite","Args":""},{"Uniquefunname":"func Swap(i, j int)","Funname":"Swap","Returntype":"","Args":"i, j int"},{"Uniquefunname":"func (d Delta) ModifiedSuites() []*Suite","Funname":"watch.Delta.ModifiedSuites","Returntype":"[]*Suite","Args":""},{"Uniquefunname":"func watch.DescendingByDelta.Len()int","Funname":"watch.DescendingByDelta.Len","Returntype":"int","Args":""},{"Uniquefunname":"func watch.DescendingByDelta.Less(i, j int)bool","Funname":"watch.DescendingByDelta.Less","Returntype":"bool","Args":"i, j int"},{"Uniquefunname":"func watch.DescendingByDelta.Swap(i, j int)","Funname":"watch.DescendingByDelta.Swap","Returntype":"","Args":"i, j int"}],"Records":[{"Name":"struct:watch.Delta","Fields":["watch.Delta.ModifiedPackages []string","watch.Delta.NewSuites []*Suite","watch.Delta.RemovedSuites []*Suite","watch.Delta.modifiedSuites []*Suite"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/ginkgo/watch/delta_tracker.go","Functions":[{"Uniquefunname":"func (d *DeltaTracker) Delta(suites []testsuite.TestSuite) (delta Delta, errors SuiteErrors)","Funname":"Delta","Returntype":"(delta Delta, errors SuiteErrors)","Args":"suites []testsuite.TestSuite"},{"Uniquefunname":"func NewDeltaTracker(maxDepth int, watchRegExp *regexp.Regexp) *DeltaTracker","Funname":"NewDeltaTracker","Returntype":"*DeltaTracker","Args":"maxDepth int, watchRegExp *regexp.Regexp"},{"Uniquefunname":"func (d *DeltaTracker) WillRun(suite testsuite.TestSuite) error","Funname":"WillRun","Returntype":"error","Args":"suite testsuite.TestSuite"},{"Uniquefunname":"func (d *DeltaTracker) Delta(suites []testsuite.TestSuite) (delta Delta, errors SuiteErrors)","Funname":"watch.DeltaTracker.Delta","Returntype":"(delta Delta, errors SuiteErrors)","Args":"suites []testsuite.TestSuite"},{"Uniquefunname":"func (d *DeltaTracker) WillRun(suite testsuite.TestSuite) error","Funname":"watch.DeltaTracker.WillRun","Returntype":"error","Args":"suite testsuite.TestSuite"},{"Uniquefunname":"func NewDeltaTracker(maxDepth int, watchRegExp *regexp.Regexp) *DeltaTracker","Funname":"watch.NewDeltaTracker","Returntype":"*DeltaTracker","Args":"maxDepth int, watchRegExp *regexp.Regexp"}],"Records":[{"Name":"struct:watch.DeltaTracker","Fields":["watch.DeltaTracker.maxDepth int","watch.DeltaTracker.packageHashes *PackageHashes","watch.DeltaTracker.suites map[string]*Suite","watch.DeltaTracker.watchRegExp *regexp.Regexp"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/ginkgo/watch/dependencies.go","Functions":[{"Uniquefunname":"func (d Dependencies) Dependencies() map[string]int","Funname":"Dependencies","Returntype":"map[string]int","Args":""},{"Uniquefunname":"func NewDependencies(path string, maxDepth int) (Dependencies, error)","Funname":"NewDependencies","Returntype":"(Dependencies, error)","Args":"path string, maxDepth int"},{"Uniquefunname":"func (d Dependencies) addDepIfNotPresent(dep string, depth int)","Funname":"addDepIfNotPresent","Returntype":"","Args":"dep string, depth int"},{"Uniquefunname":"func (d Dependencies) addDepsForDep(dep string, depth int)","Funname":"addDepsForDep","Returntype":"","Args":"dep string, depth int"},{"Uniquefunname":"func (d Dependencies) addDepsForDepth(depth int)","Funname":"addDepsForDepth","Returntype":"","Args":"depth int"},{"Uniquefunname":"func (d Dependencies) resolveAndAdd(deps []string, depth int)","Funname":"resolveAndAdd","Returntype":"","Args":"deps []string, depth int"},{"Uniquefunname":"func (d Dependencies) seedWithDepsForPackageAtPath(path string) error","Funname":"seedWithDepsForPackageAtPath","Returntype":"error","Args":"path string"},{"Uniquefunname":"func (d Dependencies) Dependencies() map[string]int","Funname":"watch.Dependencies.Dependencies","Returntype":"map[string]int","Args":""},{"Uniquefunname":"func (d Dependencies) addDepIfNotPresent(dep string, depth int)","Funname":"watch.Dependencies.addDepIfNotPresent","Returntype":"","Args":"dep string, depth int"},{"Uniquefunname":"func (d Dependencies) addDepsForDep(dep string, depth int)","Funname":"watch.Dependencies.addDepsForDep","Returntype":"","Args":"dep string, depth int"},{"Uniquefunname":"func (d Dependencies) addDepsForDepth(depth int)","Funname":"watch.Dependencies.addDepsForDepth","Returntype":"","Args":"depth int"},{"Uniquefunname":"func (d Dependencies) resolveAndAdd(deps []string, depth int)","Funname":"watch.Dependencies.resolveAndAdd","Returntype":"","Args":"deps []string, depth int"},{"Uniquefunname":"func (d Dependencies) seedWithDepsForPackageAtPath(path string) error","Funname":"watch.Dependencies.seedWithDepsForPackageAtPath","Returntype":"error","Args":"path string"},{"Uniquefunname":"func NewDependencies(path string, maxDepth int) (Dependencies, error)","Funname":"watch.NewDependencies","Returntype":"(Dependencies, error)","Args":"path string, maxDepth int"}],"Records":[{"Name":"struct:watch.Dependencies","Fields":["watch.Dependencies.deps map[string]int"]},{"Name":"var:watch","Fields":["watch.ginkgoAndGomegaFilter"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/ginkgo/watch/package_hash.go","Functions":[{"Uniquefunname":"func (p *PackageHash) CheckForChanges() bool","Funname":"CheckForChanges","Returntype":"bool","Args":""},{"Uniquefunname":"func NewPackageHash(path string, watchRegExp *regexp.Regexp) *PackageHash","Funname":"NewPackageHash","Returntype":"*PackageHash","Args":"path string, watchRegExp *regexp.Regexp"},{"Uniquefunname":"func computeHashes()(codeHash string, codeModifiedTime time.Time, testHash string, testModifiedTime time.Time, deleted bool)","Funname":"computeHashes","Returntype":"(codeHash string, codeModifiedTime time.Time, testHash string, testModifiedTime time.Time, deleted bool)","Args":""},{"Uniquefunname":"func (p *PackageHash) hashForFileInfo(info os.FileInfo) string","Funname":"hashForFileInfo","Returntype":"string","Args":"info os.FileInfo"},{"Uniquefunname":"func NewPackageHash(path string, watchRegExp *regexp.Regexp) *PackageHash","Funname":"watch.NewPackageHash","Returntype":"*PackageHash","Args":"path string, watchRegExp *regexp.Regexp"},{"Uniquefunname":"func (p *PackageHash) CheckForChanges() bool","Funname":"watch.PackageHash.CheckForChanges","Returntype":"bool","Args":""},{"Uniquefunname":"func watch.PackageHash.computeHashes()(codeHash string, codeModifiedTime time.Time, testHash string, testModifiedTime time.Time, deleted bool)","Funname":"watch.PackageHash.computeHashes","Returntype":"(codeHash string, codeModifiedTime time.Time, testHash string, testModifiedTime time.Time, deleted bool)","Args":""},{"Uniquefunname":"func (p *PackageHash) hashForFileInfo(info os.FileInfo) string","Funname":"watch.PackageHash.hashForFileInfo","Returntype":"string","Args":"info os.FileInfo"}],"Records":[{"Name":"struct:watch.PackageHash","Fields":["watch.PackageHash.CodeModifiedTime time.Time","watch.PackageHash.Deleted bool","watch.PackageHash.TestModifiedTime time.Time","watch.PackageHash.codeHash string","watch.PackageHash.path string","watch.PackageHash.testHash string","watch.PackageHash.watchRegExp *regexp.Regexp"]},{"Name":"var:watch","Fields":["watch.goTestRegExp"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/ginkgo/watch/package_hashes.go","Functions":[{"Uniquefunname":"func (p *PackageHashes) Add(path string) *PackageHash","Funname":"Add","Returntype":"*PackageHash","Args":"path string"},{"Uniquefunname":"func (p *PackageHashes) CheckForChanges() []string","Funname":"CheckForChanges","Returntype":"[]string","Args":""},{"Uniquefunname":"func (p *PackageHashes) Get(path string) *PackageHash","Funname":"Get","Returntype":"*PackageHash","Args":"path string"},{"Uniquefunname":"func NewPackageHashes(watchRegExp *regexp.Regexp) *PackageHashes","Funname":"NewPackageHashes","Returntype":"*PackageHashes","Args":"watchRegExp *regexp.Regexp"},{"Uniquefunname":"func (p *PackageHashes) StartTrackingUsage()","Funname":"StartTrackingUsage","Returntype":"","Args":""},{"Uniquefunname":"func (p *PackageHashes) StopTrackingUsageAndPrune()","Funname":"StopTrackingUsageAndPrune","Returntype":"","Args":""},{"Uniquefunname":"func NewPackageHashes(watchRegExp *regexp.Regexp) *PackageHashes","Funname":"watch.NewPackageHashes","Returntype":"*PackageHashes","Args":"watchRegExp *regexp.Regexp"},{"Uniquefunname":"func (p *PackageHashes) Add(path string) *PackageHash","Funname":"watch.PackageHashes.Add","Returntype":"*PackageHash","Args":"path string"},{"Uniquefunname":"func (p *PackageHashes) CheckForChanges() []string","Funname":"watch.PackageHashes.CheckForChanges","Returntype":"[]string","Args":""},{"Uniquefunname":"func (p *PackageHashes) Get(path string) *PackageHash","Funname":"watch.PackageHashes.Get","Returntype":"*PackageHash","Args":"path string"},{"Uniquefunname":"func (p *PackageHashes) StartTrackingUsage()","Funname":"watch.PackageHashes.StartTrackingUsage","Returntype":"","Args":""},{"Uniquefunname":"func (p *PackageHashes) StopTrackingUsageAndPrune()","Funname":"watch.PackageHashes.StopTrackingUsageAndPrune","Returntype":"","Args":""}],"Records":[{"Name":"struct:watch.PackageHashes","Fields":["watch.PackageHashes.PackageHashes map[string]*PackageHash","watch.PackageHashes.lock *sync.Mutex","watch.PackageHashes.usedPaths map[string]bool","watch.PackageHashes.watchRegExp *regexp.Regexp"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/ginkgo/watch/suite.go","Functions":[{"Uniquefunname":"func (s *Suite) Delta() float64","Funname":"Delta","Returntype":"float64","Args":""},{"Uniquefunname":"func (s *Suite) Description() string","Funname":"Description","Returntype":"string","Args":""},{"Uniquefunname":"func (s *Suite) MarkAsRunAndRecomputedDependencies(maxDepth int) error","Funname":"MarkAsRunAndRecomputedDependencies","Returntype":"error","Args":"maxDepth int"},{"Uniquefunname":"func NewSuite(suite testsuite.TestSuite, maxDepth int, sharedPackageHashes *PackageHashes)(*Suite, error)","Funname":"NewSuite","Returntype":"(*Suite, error)","Args":"suite testsuite.TestSuite, maxDepth int, sharedPackageHashes *PackageHashes"},{"Uniquefunname":"func (s *Suite) delta(packagePath string, includeTests bool, depth int) float64","Funname":"delta","Returntype":"float64","Args":"packagePath string, includeTests bool, depth int"},{"Uniquefunname":"func (s *Suite) dt(packagePath string, includeTests bool) time.Duration","Funname":"dt","Returntype":"time.Duration","Args":"packagePath string, includeTests bool"},{"Uniquefunname":"func watch.NewSuite(suite testsuite.TestSuite, maxDepth int, sharedPackageHashes *PackageHashes)(*Suite, error)","Funname":"watch.NewSuite","Returntype":"(*Suite, error)","Args":"suite testsuite.TestSuite, maxDepth int, sharedPackageHashes *PackageHashes"},{"Uniquefunname":"func (s *Suite) Delta() float64","Funname":"watch.Suite.Delta","Returntype":"float64","Args":""},{"Uniquefunname":"func (s *Suite) Description() string","Funname":"watch.Suite.Description","Returntype":"string","Args":""},{"Uniquefunname":"func (s *Suite) MarkAsRunAndRecomputedDependencies(maxDepth int) error","Funname":"watch.Suite.MarkAsRunAndRecomputedDependencies","Returntype":"error","Args":"maxDepth int"},{"Uniquefunname":"func (s *Suite) delta(packagePath string, includeTests bool, depth int) float64","Funname":"watch.Suite.delta","Returntype":"float64","Args":"packagePath string, includeTests bool, depth int"},{"Uniquefunname":"func (s *Suite) dt(packagePath string, includeTests bool) time.Duration","Funname":"watch.Suite.dt","Returntype":"time.Duration","Args":"packagePath string, includeTests bool"}],"Records":[{"Name":"struct:watch.Suite","Fields":["watch.Suite.Dependencies Dependencies","watch.Suite.RunTime time.Time","watch.Suite.Suite testsuite.TestSuite","watch.Suite.sharedPackageHashes *PackageHashes"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/convert_test.go","Functions":null,"Records":[{"Name":"var:integration_test","Fields":["integration_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/coverage_test.go","Functions":null,"Records":[{"Name":"var:integration_test","Fields":["integration_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/fail_test.go","Functions":null,"Records":[{"Name":"var:integration_test","Fields":["integration_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/flags_test.go","Functions":null,"Records":[{"Name":"var:integration_test","Fields":["integration_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/integration_suite_test.go","Functions":[{"Uniquefunname":"func TestIntegration(t *testing.T)","Funname":"TestIntegration","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func copyIn(sourcePath, destinationPath string, recursive bool)","Funname":"copyIn","Returntype":"","Args":"sourcePath, destinationPath string, recursive bool"},{"Uniquefunname":"func fixturePath(name string) string","Funname":"fixturePath","Returntype":"string","Args":"name string"},{"Uniquefunname":"func ginkgoCommand(dir string, args ...string) *exec.Cmd","Funname":"ginkgoCommand","Returntype":"*exec.Cmd","Args":"dir string, args ...string"},{"Uniquefunname":"func TestIntegration(t *testing.T)","Funname":"integration_test.TestIntegration","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func copyIn(sourcePath, destinationPath string, recursive bool)","Funname":"integration_test.copyIn","Returntype":"","Args":"sourcePath, destinationPath string, recursive bool"},{"Uniquefunname":"func fixturePath(name string) string","Funname":"integration_test.fixturePath","Returntype":"string","Args":"name string"},{"Uniquefunname":"func ginkgoCommand(dir string, args ...string) *exec.Cmd","Funname":"integration_test.ginkgoCommand","Returntype":"*exec.Cmd","Args":"dir string, args ...string"},{"Uniquefunname":"func removeSuccessfully(path string)","Funname":"integration_test.removeSuccessfully","Returntype":"","Args":"path string"},{"Uniquefunname":"func sameFile(filePath, otherFilePath string) bool","Funname":"integration_test.sameFile","Returntype":"bool","Args":"filePath, otherFilePath string"},{"Uniquefunname":"func sameFolder(sourcePath, destinationPath string) bool","Funname":"integration_test.sameFolder","Returntype":"bool","Args":"sourcePath, destinationPath string"},{"Uniquefunname":"func startGinkgo(dir string, args ...string) *gexec.Session","Funname":"integration_test.startGinkgo","Returntype":"*gexec.Session","Args":"dir string, args ...string"},{"Uniquefunname":"func tmpPath(destination string) string","Funname":"integration_test.tmpPath","Returntype":"string","Args":"destination string"},{"Uniquefunname":"func removeSuccessfully(path string)","Funname":"removeSuccessfully","Returntype":"","Args":"path string"},{"Uniquefunname":"func sameFile(filePath, otherFilePath string) bool","Funname":"sameFile","Returntype":"bool","Args":"filePath, otherFilePath string"},{"Uniquefunname":"func sameFolder(sourcePath, destinationPath string) bool","Funname":"sameFolder","Returntype":"bool","Args":"sourcePath, destinationPath string"},{"Uniquefunname":"func startGinkgo(dir string, args ...string) *gexec.Session","Funname":"startGinkgo","Returntype":"*gexec.Session","Args":"dir string, args ...string"},{"Uniquefunname":"func tmpPath(destination string) string","Funname":"tmpPath","Returntype":"string","Args":"destination string"}],"Records":[{"Name":"var:integration_test","Fields":["integration_test._","integration_test._","integration_test._","integration_test._","integration_test.pathToGinkgo","integration_test.tmpDir"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/interrupt_test.go","Functions":null,"Records":[{"Name":"var:integration_test","Fields":["integration_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/precompiled_test.go","Functions":null,"Records":[{"Name":"var:integration_test","Fields":["integration_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/progress_test.go","Functions":null,"Records":[{"Name":"var:integration_test","Fields":["integration_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/run_test.go","Functions":null,"Records":[{"Name":"var:integration_test","Fields":["integration_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/skip_test.go","Functions":null,"Records":[{"Name":"var:integration_test","Fields":["integration_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/subcommand_test.go","Functions":null,"Records":[{"Name":"var:integration_test","Fields":["integration_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/suite_command_test.go","Functions":null,"Records":[{"Name":"var:integration_test","Fields":["integration_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/suite_setup_test.go","Functions":null,"Records":[{"Name":"var:integration_test","Fields":["integration_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/tags_test.go","Functions":null,"Records":[{"Name":"var:integration_test","Fields":["integration_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/test_description_test.go","Functions":null,"Records":[{"Name":"var:integration_test","Fields":["integration_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/verbose_and_succinct_test.go","Functions":null,"Records":[{"Name":"var:integration_test","Fields":["integration_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/watch_test.go","Functions":null,"Records":[{"Name":"var:integration_test","Fields":["integration_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/combined_coverage_fixture/first_package/coverage.go","Functions":[{"Uniquefunname":"func A() string","Funname":"A","Returntype":"string","Args":""},{"Uniquefunname":"func B() string","Funname":"B","Returntype":"string","Args":""},{"Uniquefunname":"func C() string","Funname":"C","Returntype":"string","Args":""},{"Uniquefunname":"func D() string","Funname":"D","Returntype":"string","Args":""},{"Uniquefunname":"func E() string","Funname":"E","Returntype":"string","Args":""},{"Uniquefunname":"func A() string","Funname":"first_package.A","Returntype":"string","Args":""},{"Uniquefunname":"func B() string","Funname":"first_package.B","Returntype":"string","Args":""},{"Uniquefunname":"func C() string","Funname":"first_package.C","Returntype":"string","Args":""},{"Uniquefunname":"func D() string","Funname":"first_package.D","Returntype":"string","Args":""},{"Uniquefunname":"func E() string","Funname":"first_package.E","Returntype":"string","Args":""}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/combined_coverage_fixture/first_package/coverage_fixture_suite_test.go","Functions":[{"Uniquefunname":"func TestCoverageFixture(t *testing.T)","Funname":"TestCoverageFixture","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestCoverageFixture(t *testing.T)","Funname":"first_package_test.TestCoverageFixture","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/combined_coverage_fixture/first_package/coverage_fixture_test.go","Functions":null,"Records":[{"Name":"var:first_package_test","Fields":["first_package_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/combined_coverage_fixture/first_package/external_coverage_fixture/external_coverage.go","Functions":[{"Uniquefunname":"func Tested() string","Funname":"Tested","Returntype":"string","Args":""},{"Uniquefunname":"func Untested() string","Funname":"Untested","Returntype":"string","Args":""},{"Uniquefunname":"func Tested() string","Funname":"external_coverage.Tested","Returntype":"string","Args":""},{"Uniquefunname":"func Untested() string","Funname":"external_coverage.Untested","Returntype":"string","Args":""}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/combined_coverage_fixture/second_package/coverage.go","Functions":[{"Uniquefunname":"func A() string","Funname":"A","Returntype":"string","Args":""},{"Uniquefunname":"func B() string","Funname":"B","Returntype":"string","Args":""},{"Uniquefunname":"func C() string","Funname":"C","Returntype":"string","Args":""},{"Uniquefunname":"func D() string","Funname":"D","Returntype":"string","Args":""},{"Uniquefunname":"func E() string","Funname":"E","Returntype":"string","Args":""},{"Uniquefunname":"func A() string","Funname":"second_package.A","Returntype":"string","Args":""},{"Uniquefunname":"func B() string","Funname":"second_package.B","Returntype":"string","Args":""},{"Uniquefunname":"func C() string","Funname":"second_package.C","Returntype":"string","Args":""},{"Uniquefunname":"func D() string","Funname":"second_package.D","Returntype":"string","Args":""},{"Uniquefunname":"func E() string","Funname":"second_package.E","Returntype":"string","Args":""}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/combined_coverage_fixture/second_package/coverage_fixture_suite_test.go","Functions":[{"Uniquefunname":"func TestCoverageFixture(t *testing.T)","Funname":"TestCoverageFixture","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestCoverageFixture(t *testing.T)","Funname":"second_package_test.TestCoverageFixture","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/combined_coverage_fixture/second_package/coverage_fixture_test.go","Functions":null,"Records":[{"Name":"var:second_package_test","Fields":["second_package_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/convert_fixtures/extra_functions_test.go","Functions":[{"Uniquefunname":"func TestSomethingLessImportant(t *testing.T)","Funname":"TestSomethingLessImportant","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func somethingImportant(t *testing.T, message *string)","Funname":"somethingImportant","Returntype":"","Args":"t *testing.T, message *string"},{"Uniquefunname":"func TestSomethingLessImportant(t *testing.T)","Funname":"tmp.TestSomethingLessImportant","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func somethingImportant(t *testing.T, message *string)","Funname":"tmp.somethingImportant","Returntype":"","Args":"t *testing.T, message *string"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/convert_fixtures/outside_package_test.go","Functions":[{"Uniquefunname":"func TestSomethingImportant(t *testing.T)","Funname":"TestSomethingImportant","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestSomethingImportant(t *testing.T)","Funname":"tmp_test.TestSomethingImportant","Returntype":"","Args":"t *testing.T"}],"Records":[{"Name":"struct:tmp_test.UselessStruct","Fields":["tmp_test.UselessStruct.ImportantField string"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/convert_fixtures/xunit_test.go","Functions":[{"Uniquefunname":"func Test3Things(t *testing.T)","Funname":"Test3Things","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestSomethingImportant(t *testing.T)","Funname":"TestSomethingImportant","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func assertEqual(t *testing.T, arg1, arg2 interface","Funname":"assertEqual","Returntype":"","Args":"t *testing.T, arg1, arg2 interface{}"},{"Uniquefunname":"func Test3Things(t *testing.T)","Funname":"tmp.Test3Things","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestSomethingImportant(t *testing.T)","Funname":"tmp.TestSomethingImportant","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func assertEqual(t *testing.T, arg1, arg2 interface","Funname":"tmp.assertEqual","Returntype":"","Args":"t *testing.T, arg1, arg2 interface{}"}],"Records":[{"Name":"struct:tmp.UselessStruct","Fields":["tmp.UselessStruct.ImportantField string","tmp.UselessStruct.T *testing.T"]},{"Name":"var:tmp","Fields":["tmp.testFunc"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/convert_fixtures/nested/nested_test.go","Functions":[{"Uniquefunname":"func TestSomethingLessImportant(t *testing.T)","Funname":"TestSomethingLessImportant","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestSomethingLessImportant(t *testing.T)","Funname":"nested.TestSomethingLessImportant","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/convert_fixtures/nested_without_gofiles/subpackage/nested_subpackage_test.go","Functions":[{"Uniquefunname":"func TestNestedSubPackages(t *testing.T)","Funname":"TestNestedSubPackages","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestNestedSubPackages(t *testing.T)","Funname":"subpackage.TestNestedSubPackages","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/convert_goldmasters/extra_functions_test.go","Functions":[{"Uniquefunname":"func somethingImportant(t GinkgoTInterface, message *string)","Funname":"somethingImportant","Returntype":"","Args":"t GinkgoTInterface, message *string"},{"Uniquefunname":"func somethingImportant(t GinkgoTInterface, message *string)","Funname":"tmp.somethingImportant","Returntype":"","Args":"t GinkgoTInterface, message *string"}],"Records":[{"Name":"var:tmp","Fields":["tmp._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/convert_goldmasters/fixtures_suite_test.go","Functions":[{"Uniquefunname":"func TestTmp(t *testing.T)","Funname":"TestTmp","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTmp(t *testing.T)","Funname":"tmp.TestTmp","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/convert_goldmasters/nested_subpackage_test.go","Functions":null,"Records":[{"Name":"var:subpackage","Fields":["subpackage._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/convert_goldmasters/nested_suite_test.go","Functions":[{"Uniquefunname":"func TestNested(t *testing.T)","Funname":"TestNested","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestNested(t *testing.T)","Funname":"nested_test.TestNested","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/convert_goldmasters/nested_test.go","Functions":null,"Records":[{"Name":"var:nested","Fields":["nested._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/convert_goldmasters/outside_package_test.go","Functions":null,"Records":[{"Name":"struct:tmp_test.UselessStruct","Fields":["tmp_test.UselessStruct.ImportantField string"]},{"Name":"var:tmp_test","Fields":["tmp_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/convert_goldmasters/suite_test.go","Functions":[{"Uniquefunname":"func TestConvertFixtures(t *testing.T)","Funname":"TestConvertFixtures","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestConvertFixtures(t *testing.T)","Funname":"tmp_test.TestConvertFixtures","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/convert_goldmasters/xunit_test.go","Functions":[{"Uniquefunname":"func assertEqual(t GinkgoTInterface, arg1, arg2 interface","Funname":"assertEqual","Returntype":"","Args":"t GinkgoTInterface, arg1, arg2 interface{}"},{"Uniquefunname":"func assertEqual(t GinkgoTInterface, arg1, arg2 interface","Funname":"tmp.assertEqual","Returntype":"","Args":"t GinkgoTInterface, arg1, arg2 interface{}"}],"Records":[{"Name":"struct:tmp.UselessStruct","Fields":["tmp.UselessStruct.ImportantField string","tmp.UselessStruct.T GinkgoTInterface"]},{"Name":"var:tmp","Fields":["tmp._","tmp.testFunc"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/coverage_fixture/coverage.go","Functions":[{"Uniquefunname":"func A() string","Funname":"A","Returntype":"string","Args":""},{"Uniquefunname":"func B() string","Funname":"B","Returntype":"string","Args":""},{"Uniquefunname":"func C() string","Funname":"C","Returntype":"string","Args":""},{"Uniquefunname":"func D() string","Funname":"D","Returntype":"string","Args":""},{"Uniquefunname":"func E() string","Funname":"E","Returntype":"string","Args":""},{"Uniquefunname":"func A() string","Funname":"coverage_fixture.A","Returntype":"string","Args":""},{"Uniquefunname":"func B() string","Funname":"coverage_fixture.B","Returntype":"string","Args":""},{"Uniquefunname":"func C() string","Funname":"coverage_fixture.C","Returntype":"string","Args":""},{"Uniquefunname":"func D() string","Funname":"coverage_fixture.D","Returntype":"string","Args":""},{"Uniquefunname":"func E() string","Funname":"coverage_fixture.E","Returntype":"string","Args":""}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/coverage_fixture/coverage_fixture_suite_test.go","Functions":[{"Uniquefunname":"func TestCoverageFixture(t *testing.T)","Funname":"TestCoverageFixture","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestCoverageFixture(t *testing.T)","Funname":"coverage_fixture_test.TestCoverageFixture","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/coverage_fixture/coverage_fixture_test.go","Functions":null,"Records":[{"Name":"var:coverage_fixture_test","Fields":["coverage_fixture_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/coverage_fixture/external_coverage_fixture/external_coverage.go","Functions":[{"Uniquefunname":"func Tested() string","Funname":"Tested","Returntype":"string","Args":""},{"Uniquefunname":"func Untested() string","Funname":"Untested","Returntype":"string","Args":""},{"Uniquefunname":"func Tested() string","Funname":"external_coverage.Tested","Returntype":"string","Args":""},{"Uniquefunname":"func Untested() string","Funname":"external_coverage.Untested","Returntype":"string","Args":""}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/debug_parallel_fixture/debug_parallel_fixture_suite_test.go","Functions":[{"Uniquefunname":"func TestDebugParallelFixture(t *testing.T)","Funname":"TestDebugParallelFixture","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestDebugParallelFixture(t *testing.T)","Funname":"debug_parallel_fixture_test.TestDebugParallelFixture","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/debug_parallel_fixture/debug_parallel_fixture_test.go","Functions":null,"Records":[{"Name":"var:debug_parallel_fixture_test","Fields":["debug_parallel_fixture_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/does_not_compile/does_not_compile_suite_test.go","Functions":[{"Uniquefunname":"func TestDoes_not_compile(t *testing.T)","Funname":"TestDoes_not_compile","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestDoes_not_compile(t *testing.T)","Funname":"does_not_compile_test.TestDoes_not_compile","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/does_not_compile/does_not_compile_test.go","Functions":null,"Records":[{"Name":"var:does_not_compile_test","Fields":["does_not_compile_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/eventually_failing/eventually_failing_suite_test.go","Functions":[{"Uniquefunname":"func TestEventuallyFailing(t *testing.T)","Funname":"TestEventuallyFailing","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestEventuallyFailing(t *testing.T)","Funname":"eventually_failing_test.TestEventuallyFailing","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/eventually_failing/eventually_failing_test.go","Functions":null,"Records":[{"Name":"var:eventually_failing_test","Fields":["eventually_failing_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/exiting_synchronized_setup_tests/exiting_synchronized_setup_tests_suite_test.go","Functions":[{"Uniquefunname":"func TestSynchronized_setup_tests(t *testing.T)","Funname":"TestSynchronized_setup_tests","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestSynchronized_setup_tests(t *testing.T)","Funname":"synchronized_setup_tests_test.TestSynchronized_setup_tests","Returntype":"","Args":"t *testing.T"}],"Records":[{"Name":"var:synchronized_setup_tests_test","Fields":["synchronized_setup_tests_test._","synchronized_setup_tests_test._","synchronized_setup_tests_test.beforeData"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/fail_fixture/fail_fixture_suite_test.go","Functions":[{"Uniquefunname":"func TestFail_fixture(t *testing.T)","Funname":"TestFail_fixture","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestFail_fixture(t *testing.T)","Funname":"fail_fixture_test.TestFail_fixture","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/fail_fixture/fail_fixture_test.go","Functions":null,"Records":[{"Name":"var:fail_fixture_test","Fields":["fail_fixture_test._","fail_fixture_test._","fail_fixture_test._","fail_fixture_test._","fail_fixture_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/failing_after_suite/failing_after_suite_suite_test.go","Functions":[{"Uniquefunname":"func TestFailingAfterSuite(t *testing.T)","Funname":"TestFailingAfterSuite","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestFailingAfterSuite(t *testing.T)","Funname":"failing_before_suite_test.TestFailingAfterSuite","Returntype":"","Args":"t *testing.T"}],"Records":[{"Name":"var:failing_before_suite_test","Fields":["failing_before_suite_test._","failing_before_suite_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/failing_after_suite/failing_after_suite_test.go","Functions":null,"Records":[{"Name":"var:failing_before_suite_test","Fields":["failing_before_suite_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/failing_before_suite/failing_before_suite_suite_test.go","Functions":[{"Uniquefunname":"func TestFailing_before_suite(t *testing.T)","Funname":"TestFailing_before_suite","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestFailing_before_suite(t *testing.T)","Funname":"failing_before_suite_test.TestFailing_before_suite","Returntype":"","Args":"t *testing.T"}],"Records":[{"Name":"var:failing_before_suite_test","Fields":["failing_before_suite_test._","failing_before_suite_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/failing_before_suite/failing_before_suite_test.go","Functions":null,"Records":[{"Name":"var:failing_before_suite_test","Fields":["failing_before_suite_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/failing_ginkgo_tests/failing_ginkgo_tests.go","Functions":[{"Uniquefunname":"func AlwaysFalse() bool","Funname":"AlwaysFalse","Returntype":"bool","Args":""},{"Uniquefunname":"func AlwaysFalse() bool","Funname":"failing_ginkgo_tests.AlwaysFalse","Returntype":"bool","Args":""}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/failing_ginkgo_tests/failing_ginkgo_tests_suite_test.go","Functions":[{"Uniquefunname":"func TestFailing_ginkgo_tests(t *testing.T)","Funname":"TestFailing_ginkgo_tests","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestFailing_ginkgo_tests(t *testing.T)","Funname":"failing_ginkgo_tests_test.TestFailing_ginkgo_tests","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/failing_ginkgo_tests/failing_ginkgo_tests_test.go","Functions":null,"Records":[{"Name":"var:failing_ginkgo_tests_test","Fields":["failing_ginkgo_tests_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/flags_tests/flags.go","Functions":[{"Uniquefunname":"func Tested() string","Funname":"Tested","Returntype":"string","Args":""},{"Uniquefunname":"func Untested() string","Funname":"Untested","Returntype":"string","Args":""},{"Uniquefunname":"func Tested() string","Funname":"flags.Tested","Returntype":"string","Args":""},{"Uniquefunname":"func Untested() string","Funname":"flags.Untested","Returntype":"string","Args":""}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/flags_tests/flags_suite_test.go","Functions":[{"Uniquefunname":"func TestFlags(t *testing.T)","Funname":"TestFlags","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestFlags(t *testing.T)","Funname":"flags_test.TestFlags","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/flags_tests/flags_test.go","Functions":[{"Uniquefunname":"func init()","Funname":"flags_test.init","Returntype":"","Args":""},{"Uniquefunname":"func init()","Funname":"init","Returntype":"","Args":""}],"Records":[{"Name":"var:flags_test","Fields":["flags_test._","flags_test.customFlag"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/focused_fixture/focused_fixture_suite_test.go","Functions":[{"Uniquefunname":"func TestFocused_fixture(t *testing.T)","Funname":"TestFocused_fixture","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestFocused_fixture(t *testing.T)","Funname":"focused_fixture_test.TestFocused_fixture","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/focused_fixture/focused_fixture_test.go","Functions":null,"Records":[{"Name":"var:focused_fixture_test","Fields":["focused_fixture_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/focused_fixture_with_vendor/focused_fixture_suite_test.go","Functions":[{"Uniquefunname":"func TestFocused_fixture(t *testing.T)","Funname":"TestFocused_fixture","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestFocused_fixture(t *testing.T)","Funname":"focused_fixture_test.TestFocused_fixture","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/focused_fixture_with_vendor/focused_fixture_test.go","Functions":null,"Records":[{"Name":"var:focused_fixture_test","Fields":["focused_fixture_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/focused_fixture_with_vendor/vendor/vendored.go","Functions":[{"Uniquefunname":"func FDescribe() int","Funname":"FDescribe","Returntype":"int","Args":""},{"Uniquefunname":"func FDescribe() int","Funname":"vendored.FDescribe","Returntype":"int","Args":""}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/focused_fixture_with_vendor/vendor/foo/foo.go","Functions":[{"Uniquefunname":"func FIt()","Funname":"FIt","Returntype":"","Args":""},{"Uniquefunname":"func FIt()","Funname":"vendored.FIt","Returntype":"","Args":""}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/focused_fixture_with_vendor/vendor/foo/bar/bar.go","Functions":[{"Uniquefunname":"func FContext()","Funname":"FContext","Returntype":"","Args":""},{"Uniquefunname":"func FContext()","Funname":"vendored.FContext","Returntype":"","Args":""}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/hanging_suite/hanging_suite_suite_test.go","Functions":[{"Uniquefunname":"func TestHangingSuite(t *testing.T)","Funname":"TestHangingSuite","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestHangingSuite(t *testing.T)","Funname":"hanging_suite_test.TestHangingSuite","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/hanging_suite/hanging_suite_test.go","Functions":null,"Records":[{"Name":"var:hanging_suite_test","Fields":["hanging_suite_test._","hanging_suite_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/more_ginkgo_tests/more_ginkgo_tests.go","Functions":[{"Uniquefunname":"func AlwaysTrue() bool","Funname":"AlwaysTrue","Returntype":"bool","Args":""},{"Uniquefunname":"func AlwaysTrue() bool","Funname":"more_ginkgo_tests.AlwaysTrue","Returntype":"bool","Args":""}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/more_ginkgo_tests/more_ginkgo_tests_suite_test.go","Functions":[{"Uniquefunname":"func TestMore_ginkgo_tests(t *testing.T)","Funname":"TestMore_ginkgo_tests","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestMore_ginkgo_tests(t *testing.T)","Funname":"more_ginkgo_tests_test.TestMore_ginkgo_tests","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/more_ginkgo_tests/more_ginkgo_tests_test.go","Functions":null,"Records":[{"Name":"var:more_ginkgo_tests_test","Fields":["more_ginkgo_tests_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/no_test_fn/no_test_fn.go","Functions":[{"Uniquefunname":"func StringIdentity(a string) string","Funname":"StringIdentity","Returntype":"string","Args":"a string"},{"Uniquefunname":"func StringIdentity(a string) string","Funname":"no_test_fn.StringIdentity","Returntype":"string","Args":"a string"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/no_test_fn/no_test_fn_test.go","Functions":null,"Records":[{"Name":"var:no_test_fn_test","Fields":["no_test_fn_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/no_tests/no_tests.go","Functions":[{"Uniquefunname":"func main()","Funname":"main","Returntype":"","Args":""},{"Uniquefunname":"func main()","Funname":"main.main","Returntype":"","Args":""}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/passing_ginkgo_tests/passing_ginkgo_tests.go","Functions":[{"Uniquefunname":"func IntegerIdentity(a int) int","Funname":"IntegerIdentity","Returntype":"int","Args":"a int"},{"Uniquefunname":"func StringIdentity(a string) string","Funname":"StringIdentity","Returntype":"string","Args":"a string"},{"Uniquefunname":"func IntegerIdentity(a int) int","Funname":"passing_ginkgo_tests.IntegerIdentity","Returntype":"int","Args":"a int"},{"Uniquefunname":"func StringIdentity(a string) string","Funname":"passing_ginkgo_tests.StringIdentity","Returntype":"string","Args":"a string"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/passing_ginkgo_tests/passing_ginkgo_tests_suite_test.go","Functions":[{"Uniquefunname":"func TestPassing_ginkgo_tests(t *testing.T)","Funname":"TestPassing_ginkgo_tests","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestPassing_ginkgo_tests(t *testing.T)","Funname":"passing_ginkgo_tests_test.TestPassing_ginkgo_tests","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/passing_ginkgo_tests/passing_ginkgo_tests_test.go","Functions":null,"Records":[{"Name":"var:passing_ginkgo_tests_test","Fields":["passing_ginkgo_tests_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/passing_suite_setup/passing_suite_setup_suite_test.go","Functions":[{"Uniquefunname":"func TestPassingSuiteSetup(t *testing.T)","Funname":"TestPassingSuiteSetup","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestPassingSuiteSetup(t *testing.T)","Funname":"passing_before_suite_test.TestPassingSuiteSetup","Returntype":"","Args":"t *testing.T"}],"Records":[{"Name":"var:passing_before_suite_test","Fields":["passing_before_suite_test._","passing_before_suite_test._","passing_before_suite_test.a","passing_before_suite_test.b"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/passing_suite_setup/passing_suite_test.go","Functions":null,"Records":[{"Name":"var:passing_before_suite_test","Fields":["passing_before_suite_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/progress_fixture/progress_fixture_suite_test.go","Functions":[{"Uniquefunname":"func TestProgressFixture(t *testing.T)","Funname":"TestProgressFixture","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestProgressFixture(t *testing.T)","Funname":"progress_fixture_test.TestProgressFixture","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/progress_fixture/progress_fixture_test.go","Functions":null,"Records":[{"Name":"var:progress_fixture_test","Fields":["progress_fixture_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/skip_fixture/skip_fixture_suite_test.go","Functions":[{"Uniquefunname":"func TestFail_fixture(t *testing.T)","Funname":"TestFail_fixture","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestFail_fixture(t *testing.T)","Funname":"fail_fixture_test.TestFail_fixture","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/skip_fixture/skip_fixture_test.go","Functions":null,"Records":[{"Name":"var:fail_fixture_test","Fields":["fail_fixture_test._","fail_fixture_test._","fail_fixture_test._","fail_fixture_test._","fail_fixture_test._","fail_fixture_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/suite_command_tests/suite_command.go","Functions":[{"Uniquefunname":"func Tested() string","Funname":"Tested","Returntype":"string","Args":""},{"Uniquefunname":"func Untested() string","Funname":"Untested","Returntype":"string","Args":""},{"Uniquefunname":"func Tested() string","Funname":"suite_command.Tested","Returntype":"string","Args":""},{"Uniquefunname":"func Untested() string","Funname":"suite_command.Untested","Returntype":"string","Args":""}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/suite_command_tests/suite_command_suite_test.go","Functions":[{"Uniquefunname":"func TestSuiteCommand(t *testing.T)","Funname":"TestSuiteCommand","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestSuiteCommand(t *testing.T)","Funname":"suite_command_test.TestSuiteCommand","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/suite_command_tests/suite_command_test.go","Functions":null,"Records":[{"Name":"var:suite_command_test","Fields":["suite_command_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/synchronized_setup_tests/synchronized_setup_tests_suite_test.go","Functions":[{"Uniquefunname":"func TestSynchronized_setup_tests(t *testing.T)","Funname":"TestSynchronized_setup_tests","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestSynchronized_setup_tests(t *testing.T)","Funname":"synchronized_setup_tests_test.TestSynchronized_setup_tests","Returntype":"","Args":"t *testing.T"}],"Records":[{"Name":"var:synchronized_setup_tests_test","Fields":["synchronized_setup_tests_test._","synchronized_setup_tests_test._","synchronized_setup_tests_test._","synchronized_setup_tests_test.beforeData"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/tags_tests/ignored_test.go","Functions":null,"Records":[{"Name":"var:tags_tests_test","Fields":["tags_tests_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/tags_tests/tags_tests_suite_test.go","Functions":[{"Uniquefunname":"func TestTagsTests(t *testing.T)","Funname":"TestTagsTests","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTagsTests(t *testing.T)","Funname":"tags_tests_test.TestTagsTests","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/tags_tests/tags_tests_test.go","Functions":null,"Records":[{"Name":"var:tags_tests_test","Fields":["tags_tests_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/test_description/test_description_suite_test.go","Functions":[{"Uniquefunname":"func TestTestDescription(t *testing.T)","Funname":"TestTestDescription","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTestDescription(t *testing.T)","Funname":"test_description_test.TestTestDescription","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/test_description/test_description_test.go","Functions":null,"Records":[{"Name":"var:test_description_test","Fields":["test_description_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/watch_fixtures/A/A.go","Functions":[{"Uniquefunname":"func DoIt() string","Funname":"A.DoIt","Returntype":"string","Args":""},{"Uniquefunname":"func DoIt() string","Funname":"DoIt","Returntype":"string","Args":""}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/watch_fixtures/A/A_suite_test.go","Functions":[{"Uniquefunname":"func TestA(t *testing.T)","Funname":"A_test.TestA","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestA(t *testing.T)","Funname":"TestA","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/watch_fixtures/A/A_test.go","Functions":null,"Records":[{"Name":"var:A_test","Fields":["A_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/watch_fixtures/B/B.go","Functions":[{"Uniquefunname":"func DoIt() string","Funname":"B.DoIt","Returntype":"string","Args":""},{"Uniquefunname":"func DoIt() string","Funname":"DoIt","Returntype":"string","Args":""}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/watch_fixtures/B/B_suite_test.go","Functions":[{"Uniquefunname":"func TestB(t *testing.T)","Funname":"B_test.TestB","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestB(t *testing.T)","Funname":"TestB","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/watch_fixtures/B/B_test.go","Functions":null,"Records":[{"Name":"var:B_test","Fields":["B_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/watch_fixtures/C/C.go","Functions":[{"Uniquefunname":"func DoIt() string","Funname":"C.DoIt","Returntype":"string","Args":""},{"Uniquefunname":"func DoIt() string","Funname":"DoIt","Returntype":"string","Args":""}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/watch_fixtures/C/C_suite_test.go","Functions":[{"Uniquefunname":"func TestC(t *testing.T)","Funname":"C_test.TestC","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestC(t *testing.T)","Funname":"TestC","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/watch_fixtures/C/C_test.go","Functions":null,"Records":[{"Name":"var:C_test","Fields":["C_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/watch_fixtures/D/D.go","Functions":[{"Uniquefunname":"func DoIt() string","Funname":"D.DoIt","Returntype":"string","Args":""},{"Uniquefunname":"func DoIt() string","Funname":"DoIt","Returntype":"string","Args":""}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/watch_fixtures/D/D_suite_test.go","Functions":[{"Uniquefunname":"func TestD(t *testing.T)","Funname":"D_test.TestD","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestD(t *testing.T)","Funname":"TestD","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/watch_fixtures/D/D_test.go","Functions":null,"Records":[{"Name":"var:D_test","Fields":["D_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/xunit_tests/xunit_tests.go","Functions":[{"Uniquefunname":"func AlwaysTrue() bool","Funname":"AlwaysTrue","Returntype":"bool","Args":""},{"Uniquefunname":"func AlwaysTrue() bool","Funname":"xunit_tests.AlwaysTrue","Returntype":"bool","Args":""}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/integration/_fixtures/xunit_tests/xunit_tests_test.go","Functions":[{"Uniquefunname":"func TestAlwaysTrue(t *testing.T)","Funname":"TestAlwaysTrue","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestAlwaysTrue(t *testing.T)","Funname":"xunit_tests.TestAlwaysTrue","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/codelocation/code_location.go","Functions":[{"Uniquefunname":"func New(skip int) types.CodeLocation","Funname":"New","Returntype":"types.CodeLocation","Args":"skip int"},{"Uniquefunname":"func PruneStack(fullStackTrace string, skip int) string","Funname":"PruneStack","Returntype":"string","Args":"fullStackTrace string, skip int"},{"Uniquefunname":"func New(skip int) types.CodeLocation","Funname":"codelocation.New","Returntype":"types.CodeLocation","Args":"skip int"},{"Uniquefunname":"func PruneStack(fullStackTrace string, skip int) string","Funname":"codelocation.PruneStack","Returntype":"string","Args":"fullStackTrace string, skip int"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/codelocation/code_location_suite_test.go","Functions":[{"Uniquefunname":"func TestCodelocation(t *testing.T)","Funname":"TestCodelocation","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestCodelocation(t *testing.T)","Funname":"codelocation_test.TestCodelocation","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/codelocation/code_location_test.go","Functions":null,"Records":[{"Name":"var:codelocation_test","Fields":["codelocation_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/containernode/container_node.go","Functions":[{"Uniquefunname":"func (node *ContainerNode) BackPropagateProgrammaticFocus() bool","Funname":"BackPropagateProgrammaticFocus","Returntype":"bool","Args":""},{"Uniquefunname":"func (node *ContainerNode) CodeLocation() types.CodeLocation","Funname":"CodeLocation","Returntype":"types.CodeLocation","Args":""},{"Uniquefunname":"func (node *ContainerNode) Collate() []CollatedNodes","Funname":"Collate","Returntype":"[]CollatedNodes","Args":""},{"Uniquefunname":"func (node *ContainerNode) Flag() types.FlagType","Funname":"Flag","Returntype":"types.FlagType","Args":""},{"Uniquefunname":"func (node *ContainerNode) Len() int","Funname":"Len","Returntype":"int","Args":""},{"Uniquefunname":"func (node *ContainerNode) Less(i, j int) bool","Funname":"Less","Returntype":"bool","Args":"i, j int"},{"Uniquefunname":"func New(text string, flag types.FlagType, codeLocation types.CodeLocation) *ContainerNode","Funname":"New","Returntype":"*ContainerNode","Args":"text string, flag types.FlagType, codeLocation types.CodeLocation"},{"Uniquefunname":"func (node *ContainerNode) PushContainerNode(container *ContainerNode)","Funname":"PushContainerNode","Returntype":"","Args":"container *ContainerNode"},{"Uniquefunname":"func (node *ContainerNode) PushSetupNode(setupNode leafnodes.BasicNode)","Funname":"PushSetupNode","Returntype":"","Args":"setupNode leafnodes.BasicNode"},{"Uniquefunname":"func (node *ContainerNode) PushSubjectNode(subject leafnodes.SubjectNode)","Funname":"PushSubjectNode","Returntype":"","Args":"subject leafnodes.SubjectNode"},{"Uniquefunname":"func SetupNodesOfType(nodeType types.SpecComponentType)[]leafnodes.BasicNode","Funname":"SetupNodesOfType","Returntype":"[]leafnodes.BasicNode","Args":"nodeType types.SpecComponentType"},{"Uniquefunname":"func (container *ContainerNode) Shuffle(r *rand.Rand)","Funname":"Shuffle","Returntype":"","Args":"r *rand.Rand"},{"Uniquefunname":"func (node *ContainerNode) Swap(i, j int)","Funname":"Swap","Returntype":"","Args":"i, j int"},{"Uniquefunname":"func (node *ContainerNode) Text() string","Funname":"Text","Returntype":"string","Args":""},{"Uniquefunname":"func (node *ContainerNode) collate(enclosingContainers []*ContainerNode) []CollatedNodes","Funname":"collate","Returntype":"[]CollatedNodes","Args":"enclosingContainers []*ContainerNode"},{"Uniquefunname":"func (node *ContainerNode) BackPropagateProgrammaticFocus() bool","Funname":"containernode.ContainerNode.BackPropagateProgrammaticFocus","Returntype":"bool","Args":""},{"Uniquefunname":"func (node *ContainerNode) CodeLocation() types.CodeLocation","Funname":"containernode.ContainerNode.CodeLocation","Returntype":"types.CodeLocation","Args":""},{"Uniquefunname":"func (node *ContainerNode) Collate() []CollatedNodes","Funname":"containernode.ContainerNode.Collate","Returntype":"[]CollatedNodes","Args":""},{"Uniquefunname":"func (node *ContainerNode) Flag() types.FlagType","Funname":"containernode.ContainerNode.Flag","Returntype":"types.FlagType","Args":""},{"Uniquefunname":"func (node *ContainerNode) Len() int","Funname":"containernode.ContainerNode.Len","Returntype":"int","Args":""},{"Uniquefunname":"func (node *ContainerNode) Less(i, j int) bool","Funname":"containernode.ContainerNode.Less","Returntype":"bool","Args":"i, j int"},{"Uniquefunname":"func (node *ContainerNode) PushContainerNode(container *ContainerNode)","Funname":"containernode.ContainerNode.PushContainerNode","Returntype":"","Args":"container *ContainerNode"},{"Uniquefunname":"func (node *ContainerNode) PushSetupNode(setupNode leafnodes.BasicNode)","Funname":"containernode.ContainerNode.PushSetupNode","Returntype":"","Args":"setupNode leafnodes.BasicNode"},{"Uniquefunname":"func (node *ContainerNode) PushSubjectNode(subject leafnodes.SubjectNode)","Funname":"containernode.ContainerNode.PushSubjectNode","Returntype":"","Args":"subject leafnodes.SubjectNode"},{"Uniquefunname":"func containernode.ContainerNode.SetupNodesOfType(nodeType types.SpecComponentType)[]leafnodes.BasicNode","Funname":"containernode.ContainerNode.SetupNodesOfType","Returntype":"[]leafnodes.BasicNode","Args":"nodeType types.SpecComponentType"},{"Uniquefunname":"func (container *ContainerNode) Shuffle(r *rand.Rand)","Funname":"containernode.ContainerNode.Shuffle","Returntype":"","Args":"r *rand.Rand"},{"Uniquefunname":"func (node *ContainerNode) Swap(i, j int)","Funname":"containernode.ContainerNode.Swap","Returntype":"","Args":"i, j int"},{"Uniquefunname":"func (node *ContainerNode) Text() string","Funname":"containernode.ContainerNode.Text","Returntype":"string","Args":""},{"Uniquefunname":"func (node *ContainerNode) collate(enclosingContainers []*ContainerNode) []CollatedNodes","Funname":"containernode.ContainerNode.collate","Returntype":"[]CollatedNodes","Args":"enclosingContainers []*ContainerNode"},{"Uniquefunname":"func New(text string, flag types.FlagType, codeLocation types.CodeLocation) *ContainerNode","Funname":"containernode.New","Returntype":"*ContainerNode","Args":"text string, flag types.FlagType, codeLocation types.CodeLocation"},{"Uniquefunname":"func (n subjectOrContainerNode) text() string","Funname":"containernode.subjectOrContainerNode.text","Returntype":"string","Args":""},{"Uniquefunname":"func (n subjectOrContainerNode) text() string","Funname":"text","Returntype":"string","Args":""}],"Records":[{"Name":"struct:containernode.CollatedNodes","Fields":["containernode.CollatedNodes.Containers []*ContainerNode","containernode.CollatedNodes.Subject leafnodes.SubjectNode"]},{"Name":"struct:containernode.ContainerNode","Fields":["containernode.ContainerNode.codeLocation types.CodeLocation","containernode.ContainerNode.flag types.FlagType","containernode.ContainerNode.setupNodes []leafnodes.BasicNode","containernode.ContainerNode.subjectAndContainerNodes []subjectOrContainerNode","containernode.ContainerNode.text string"]},{"Name":"struct:containernode.subjectOrContainerNode","Fields":["containernode.subjectOrContainerNode.containerNode *ContainerNode","containernode.subjectOrContainerNode.subjectNode leafnodes.SubjectNode"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/containernode/container_node_suite_test.go","Functions":[{"Uniquefunname":"func TestContainernode(t *testing.T)","Funname":"TestContainernode","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestContainernode(t *testing.T)","Funname":"containernode_test.TestContainernode","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/containernode/container_node_test.go","Functions":null,"Records":[{"Name":"var:containernode_test","Fields":["containernode_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/failer/failer.go","Functions":[{"Uniquefunname":"func Drain(componentType types.SpecComponentType, componentIndex int, componentCodeLocation types.CodeLocation)(types.SpecFailure, types.SpecState)","Funname":"Drain","Returntype":"(types.SpecFailure, types.SpecState)","Args":"componentType types.SpecComponentType, componentIndex int, componentCodeLocation types.CodeLocation"},{"Uniquefunname":"func (f *Failer) Fail(message string, location types.CodeLocation)","Funname":"Fail","Returntype":"","Args":"message string, location types.CodeLocation"},{"Uniquefunname":"func New() *Failer","Funname":"New","Returntype":"*Failer","Args":""},{"Uniquefunname":"func (f *Failer) Panic(location types.CodeLocation, forwardedPanic interface","Funname":"Panic","Returntype":"","Args":"location types.CodeLocation, forwardedPanic interface{}"},{"Uniquefunname":"func (f *Failer) Skip(message string, location types.CodeLocation)","Funname":"Skip","Returntype":"","Args":"message string, location types.CodeLocation"},{"Uniquefunname":"func (f *Failer) Timeout(location types.CodeLocation)","Funname":"Timeout","Returntype":"","Args":"location types.CodeLocation"},{"Uniquefunname":"func failer.Failer.Drain(componentType types.SpecComponentType, componentIndex int, componentCodeLocation types.CodeLocation)(types.SpecFailure, types.SpecState)","Funname":"failer.Failer.Drain","Returntype":"(types.SpecFailure, types.SpecState)","Args":"componentType types.SpecComponentType, componentIndex int, componentCodeLocation types.CodeLocation"},{"Uniquefunname":"func (f *Failer) Fail(message string, location types.CodeLocation)","Funname":"failer.Failer.Fail","Returntype":"","Args":"message string, location types.CodeLocation"},{"Uniquefunname":"func (f *Failer) Panic(location types.CodeLocation, forwardedPanic interface","Funname":"failer.Failer.Panic","Returntype":"","Args":"location types.CodeLocation, forwardedPanic interface{}"},{"Uniquefunname":"func (f *Failer) Skip(message string, location types.CodeLocation)","Funname":"failer.Failer.Skip","Returntype":"","Args":"message string, location types.CodeLocation"},{"Uniquefunname":"func (f *Failer) Timeout(location types.CodeLocation)","Funname":"failer.Failer.Timeout","Returntype":"","Args":"location types.CodeLocation"},{"Uniquefunname":"func New() *Failer","Funname":"failer.New","Returntype":"*Failer","Args":""}],"Records":[{"Name":"struct:failer.Failer","Fields":["failer.Failer.failure types.SpecFailure","failer.Failer.lock *sync.Mutex","failer.Failer.state types.SpecState"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/failer/failer_suite_test.go","Functions":[{"Uniquefunname":"func TestFailer(t *testing.T)","Funname":"TestFailer","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestFailer(t *testing.T)","Funname":"failer_test.TestFailer","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/failer/failer_test.go","Functions":null,"Records":[{"Name":"var:failer_test","Fields":["failer_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/leafnodes/benchmarker.go","Functions":[{"Uniquefunname":"func (b *benchmarker) RecordValue(name string, value float64, info ...interface","Funname":"RecordValue","Returntype":"","Args":"name string, value float64, info ...interface{}"},{"Uniquefunname":"func RecordValueWithPrecision(name string, value float64, units string, precision int, info ...interface{})","Funname":"RecordValueWithPrecision","Returntype":"","Args":"name string, value float64, units string, precision int, info ...interface{}"},{"Uniquefunname":"func Time(name string, body func(), info ...interface{})(elapsedTime time.Duration)","Funname":"Time","Returntype":"(elapsedTime time.Duration)","Args":"name string, body func(), info ...interface{}"},{"Uniquefunname":"func getMeasurement(name string, smallestLabel string, largestLabel string, averageLabel string, units string, precision int, info ...interface{})*types.SpecMeasurement","Funname":"getMeasurement","Returntype":"*types.SpecMeasurement","Args":"name string, smallestLabel string, largestLabel string, averageLabel string, units string, precision int, info ...interface{}"},{"Uniquefunname":"func (b *benchmarker) RecordValue(name string, value float64, info ...interface","Funname":"leafnodes.benchmarker.RecordValue","Returntype":"","Args":"name string, value float64, info ...interface{}"},{"Uniquefunname":"func leafnodes.benchmarker.RecordValueWithPrecision(name string, value float64, units string, precision int, info ...interface{})","Funname":"leafnodes.benchmarker.RecordValueWithPrecision","Returntype":"","Args":"name string, value float64, units string, precision int, info ...interface{}"},{"Uniquefunname":"func leafnodes.benchmarker.Time(name string, body func(), info ...interface{})(elapsedTime time.Duration)","Funname":"leafnodes.benchmarker.Time","Returntype":"(elapsedTime time.Duration)","Args":"name string, body func(), info ...interface{}"},{"Uniquefunname":"func leafnodes.benchmarker.getMeasurement(name string, smallestLabel string, largestLabel string, averageLabel string, units string, precision int, info ...interface{})*types.SpecMeasurement","Funname":"leafnodes.benchmarker.getMeasurement","Returntype":"*types.SpecMeasurement","Args":"name string, smallestLabel string, largestLabel string, averageLabel string, units string, precision int, info ...interface{}"},{"Uniquefunname":"func (b *benchmarker) measurementsReport() map[string]*types.SpecMeasurement","Funname":"leafnodes.benchmarker.measurementsReport","Returntype":"map[string]*types.SpecMeasurement","Args":""},{"Uniquefunname":"func newBenchmarker() *benchmarker","Funname":"leafnodes.newBenchmarker","Returntype":"*benchmarker","Args":""},{"Uniquefunname":"func (b *benchmarker) measurementsReport() map[string]*types.SpecMeasurement","Funname":"measurementsReport","Returntype":"map[string]*types.SpecMeasurement","Args":""},{"Uniquefunname":"func newBenchmarker() *benchmarker","Funname":"newBenchmarker","Returntype":"*benchmarker","Args":""}],"Records":[{"Name":"struct:leafnodes.benchmarker","Fields":["leafnodes.benchmarker.measurements map[string]*types.SpecMeasurement","leafnodes.benchmarker.mu sync.Mutex","leafnodes.benchmarker.orderCounter int"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/leafnodes/interfaces.go","Functions":null,"Records":[{"Name":"interface","Fields":["leafnodes.BasicNode","leafnodes.SubjectNode"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/leafnodes/it_node.go","Functions":[{"Uniquefunname":"func (node *ItNode) CodeLocation() types.CodeLocation","Funname":"CodeLocation","Returntype":"types.CodeLocation","Args":""},{"Uniquefunname":"func (node *ItNode) Flag() types.FlagType","Funname":"Flag","Returntype":"types.FlagType","Args":""},{"Uniquefunname":"func NewItNode(text string, body interface{}, flag types.FlagType, codeLocation types.CodeLocation, timeout time.Duration, failer *failer.Failer, componentIndex int)*ItNode","Funname":"NewItNode","Returntype":"*ItNode","Args":"text string, body interface{}, flag types.FlagType, codeLocation types.CodeLocation, timeout time.Duration, failer *failer.Failer, componentIndex int"},{"Uniquefunname":"func (node *ItNode) Run() (outcome types.SpecState, failure types.SpecFailure)","Funname":"Run","Returntype":"(outcome types.SpecState, failure types.SpecFailure)","Args":""},{"Uniquefunname":"func (node *ItNode) Samples() int","Funname":"Samples","Returntype":"int","Args":""},{"Uniquefunname":"func (node *ItNode) Text() string","Funname":"Text","Returntype":"string","Args":""},{"Uniquefunname":"func (node *ItNode) Type() types.SpecComponentType","Funname":"Type","Returntype":"types.SpecComponentType","Args":""},{"Uniquefunname":"func (node *ItNode) CodeLocation() types.CodeLocation","Funname":"leafnodes.ItNode.CodeLocation","Returntype":"types.CodeLocation","Args":""},{"Uniquefunname":"func (node *ItNode) Flag() types.FlagType","Funname":"leafnodes.ItNode.Flag","Returntype":"types.FlagType","Args":""},{"Uniquefunname":"func (node *ItNode) Run() (outcome types.SpecState, failure types.SpecFailure)","Funname":"leafnodes.ItNode.Run","Returntype":"(outcome types.SpecState, failure types.SpecFailure)","Args":""},{"Uniquefunname":"func (node *ItNode) Samples() int","Funname":"leafnodes.ItNode.Samples","Returntype":"int","Args":""},{"Uniquefunname":"func (node *ItNode) Text() string","Funname":"leafnodes.ItNode.Text","Returntype":"string","Args":""},{"Uniquefunname":"func (node *ItNode) Type() types.SpecComponentType","Funname":"leafnodes.ItNode.Type","Returntype":"types.SpecComponentType","Args":""},{"Uniquefunname":"func leafnodes.NewItNode(text string, body interface{}, flag types.FlagType, codeLocation types.CodeLocation, timeout time.Duration, failer *failer.Failer, componentIndex int)*ItNode","Funname":"leafnodes.NewItNode","Returntype":"*ItNode","Args":"text string, body interface{}, flag types.FlagType, codeLocation types.CodeLocation, timeout time.Duration, failer *failer.Failer, componentIndex int"}],"Records":[{"Name":"struct:leafnodes.ItNode","Fields":["leafnodes.ItNode.flag types.FlagType","leafnodes.ItNode.runner *runner","leafnodes.ItNode.text string"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/leafnodes/it_node_test.go","Functions":null,"Records":[{"Name":"var:leafnodes_test","Fields":["leafnodes_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/leafnodes/leaf_node_suite_test.go","Functions":[{"Uniquefunname":"func TestLeafNode(t *testing.T)","Funname":"TestLeafNode","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestLeafNode(t *testing.T)","Funname":"leafnodes_test.TestLeafNode","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/leafnodes/measure_node.go","Functions":[{"Uniquefunname":"func (node *MeasureNode) CodeLocation() types.CodeLocation","Funname":"CodeLocation","Returntype":"types.CodeLocation","Args":""},{"Uniquefunname":"func (node *MeasureNode) Flag() types.FlagType","Funname":"Flag","Returntype":"types.FlagType","Args":""},{"Uniquefunname":"func (node *MeasureNode) MeasurementsReport() map[string]*types.SpecMeasurement","Funname":"MeasurementsReport","Returntype":"map[string]*types.SpecMeasurement","Args":""},{"Uniquefunname":"func NewMeasureNode(text string, body interface{}, flag types.FlagType, codeLocation types.CodeLocation, samples int, failer *failer.Failer, componentIndex int)*MeasureNode","Funname":"NewMeasureNode","Returntype":"*MeasureNode","Args":"text string, body interface{}, flag types.FlagType, codeLocation types.CodeLocation, samples int, failer *failer.Failer, componentIndex int"},{"Uniquefunname":"func (node *MeasureNode) Run() (outcome types.SpecState, failure types.SpecFailure)","Funname":"Run","Returntype":"(outcome types.SpecState, failure types.SpecFailure)","Args":""},{"Uniquefunname":"func (node *MeasureNode) Samples() int","Funname":"Samples","Returntype":"int","Args":""},{"Uniquefunname":"func (node *MeasureNode) Text() string","Funname":"Text","Returntype":"string","Args":""},{"Uniquefunname":"func (node *MeasureNode) Type() types.SpecComponentType","Funname":"Type","Returntype":"types.SpecComponentType","Args":""},{"Uniquefunname":"func (node *MeasureNode) CodeLocation() types.CodeLocation","Funname":"leafnodes.MeasureNode.CodeLocation","Returntype":"types.CodeLocation","Args":""},{"Uniquefunname":"func (node *MeasureNode) Flag() types.FlagType","Funname":"leafnodes.MeasureNode.Flag","Returntype":"types.FlagType","Args":""},{"Uniquefunname":"func (node *MeasureNode) MeasurementsReport() map[string]*types.SpecMeasurement","Funname":"leafnodes.MeasureNode.MeasurementsReport","Returntype":"map[string]*types.SpecMeasurement","Args":""},{"Uniquefunname":"func (node *MeasureNode) Run() (outcome types.SpecState, failure types.SpecFailure)","Funname":"leafnodes.MeasureNode.Run","Returntype":"(outcome types.SpecState, failure types.SpecFailure)","Args":""},{"Uniquefunname":"func (node *MeasureNode) Samples() int","Funname":"leafnodes.MeasureNode.Samples","Returntype":"int","Args":""},{"Uniquefunname":"func (node *MeasureNode) Text() string","Funname":"leafnodes.MeasureNode.Text","Returntype":"string","Args":""},{"Uniquefunname":"func (node *MeasureNode) Type() types.SpecComponentType","Funname":"leafnodes.MeasureNode.Type","Returntype":"types.SpecComponentType","Args":""},{"Uniquefunname":"func leafnodes.NewMeasureNode(text string, body interface{}, flag types.FlagType, codeLocation types.CodeLocation, samples int, failer *failer.Failer, componentIndex int)*MeasureNode","Funname":"leafnodes.NewMeasureNode","Returntype":"*MeasureNode","Args":"text string, body interface{}, flag types.FlagType, codeLocation types.CodeLocation, samples int, failer *failer.Failer, componentIndex int"}],"Records":[{"Name":"struct:leafnodes.MeasureNode","Fields":["leafnodes.MeasureNode.benchmarker *benchmarker","leafnodes.MeasureNode.flag types.FlagType","leafnodes.MeasureNode.runner *runner","leafnodes.MeasureNode.samples int","leafnodes.MeasureNode.text string"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/leafnodes/measure_node_test.go","Functions":null,"Records":[{"Name":"var:leafnodes_test","Fields":["leafnodes_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/leafnodes/runner.go","Functions":[{"Uniquefunname":"func leafnodes.newRunner(body interface{}, codeLocation types.CodeLocation, timeout time.Duration, failer *failer.Failer, nodeType types.SpecComponentType, componentIndex int)*runner","Funname":"leafnodes.newRunner","Returntype":"*runner","Args":"body interface{}, codeLocation types.CodeLocation, timeout time.Duration, failer *failer.Failer, nodeType types.SpecComponentType, componentIndex int"},{"Uniquefunname":"func (r *runner) run() (outcome types.SpecState, failure types.SpecFailure)","Funname":"leafnodes.runner.run","Returntype":"(outcome types.SpecState, failure types.SpecFailure)","Args":""},{"Uniquefunname":"func (r *runner) runAsync() (outcome types.SpecState, failure types.SpecFailure)","Funname":"leafnodes.runner.runAsync","Returntype":"(outcome types.SpecState, failure types.SpecFailure)","Args":""},{"Uniquefunname":"func (r *runner) runSync() (outcome types.SpecState, failure types.SpecFailure)","Funname":"leafnodes.runner.runSync","Returntype":"(outcome types.SpecState, failure types.SpecFailure)","Args":""},{"Uniquefunname":"func newRunner(body interface{}, codeLocation types.CodeLocation, timeout time.Duration, failer *failer.Failer, nodeType types.SpecComponentType, componentIndex int)*runner","Funname":"newRunner","Returntype":"*runner","Args":"body interface{}, codeLocation types.CodeLocation, timeout time.Duration, failer *failer.Failer, nodeType types.SpecComponentType, componentIndex int"},{"Uniquefunname":"func (r *runner) run() (outcome types.SpecState, failure types.SpecFailure)","Funname":"run","Returntype":"(outcome types.SpecState, failure types.SpecFailure)","Args":""},{"Uniquefunname":"func (r *runner) runAsync() (outcome types.SpecState, failure types.SpecFailure)","Funname":"runAsync","Returntype":"(outcome types.SpecState, failure types.SpecFailure)","Args":""},{"Uniquefunname":"func (r *runner) runSync() (outcome types.SpecState, failure types.SpecFailure)","Funname":"runSync","Returntype":"(outcome types.SpecState, failure types.SpecFailure)","Args":""}],"Records":[{"Name":"struct:leafnodes.runner","Fields":["leafnodes.runner.asyncFunc func(chan\u003c- interface{})","leafnodes.runner.codeLocation types.CodeLocation","leafnodes.runner.componentIndex int","leafnodes.runner.failer *failer.Failer","leafnodes.runner.isAsync bool","leafnodes.runner.nodeType types.SpecComponentType","leafnodes.runner.syncFunc func()","leafnodes.runner.timeoutThreshold time.Duration"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/leafnodes/setup_nodes.go","Functions":[{"Uniquefunname":"func (node *SetupNode) CodeLocation() types.CodeLocation","Funname":"CodeLocation","Returntype":"types.CodeLocation","Args":""},{"Uniquefunname":"func NewAfterEachNode(body interface{}, codeLocation types.CodeLocation, timeout time.Duration, failer *failer.Failer, componentIndex int)*SetupNode","Funname":"NewAfterEachNode","Returntype":"*SetupNode","Args":"body interface{}, codeLocation types.CodeLocation, timeout time.Duration, failer *failer.Failer, componentIndex int"},{"Uniquefunname":"func NewBeforeEachNode(body interface{}, codeLocation types.CodeLocation, timeout time.Duration, failer *failer.Failer, componentIndex int)*SetupNode","Funname":"NewBeforeEachNode","Returntype":"*SetupNode","Args":"body interface{}, codeLocation types.CodeLocation, timeout time.Duration, failer *failer.Failer, componentIndex int"},{"Uniquefunname":"func NewJustAfterEachNode(body interface{}, codeLocation types.CodeLocation, timeout time.Duration, failer *failer.Failer, componentIndex int)*SetupNode","Funname":"NewJustAfterEachNode","Returntype":"*SetupNode","Args":"body interface{}, codeLocation types.CodeLocation, timeout time.Duration, failer *failer.Failer, componentIndex int"},{"Uniquefunname":"func NewJustBeforeEachNode(body interface{}, codeLocation types.CodeLocation, timeout time.Duration, failer *failer.Failer, componentIndex int)*SetupNode","Funname":"NewJustBeforeEachNode","Returntype":"*SetupNode","Args":"body interface{}, codeLocation types.CodeLocation, timeout time.Duration, failer *failer.Failer, componentIndex int"},{"Uniquefunname":"func (node *SetupNode) Run() (outcome types.SpecState, failure types.SpecFailure)","Funname":"Run","Returntype":"(outcome types.SpecState, failure types.SpecFailure)","Args":""},{"Uniquefunname":"func (node *SetupNode) Type() types.SpecComponentType","Funname":"Type","Returntype":"types.SpecComponentType","Args":""},{"Uniquefunname":"func leafnodes.NewAfterEachNode(body interface{}, codeLocation types.CodeLocation, timeout time.Duration, failer *failer.Failer, componentIndex int)*SetupNode","Funname":"leafnodes.NewAfterEachNode","Returntype":"*SetupNode","Args":"body interface{}, codeLocation types.CodeLocation, timeout time.Duration, failer *failer.Failer, componentIndex int"},{"Uniquefunname":"func leafnodes.NewBeforeEachNode(body interface{}, codeLocation types.CodeLocation, timeout time.Duration, failer *failer.Failer, componentIndex int)*SetupNode","Funname":"leafnodes.NewBeforeEachNode","Returntype":"*SetupNode","Args":"body interface{}, codeLocation types.CodeLocation, timeout time.Duration, failer *failer.Failer, componentIndex int"},{"Uniquefunname":"func leafnodes.NewJustAfterEachNode(body interface{}, codeLocation types.CodeLocation, timeout time.Duration, failer *failer.Failer, componentIndex int)*SetupNode","Funname":"leafnodes.NewJustAfterEachNode","Returntype":"*SetupNode","Args":"body interface{}, codeLocation types.CodeLocation, timeout time.Duration, failer *failer.Failer, componentIndex int"},{"Uniquefunname":"func leafnodes.NewJustBeforeEachNode(body interface{}, codeLocation types.CodeLocation, timeout time.Duration, failer *failer.Failer, componentIndex int)*SetupNode","Funname":"leafnodes.NewJustBeforeEachNode","Returntype":"*SetupNode","Args":"body interface{}, codeLocation types.CodeLocation, timeout time.Duration, failer *failer.Failer, componentIndex int"},{"Uniquefunname":"func (node *SetupNode) CodeLocation() types.CodeLocation","Funname":"leafnodes.SetupNode.CodeLocation","Returntype":"types.CodeLocation","Args":""},{"Uniquefunname":"func (node *SetupNode) Run() (outcome types.SpecState, failure types.SpecFailure)","Funname":"leafnodes.SetupNode.Run","Returntype":"(outcome types.SpecState, failure types.SpecFailure)","Args":""},{"Uniquefunname":"func (node *SetupNode) Type() types.SpecComponentType","Funname":"leafnodes.SetupNode.Type","Returntype":"types.SpecComponentType","Args":""}],"Records":[{"Name":"struct:leafnodes.SetupNode","Fields":["leafnodes.SetupNode.runner *runner"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/leafnodes/setup_nodes_test.go","Functions":null,"Records":[{"Name":"var:leafnodes_test","Fields":["leafnodes_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/leafnodes/shared_runner_test.go","Functions":[{"Uniquefunname":"func AsynchronousSharedRunnerBehaviors(build func(body interface{}, timeout time.Duration, failer *Failer.Failer, componentCodeLocation types.CodeLocation) runnable, componentType types.SpecComponentType, componentIndex int)","Funname":"AsynchronousSharedRunnerBehaviors","Returntype":"","Args":"build func(body interface{}, timeout time.Duration, failer *Failer.Failer, componentCodeLocation types.CodeLocation) runnable, componentType types.SpecComponentType, componentIndex int"},{"Uniquefunname":"func InvalidSharedRunnerBehaviors(build func(body interface{}, timeout time.Duration, failer *Failer.Failer, componentCodeLocation types.CodeLocation) runnable, componentType types.SpecComponentType)","Funname":"InvalidSharedRunnerBehaviors","Returntype":"","Args":"build func(body interface{}, timeout time.Duration, failer *Failer.Failer, componentCodeLocation types.CodeLocation) runnable, componentType types.SpecComponentType"},{"Uniquefunname":"func SynchronousSharedRunnerBehaviors(build func(body interface{}, timeout time.Duration, failer *Failer.Failer, componentCodeLocation types.CodeLocation) runnable, componentType types.SpecComponentType, componentIndex int)","Funname":"SynchronousSharedRunnerBehaviors","Returntype":"","Args":"build func(body interface{}, timeout time.Duration, failer *Failer.Failer, componentCodeLocation types.CodeLocation) runnable, componentType types.SpecComponentType, componentIndex int"},{"Uniquefunname":"func leafnodes_test.AsynchronousSharedRunnerBehaviors(build func(body interface{}, timeout time.Duration, failer *Failer.Failer, componentCodeLocation types.CodeLocation) runnable, componentType types.SpecComponentType, componentIndex int)","Funname":"leafnodes_test.AsynchronousSharedRunnerBehaviors","Returntype":"","Args":"build func(body interface{}, timeout time.Duration, failer *Failer.Failer, componentCodeLocation types.CodeLocation) runnable, componentType types.SpecComponentType, componentIndex int"},{"Uniquefunname":"func leafnodes_test.InvalidSharedRunnerBehaviors(build func(body interface{}, timeout time.Duration, failer *Failer.Failer, componentCodeLocation types.CodeLocation) runnable, componentType types.SpecComponentType)","Funname":"leafnodes_test.InvalidSharedRunnerBehaviors","Returntype":"","Args":"build func(body interface{}, timeout time.Duration, failer *Failer.Failer, componentCodeLocation types.CodeLocation) runnable, componentType types.SpecComponentType"},{"Uniquefunname":"func leafnodes_test.SynchronousSharedRunnerBehaviors(build func(body interface{}, timeout time.Duration, failer *Failer.Failer, componentCodeLocation types.CodeLocation) runnable, componentType types.SpecComponentType, componentIndex int)","Funname":"leafnodes_test.SynchronousSharedRunnerBehaviors","Returntype":"","Args":"build func(body interface{}, timeout time.Duration, failer *Failer.Failer, componentCodeLocation types.CodeLocation) runnable, componentType types.SpecComponentType, componentIndex int"}],"Records":[{"Name":"var:leafnodes_test","Fields":["leafnodes_test._"]},{"Name":"interface","Fields":["leafnodes_test.runnable"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/leafnodes/suite_nodes.go","Functions":[{"Uniquefunname":"func NewAfterSuiteNode(body interface{}, codeLocation types.CodeLocation, timeout time.Duration, failer *failer.Failer)SuiteNode","Funname":"NewAfterSuiteNode","Returntype":"SuiteNode","Args":"body interface{}, codeLocation types.CodeLocation, timeout time.Duration, failer *failer.Failer"},{"Uniquefunname":"func NewBeforeSuiteNode(body interface{}, codeLocation types.CodeLocation, timeout time.Duration, failer *failer.Failer)SuiteNode","Funname":"NewBeforeSuiteNode","Returntype":"SuiteNode","Args":"body interface{}, codeLocation types.CodeLocation, timeout time.Duration, failer *failer.Failer"},{"Uniquefunname":"func (node *simpleSuiteNode) Passed() bool","Funname":"Passed","Returntype":"bool","Args":""},{"Uniquefunname":"func (node *simpleSuiteNode) Run(parallelNode int, parallelTotal int, syncHost string) bool","Funname":"Run","Returntype":"bool","Args":"parallelNode int, parallelTotal int, syncHost string"},{"Uniquefunname":"func (node *simpleSuiteNode) Summary() *types.SetupSummary","Funname":"Summary","Returntype":"*types.SetupSummary","Args":""},{"Uniquefunname":"func leafnodes.NewAfterSuiteNode(body interface{}, codeLocation types.CodeLocation, timeout time.Duration, failer *failer.Failer)SuiteNode","Funname":"leafnodes.NewAfterSuiteNode","Returntype":"SuiteNode","Args":"body interface{}, codeLocation types.CodeLocation, timeout time.Duration, failer *failer.Failer"},{"Uniquefunname":"func leafnodes.NewBeforeSuiteNode(body interface{}, codeLocation types.CodeLocation, timeout time.Duration, failer *failer.Failer)SuiteNode","Funname":"leafnodes.NewBeforeSuiteNode","Returntype":"SuiteNode","Args":"body interface{}, codeLocation types.CodeLocation, timeout time.Duration, failer *failer.Failer"},{"Uniquefunname":"func (node *simpleSuiteNode) Passed() bool","Funname":"leafnodes.simpleSuiteNode.Passed","Returntype":"bool","Args":""},{"Uniquefunname":"func (node *simpleSuiteNode) Run(parallelNode int, parallelTotal int, syncHost string) bool","Funname":"leafnodes.simpleSuiteNode.Run","Returntype":"bool","Args":"parallelNode int, parallelTotal int, syncHost string"},{"Uniquefunname":"func (node *simpleSuiteNode) Summary() *types.SetupSummary","Funname":"leafnodes.simpleSuiteNode.Summary","Returntype":"*types.SetupSummary","Args":""}],"Records":[{"Name":"interface","Fields":["leafnodes.SuiteNode"]},{"Name":"struct:leafnodes.simpleSuiteNode","Fields":["leafnodes.simpleSuiteNode.failure types.SpecFailure","leafnodes.simpleSuiteNode.outcome types.SpecState","leafnodes.simpleSuiteNode.runTime time.Duration","leafnodes.simpleSuiteNode.runner *runner"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/leafnodes/suite_nodes_test.go","Functions":null,"Records":[{"Name":"var:leafnodes_test","Fields":["leafnodes_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/leafnodes/synchronized_after_suite_node.go","Functions":[{"Uniquefunname":"func NewSynchronizedAfterSuiteNode(bodyA interface{}, bodyB interface{}, codeLocation types.CodeLocation, timeout time.Duration, failer *failer.Failer)SuiteNode","Funname":"NewSynchronizedAfterSuiteNode","Returntype":"SuiteNode","Args":"bodyA interface{}, bodyB interface{}, codeLocation types.CodeLocation, timeout time.Duration, failer *failer.Failer"},{"Uniquefunname":"func (node *synchronizedAfterSuiteNode) Passed() bool","Funname":"Passed","Returntype":"bool","Args":""},{"Uniquefunname":"func Run(parallelNode int, parallelTotal int, syncHost string)bool","Funname":"Run","Returntype":"bool","Args":"parallelNode int, parallelTotal int, syncHost string"},{"Uniquefunname":"func (node *synchronizedAfterSuiteNode) Summary() *types.SetupSummary","Funname":"Summary","Returntype":"*types.SetupSummary","Args":""},{"Uniquefunname":"func (node *synchronizedAfterSuiteNode) canRun(syncHost string) bool","Funname":"canRun","Returntype":"bool","Args":"syncHost string"},{"Uniquefunname":"func leafnodes.NewSynchronizedAfterSuiteNode(bodyA interface{}, bodyB interface{}, codeLocation types.CodeLocation, timeout time.Duration, failer *failer.Failer)SuiteNode","Funname":"leafnodes.NewSynchronizedAfterSuiteNode","Returntype":"SuiteNode","Args":"bodyA interface{}, bodyB interface{}, codeLocation types.CodeLocation, timeout time.Duration, failer *failer.Failer"},{"Uniquefunname":"func (node *synchronizedAfterSuiteNode) Passed() bool","Funname":"leafnodes.synchronizedAfterSuiteNode.Passed","Returntype":"bool","Args":""},{"Uniquefunname":"func leafnodes.synchronizedAfterSuiteNode.Run(parallelNode int, parallelTotal int, syncHost string)bool","Funname":"leafnodes.synchronizedAfterSuiteNode.Run","Returntype":"bool","Args":"parallelNode int, parallelTotal int, syncHost string"},{"Uniquefunname":"func (node *synchronizedAfterSuiteNode) Summary() *types.SetupSummary","Funname":"leafnodes.synchronizedAfterSuiteNode.Summary","Returntype":"*types.SetupSummary","Args":""},{"Uniquefunname":"func (node *synchronizedAfterSuiteNode) canRun(syncHost string) bool","Funname":"leafnodes.synchronizedAfterSuiteNode.canRun","Returntype":"bool","Args":"syncHost string"},{"Uniquefunname":"func (node *synchronizedAfterSuiteNode) waitUntilOtherNodesAreDone(syncHost string)","Funname":"leafnodes.synchronizedAfterSuiteNode.waitUntilOtherNodesAreDone","Returntype":"","Args":"syncHost string"},{"Uniquefunname":"func (node *synchronizedAfterSuiteNode) waitUntilOtherNodesAreDone(syncHost string)","Funname":"waitUntilOtherNodesAreDone","Returntype":"","Args":"syncHost string"}],"Records":[{"Name":"struct:leafnodes.synchronizedAfterSuiteNode","Fields":["leafnodes.synchronizedAfterSuiteNode.failure types.SpecFailure","leafnodes.synchronizedAfterSuiteNode.outcome types.SpecState","leafnodes.synchronizedAfterSuiteNode.runTime time.Duration","leafnodes.synchronizedAfterSuiteNode.runnerA *runner","leafnodes.synchronizedAfterSuiteNode.runnerB *runner"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/leafnodes/synchronized_after_suite_node_test.go","Functions":null,"Records":[{"Name":"var:leafnodes_test","Fields":["leafnodes_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/leafnodes/synchronized_before_suite_node.go","Functions":[{"Uniquefunname":"func NewSynchronizedBeforeSuiteNode(bodyA interface{}, bodyB interface{}, codeLocation types.CodeLocation, timeout time.Duration, failer *failer.Failer)SuiteNode","Funname":"NewSynchronizedBeforeSuiteNode","Returntype":"SuiteNode","Args":"bodyA interface{}, bodyB interface{}, codeLocation types.CodeLocation, timeout time.Duration, failer *failer.Failer"},{"Uniquefunname":"func (node *synchronizedBeforeSuiteNode) Passed() bool","Funname":"Passed","Returntype":"bool","Args":""},{"Uniquefunname":"func Run(parallelNode int, parallelTotal int, syncHost string)bool","Funname":"Run","Returntype":"bool","Args":"parallelNode int, parallelTotal int, syncHost string"},{"Uniquefunname":"func (node *synchronizedBeforeSuiteNode) Summary() *types.SetupSummary","Funname":"Summary","Returntype":"*types.SetupSummary","Args":""},{"Uniquefunname":"func leafnodes.NewSynchronizedBeforeSuiteNode(bodyA interface{}, bodyB interface{}, codeLocation types.CodeLocation, timeout time.Duration, failer *failer.Failer)SuiteNode","Funname":"leafnodes.NewSynchronizedBeforeSuiteNode","Returntype":"SuiteNode","Args":"bodyA interface{}, bodyB interface{}, codeLocation types.CodeLocation, timeout time.Duration, failer *failer.Failer"},{"Uniquefunname":"func (node *synchronizedBeforeSuiteNode) Passed() bool","Funname":"leafnodes.synchronizedBeforeSuiteNode.Passed","Returntype":"bool","Args":""},{"Uniquefunname":"func leafnodes.synchronizedBeforeSuiteNode.Run(parallelNode int, parallelTotal int, syncHost string)bool","Funname":"leafnodes.synchronizedBeforeSuiteNode.Run","Returntype":"bool","Args":"parallelNode int, parallelTotal int, syncHost string"},{"Uniquefunname":"func (node *synchronizedBeforeSuiteNode) Summary() *types.SetupSummary","Funname":"leafnodes.synchronizedBeforeSuiteNode.Summary","Returntype":"*types.SetupSummary","Args":""},{"Uniquefunname":"func leafnodes.synchronizedBeforeSuiteNode.runA(parallelTotal int, syncHost string)(types.SpecState, types.SpecFailure)","Funname":"leafnodes.synchronizedBeforeSuiteNode.runA","Returntype":"(types.SpecState, types.SpecFailure)","Args":"parallelTotal int, syncHost string"},{"Uniquefunname":"func leafnodes.synchronizedBeforeSuiteNode.waitForA(syncHost string)(types.SpecState, types.SpecFailure)","Funname":"leafnodes.synchronizedBeforeSuiteNode.waitForA","Returntype":"(types.SpecState, types.SpecFailure)","Args":"syncHost string"},{"Uniquefunname":"func (node *synchronizedBeforeSuiteNode) wrapA(bodyA interface","Funname":"leafnodes.synchronizedBeforeSuiteNode.wrapA","Returntype":"interface{}","Args":"bodyA interface{}"},{"Uniquefunname":"func (node *synchronizedBeforeSuiteNode) wrapB(bodyB interface","Funname":"leafnodes.synchronizedBeforeSuiteNode.wrapB","Returntype":"interface{}","Args":"bodyB interface{}"},{"Uniquefunname":"func runA(parallelTotal int, syncHost string)(types.SpecState, types.SpecFailure)","Funname":"runA","Returntype":"(types.SpecState, types.SpecFailure)","Args":"parallelTotal int, syncHost string"},{"Uniquefunname":"func waitForA(syncHost string)(types.SpecState, types.SpecFailure)","Funname":"waitForA","Returntype":"(types.SpecState, types.SpecFailure)","Args":"syncHost string"},{"Uniquefunname":"func (node *synchronizedBeforeSuiteNode) wrapA(bodyA interface","Funname":"wrapA","Returntype":"interface{}","Args":"bodyA interface{}"},{"Uniquefunname":"func (node *synchronizedBeforeSuiteNode) wrapB(bodyB interface","Funname":"wrapB","Returntype":"interface{}","Args":"bodyB interface{}"}],"Records":[{"Name":"struct:leafnodes.synchronizedBeforeSuiteNode","Fields":["leafnodes.synchronizedBeforeSuiteNode.data []byte","leafnodes.synchronizedBeforeSuiteNode.failure types.SpecFailure","leafnodes.synchronizedBeforeSuiteNode.outcome types.SpecState","leafnodes.synchronizedBeforeSuiteNode.runTime time.Duration","leafnodes.synchronizedBeforeSuiteNode.runnerA *runner","leafnodes.synchronizedBeforeSuiteNode.runnerB *runner"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/leafnodes/synchronized_before_suite_node_test.go","Functions":null,"Records":[{"Name":"var:leafnodes_test","Fields":["leafnodes_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/remote/aggregator.go","Functions":[{"Uniquefunname":"func (aggregator *Aggregator) AfterSuiteDidRun(setupSummary *types.SetupSummary)","Funname":"AfterSuiteDidRun","Returntype":"","Args":"setupSummary *types.SetupSummary"},{"Uniquefunname":"func (aggregator *Aggregator) BeforeSuiteDidRun(setupSummary *types.SetupSummary)","Funname":"BeforeSuiteDidRun","Returntype":"","Args":"setupSummary *types.SetupSummary"},{"Uniquefunname":"func NewAggregator(nodeCount int, result chan bool, config config.DefaultReporterConfigType, stenographer stenographer.Stenographer)*Aggregator","Funname":"NewAggregator","Returntype":"*Aggregator","Args":"nodeCount int, result chan bool, config config.DefaultReporterConfigType, stenographer stenographer.Stenographer"},{"Uniquefunname":"func (aggregator *Aggregator) SpecDidComplete(specSummary *types.SpecSummary)","Funname":"SpecDidComplete","Returntype":"","Args":"specSummary *types.SpecSummary"},{"Uniquefunname":"func (aggregator *Aggregator) SpecSuiteDidEnd(summary *types.SuiteSummary)","Funname":"SpecSuiteDidEnd","Returntype":"","Args":"summary *types.SuiteSummary"},{"Uniquefunname":"func SpecSuiteWillBegin(config config.GinkgoConfigType, summary *types.SuiteSummary)","Funname":"SpecSuiteWillBegin","Returntype":"","Args":"config config.GinkgoConfigType, summary *types.SuiteSummary"},{"Uniquefunname":"func (aggregator *Aggregator) SpecWillRun(specSummary *types.SpecSummary)","Funname":"SpecWillRun","Returntype":"","Args":"specSummary *types.SpecSummary"},{"Uniquefunname":"func (aggregator *Aggregator) announceAfterSuite(setupSummary *types.SetupSummary)","Funname":"announceAfterSuite","Returntype":"","Args":"setupSummary *types.SetupSummary"},{"Uniquefunname":"func (aggregator *Aggregator) announceBeforeSuite(setupSummary *types.SetupSummary)","Funname":"announceBeforeSuite","Returntype":"","Args":"setupSummary *types.SetupSummary"},{"Uniquefunname":"func (aggregator *Aggregator) announceSpec(specSummary *types.SpecSummary)","Funname":"announceSpec","Returntype":"","Args":"specSummary *types.SpecSummary"},{"Uniquefunname":"func (aggregator *Aggregator) flushCompletedSpecs()","Funname":"flushCompletedSpecs","Returntype":"","Args":""},{"Uniquefunname":"func (aggregator *Aggregator) mux()","Funname":"mux","Returntype":"","Args":""},{"Uniquefunname":"func (aggregator *Aggregator) registerAfterSuite(setupSummary *types.SetupSummary)","Funname":"registerAfterSuite","Returntype":"","Args":"setupSummary *types.SetupSummary"},{"Uniquefunname":"func (aggregator *Aggregator) registerBeforeSuite(setupSummary *types.SetupSummary)","Funname":"registerBeforeSuite","Returntype":"","Args":"setupSummary *types.SetupSummary"},{"Uniquefunname":"func (aggregator *Aggregator) registerSpecCompletion(specSummary *types.SpecSummary)","Funname":"registerSpecCompletion","Returntype":"","Args":"specSummary *types.SpecSummary"},{"Uniquefunname":"func (aggregator *Aggregator) registerSuiteBeginning(configAndSuite configAndSuite)","Funname":"registerSuiteBeginning","Returntype":"","Args":"configAndSuite configAndSuite"},{"Uniquefunname":"func registerSuiteEnding(suite *types.SuiteSummary)(finished bool, passed bool)","Funname":"registerSuiteEnding","Returntype":"(finished bool, passed bool)","Args":"suite *types.SuiteSummary"},{"Uniquefunname":"func (aggregator *Aggregator) AfterSuiteDidRun(setupSummary *types.SetupSummary)","Funname":"remote.Aggregator.AfterSuiteDidRun","Returntype":"","Args":"setupSummary *types.SetupSummary"},{"Uniquefunname":"func (aggregator *Aggregator) BeforeSuiteDidRun(setupSummary *types.SetupSummary)","Funname":"remote.Aggregator.BeforeSuiteDidRun","Returntype":"","Args":"setupSummary *types.SetupSummary"},{"Uniquefunname":"func (aggregator *Aggregator) SpecDidComplete(specSummary *types.SpecSummary)","Funname":"remote.Aggregator.SpecDidComplete","Returntype":"","Args":"specSummary *types.SpecSummary"},{"Uniquefunname":"func (aggregator *Aggregator) SpecSuiteDidEnd(summary *types.SuiteSummary)","Funname":"remote.Aggregator.SpecSuiteDidEnd","Returntype":"","Args":"summary *types.SuiteSummary"},{"Uniquefunname":"func remote.Aggregator.SpecSuiteWillBegin(config config.GinkgoConfigType, summary *types.SuiteSummary)","Funname":"remote.Aggregator.SpecSuiteWillBegin","Returntype":"","Args":"config config.GinkgoConfigType, summary *types.SuiteSummary"},{"Uniquefunname":"func (aggregator *Aggregator) SpecWillRun(specSummary *types.SpecSummary)","Funname":"remote.Aggregator.SpecWillRun","Returntype":"","Args":"specSummary *types.SpecSummary"},{"Uniquefunname":"func (aggregator *Aggregator) announceAfterSuite(setupSummary *types.SetupSummary)","Funname":"remote.Aggregator.announceAfterSuite","Returntype":"","Args":"setupSummary *types.SetupSummary"},{"Uniquefunname":"func (aggregator *Aggregator) announceBeforeSuite(setupSummary *types.SetupSummary)","Funname":"remote.Aggregator.announceBeforeSuite","Returntype":"","Args":"setupSummary *types.SetupSummary"},{"Uniquefunname":"func (aggregator *Aggregator) announceSpec(specSummary *types.SpecSummary)","Funname":"remote.Aggregator.announceSpec","Returntype":"","Args":"specSummary *types.SpecSummary"},{"Uniquefunname":"func (aggregator *Aggregator) flushCompletedSpecs()","Funname":"remote.Aggregator.flushCompletedSpecs","Returntype":"","Args":""},{"Uniquefunname":"func (aggregator *Aggregator) mux()","Funname":"remote.Aggregator.mux","Returntype":"","Args":""},{"Uniquefunname":"func (aggregator *Aggregator) registerAfterSuite(setupSummary *types.SetupSummary)","Funname":"remote.Aggregator.registerAfterSuite","Returntype":"","Args":"setupSummary *types.SetupSummary"},{"Uniquefunname":"func (aggregator *Aggregator) registerBeforeSuite(setupSummary *types.SetupSummary)","Funname":"remote.Aggregator.registerBeforeSuite","Returntype":"","Args":"setupSummary *types.SetupSummary"},{"Uniquefunname":"func (aggregator *Aggregator) registerSpecCompletion(specSummary *types.SpecSummary)","Funname":"remote.Aggregator.registerSpecCompletion","Returntype":"","Args":"specSummary *types.SpecSummary"},{"Uniquefunname":"func (aggregator *Aggregator) registerSuiteBeginning(configAndSuite configAndSuite)","Funname":"remote.Aggregator.registerSuiteBeginning","Returntype":"","Args":"configAndSuite configAndSuite"},{"Uniquefunname":"func remote.Aggregator.registerSuiteEnding(suite *types.SuiteSummary)(finished bool, passed bool)","Funname":"remote.Aggregator.registerSuiteEnding","Returntype":"(finished bool, passed bool)","Args":"suite *types.SuiteSummary"},{"Uniquefunname":"func remote.NewAggregator(nodeCount int, result chan bool, config config.DefaultReporterConfigType, stenographer stenographer.Stenographer)*Aggregator","Funname":"remote.NewAggregator","Returntype":"*Aggregator","Args":"nodeCount int, result chan bool, config config.DefaultReporterConfigType, stenographer stenographer.Stenographer"}],"Records":[{"Name":"struct:remote.Aggregator","Fields":["remote.Aggregator.afterSuites chan *types.SetupSummary","remote.Aggregator.aggregatedAfterSuites []*types.SetupSummary","remote.Aggregator.aggregatedBeforeSuites []*types.SetupSummary","remote.Aggregator.aggregatedSuiteBeginnings []configAndSuite","remote.Aggregator.aggregatedSuiteEndings []*types.SuiteSummary","remote.Aggregator.beforeSuites chan *types.SetupSummary","remote.Aggregator.completedSpecs []*types.SpecSummary","remote.Aggregator.config config.DefaultReporterConfigType","remote.Aggregator.nodeCount int","remote.Aggregator.result chan bool","remote.Aggregator.specCompletions chan *types.SpecSummary","remote.Aggregator.specs []*types.SpecSummary","remote.Aggregator.startTime time.Time","remote.Aggregator.stenographer stenographer.Stenographer","remote.Aggregator.suiteBeginnings chan configAndSuite","remote.Aggregator.suiteEndings chan *types.SuiteSummary"]},{"Name":"struct:remote.configAndSuite","Fields":["remote.configAndSuite.config config.GinkgoConfigType","remote.configAndSuite.summary *types.SuiteSummary"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/remote/aggregator_test.go","Functions":null,"Records":[{"Name":"var:remote_test","Fields":["remote_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/remote/fake_output_interceptor_test.go","Functions":[{"Uniquefunname":"func (interceptor *fakeOutputInterceptor) StartInterceptingOutput() error","Funname":"StartInterceptingOutput","Returntype":"error","Args":""},{"Uniquefunname":"func (interceptor *fakeOutputInterceptor) StopInterceptingAndReturnOutput() (string, error)","Funname":"StopInterceptingAndReturnOutput","Returntype":"(string, error)","Args":""},{"Uniquefunname":"func (interceptor *fakeOutputInterceptor) StreamTo(*os.File)","Funname":"StreamTo","Returntype":"","Args":"*os.File"},{"Uniquefunname":"func (interceptor *fakeOutputInterceptor) StartInterceptingOutput() error","Funname":"remote_test.fakeOutputInterceptor.StartInterceptingOutput","Returntype":"error","Args":""},{"Uniquefunname":"func (interceptor *fakeOutputInterceptor) StopInterceptingAndReturnOutput() (string, error)","Funname":"remote_test.fakeOutputInterceptor.StopInterceptingAndReturnOutput","Returntype":"(string, error)","Args":""},{"Uniquefunname":"func (interceptor *fakeOutputInterceptor) StreamTo(*os.File)","Funname":"remote_test.fakeOutputInterceptor.StreamTo","Returntype":"","Args":"*os.File"}],"Records":[{"Name":"struct:remote_test.fakeOutputInterceptor","Fields":["remote_test.fakeOutputInterceptor.DidStartInterceptingOutput bool","remote_test.fakeOutputInterceptor.DidStopInterceptingOutput bool","remote_test.fakeOutputInterceptor.InterceptedOutput string"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/remote/fake_poster_test.go","Functions":[{"Uniquefunname":"func Post(url string, bodyType string, body io.Reader)(resp *http.Response, err error)","Funname":"Post","Returntype":"(resp *http.Response, err error)","Args":"url string, bodyType string, body io.Reader"},{"Uniquefunname":"func newFakePoster() *fakePoster","Funname":"newFakePoster","Returntype":"*fakePoster","Args":""},{"Uniquefunname":"func remote_test.fakePoster.Post(url string, bodyType string, body io.Reader)(resp *http.Response, err error)","Funname":"remote_test.fakePoster.Post","Returntype":"(resp *http.Response, err error)","Args":"url string, bodyType string, body io.Reader"},{"Uniquefunname":"func newFakePoster() *fakePoster","Funname":"remote_test.newFakePoster","Returntype":"*fakePoster","Args":""}],"Records":[{"Name":"struct:remote_test.fakePoster","Fields":["remote_test.fakePoster.posts []post"]},{"Name":"struct:remote_test.post","Fields":["remote_test.post.bodyContent []byte","remote_test.post.bodyType string","remote_test.post.url string"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/remote/forwarding_reporter.go","Functions":[{"Uniquefunname":"func (reporter *ForwardingReporter) AfterSuiteDidRun(setupSummary *types.SetupSummary)","Funname":"AfterSuiteDidRun","Returntype":"","Args":"setupSummary *types.SetupSummary"},{"Uniquefunname":"func (reporter *ForwardingReporter) BeforeSuiteDidRun(setupSummary *types.SetupSummary)","Funname":"BeforeSuiteDidRun","Returntype":"","Args":"setupSummary *types.SetupSummary"},{"Uniquefunname":"func NewForwardingReporter(config config.DefaultReporterConfigType, serverHost string, poster Poster, outputInterceptor OutputInterceptor, ginkgoWriter *writer.Writer, debugFile string)*ForwardingReporter","Funname":"NewForwardingReporter","Returntype":"*ForwardingReporter","Args":"config config.DefaultReporterConfigType, serverHost string, poster Poster, outputInterceptor OutputInterceptor, ginkgoWriter *writer.Writer, debugFile string"},{"Uniquefunname":"func (reporter *ForwardingReporter) SpecDidComplete(specSummary *types.SpecSummary)","Funname":"SpecDidComplete","Returntype":"","Args":"specSummary *types.SpecSummary"},{"Uniquefunname":"func (reporter *ForwardingReporter) SpecSuiteDidEnd(summary *types.SuiteSummary)","Funname":"SpecSuiteDidEnd","Returntype":"","Args":"summary *types.SuiteSummary"},{"Uniquefunname":"func SpecSuiteWillBegin(conf config.GinkgoConfigType, summary *types.SuiteSummary)","Funname":"SpecSuiteWillBegin","Returntype":"","Args":"conf config.GinkgoConfigType, summary *types.SuiteSummary"},{"Uniquefunname":"func (reporter *ForwardingReporter) SpecWillRun(specSummary *types.SpecSummary)","Funname":"SpecWillRun","Returntype":"","Args":"specSummary *types.SpecSummary"},{"Uniquefunname":"func (reporter *ForwardingReporter) post(path string, data interface","Funname":"post","Returntype":"","Args":"path string, data interface{}"},{"Uniquefunname":"func (reporter *ForwardingReporter) AfterSuiteDidRun(setupSummary *types.SetupSummary)","Funname":"remote.ForwardingReporter.AfterSuiteDidRun","Returntype":"","Args":"setupSummary *types.SetupSummary"},{"Uniquefunname":"func (reporter *ForwardingReporter) BeforeSuiteDidRun(setupSummary *types.SetupSummary)","Funname":"remote.ForwardingReporter.BeforeSuiteDidRun","Returntype":"","Args":"setupSummary *types.SetupSummary"},{"Uniquefunname":"func (reporter *ForwardingReporter) SpecDidComplete(specSummary *types.SpecSummary)","Funname":"remote.ForwardingReporter.SpecDidComplete","Returntype":"","Args":"specSummary *types.SpecSummary"},{"Uniquefunname":"func (reporter *ForwardingReporter) SpecSuiteDidEnd(summary *types.SuiteSummary)","Funname":"remote.ForwardingReporter.SpecSuiteDidEnd","Returntype":"","Args":"summary *types.SuiteSummary"},{"Uniquefunname":"func remote.ForwardingReporter.SpecSuiteWillBegin(conf config.GinkgoConfigType, summary *types.SuiteSummary)","Funname":"remote.ForwardingReporter.SpecSuiteWillBegin","Returntype":"","Args":"conf config.GinkgoConfigType, summary *types.SuiteSummary"},{"Uniquefunname":"func (reporter *ForwardingReporter) SpecWillRun(specSummary *types.SpecSummary)","Funname":"remote.ForwardingReporter.SpecWillRun","Returntype":"","Args":"specSummary *types.SpecSummary"},{"Uniquefunname":"func (reporter *ForwardingReporter) post(path string, data interface","Funname":"remote.ForwardingReporter.post","Returntype":"","Args":"path string, data interface{}"},{"Uniquefunname":"func remote.NewForwardingReporter(config config.DefaultReporterConfigType, serverHost string, poster Poster, outputInterceptor OutputInterceptor, ginkgoWriter *writer.Writer, debugFile string)*ForwardingReporter","Funname":"remote.NewForwardingReporter","Returntype":"*ForwardingReporter","Args":"config config.DefaultReporterConfigType, serverHost string, poster Poster, outputInterceptor OutputInterceptor, ginkgoWriter *writer.Writer, debugFile string"}],"Records":[{"Name":"struct:remote.ForwardingReporter","Fields":["remote.ForwardingReporter.debugFile *os.File","remote.ForwardingReporter.debugMode bool","remote.ForwardingReporter.nestedReporter *reporters.DefaultReporter","remote.ForwardingReporter.outputInterceptor OutputInterceptor","remote.ForwardingReporter.poster Poster","remote.ForwardingReporter.serverHost string"]},{"Name":"interface","Fields":["remote.Poster"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/remote/forwarding_reporter_test.go","Functions":null,"Records":[{"Name":"var:remote_test","Fields":["remote_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/remote/output_interceptor.go","Functions":null,"Records":[{"Name":"interface","Fields":["remote.OutputInterceptor"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/remote/output_interceptor_unix.go","Functions":[{"Uniquefunname":"func NewOutputInterceptor() OutputInterceptor","Funname":"NewOutputInterceptor","Returntype":"OutputInterceptor","Args":""},{"Uniquefunname":"func (interceptor *outputInterceptor) StartInterceptingOutput() error","Funname":"StartInterceptingOutput","Returntype":"error","Args":""},{"Uniquefunname":"func (interceptor *outputInterceptor) StopInterceptingAndReturnOutput() (string, error)","Funname":"StopInterceptingAndReturnOutput","Returntype":"(string, error)","Args":""},{"Uniquefunname":"func (interceptor *outputInterceptor) StreamTo(out *os.File)","Funname":"StreamTo","Returntype":"","Args":"out *os.File"},{"Uniquefunname":"func NewOutputInterceptor() OutputInterceptor","Funname":"remote.NewOutputInterceptor","Returntype":"OutputInterceptor","Args":""},{"Uniquefunname":"func (interceptor *outputInterceptor) StartInterceptingOutput() error","Funname":"remote.outputInterceptor.StartInterceptingOutput","Returntype":"error","Args":""},{"Uniquefunname":"func (interceptor *outputInterceptor) StopInterceptingAndReturnOutput() (string, error)","Funname":"remote.outputInterceptor.StopInterceptingAndReturnOutput","Returntype":"(string, error)","Args":""},{"Uniquefunname":"func (interceptor *outputInterceptor) StreamTo(out *os.File)","Funname":"remote.outputInterceptor.StreamTo","Returntype":"","Args":"out *os.File"}],"Records":[{"Name":"struct:remote.outputInterceptor","Fields":["remote.outputInterceptor.doneTailing chan bool","remote.outputInterceptor.intercepting bool","remote.outputInterceptor.redirectFile *os.File","remote.outputInterceptor.streamTarget *os.File","remote.outputInterceptor.tailer *tail.Tail"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/remote/output_interceptor_win.go","Functions":[{"Uniquefunname":"func NewOutputInterceptor() OutputInterceptor","Funname":"NewOutputInterceptor","Returntype":"OutputInterceptor","Args":""},{"Uniquefunname":"func (interceptor *outputInterceptor) StartInterceptingOutput() error","Funname":"StartInterceptingOutput","Returntype":"error","Args":""},{"Uniquefunname":"func (interceptor *outputInterceptor) StopInterceptingAndReturnOutput() (string, error)","Funname":"StopInterceptingAndReturnOutput","Returntype":"(string, error)","Args":""},{"Uniquefunname":"func StreamTo(*os.File)","Funname":"StreamTo","Returntype":"","Args":"*os.File"},{"Uniquefunname":"func NewOutputInterceptor() OutputInterceptor","Funname":"remote.NewOutputInterceptor","Returntype":"OutputInterceptor","Args":""},{"Uniquefunname":"func (interceptor *outputInterceptor) StartInterceptingOutput() error","Funname":"remote.outputInterceptor.StartInterceptingOutput","Returntype":"error","Args":""},{"Uniquefunname":"func (interceptor *outputInterceptor) StopInterceptingAndReturnOutput() (string, error)","Funname":"remote.outputInterceptor.StopInterceptingAndReturnOutput","Returntype":"(string, error)","Args":""},{"Uniquefunname":"func remote.outputInterceptor.StreamTo(*os.File)","Funname":"remote.outputInterceptor.StreamTo","Returntype":"","Args":"*os.File"}],"Records":[{"Name":"struct:remote.outputInterceptor","Fields":["remote.outputInterceptor.intercepting bool"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/remote/remote_suite_test.go","Functions":[{"Uniquefunname":"func TestRemote(t *testing.T)","Funname":"TestRemote","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestRemote(t *testing.T)","Funname":"remote_test.TestRemote","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/remote/server.go","Functions":[{"Uniquefunname":"func (server *Server) Address() string","Funname":"Address","Returntype":"string","Args":""},{"Uniquefunname":"func (server *Server) Close()","Funname":"Close","Returntype":"","Args":""},{"Uniquefunname":"func NewServer(parallelTotal int) (*Server, error)","Funname":"NewServer","Returntype":"(*Server, error)","Args":"parallelTotal int"},{"Uniquefunname":"func (server *Server) RegisterAlive(node int, alive func() bool)","Funname":"RegisterAlive","Returntype":"","Args":"node int, alive func() bool"},{"Uniquefunname":"func (server *Server) RegisterReporters(reporters ...reporters.Reporter)","Funname":"RegisterReporters","Returntype":"","Args":"reporters ...reporters.Reporter"},{"Uniquefunname":"func (server *Server) Start()","Funname":"Start","Returntype":"","Args":""},{"Uniquefunname":"func (server *Server) afterSuiteDidRun(writer http.ResponseWriter, request *http.Request)","Funname":"afterSuiteDidRun","Returntype":"","Args":"writer http.ResponseWriter, request *http.Request"},{"Uniquefunname":"func (server *Server) beforeSuiteDidRun(writer http.ResponseWriter, request *http.Request)","Funname":"beforeSuiteDidRun","Returntype":"","Args":"writer http.ResponseWriter, request *http.Request"},{"Uniquefunname":"func handleBeforeSuiteState(writer http.ResponseWriter, request *http.Request)","Funname":"handleBeforeSuiteState","Returntype":"","Args":"writer http.ResponseWriter, request *http.Request"},{"Uniquefunname":"func (server *Server) handleCounter(writer http.ResponseWriter, request *http.Request)","Funname":"handleCounter","Returntype":"","Args":"writer http.ResponseWriter, request *http.Request"},{"Uniquefunname":"func (server *Server) handleHasCounter(writer http.ResponseWriter, request *http.Request)","Funname":"handleHasCounter","Returntype":"","Args":"writer http.ResponseWriter, request *http.Request"},{"Uniquefunname":"func handleRemoteAfterSuiteData(writer http.ResponseWriter, request *http.Request)","Funname":"handleRemoteAfterSuiteData","Returntype":"","Args":"writer http.ResponseWriter, request *http.Request"},{"Uniquefunname":"func (server *Server) nodeIsAlive(node int) bool","Funname":"nodeIsAlive","Returntype":"bool","Args":"node int"},{"Uniquefunname":"func (server *Server) readAll(request *http.Request) []byte","Funname":"readAll","Returntype":"[]byte","Args":"request *http.Request"},{"Uniquefunname":"func NewServer(parallelTotal int) (*Server, error)","Funname":"remote.NewServer","Returntype":"(*Server, error)","Args":"parallelTotal int"},{"Uniquefunname":"func (server *Server) Address() string","Funname":"remote.Server.Address","Returntype":"string","Args":""},{"Uniquefunname":"func (server *Server) Close()","Funname":"remote.Server.Close","Returntype":"","Args":""},{"Uniquefunname":"func (server *Server) RegisterAlive(node int, alive func() bool)","Funname":"remote.Server.RegisterAlive","Returntype":"","Args":"node int, alive func() bool"},{"Uniquefunname":"func (server *Server) RegisterReporters(reporters ...reporters.Reporter)","Funname":"remote.Server.RegisterReporters","Returntype":"","Args":"reporters ...reporters.Reporter"},{"Uniquefunname":"func (server *Server) Start()","Funname":"remote.Server.Start","Returntype":"","Args":""},{"Uniquefunname":"func (server *Server) afterSuiteDidRun(writer http.ResponseWriter, request *http.Request)","Funname":"remote.Server.afterSuiteDidRun","Returntype":"","Args":"writer http.ResponseWriter, request *http.Request"},{"Uniquefunname":"func (server *Server) beforeSuiteDidRun(writer http.ResponseWriter, request *http.Request)","Funname":"remote.Server.beforeSuiteDidRun","Returntype":"","Args":"writer http.ResponseWriter, request *http.Request"},{"Uniquefunname":"func remote.Server.handleBeforeSuiteState(writer http.ResponseWriter, request *http.Request)","Funname":"remote.Server.handleBeforeSuiteState","Returntype":"","Args":"writer http.ResponseWriter, request *http.Request"},{"Uniquefunname":"func (server *Server) handleCounter(writer http.ResponseWriter, request *http.Request)","Funname":"remote.Server.handleCounter","Returntype":"","Args":"writer http.ResponseWriter, request *http.Request"},{"Uniquefunname":"func (server *Server) handleHasCounter(writer http.ResponseWriter, request *http.Request)","Funname":"remote.Server.handleHasCounter","Returntype":"","Args":"writer http.ResponseWriter, request *http.Request"},{"Uniquefunname":"func remote.Server.handleRemoteAfterSuiteData(writer http.ResponseWriter, request *http.Request)","Funname":"remote.Server.handleRemoteAfterSuiteData","Returntype":"","Args":"writer http.ResponseWriter, request *http.Request"},{"Uniquefunname":"func (server *Server) nodeIsAlive(node int) bool","Funname":"remote.Server.nodeIsAlive","Returntype":"bool","Args":"node int"},{"Uniquefunname":"func (server *Server) readAll(request *http.Request) []byte","Funname":"remote.Server.readAll","Returntype":"[]byte","Args":"request *http.Request"},{"Uniquefunname":"func (server *Server) specDidComplete(writer http.ResponseWriter, request *http.Request)","Funname":"remote.Server.specDidComplete","Returntype":"","Args":"writer http.ResponseWriter, request *http.Request"},{"Uniquefunname":"func (server *Server) specSuiteDidEnd(writer http.ResponseWriter, request *http.Request)","Funname":"remote.Server.specSuiteDidEnd","Returntype":"","Args":"writer http.ResponseWriter, request *http.Request"},{"Uniquefunname":"func (server *Server) specSuiteWillBegin(writer http.ResponseWriter, request *http.Request)","Funname":"remote.Server.specSuiteWillBegin","Returntype":"","Args":"writer http.ResponseWriter, request *http.Request"},{"Uniquefunname":"func (server *Server) specWillRun(writer http.ResponseWriter, request *http.Request)","Funname":"remote.Server.specWillRun","Returntype":"","Args":"writer http.ResponseWriter, request *http.Request"},{"Uniquefunname":"func (server *Server) specDidComplete(writer http.ResponseWriter, request *http.Request)","Funname":"specDidComplete","Returntype":"","Args":"writer http.ResponseWriter, request *http.Request"},{"Uniquefunname":"func (server *Server) specSuiteDidEnd(writer http.ResponseWriter, request *http.Request)","Funname":"specSuiteDidEnd","Returntype":"","Args":"writer http.ResponseWriter, request *http.Request"},{"Uniquefunname":"func (server *Server) specSuiteWillBegin(writer http.ResponseWriter, request *http.Request)","Funname":"specSuiteWillBegin","Returntype":"","Args":"writer http.ResponseWriter, request *http.Request"},{"Uniquefunname":"func (server *Server) specWillRun(writer http.ResponseWriter, request *http.Request)","Funname":"specWillRun","Returntype":"","Args":"writer http.ResponseWriter, request *http.Request"}],"Records":[{"Name":"struct:remote.Server","Fields":["remote.Server.alives []func() bool","remote.Server.beforeSuiteData types.RemoteBeforeSuiteData","remote.Server.counter int","remote.Server.listener net.Listener","remote.Server.lock *sync.Mutex","remote.Server.parallelTotal int","remote.Server.reporters []reporters.Reporter"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/remote/server_test.go","Functions":null,"Records":[{"Name":"var:remote_test","Fields":["remote_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/remote/syscall_dup_linux_arm64.go","Functions":[{"Uniquefunname":"func syscallDup(oldfd int, newfd int) (err error)","Funname":"remote.syscallDup","Returntype":"(err error)","Args":"oldfd int, newfd int"},{"Uniquefunname":"func syscallDup(oldfd int, newfd int) (err error)","Funname":"syscallDup","Returntype":"(err error)","Args":"oldfd int, newfd int"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/remote/syscall_dup_solaris.go","Functions":[{"Uniquefunname":"func syscallDup(oldfd int, newfd int) (err error)","Funname":"remote.syscallDup","Returntype":"(err error)","Args":"oldfd int, newfd int"},{"Uniquefunname":"func syscallDup(oldfd int, newfd int) (err error)","Funname":"syscallDup","Returntype":"(err error)","Args":"oldfd int, newfd int"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/remote/syscall_dup_unix.go","Functions":[{"Uniquefunname":"func syscallDup(oldfd int, newfd int) (err error)","Funname":"remote.syscallDup","Returntype":"(err error)","Args":"oldfd int, newfd int"},{"Uniquefunname":"func syscallDup(oldfd int, newfd int) (err error)","Funname":"syscallDup","Returntype":"(err error)","Args":"oldfd int, newfd int"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/spec/spec.go","Functions":[{"Uniquefunname":"func (spec *Spec) ConcatenatedString() string","Funname":"ConcatenatedString","Returntype":"string","Args":""},{"Uniquefunname":"func (spec *Spec) Failed() bool","Funname":"Failed","Returntype":"bool","Args":""},{"Uniquefunname":"func (spec *Spec) Flaked() bool","Funname":"Flaked","Returntype":"bool","Args":""},{"Uniquefunname":"func (spec *Spec) Focused() bool","Funname":"Focused","Returntype":"bool","Args":""},{"Uniquefunname":"func (spec *Spec) IsMeasurement() bool","Funname":"IsMeasurement","Returntype":"bool","Args":""},{"Uniquefunname":"func New(subject leafnodes.SubjectNode, containers []*containernode.ContainerNode, announceProgress bool)*Spec","Funname":"New","Returntype":"*Spec","Args":"subject leafnodes.SubjectNode, containers []*containernode.ContainerNode, announceProgress bool"},{"Uniquefunname":"func (spec *Spec) Passed() bool","Funname":"Passed","Returntype":"bool","Args":""},{"Uniquefunname":"func (spec *Spec) Pending() bool","Funname":"Pending","Returntype":"bool","Args":""},{"Uniquefunname":"func (spec *Spec) Run(writer io.Writer)","Funname":"Run","Returntype":"","Args":"writer io.Writer"},{"Uniquefunname":"func (spec *Spec) Skip()","Funname":"Skip","Returntype":"","Args":""},{"Uniquefunname":"func (spec *Spec) Skipped() bool","Funname":"Skipped","Returntype":"bool","Args":""},{"Uniquefunname":"func (spec *Spec) Summary(suiteID string) *types.SpecSummary","Funname":"Summary","Returntype":"*types.SpecSummary","Args":"suiteID string"},{"Uniquefunname":"func announceSetupNode(writer io.Writer, nodeType string, container *containernode.ContainerNode, setupNode leafnodes.BasicNode)","Funname":"announceSetupNode","Returntype":"","Args":"writer io.Writer, nodeType string, container *containernode.ContainerNode, setupNode leafnodes.BasicNode"},{"Uniquefunname":"func (spec *Spec) announceSubject(writer io.Writer, subject leafnodes.SubjectNode)","Funname":"announceSubject","Returntype":"","Args":"writer io.Writer, subject leafnodes.SubjectNode"},{"Uniquefunname":"func (spec *Spec) getState() types.SpecState","Funname":"getState","Returntype":"types.SpecState","Args":""},{"Uniquefunname":"func (spec *Spec) measurementsReport() map[string]*types.SpecMeasurement","Funname":"measurementsReport","Returntype":"map[string]*types.SpecMeasurement","Args":""},{"Uniquefunname":"func (spec *Spec) processFlag(flag types.FlagType)","Funname":"processFlag","Returntype":"","Args":"flag types.FlagType"},{"Uniquefunname":"func (spec *Spec) runSample(sample int, writer io.Writer)","Funname":"runSample","Returntype":"","Args":"sample int, writer io.Writer"},{"Uniquefunname":"func (spec *Spec) setState(state types.SpecState)","Funname":"setState","Returntype":"","Args":"state types.SpecState"},{"Uniquefunname":"func spec.New(subject leafnodes.SubjectNode, containers []*containernode.ContainerNode, announceProgress bool)*Spec","Funname":"spec.New","Returntype":"*Spec","Args":"subject leafnodes.SubjectNode, containers []*containernode.ContainerNode, announceProgress bool"},{"Uniquefunname":"func (spec *Spec) ConcatenatedString() string","Funname":"spec.Spec.ConcatenatedString","Returntype":"string","Args":""},{"Uniquefunname":"func (spec *Spec) Failed() bool","Funname":"spec.Spec.Failed","Returntype":"bool","Args":""},{"Uniquefunname":"func (spec *Spec) Flaked() bool","Funname":"spec.Spec.Flaked","Returntype":"bool","Args":""},{"Uniquefunname":"func (spec *Spec) Focused() bool","Funname":"spec.Spec.Focused","Returntype":"bool","Args":""},{"Uniquefunname":"func (spec *Spec) IsMeasurement() bool","Funname":"spec.Spec.IsMeasurement","Returntype":"bool","Args":""},{"Uniquefunname":"func (spec *Spec) Passed() bool","Funname":"spec.Spec.Passed","Returntype":"bool","Args":""},{"Uniquefunname":"func (spec *Spec) Pending() bool","Funname":"spec.Spec.Pending","Returntype":"bool","Args":""},{"Uniquefunname":"func (spec *Spec) Run(writer io.Writer)","Funname":"spec.Spec.Run","Returntype":"","Args":"writer io.Writer"},{"Uniquefunname":"func (spec *Spec) Skip()","Funname":"spec.Spec.Skip","Returntype":"","Args":""},{"Uniquefunname":"func (spec *Spec) Skipped() bool","Funname":"spec.Spec.Skipped","Returntype":"bool","Args":""},{"Uniquefunname":"func (spec *Spec) Summary(suiteID string) *types.SpecSummary","Funname":"spec.Spec.Summary","Returntype":"*types.SpecSummary","Args":"suiteID string"},{"Uniquefunname":"func spec.Spec.announceSetupNode(writer io.Writer, nodeType string, container *containernode.ContainerNode, setupNode leafnodes.BasicNode)","Funname":"spec.Spec.announceSetupNode","Returntype":"","Args":"writer io.Writer, nodeType string, container *containernode.ContainerNode, setupNode leafnodes.BasicNode"},{"Uniquefunname":"func (spec *Spec) announceSubject(writer io.Writer, subject leafnodes.SubjectNode)","Funname":"spec.Spec.announceSubject","Returntype":"","Args":"writer io.Writer, subject leafnodes.SubjectNode"},{"Uniquefunname":"func (spec *Spec) getState() types.SpecState","Funname":"spec.Spec.getState","Returntype":"types.SpecState","Args":""},{"Uniquefunname":"func (spec *Spec) measurementsReport() map[string]*types.SpecMeasurement","Funname":"spec.Spec.measurementsReport","Returntype":"map[string]*types.SpecMeasurement","Args":""},{"Uniquefunname":"func (spec *Spec) processFlag(flag types.FlagType)","Funname":"spec.Spec.processFlag","Returntype":"","Args":"flag types.FlagType"},{"Uniquefunname":"func (spec *Spec) runSample(sample int, writer io.Writer)","Funname":"spec.Spec.runSample","Returntype":"","Args":"sample int, writer io.Writer"},{"Uniquefunname":"func (spec *Spec) setState(state types.SpecState)","Funname":"spec.Spec.setState","Returntype":"","Args":"state types.SpecState"}],"Records":[{"Name":"struct:spec.Spec","Fields":["spec.Spec.announceProgress bool","spec.Spec.containers []*containernode.ContainerNode","spec.Spec.failure types.SpecFailure","spec.Spec.focused bool","spec.Spec.previousFailures bool","spec.Spec.runTime time.Duration","spec.Spec.startTime time.Time","spec.Spec.state types.SpecState","spec.Spec.stateMutex *sync.Mutex","spec.Spec.subject leafnodes.SubjectNode"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/spec/spec_suite_test.go","Functions":[{"Uniquefunname":"func TestSpec(t *testing.T)","Funname":"TestSpec","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestSpec(t *testing.T)","Funname":"spec_test.TestSpec","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/spec/spec_test.go","Functions":null,"Records":[{"Name":"var:spec_test","Fields":["spec_test._","spec_test.focusedFlag","spec_test.noneFlag","spec_test.pendingFlag"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/spec/specs.go","Functions":[{"Uniquefunname":"func (e *Specs) ApplyFocus(description string, focusString string, skipString string)","Funname":"ApplyFocus","Returntype":"","Args":"description string, focusString string, skipString string"},{"Uniquefunname":"func (e *Specs) HasProgrammaticFocus() bool","Funname":"HasProgrammaticFocus","Returntype":"bool","Args":""},{"Uniquefunname":"func (e *Specs) Len() int","Funname":"Len","Returntype":"int","Args":""},{"Uniquefunname":"func (e *Specs) Less(i, j int) bool","Funname":"Less","Returntype":"bool","Args":"i, j int"},{"Uniquefunname":"func NewSpecs(specs []*Spec) *Specs","Funname":"NewSpecs","Returntype":"*Specs","Args":"specs []*Spec"},{"Uniquefunname":"func (e *Specs) Shuffle(r *rand.Rand)","Funname":"Shuffle","Returntype":"","Args":"r *rand.Rand"},{"Uniquefunname":"func (e *Specs) SkipMeasurements()","Funname":"SkipMeasurements","Returntype":"","Args":""},{"Uniquefunname":"func (e *Specs) Specs() []*Spec","Funname":"Specs","Returntype":"[]*Spec","Args":""},{"Uniquefunname":"func (e *Specs) Swap(i, j int)","Funname":"Swap","Returntype":"","Args":"i, j int"},{"Uniquefunname":"func (e *Specs) applyProgrammaticFocus()","Funname":"applyProgrammaticFocus","Returntype":"","Args":""},{"Uniquefunname":"func applyRegExpFocusAndSkip(description string, focusString string, skipString string)","Funname":"applyRegExpFocusAndSkip","Returntype":"","Args":"description string, focusString string, skipString string"},{"Uniquefunname":"func NewSpecs(specs []*Spec) *Specs","Funname":"spec.NewSpecs","Returntype":"*Specs","Args":"specs []*Spec"},{"Uniquefunname":"func (e *Specs) ApplyFocus(description string, focusString string, skipString string)","Funname":"spec.Specs.ApplyFocus","Returntype":"","Args":"description string, focusString string, skipString string"},{"Uniquefunname":"func (e *Specs) HasProgrammaticFocus() bool","Funname":"spec.Specs.HasProgrammaticFocus","Returntype":"bool","Args":""},{"Uniquefunname":"func (e *Specs) Len() int","Funname":"spec.Specs.Len","Returntype":"int","Args":""},{"Uniquefunname":"func (e *Specs) Less(i, j int) bool","Funname":"spec.Specs.Less","Returntype":"bool","Args":"i, j int"},{"Uniquefunname":"func (e *Specs) Shuffle(r *rand.Rand)","Funname":"spec.Specs.Shuffle","Returntype":"","Args":"r *rand.Rand"},{"Uniquefunname":"func (e *Specs) SkipMeasurements()","Funname":"spec.Specs.SkipMeasurements","Returntype":"","Args":""},{"Uniquefunname":"func (e *Specs) Specs() []*Spec","Funname":"spec.Specs.Specs","Returntype":"[]*Spec","Args":""},{"Uniquefunname":"func (e *Specs) Swap(i, j int)","Funname":"spec.Specs.Swap","Returntype":"","Args":"i, j int"},{"Uniquefunname":"func (e *Specs) applyProgrammaticFocus()","Funname":"spec.Specs.applyProgrammaticFocus","Returntype":"","Args":""},{"Uniquefunname":"func spec.Specs.applyRegExpFocusAndSkip(description string, focusString string, skipString string)","Funname":"spec.Specs.applyRegExpFocusAndSkip","Returntype":"","Args":"description string, focusString string, skipString string"},{"Uniquefunname":"func (e *Specs) toMatch(description string, spec *Spec) []byte","Funname":"spec.Specs.toMatch","Returntype":"[]byte","Args":"description string, spec *Spec"},{"Uniquefunname":"func (e *Specs) toMatch(description string, spec *Spec) []byte","Funname":"toMatch","Returntype":"[]byte","Args":"description string, spec *Spec"}],"Records":[{"Name":"struct:spec.Specs","Fields":["spec.Specs.RegexScansFilePath bool","spec.Specs.hasProgrammaticFocus bool","spec.Specs.specs []*Spec"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/spec/specs_test.go","Functions":null,"Records":[{"Name":"var:spec_test","Fields":["spec_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/spec_iterator/index_computer.go","Functions":[{"Uniquefunname":"func ParallelizedIndexRange(length int, parallelTotal int, parallelNode int)(startIndex int, count int)","Funname":"ParallelizedIndexRange","Returntype":"(startIndex int, count int)","Args":"length int, parallelTotal int, parallelNode int"},{"Uniquefunname":"func spec_iterator.ParallelizedIndexRange(length int, parallelTotal int, parallelNode int)(startIndex int, count int)","Funname":"spec_iterator.ParallelizedIndexRange","Returntype":"(startIndex int, count int)","Args":"length int, parallelTotal int, parallelNode int"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/spec_iterator/index_computer_test.go","Functions":null,"Records":[{"Name":"var:spec_iterator_test","Fields":["spec_iterator_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/spec_iterator/parallel_spec_iterator.go","Functions":[{"Uniquefunname":"func NewParallelIterator(specs []*spec.Spec, host string) *ParallelIterator","Funname":"NewParallelIterator","Returntype":"*ParallelIterator","Args":"specs []*spec.Spec, host string"},{"Uniquefunname":"func (s *ParallelIterator) Next() (*spec.Spec, error)","Funname":"Next","Returntype":"(*spec.Spec, error)","Args":""},{"Uniquefunname":"func (s *ParallelIterator) NumberOfSpecsPriorToIteration() int","Funname":"NumberOfSpecsPriorToIteration","Returntype":"int","Args":""},{"Uniquefunname":"func (s *ParallelIterator) NumberOfSpecsThatWillBeRunIfKnown() (int, bool)","Funname":"NumberOfSpecsThatWillBeRunIfKnown","Returntype":"(int, bool)","Args":""},{"Uniquefunname":"func (s *ParallelIterator) NumberOfSpecsToProcessIfKnown() (int, bool)","Funname":"NumberOfSpecsToProcessIfKnown","Returntype":"(int, bool)","Args":""},{"Uniquefunname":"func NewParallelIterator(specs []*spec.Spec, host string) *ParallelIterator","Funname":"spec_iterator.NewParallelIterator","Returntype":"*ParallelIterator","Args":"specs []*spec.Spec, host string"},{"Uniquefunname":"func (s *ParallelIterator) Next() (*spec.Spec, error)","Funname":"spec_iterator.ParallelIterator.Next","Returntype":"(*spec.Spec, error)","Args":""},{"Uniquefunname":"func (s *ParallelIterator) NumberOfSpecsPriorToIteration() int","Funname":"spec_iterator.ParallelIterator.NumberOfSpecsPriorToIteration","Returntype":"int","Args":""},{"Uniquefunname":"func (s *ParallelIterator) NumberOfSpecsThatWillBeRunIfKnown() (int, bool)","Funname":"spec_iterator.ParallelIterator.NumberOfSpecsThatWillBeRunIfKnown","Returntype":"(int, bool)","Args":""},{"Uniquefunname":"func (s *ParallelIterator) NumberOfSpecsToProcessIfKnown() (int, bool)","Funname":"spec_iterator.ParallelIterator.NumberOfSpecsToProcessIfKnown","Returntype":"(int, bool)","Args":""}],"Records":[{"Name":"struct:spec_iterator.ParallelIterator","Fields":["spec_iterator.ParallelIterator.client *http.Client","spec_iterator.ParallelIterator.host string","spec_iterator.ParallelIterator.specs []*spec.Spec"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/spec_iterator/parallel_spec_iterator_test.go","Functions":null,"Records":[{"Name":"var:spec_iterator_test","Fields":["spec_iterator_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/spec_iterator/serial_spec_iterator.go","Functions":[{"Uniquefunname":"func NewSerialIterator(specs []*spec.Spec) *SerialIterator","Funname":"NewSerialIterator","Returntype":"*SerialIterator","Args":"specs []*spec.Spec"},{"Uniquefunname":"func (s *SerialIterator) Next() (*spec.Spec, error)","Funname":"Next","Returntype":"(*spec.Spec, error)","Args":""},{"Uniquefunname":"func (s *SerialIterator) NumberOfSpecsPriorToIteration() int","Funname":"NumberOfSpecsPriorToIteration","Returntype":"int","Args":""},{"Uniquefunname":"func (s *SerialIterator) NumberOfSpecsThatWillBeRunIfKnown() (int, bool)","Funname":"NumberOfSpecsThatWillBeRunIfKnown","Returntype":"(int, bool)","Args":""},{"Uniquefunname":"func (s *SerialIterator) NumberOfSpecsToProcessIfKnown() (int, bool)","Funname":"NumberOfSpecsToProcessIfKnown","Returntype":"(int, bool)","Args":""},{"Uniquefunname":"func NewSerialIterator(specs []*spec.Spec) *SerialIterator","Funname":"spec_iterator.NewSerialIterator","Returntype":"*SerialIterator","Args":"specs []*spec.Spec"},{"Uniquefunname":"func (s *SerialIterator) Next() (*spec.Spec, error)","Funname":"spec_iterator.SerialIterator.Next","Returntype":"(*spec.Spec, error)","Args":""},{"Uniquefunname":"func (s *SerialIterator) NumberOfSpecsPriorToIteration() int","Funname":"spec_iterator.SerialIterator.NumberOfSpecsPriorToIteration","Returntype":"int","Args":""},{"Uniquefunname":"func (s *SerialIterator) NumberOfSpecsThatWillBeRunIfKnown() (int, bool)","Funname":"spec_iterator.SerialIterator.NumberOfSpecsThatWillBeRunIfKnown","Returntype":"(int, bool)","Args":""},{"Uniquefunname":"func (s *SerialIterator) NumberOfSpecsToProcessIfKnown() (int, bool)","Funname":"spec_iterator.SerialIterator.NumberOfSpecsToProcessIfKnown","Returntype":"(int, bool)","Args":""}],"Records":[{"Name":"struct:spec_iterator.SerialIterator","Fields":["spec_iterator.SerialIterator.index int","spec_iterator.SerialIterator.specs []*spec.Spec"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/spec_iterator/serial_spec_iterator_test.go","Functions":null,"Records":[{"Name":"var:spec_iterator_test","Fields":["spec_iterator_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/spec_iterator/sharded_parallel_spec_iterator.go","Functions":[{"Uniquefunname":"func NewShardedParallelIterator(specs []*spec.Spec, total int, node int)*ShardedParallelIterator","Funname":"NewShardedParallelIterator","Returntype":"*ShardedParallelIterator","Args":"specs []*spec.Spec, total int, node int"},{"Uniquefunname":"func (s *ShardedParallelIterator) Next() (*spec.Spec, error)","Funname":"Next","Returntype":"(*spec.Spec, error)","Args":""},{"Uniquefunname":"func (s *ShardedParallelIterator) NumberOfSpecsPriorToIteration() int","Funname":"NumberOfSpecsPriorToIteration","Returntype":"int","Args":""},{"Uniquefunname":"func (s *ShardedParallelIterator) NumberOfSpecsThatWillBeRunIfKnown() (int, bool)","Funname":"NumberOfSpecsThatWillBeRunIfKnown","Returntype":"(int, bool)","Args":""},{"Uniquefunname":"func (s *ShardedParallelIterator) NumberOfSpecsToProcessIfKnown() (int, bool)","Funname":"NumberOfSpecsToProcessIfKnown","Returntype":"(int, bool)","Args":""},{"Uniquefunname":"func spec_iterator.NewShardedParallelIterator(specs []*spec.Spec, total int, node int)*ShardedParallelIterator","Funname":"spec_iterator.NewShardedParallelIterator","Returntype":"*ShardedParallelIterator","Args":"specs []*spec.Spec, total int, node int"},{"Uniquefunname":"func (s *ShardedParallelIterator) Next() (*spec.Spec, error)","Funname":"spec_iterator.ShardedParallelIterator.Next","Returntype":"(*spec.Spec, error)","Args":""},{"Uniquefunname":"func (s *ShardedParallelIterator) NumberOfSpecsPriorToIteration() int","Funname":"spec_iterator.ShardedParallelIterator.NumberOfSpecsPriorToIteration","Returntype":"int","Args":""},{"Uniquefunname":"func (s *ShardedParallelIterator) NumberOfSpecsThatWillBeRunIfKnown() (int, bool)","Funname":"spec_iterator.ShardedParallelIterator.NumberOfSpecsThatWillBeRunIfKnown","Returntype":"(int, bool)","Args":""},{"Uniquefunname":"func (s *ShardedParallelIterator) NumberOfSpecsToProcessIfKnown() (int, bool)","Funname":"spec_iterator.ShardedParallelIterator.NumberOfSpecsToProcessIfKnown","Returntype":"(int, bool)","Args":""}],"Records":[{"Name":"struct:spec_iterator.ShardedParallelIterator","Fields":["spec_iterator.ShardedParallelIterator.index int","spec_iterator.ShardedParallelIterator.maxIndex int","spec_iterator.ShardedParallelIterator.specs []*spec.Spec"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/spec_iterator/sharded_parallel_spec_iterator_test.go","Functions":null,"Records":[{"Name":"var:spec_iterator_test","Fields":["spec_iterator_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/spec_iterator/spec_iterator.go","Functions":null,"Records":[{"Name":"struct:spec_iterator.Counter","Fields":["spec_iterator.Counter.Index int"]},{"Name":"var:spec_iterator","Fields":["spec_iterator.ErrClosed"]},{"Name":"interface","Fields":["spec_iterator.SpecIterator"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/spec_iterator/spec_iterator_suite_test.go","Functions":[{"Uniquefunname":"func TestSpecIterator(t *testing.T)","Funname":"TestSpecIterator","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestSpecIterator(t *testing.T)","Funname":"spec_iterator_test.TestSpecIterator","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/specrunner/random_id.go","Functions":[{"Uniquefunname":"func randomID() string","Funname":"randomID","Returntype":"string","Args":""},{"Uniquefunname":"func randomID() string","Funname":"specrunner.randomID","Returntype":"string","Args":""}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/specrunner/spec_runner.go","Functions":[{"Uniquefunname":"func (runner *SpecRunner) CurrentSpecSummary() (*types.SpecSummary, bool)","Funname":"CurrentSpecSummary","Returntype":"(*types.SpecSummary, bool)","Args":""},{"Uniquefunname":"func New(description string, beforeSuiteNode leafnodes.SuiteNode, iterator spec_iterator.SpecIterator, afterSuiteNode leafnodes.SuiteNode, reporters []reporters.Reporter, writer Writer.WriterInterface, config config.GinkgoConfigType)*SpecRunner","Funname":"New","Returntype":"*SpecRunner","Args":"description string, beforeSuiteNode leafnodes.SuiteNode, iterator spec_iterator.SpecIterator, afterSuiteNode leafnodes.SuiteNode, reporters []reporters.Reporter, writer Writer.WriterInterface, config config.GinkgoConfigType"},{"Uniquefunname":"func (runner *SpecRunner) Run() bool","Funname":"Run","Returntype":"bool","Args":""},{"Uniquefunname":"func (runner *SpecRunner) blockForeverIfInterrupted()","Funname":"blockForeverIfInterrupted","Returntype":"","Args":""},{"Uniquefunname":"func countSpecsThatRanSatisfying(filter func(ex *spec.Spec) bool)(count int)","Funname":"countSpecsThatRanSatisfying","Returntype":"(count int)","Args":"filter func(ex *spec.Spec) bool"},{"Uniquefunname":"func (runner *SpecRunner) markInterrupted()","Funname":"markInterrupted","Returntype":"","Args":""},{"Uniquefunname":"func (runner *SpecRunner) performDryRun()","Funname":"performDryRun","Returntype":"","Args":""},{"Uniquefunname":"func (runner *SpecRunner) registerForHardInterrupts()","Funname":"registerForHardInterrupts","Returntype":"","Args":""},{"Uniquefunname":"func (runner *SpecRunner) registerForInterrupts(signalRegistered chan struct","Funname":"registerForInterrupts","Returntype":"","Args":"signalRegistered chan struct{}"},{"Uniquefunname":"func (runner *SpecRunner) reportAfterSuite(summary *types.SetupSummary)","Funname":"reportAfterSuite","Returntype":"","Args":"summary *types.SetupSummary"},{"Uniquefunname":"func (runner *SpecRunner) reportBeforeSuite(summary *types.SetupSummary)","Funname":"reportBeforeSuite","Returntype":"","Args":"summary *types.SetupSummary"},{"Uniquefunname":"func (runner *SpecRunner) reportSpecDidComplete(summary *types.SpecSummary, failed bool)","Funname":"reportSpecDidComplete","Returntype":"","Args":"summary *types.SpecSummary, failed bool"},{"Uniquefunname":"func (runner *SpecRunner) reportSpecWillRun(summary *types.SpecSummary)","Funname":"reportSpecWillRun","Returntype":"","Args":"summary *types.SpecSummary"},{"Uniquefunname":"func (runner *SpecRunner) reportSuiteDidEnd(success bool)","Funname":"reportSuiteDidEnd","Returntype":"","Args":"success bool"},{"Uniquefunname":"func (runner *SpecRunner) reportSuiteWillBegin()","Funname":"reportSuiteWillBegin","Returntype":"","Args":""},{"Uniquefunname":"func (runner *SpecRunner) runAfterSuite() bool","Funname":"runAfterSuite","Returntype":"bool","Args":""},{"Uniquefunname":"func (runner *SpecRunner) runBeforeSuite() bool","Funname":"runBeforeSuite","Returntype":"bool","Args":""},{"Uniquefunname":"func (runner *SpecRunner) runSpec(spec *spec.Spec) (passed bool)","Funname":"runSpec","Returntype":"(passed bool)","Args":"spec *spec.Spec"},{"Uniquefunname":"func (runner *SpecRunner) runSpecs() bool","Funname":"runSpecs","Returntype":"bool","Args":""},{"Uniquefunname":"func specrunner.New(description string, beforeSuiteNode leafnodes.SuiteNode, iterator spec_iterator.SpecIterator, afterSuiteNode leafnodes.SuiteNode, reporters []reporters.Reporter, writer Writer.WriterInterface, config config.GinkgoConfigType)*SpecRunner","Funname":"specrunner.New","Returntype":"*SpecRunner","Args":"description string, beforeSuiteNode leafnodes.SuiteNode, iterator spec_iterator.SpecIterator, afterSuiteNode leafnodes.SuiteNode, reporters []reporters.Reporter, writer Writer.WriterInterface, config config.GinkgoConfigType"},{"Uniquefunname":"func (runner *SpecRunner) CurrentSpecSummary() (*types.SpecSummary, bool)","Funname":"specrunner.SpecRunner.CurrentSpecSummary","Returntype":"(*types.SpecSummary, bool)","Args":""},{"Uniquefunname":"func (runner *SpecRunner) Run() bool","Funname":"specrunner.SpecRunner.Run","Returntype":"bool","Args":""},{"Uniquefunname":"func (runner *SpecRunner) blockForeverIfInterrupted()","Funname":"specrunner.SpecRunner.blockForeverIfInterrupted","Returntype":"","Args":""},{"Uniquefunname":"func specrunner.SpecRunner.countSpecsThatRanSatisfying(filter func(ex *spec.Spec) bool)(count int)","Funname":"specrunner.SpecRunner.countSpecsThatRanSatisfying","Returntype":"(count int)","Args":"filter func(ex *spec.Spec) bool"},{"Uniquefunname":"func (runner *SpecRunner) markInterrupted()","Funname":"specrunner.SpecRunner.markInterrupted","Returntype":"","Args":""},{"Uniquefunname":"func (runner *SpecRunner) performDryRun()","Funname":"specrunner.SpecRunner.performDryRun","Returntype":"","Args":""},{"Uniquefunname":"func (runner *SpecRunner) registerForHardInterrupts()","Funname":"specrunner.SpecRunner.registerForHardInterrupts","Returntype":"","Args":""},{"Uniquefunname":"func (runner *SpecRunner) registerForInterrupts(signalRegistered chan struct","Funname":"specrunner.SpecRunner.registerForInterrupts","Returntype":"","Args":"signalRegistered chan struct{}"},{"Uniquefunname":"func (runner *SpecRunner) reportAfterSuite(summary *types.SetupSummary)","Funname":"specrunner.SpecRunner.reportAfterSuite","Returntype":"","Args":"summary *types.SetupSummary"},{"Uniquefunname":"func (runner *SpecRunner) reportBeforeSuite(summary *types.SetupSummary)","Funname":"specrunner.SpecRunner.reportBeforeSuite","Returntype":"","Args":"summary *types.SetupSummary"},{"Uniquefunname":"func (runner *SpecRunner) reportSpecDidComplete(summary *types.SpecSummary, failed bool)","Funname":"specrunner.SpecRunner.reportSpecDidComplete","Returntype":"","Args":"summary *types.SpecSummary, failed bool"},{"Uniquefunname":"func (runner *SpecRunner) reportSpecWillRun(summary *types.SpecSummary)","Funname":"specrunner.SpecRunner.reportSpecWillRun","Returntype":"","Args":"summary *types.SpecSummary"},{"Uniquefunname":"func (runner *SpecRunner) reportSuiteDidEnd(success bool)","Funname":"specrunner.SpecRunner.reportSuiteDidEnd","Returntype":"","Args":"success bool"},{"Uniquefunname":"func (runner *SpecRunner) reportSuiteWillBegin()","Funname":"specrunner.SpecRunner.reportSuiteWillBegin","Returntype":"","Args":""},{"Uniquefunname":"func (runner *SpecRunner) runAfterSuite() bool","Funname":"specrunner.SpecRunner.runAfterSuite","Returntype":"bool","Args":""},{"Uniquefunname":"func (runner *SpecRunner) runBeforeSuite() bool","Funname":"specrunner.SpecRunner.runBeforeSuite","Returntype":"bool","Args":""},{"Uniquefunname":"func (runner *SpecRunner) runSpec(spec *spec.Spec) (passed bool)","Funname":"specrunner.SpecRunner.runSpec","Returntype":"(passed bool)","Args":"spec *spec.Spec"},{"Uniquefunname":"func (runner *SpecRunner) runSpecs() bool","Funname":"specrunner.SpecRunner.runSpecs","Returntype":"bool","Args":""},{"Uniquefunname":"func (runner *SpecRunner) suiteDidEndSummary(success bool) *types.SuiteSummary","Funname":"specrunner.SpecRunner.suiteDidEndSummary","Returntype":"*types.SuiteSummary","Args":"success bool"},{"Uniquefunname":"func (runner *SpecRunner) suiteWillBeginSummary() *types.SuiteSummary","Funname":"specrunner.SpecRunner.suiteWillBeginSummary","Returntype":"*types.SuiteSummary","Args":""},{"Uniquefunname":"func (runner *SpecRunner) wasInterrupted() bool","Funname":"specrunner.SpecRunner.wasInterrupted","Returntype":"bool","Args":""},{"Uniquefunname":"func (runner *SpecRunner) suiteDidEndSummary(success bool) *types.SuiteSummary","Funname":"suiteDidEndSummary","Returntype":"*types.SuiteSummary","Args":"success bool"},{"Uniquefunname":"func (runner *SpecRunner) suiteWillBeginSummary() *types.SuiteSummary","Funname":"suiteWillBeginSummary","Returntype":"*types.SuiteSummary","Args":""},{"Uniquefunname":"func (runner *SpecRunner) wasInterrupted() bool","Funname":"wasInterrupted","Returntype":"bool","Args":""}],"Records":[{"Name":"struct:specrunner.SpecRunner","Fields":["specrunner.SpecRunner.afterSuiteNode leafnodes.SuiteNode","specrunner.SpecRunner.beforeSuiteNode leafnodes.SuiteNode","specrunner.SpecRunner.config config.GinkgoConfigType","specrunner.SpecRunner.description string","specrunner.SpecRunner.interrupted bool","specrunner.SpecRunner.iterator spec_iterator.SpecIterator","specrunner.SpecRunner.lock *sync.Mutex","specrunner.SpecRunner.processedSpecs []*spec.Spec","specrunner.SpecRunner.reporters []reporters.Reporter","specrunner.SpecRunner.runningSpec *spec.Spec","specrunner.SpecRunner.startTime time.Time","specrunner.SpecRunner.suiteID string","specrunner.SpecRunner.writer Writer.WriterInterface"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/specrunner/spec_runner_suite_test.go","Functions":[{"Uniquefunname":"func TestSpecRunner(t *testing.T)","Funname":"TestSpecRunner","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestSpecRunner(t *testing.T)","Funname":"specrunner_test.TestSpecRunner","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/specrunner/spec_runner_test.go","Functions":null,"Records":[{"Name":"var:specrunner_test","Fields":["specrunner_test._","specrunner_test.noneFlag","specrunner_test.pendingFlag"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/suite/suite.go","Functions":[{"Uniquefunname":"func (suite *Suite) CurrentRunningSpecSummary() (*types.SpecSummary, bool)","Funname":"CurrentRunningSpecSummary","Returntype":"(*types.SpecSummary, bool)","Args":""},{"Uniquefunname":"func New(failer *failer.Failer) *Suite","Funname":"New","Returntype":"*Suite","Args":"failer *failer.Failer"},{"Uniquefunname":"func PushAfterEachNode(body interface{}, codeLocation types.CodeLocation, timeout time.Duration)","Funname":"PushAfterEachNode","Returntype":"","Args":"body interface{}, codeLocation types.CodeLocation, timeout time.Duration"},{"Uniquefunname":"func PushBeforeEachNode(body interface{}, codeLocation types.CodeLocation, timeout time.Duration)","Funname":"PushBeforeEachNode","Returntype":"","Args":"body interface{}, codeLocation types.CodeLocation, timeout time.Duration"},{"Uniquefunname":"func PushContainerNode(text string, body func(), flag types.FlagType, codeLocation types.CodeLocation)","Funname":"PushContainerNode","Returntype":"","Args":"text string, body func(), flag types.FlagType, codeLocation types.CodeLocation"},{"Uniquefunname":"func PushItNode(text string, body interface{}, flag types.FlagType, codeLocation types.CodeLocation, timeout time.Duration)","Funname":"PushItNode","Returntype":"","Args":"text string, body interface{}, flag types.FlagType, codeLocation types.CodeLocation, timeout time.Duration"},{"Uniquefunname":"func PushJustAfterEachNode(body interface{}, codeLocation types.CodeLocation, timeout time.Duration)","Funname":"PushJustAfterEachNode","Returntype":"","Args":"body interface{}, codeLocation types.CodeLocation, timeout time.Duration"},{"Uniquefunname":"func PushJustBeforeEachNode(body interface{}, codeLocation types.CodeLocation, timeout time.Duration)","Funname":"PushJustBeforeEachNode","Returntype":"","Args":"body interface{}, codeLocation types.CodeLocation, timeout time.Duration"},{"Uniquefunname":"func PushMeasureNode(text string, body interface{}, flag types.FlagType, codeLocation types.CodeLocation, samples int)","Funname":"PushMeasureNode","Returntype":"","Args":"text string, body interface{}, flag types.FlagType, codeLocation types.CodeLocation, samples int"},{"Uniquefunname":"func Run(t ginkgoTestingT, description string, reporters []reporters.Reporter, writer writer.WriterInterface, config config.GinkgoConfigType)(bool, bool)","Funname":"Run","Returntype":"(bool, bool)","Args":"t ginkgoTestingT, description string, reporters []reporters.Reporter, writer writer.WriterInterface, config config.GinkgoConfigType"},{"Uniquefunname":"func SetAfterSuiteNode(body interface{}, codeLocation types.CodeLocation, timeout time.Duration)","Funname":"SetAfterSuiteNode","Returntype":"","Args":"body interface{}, codeLocation types.CodeLocation, timeout time.Duration"},{"Uniquefunname":"func SetBeforeSuiteNode(body interface{}, codeLocation types.CodeLocation, timeout time.Duration)","Funname":"SetBeforeSuiteNode","Returntype":"","Args":"body interface{}, codeLocation types.CodeLocation, timeout time.Duration"},{"Uniquefunname":"func SetSynchronizedAfterSuiteNode(bodyA interface{}, bodyB interface{}, codeLocation types.CodeLocation, timeout time.Duration)","Funname":"SetSynchronizedAfterSuiteNode","Returntype":"","Args":"bodyA interface{}, bodyB interface{}, codeLocation types.CodeLocation, timeout time.Duration"},{"Uniquefunname":"func SetSynchronizedBeforeSuiteNode(bodyA interface{}, bodyB interface{}, codeLocation types.CodeLocation, timeout time.Duration)","Funname":"SetSynchronizedBeforeSuiteNode","Returntype":"","Args":"bodyA interface{}, bodyB interface{}, codeLocation types.CodeLocation, timeout time.Duration"},{"Uniquefunname":"func generateSpecsIterator(description string, config config.GinkgoConfigType)(spec_iterator.SpecIterator, bool)","Funname":"generateSpecsIterator","Returntype":"(spec_iterator.SpecIterator, bool)","Args":"description string, config config.GinkgoConfigType"},{"Uniquefunname":"func New(failer *failer.Failer) *Suite","Funname":"suite.New","Returntype":"*Suite","Args":"failer *failer.Failer"},{"Uniquefunname":"func (suite *Suite) CurrentRunningSpecSummary() (*types.SpecSummary, bool)","Funname":"suite.Suite.CurrentRunningSpecSummary","Returntype":"(*types.SpecSummary, bool)","Args":""},{"Uniquefunname":"func suite.Suite.PushAfterEachNode(body interface{}, codeLocation types.CodeLocation, timeout time.Duration)","Funname":"suite.Suite.PushAfterEachNode","Returntype":"","Args":"body interface{}, codeLocation types.CodeLocation, timeout time.Duration"},{"Uniquefunname":"func suite.Suite.PushBeforeEachNode(body interface{}, codeLocation types.CodeLocation, timeout time.Duration)","Funname":"suite.Suite.PushBeforeEachNode","Returntype":"","Args":"body interface{}, codeLocation types.CodeLocation, timeout time.Duration"},{"Uniquefunname":"func suite.Suite.PushContainerNode(text string, body func(), flag types.FlagType, codeLocation types.CodeLocation)","Funname":"suite.Suite.PushContainerNode","Returntype":"","Args":"text string, body func(), flag types.FlagType, codeLocation types.CodeLocation"},{"Uniquefunname":"func suite.Suite.PushItNode(text string, body interface{}, flag types.FlagType, codeLocation types.CodeLocation, timeout time.Duration)","Funname":"suite.Suite.PushItNode","Returntype":"","Args":"text string, body interface{}, flag types.FlagType, codeLocation types.CodeLocation, timeout time.Duration"},{"Uniquefunname":"func suite.Suite.PushJustAfterEachNode(body interface{}, codeLocation types.CodeLocation, timeout time.Duration)","Funname":"suite.Suite.PushJustAfterEachNode","Returntype":"","Args":"body interface{}, codeLocation types.CodeLocation, timeout time.Duration"},{"Uniquefunname":"func suite.Suite.PushJustBeforeEachNode(body interface{}, codeLocation types.CodeLocation, timeout time.Duration)","Funname":"suite.Suite.PushJustBeforeEachNode","Returntype":"","Args":"body interface{}, codeLocation types.CodeLocation, timeout time.Duration"},{"Uniquefunname":"func suite.Suite.PushMeasureNode(text string, body interface{}, flag types.FlagType, codeLocation types.CodeLocation, samples int)","Funname":"suite.Suite.PushMeasureNode","Returntype":"","Args":"text string, body interface{}, flag types.FlagType, codeLocation types.CodeLocation, samples int"},{"Uniquefunname":"func suite.Suite.Run(t ginkgoTestingT, description string, reporters []reporters.Reporter, writer writer.WriterInterface, config config.GinkgoConfigType)(bool, bool)","Funname":"suite.Suite.Run","Returntype":"(bool, bool)","Args":"t ginkgoTestingT, description string, reporters []reporters.Reporter, writer writer.WriterInterface, config config.GinkgoConfigType"},{"Uniquefunname":"func suite.Suite.SetAfterSuiteNode(body interface{}, codeLocation types.CodeLocation, timeout time.Duration)","Funname":"suite.Suite.SetAfterSuiteNode","Returntype":"","Args":"body interface{}, codeLocation types.CodeLocation, timeout time.Duration"},{"Uniquefunname":"func suite.Suite.SetBeforeSuiteNode(body interface{}, codeLocation types.CodeLocation, timeout time.Duration)","Funname":"suite.Suite.SetBeforeSuiteNode","Returntype":"","Args":"body interface{}, codeLocation types.CodeLocation, timeout time.Duration"},{"Uniquefunname":"func suite.Suite.SetSynchronizedAfterSuiteNode(bodyA interface{}, bodyB interface{}, codeLocation types.CodeLocation, timeout time.Duration)","Funname":"suite.Suite.SetSynchronizedAfterSuiteNode","Returntype":"","Args":"bodyA interface{}, bodyB interface{}, codeLocation types.CodeLocation, timeout time.Duration"},{"Uniquefunname":"func suite.Suite.SetSynchronizedBeforeSuiteNode(bodyA interface{}, bodyB interface{}, codeLocation types.CodeLocation, timeout time.Duration)","Funname":"suite.Suite.SetSynchronizedBeforeSuiteNode","Returntype":"","Args":"bodyA interface{}, bodyB interface{}, codeLocation types.CodeLocation, timeout time.Duration"},{"Uniquefunname":"func suite.Suite.generateSpecsIterator(description string, config config.GinkgoConfigType)(spec_iterator.SpecIterator, bool)","Funname":"suite.Suite.generateSpecsIterator","Returntype":"(spec_iterator.SpecIterator, bool)","Args":"description string, config config.GinkgoConfigType"}],"Records":[{"Name":"struct:suite.Suite","Fields":["suite.Suite.afterSuiteNode leafnodes.SuiteNode","suite.Suite.beforeSuiteNode leafnodes.SuiteNode","suite.Suite.containerIndex int","suite.Suite.currentContainer *containernode.ContainerNode","suite.Suite.failer *failer.Failer","suite.Suite.runner *specrunner.SpecRunner","suite.Suite.running bool","suite.Suite.topLevelContainer *containernode.ContainerNode"]},{"Name":"interface","Fields":["suite.ginkgoTestingT"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/suite/suite_suite_test.go","Functions":[{"Uniquefunname":"func (fakeT *fakeTestingT) Fail()","Funname":"Fail","Returntype":"","Args":""},{"Uniquefunname":"func Test(t *testing.T)","Funname":"Test","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func Test(t *testing.T)","Funname":"suite_test.Test","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func (fakeT *fakeTestingT) Fail()","Funname":"suite_test.fakeTestingT.Fail","Returntype":"","Args":""}],"Records":[{"Name":"var:suite_test","Fields":["suite_test._","suite_test._","suite_test.numAfterSuiteRuns","suite_test.numBeforeSuiteRuns"]},{"Name":"struct:suite_test.fakeTestingT","Fields":["suite_test.fakeTestingT.didFail bool"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/suite/suite_test.go","Functions":null,"Records":[{"Name":"var:suite_test","Fields":["suite_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/testingtproxy/testing_t_proxy.go","Functions":[{"Uniquefunname":"func (t *ginkgoTestingTProxy) Error(args ...interface","Funname":"Error","Returntype":"","Args":"args ...interface{}"},{"Uniquefunname":"func (t *ginkgoTestingTProxy) Errorf(format string, args ...interface","Funname":"Errorf","Returntype":"","Args":"format string, args ...interface{}"},{"Uniquefunname":"func (t *ginkgoTestingTProxy) Fail()","Funname":"Fail","Returntype":"","Args":""},{"Uniquefunname":"func (t *ginkgoTestingTProxy) FailNow()","Funname":"FailNow","Returntype":"","Args":""},{"Uniquefunname":"func (t *ginkgoTestingTProxy) Failed() bool","Funname":"Failed","Returntype":"bool","Args":""},{"Uniquefunname":"func (t *ginkgoTestingTProxy) Fatal(args ...interface","Funname":"Fatal","Returntype":"","Args":"args ...interface{}"},{"Uniquefunname":"func (t *ginkgoTestingTProxy) Fatalf(format string, args ...interface","Funname":"Fatalf","Returntype":"","Args":"format string, args ...interface{}"},{"Uniquefunname":"func (t *ginkgoTestingTProxy) Log(args ...interface","Funname":"Log","Returntype":"","Args":"args ...interface{}"},{"Uniquefunname":"func (t *ginkgoTestingTProxy) Logf(format string, args ...interface","Funname":"Logf","Returntype":"","Args":"format string, args ...interface{}"},{"Uniquefunname":"func New(writer io.Writer, fail failFunc, offset int) *ginkgoTestingTProxy","Funname":"New","Returntype":"*ginkgoTestingTProxy","Args":"writer io.Writer, fail failFunc, offset int"},{"Uniquefunname":"func (t *ginkgoTestingTProxy) Parallel()","Funname":"Parallel","Returntype":"","Args":""},{"Uniquefunname":"func (t *ginkgoTestingTProxy) Skip(args ...interface","Funname":"Skip","Returntype":"","Args":"args ...interface{}"},{"Uniquefunname":"func (t *ginkgoTestingTProxy) SkipNow()","Funname":"SkipNow","Returntype":"","Args":""},{"Uniquefunname":"func (t *ginkgoTestingTProxy) Skipf(format string, args ...interface","Funname":"Skipf","Returntype":"","Args":"format string, args ...interface{}"},{"Uniquefunname":"func (t *ginkgoTestingTProxy) Skipped() bool","Funname":"Skipped","Returntype":"bool","Args":""},{"Uniquefunname":"func New(writer io.Writer, fail failFunc, offset int) *ginkgoTestingTProxy","Funname":"testingtproxy.New","Returntype":"*ginkgoTestingTProxy","Args":"writer io.Writer, fail failFunc, offset int"},{"Uniquefunname":"func (t *ginkgoTestingTProxy) Error(args ...interface","Funname":"testingtproxy.ginkgoTestingTProxy.Error","Returntype":"","Args":"args ...interface{}"},{"Uniquefunname":"func (t *ginkgoTestingTProxy) Errorf(format string, args ...interface","Funname":"testingtproxy.ginkgoTestingTProxy.Errorf","Returntype":"","Args":"format string, args ...interface{}"},{"Uniquefunname":"func (t *ginkgoTestingTProxy) Fail()","Funname":"testingtproxy.ginkgoTestingTProxy.Fail","Returntype":"","Args":""},{"Uniquefunname":"func (t *ginkgoTestingTProxy) FailNow()","Funname":"testingtproxy.ginkgoTestingTProxy.FailNow","Returntype":"","Args":""},{"Uniquefunname":"func (t *ginkgoTestingTProxy) Failed() bool","Funname":"testingtproxy.ginkgoTestingTProxy.Failed","Returntype":"bool","Args":""},{"Uniquefunname":"func (t *ginkgoTestingTProxy) Fatal(args ...interface","Funname":"testingtproxy.ginkgoTestingTProxy.Fatal","Returntype":"","Args":"args ...interface{}"},{"Uniquefunname":"func (t *ginkgoTestingTProxy) Fatalf(format string, args ...interface","Funname":"testingtproxy.ginkgoTestingTProxy.Fatalf","Returntype":"","Args":"format string, args ...interface{}"},{"Uniquefunname":"func (t *ginkgoTestingTProxy) Log(args ...interface","Funname":"testingtproxy.ginkgoTestingTProxy.Log","Returntype":"","Args":"args ...interface{}"},{"Uniquefunname":"func (t *ginkgoTestingTProxy) Logf(format string, args ...interface","Funname":"testingtproxy.ginkgoTestingTProxy.Logf","Returntype":"","Args":"format string, args ...interface{}"},{"Uniquefunname":"func (t *ginkgoTestingTProxy) Parallel()","Funname":"testingtproxy.ginkgoTestingTProxy.Parallel","Returntype":"","Args":""},{"Uniquefunname":"func (t *ginkgoTestingTProxy) Skip(args ...interface","Funname":"testingtproxy.ginkgoTestingTProxy.Skip","Returntype":"","Args":"args ...interface{}"},{"Uniquefunname":"func (t *ginkgoTestingTProxy) SkipNow()","Funname":"testingtproxy.ginkgoTestingTProxy.SkipNow","Returntype":"","Args":""},{"Uniquefunname":"func (t *ginkgoTestingTProxy) Skipf(format string, args ...interface","Funname":"testingtproxy.ginkgoTestingTProxy.Skipf","Returntype":"","Args":"format string, args ...interface{}"},{"Uniquefunname":"func (t *ginkgoTestingTProxy) Skipped() bool","Funname":"testingtproxy.ginkgoTestingTProxy.Skipped","Returntype":"bool","Args":""}],"Records":[{"Name":"struct:testingtproxy.ginkgoTestingTProxy","Fields":["testingtproxy.ginkgoTestingTProxy.fail failFunc","testingtproxy.ginkgoTestingTProxy.offset int","testingtproxy.ginkgoTestingTProxy.writer io.Writer"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/writer/fake_writer.go","Functions":[{"Uniquefunname":"func (writer *FakeGinkgoWriter) AddEvent(event string)","Funname":"AddEvent","Returntype":"","Args":"event string"},{"Uniquefunname":"func (writer *FakeGinkgoWriter) Bytes() []byte","Funname":"Bytes","Returntype":"[]byte","Args":""},{"Uniquefunname":"func (writer *FakeGinkgoWriter) DumpOut()","Funname":"DumpOut","Returntype":"","Args":""},{"Uniquefunname":"func (writer *FakeGinkgoWriter) DumpOutWithHeader(header string)","Funname":"DumpOutWithHeader","Returntype":"","Args":"header string"},{"Uniquefunname":"func NewFake() *FakeGinkgoWriter","Funname":"NewFake","Returntype":"*FakeGinkgoWriter","Args":""},{"Uniquefunname":"func (writer *FakeGinkgoWriter) Truncate()","Funname":"Truncate","Returntype":"","Args":""},{"Uniquefunname":"func (writer *FakeGinkgoWriter) Write(data []byte) (n int, err error)","Funname":"Write","Returntype":"(n int, err error)","Args":"data []byte"},{"Uniquefunname":"func (writer *FakeGinkgoWriter) AddEvent(event string)","Funname":"writer.FakeGinkgoWriter.AddEvent","Returntype":"","Args":"event string"},{"Uniquefunname":"func (writer *FakeGinkgoWriter) Bytes() []byte","Funname":"writer.FakeGinkgoWriter.Bytes","Returntype":"[]byte","Args":""},{"Uniquefunname":"func (writer *FakeGinkgoWriter) DumpOut()","Funname":"writer.FakeGinkgoWriter.DumpOut","Returntype":"","Args":""},{"Uniquefunname":"func (writer *FakeGinkgoWriter) DumpOutWithHeader(header string)","Funname":"writer.FakeGinkgoWriter.DumpOutWithHeader","Returntype":"","Args":"header string"},{"Uniquefunname":"func (writer *FakeGinkgoWriter) Truncate()","Funname":"writer.FakeGinkgoWriter.Truncate","Returntype":"","Args":""},{"Uniquefunname":"func (writer *FakeGinkgoWriter) Write(data []byte) (n int, err error)","Funname":"writer.FakeGinkgoWriter.Write","Returntype":"(n int, err error)","Args":"data []byte"},{"Uniquefunname":"func NewFake() *FakeGinkgoWriter","Funname":"writer.NewFake","Returntype":"*FakeGinkgoWriter","Args":""}],"Records":[{"Name":"struct:writer.FakeGinkgoWriter","Fields":["writer.FakeGinkgoWriter.EventStream []string"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/writer/writer.go","Functions":[{"Uniquefunname":"func (w *Writer) AndRedirectTo(writer io.Writer)","Funname":"AndRedirectTo","Returntype":"","Args":"writer io.Writer"},{"Uniquefunname":"func (w *Writer) Bytes() []byte","Funname":"Bytes","Returntype":"[]byte","Args":""},{"Uniquefunname":"func (w *Writer) DumpOut()","Funname":"DumpOut","Returntype":"","Args":""},{"Uniquefunname":"func (w *Writer) DumpOutWithHeader(header string)","Funname":"DumpOutWithHeader","Returntype":"","Args":"header string"},{"Uniquefunname":"func New(outWriter io.Writer) *Writer","Funname":"New","Returntype":"*Writer","Args":"outWriter io.Writer"},{"Uniquefunname":"func (w *Writer) SetStream(stream bool)","Funname":"SetStream","Returntype":"","Args":"stream bool"},{"Uniquefunname":"func (w *Writer) Truncate()","Funname":"Truncate","Returntype":"","Args":""},{"Uniquefunname":"func (w *Writer) Write(b []byte) (n int, err error)","Funname":"Write","Returntype":"(n int, err error)","Args":"b []byte"},{"Uniquefunname":"func New(outWriter io.Writer) *Writer","Funname":"writer.New","Returntype":"*Writer","Args":"outWriter io.Writer"},{"Uniquefunname":"func (w *Writer) AndRedirectTo(writer io.Writer)","Funname":"writer.Writer.AndRedirectTo","Returntype":"","Args":"writer io.Writer"},{"Uniquefunname":"func (w *Writer) Bytes() []byte","Funname":"writer.Writer.Bytes","Returntype":"[]byte","Args":""},{"Uniquefunname":"func (w *Writer) DumpOut()","Funname":"writer.Writer.DumpOut","Returntype":"","Args":""},{"Uniquefunname":"func (w *Writer) DumpOutWithHeader(header string)","Funname":"writer.Writer.DumpOutWithHeader","Returntype":"","Args":"header string"},{"Uniquefunname":"func (w *Writer) SetStream(stream bool)","Funname":"writer.Writer.SetStream","Returntype":"","Args":"stream bool"},{"Uniquefunname":"func (w *Writer) Truncate()","Funname":"writer.Writer.Truncate","Returntype":"","Args":""},{"Uniquefunname":"func (w *Writer) Write(b []byte) (n int, err error)","Funname":"writer.Writer.Write","Returntype":"(n int, err error)","Args":"b []byte"}],"Records":[{"Name":"struct:writer.Writer","Fields":["writer.Writer.buffer *bytes.Buffer","writer.Writer.lock *sync.Mutex","writer.Writer.outWriter io.Writer","writer.Writer.redirector io.Writer","writer.Writer.stream bool"]},{"Name":"interface","Fields":["writer.WriterInterface"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/writer/writer_suite_test.go","Functions":[{"Uniquefunname":"func TestWriter(t *testing.T)","Funname":"TestWriter","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestWriter(t *testing.T)","Funname":"writer_test.TestWriter","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/internal/writer/writer_test.go","Functions":null,"Records":[{"Name":"var:writer_test","Fields":["writer_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/reporters/default_reporter.go","Functions":[{"Uniquefunname":"func (reporter *DefaultReporter) AfterSuiteDidRun(setupSummary *types.SetupSummary)","Funname":"AfterSuiteDidRun","Returntype":"","Args":"setupSummary *types.SetupSummary"},{"Uniquefunname":"func (reporter *DefaultReporter) BeforeSuiteDidRun(setupSummary *types.SetupSummary)","Funname":"BeforeSuiteDidRun","Returntype":"","Args":"setupSummary *types.SetupSummary"},{"Uniquefunname":"func NewDefaultReporter(config config.DefaultReporterConfigType, stenographer stenographer.Stenographer)*DefaultReporter","Funname":"NewDefaultReporter","Returntype":"*DefaultReporter","Args":"config config.DefaultReporterConfigType, stenographer stenographer.Stenographer"},{"Uniquefunname":"func (reporter *DefaultReporter) SpecDidComplete(specSummary *types.SpecSummary)","Funname":"SpecDidComplete","Returntype":"","Args":"specSummary *types.SpecSummary"},{"Uniquefunname":"func (reporter *DefaultReporter) SpecSuiteDidEnd(summary *types.SuiteSummary)","Funname":"SpecSuiteDidEnd","Returntype":"","Args":"summary *types.SuiteSummary"},{"Uniquefunname":"func SpecSuiteWillBegin(config config.GinkgoConfigType, summary *types.SuiteSummary)","Funname":"SpecSuiteWillBegin","Returntype":"","Args":"config config.GinkgoConfigType, summary *types.SuiteSummary"},{"Uniquefunname":"func (reporter *DefaultReporter) SpecWillRun(specSummary *types.SpecSummary)","Funname":"SpecWillRun","Returntype":"","Args":"specSummary *types.SpecSummary"},{"Uniquefunname":"func (reporter *DefaultReporter) AfterSuiteDidRun(setupSummary *types.SetupSummary)","Funname":"reporters.DefaultReporter.AfterSuiteDidRun","Returntype":"","Args":"setupSummary *types.SetupSummary"},{"Uniquefunname":"func (reporter *DefaultReporter) BeforeSuiteDidRun(setupSummary *types.SetupSummary)","Funname":"reporters.DefaultReporter.BeforeSuiteDidRun","Returntype":"","Args":"setupSummary *types.SetupSummary"},{"Uniquefunname":"func (reporter *DefaultReporter) SpecDidComplete(specSummary *types.SpecSummary)","Funname":"reporters.DefaultReporter.SpecDidComplete","Returntype":"","Args":"specSummary *types.SpecSummary"},{"Uniquefunname":"func (reporter *DefaultReporter) SpecSuiteDidEnd(summary *types.SuiteSummary)","Funname":"reporters.DefaultReporter.SpecSuiteDidEnd","Returntype":"","Args":"summary *types.SuiteSummary"},{"Uniquefunname":"func reporters.DefaultReporter.SpecSuiteWillBegin(config config.GinkgoConfigType, summary *types.SuiteSummary)","Funname":"reporters.DefaultReporter.SpecSuiteWillBegin","Returntype":"","Args":"config config.GinkgoConfigType, summary *types.SuiteSummary"},{"Uniquefunname":"func (reporter *DefaultReporter) SpecWillRun(specSummary *types.SpecSummary)","Funname":"reporters.DefaultReporter.SpecWillRun","Returntype":"","Args":"specSummary *types.SpecSummary"},{"Uniquefunname":"func reporters.NewDefaultReporter(config config.DefaultReporterConfigType, stenographer stenographer.Stenographer)*DefaultReporter","Funname":"reporters.NewDefaultReporter","Returntype":"*DefaultReporter","Args":"config config.DefaultReporterConfigType, stenographer stenographer.Stenographer"}],"Records":[{"Name":"struct:reporters.DefaultReporter","Fields":["reporters.DefaultReporter.config config.DefaultReporterConfigType","reporters.DefaultReporter.specSummaries []*types.SpecSummary","reporters.DefaultReporter.stenographer stenographer.Stenographer"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/reporters/default_reporter_test.go","Functions":null,"Records":[{"Name":"var:reporters_test","Fields":["reporters_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/reporters/fake_reporter.go","Functions":[{"Uniquefunname":"func (fakeR *FakeReporter) AfterSuiteDidRun(setupSummary *types.SetupSummary)","Funname":"AfterSuiteDidRun","Returntype":"","Args":"setupSummary *types.SetupSummary"},{"Uniquefunname":"func (fakeR *FakeReporter) BeforeSuiteDidRun(setupSummary *types.SetupSummary)","Funname":"BeforeSuiteDidRun","Returntype":"","Args":"setupSummary *types.SetupSummary"},{"Uniquefunname":"func NewFakeReporter() *FakeReporter","Funname":"NewFakeReporter","Returntype":"*FakeReporter","Args":""},{"Uniquefunname":"func (fakeR *FakeReporter) SpecDidComplete(specSummary *types.SpecSummary)","Funname":"SpecDidComplete","Returntype":"","Args":"specSummary *types.SpecSummary"},{"Uniquefunname":"func (fakeR *FakeReporter) SpecSuiteDidEnd(summary *types.SuiteSummary)","Funname":"SpecSuiteDidEnd","Returntype":"","Args":"summary *types.SuiteSummary"},{"Uniquefunname":"func SpecSuiteWillBegin(config config.GinkgoConfigType, summary *types.SuiteSummary)","Funname":"SpecSuiteWillBegin","Returntype":"","Args":"config config.GinkgoConfigType, summary *types.SuiteSummary"},{"Uniquefunname":"func (fakeR *FakeReporter) SpecWillRun(specSummary *types.SpecSummary)","Funname":"SpecWillRun","Returntype":"","Args":"specSummary *types.SpecSummary"},{"Uniquefunname":"func (fakeR *FakeReporter) AfterSuiteDidRun(setupSummary *types.SetupSummary)","Funname":"reporters.FakeReporter.AfterSuiteDidRun","Returntype":"","Args":"setupSummary *types.SetupSummary"},{"Uniquefunname":"func (fakeR *FakeReporter) BeforeSuiteDidRun(setupSummary *types.SetupSummary)","Funname":"reporters.FakeReporter.BeforeSuiteDidRun","Returntype":"","Args":"setupSummary *types.SetupSummary"},{"Uniquefunname":"func (fakeR *FakeReporter) SpecDidComplete(specSummary *types.SpecSummary)","Funname":"reporters.FakeReporter.SpecDidComplete","Returntype":"","Args":"specSummary *types.SpecSummary"},{"Uniquefunname":"func (fakeR *FakeReporter) SpecSuiteDidEnd(summary *types.SuiteSummary)","Funname":"reporters.FakeReporter.SpecSuiteDidEnd","Returntype":"","Args":"summary *types.SuiteSummary"},{"Uniquefunname":"func reporters.FakeReporter.SpecSuiteWillBegin(config config.GinkgoConfigType, summary *types.SuiteSummary)","Funname":"reporters.FakeReporter.SpecSuiteWillBegin","Returntype":"","Args":"config config.GinkgoConfigType, summary *types.SuiteSummary"},{"Uniquefunname":"func (fakeR *FakeReporter) SpecWillRun(specSummary *types.SpecSummary)","Funname":"reporters.FakeReporter.SpecWillRun","Returntype":"","Args":"specSummary *types.SpecSummary"},{"Uniquefunname":"func NewFakeReporter() *FakeReporter","Funname":"reporters.NewFakeReporter","Returntype":"*FakeReporter","Args":""}],"Records":[{"Name":"struct:reporters.FakeReporter","Fields":["reporters.FakeReporter.AfterSuiteSummary *types.SetupSummary","reporters.FakeReporter.BeforeSuiteSummary *types.SetupSummary","reporters.FakeReporter.BeginSummary *types.SuiteSummary","reporters.FakeReporter.Config config.GinkgoConfigType","reporters.FakeReporter.EndSummary *types.SuiteSummary","reporters.FakeReporter.SpecDidCompleteStub func(specSummary *types.SpecSummary)","reporters.FakeReporter.SpecSummaries []*types.SpecSummary","reporters.FakeReporter.SpecWillRunStub func(specSummary *types.SpecSummary)","reporters.FakeReporter.SpecWillRunSummaries []*types.SpecSummary"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/reporters/junit_reporter.go","Functions":[{"Uniquefunname":"func (reporter *JUnitReporter) AfterSuiteDidRun(setupSummary *types.SetupSummary)","Funname":"AfterSuiteDidRun","Returntype":"","Args":"setupSummary *types.SetupSummary"},{"Uniquefunname":"func (reporter *JUnitReporter) BeforeSuiteDidRun(setupSummary *types.SetupSummary)","Funname":"BeforeSuiteDidRun","Returntype":"","Args":"setupSummary *types.SetupSummary"},{"Uniquefunname":"func NewJUnitReporter(filename string) *JUnitReporter","Funname":"NewJUnitReporter","Returntype":"*JUnitReporter","Args":"filename string"},{"Uniquefunname":"func (reporter *JUnitReporter) SpecDidComplete(specSummary *types.SpecSummary)","Funname":"SpecDidComplete","Returntype":"","Args":"specSummary *types.SpecSummary"},{"Uniquefunname":"func (reporter *JUnitReporter) SpecSuiteDidEnd(summary *types.SuiteSummary)","Funname":"SpecSuiteDidEnd","Returntype":"","Args":"summary *types.SuiteSummary"},{"Uniquefunname":"func SpecSuiteWillBegin(config config.GinkgoConfigType, summary *types.SuiteSummary)","Funname":"SpecSuiteWillBegin","Returntype":"","Args":"config config.GinkgoConfigType, summary *types.SuiteSummary"},{"Uniquefunname":"func (reporter *JUnitReporter) SpecWillRun(specSummary *types.SpecSummary)","Funname":"SpecWillRun","Returntype":"","Args":"specSummary *types.SpecSummary"},{"Uniquefunname":"func failureMessage(failure types.SpecFailure) string","Funname":"failureMessage","Returntype":"string","Args":"failure types.SpecFailure"},{"Uniquefunname":"func (reporter *JUnitReporter) failureTypeForState(state types.SpecState) string","Funname":"failureTypeForState","Returntype":"string","Args":"state types.SpecState"},{"Uniquefunname":"func handleSetupSummary(name string, setupSummary *types.SetupSummary)","Funname":"handleSetupSummary","Returntype":"","Args":"name string, setupSummary *types.SetupSummary"},{"Uniquefunname":"func (reporter *JUnitReporter) AfterSuiteDidRun(setupSummary *types.SetupSummary)","Funname":"reporters.JUnitReporter.AfterSuiteDidRun","Returntype":"","Args":"setupSummary *types.SetupSummary"},{"Uniquefunname":"func (reporter *JUnitReporter) BeforeSuiteDidRun(setupSummary *types.SetupSummary)","Funname":"reporters.JUnitReporter.BeforeSuiteDidRun","Returntype":"","Args":"setupSummary *types.SetupSummary"},{"Uniquefunname":"func (reporter *JUnitReporter) SpecDidComplete(specSummary *types.SpecSummary)","Funname":"reporters.JUnitReporter.SpecDidComplete","Returntype":"","Args":"specSummary *types.SpecSummary"},{"Uniquefunname":"func (reporter *JUnitReporter) SpecSuiteDidEnd(summary *types.SuiteSummary)","Funname":"reporters.JUnitReporter.SpecSuiteDidEnd","Returntype":"","Args":"summary *types.SuiteSummary"},{"Uniquefunname":"func reporters.JUnitReporter.SpecSuiteWillBegin(config config.GinkgoConfigType, summary *types.SuiteSummary)","Funname":"reporters.JUnitReporter.SpecSuiteWillBegin","Returntype":"","Args":"config config.GinkgoConfigType, summary *types.SuiteSummary"},{"Uniquefunname":"func (reporter *JUnitReporter) SpecWillRun(specSummary *types.SpecSummary)","Funname":"reporters.JUnitReporter.SpecWillRun","Returntype":"","Args":"specSummary *types.SpecSummary"},{"Uniquefunname":"func (reporter *JUnitReporter) failureTypeForState(state types.SpecState) string","Funname":"reporters.JUnitReporter.failureTypeForState","Returntype":"string","Args":"state types.SpecState"},{"Uniquefunname":"func reporters.JUnitReporter.handleSetupSummary(name string, setupSummary *types.SetupSummary)","Funname":"reporters.JUnitReporter.handleSetupSummary","Returntype":"","Args":"name string, setupSummary *types.SetupSummary"},{"Uniquefunname":"func NewJUnitReporter(filename string) *JUnitReporter","Funname":"reporters.NewJUnitReporter","Returntype":"*JUnitReporter","Args":"filename string"},{"Uniquefunname":"func failureMessage(failure types.SpecFailure) string","Funname":"reporters.failureMessage","Returntype":"string","Args":"failure types.SpecFailure"}],"Records":[{"Name":"struct:reporters.JUnitFailureMessage","Fields":["reporters.JUnitFailureMessage.Message string","reporters.JUnitFailureMessage.Type string"]},{"Name":"struct:reporters.JUnitReporter","Fields":["reporters.JUnitReporter.filename string","reporters.JUnitReporter.suite JUnitTestSuite","reporters.JUnitReporter.testSuiteName string"]},{"Name":"struct:reporters.JUnitSkipped","Fields":["reporters.JUnitSkipped.XMLName xml.Name"]},{"Name":"struct:reporters.JUnitTestCase","Fields":["reporters.JUnitTestCase.ClassName string","reporters.JUnitTestCase.FailureMessage *JUnitFailureMessage","reporters.JUnitTestCase.Name string","reporters.JUnitTestCase.Skipped *JUnitSkipped","reporters.JUnitTestCase.SystemOut string","reporters.JUnitTestCase.Time float64"]},{"Name":"struct:reporters.JUnitTestSuite","Fields":["reporters.JUnitTestSuite.Errors int","reporters.JUnitTestSuite.Failures int","reporters.JUnitTestSuite.Name string","reporters.JUnitTestSuite.TestCases []JUnitTestCase","reporters.JUnitTestSuite.Tests int","reporters.JUnitTestSuite.Time float64","reporters.JUnitTestSuite.XMLName xml.Name"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/reporters/junit_reporter_test.go","Functions":null,"Records":[{"Name":"var:reporters_test","Fields":["reporters_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/reporters/reporter.go","Functions":null,"Records":[{"Name":"interface","Fields":["reporters.Reporter"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/reporters/reporters_suite_test.go","Functions":[{"Uniquefunname":"func TestReporters(t *testing.T)","Funname":"TestReporters","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestReporters(t *testing.T)","Funname":"reporters_test.TestReporters","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/reporters/teamcity_reporter.go","Functions":[{"Uniquefunname":"func (reporter *TeamCityReporter) AfterSuiteDidRun(setupSummary *types.SetupSummary)","Funname":"AfterSuiteDidRun","Returntype":"","Args":"setupSummary *types.SetupSummary"},{"Uniquefunname":"func (reporter *TeamCityReporter) BeforeSuiteDidRun(setupSummary *types.SetupSummary)","Funname":"BeforeSuiteDidRun","Returntype":"","Args":"setupSummary *types.SetupSummary"},{"Uniquefunname":"func NewTeamCityReporter(writer io.Writer) *TeamCityReporter","Funname":"NewTeamCityReporter","Returntype":"*TeamCityReporter","Args":"writer io.Writer"},{"Uniquefunname":"func (reporter *TeamCityReporter) SpecDidComplete(specSummary *types.SpecSummary)","Funname":"SpecDidComplete","Returntype":"","Args":"specSummary *types.SpecSummary"},{"Uniquefunname":"func (reporter *TeamCityReporter) SpecSuiteDidEnd(summary *types.SuiteSummary)","Funname":"SpecSuiteDidEnd","Returntype":"","Args":"summary *types.SuiteSummary"},{"Uniquefunname":"func SpecSuiteWillBegin(config config.GinkgoConfigType, summary *types.SuiteSummary)","Funname":"SpecSuiteWillBegin","Returntype":"","Args":"config config.GinkgoConfigType, summary *types.SuiteSummary"},{"Uniquefunname":"func (reporter *TeamCityReporter) SpecWillRun(specSummary *types.SpecSummary)","Funname":"SpecWillRun","Returntype":"","Args":"specSummary *types.SpecSummary"},{"Uniquefunname":"func escape(output string) string","Funname":"escape","Returntype":"string","Args":"output string"},{"Uniquefunname":"func handleSetupSummary(name string, setupSummary *types.SetupSummary)","Funname":"handleSetupSummary","Returntype":"","Args":"name string, setupSummary *types.SetupSummary"},{"Uniquefunname":"func NewTeamCityReporter(writer io.Writer) *TeamCityReporter","Funname":"reporters.NewTeamCityReporter","Returntype":"*TeamCityReporter","Args":"writer io.Writer"},{"Uniquefunname":"func (reporter *TeamCityReporter) AfterSuiteDidRun(setupSummary *types.SetupSummary)","Funname":"reporters.TeamCityReporter.AfterSuiteDidRun","Returntype":"","Args":"setupSummary *types.SetupSummary"},{"Uniquefunname":"func (reporter *TeamCityReporter) BeforeSuiteDidRun(setupSummary *types.SetupSummary)","Funname":"reporters.TeamCityReporter.BeforeSuiteDidRun","Returntype":"","Args":"setupSummary *types.SetupSummary"},{"Uniquefunname":"func (reporter *TeamCityReporter) SpecDidComplete(specSummary *types.SpecSummary)","Funname":"reporters.TeamCityReporter.SpecDidComplete","Returntype":"","Args":"specSummary *types.SpecSummary"},{"Uniquefunname":"func (reporter *TeamCityReporter) SpecSuiteDidEnd(summary *types.SuiteSummary)","Funname":"reporters.TeamCityReporter.SpecSuiteDidEnd","Returntype":"","Args":"summary *types.SuiteSummary"},{"Uniquefunname":"func reporters.TeamCityReporter.SpecSuiteWillBegin(config config.GinkgoConfigType, summary *types.SuiteSummary)","Funname":"reporters.TeamCityReporter.SpecSuiteWillBegin","Returntype":"","Args":"config config.GinkgoConfigType, summary *types.SuiteSummary"},{"Uniquefunname":"func (reporter *TeamCityReporter) SpecWillRun(specSummary *types.SpecSummary)","Funname":"reporters.TeamCityReporter.SpecWillRun","Returntype":"","Args":"specSummary *types.SpecSummary"},{"Uniquefunname":"func reporters.TeamCityReporter.handleSetupSummary(name string, setupSummary *types.SetupSummary)","Funname":"reporters.TeamCityReporter.handleSetupSummary","Returntype":"","Args":"name string, setupSummary *types.SetupSummary"},{"Uniquefunname":"func escape(output string) string","Funname":"reporters.escape","Returntype":"string","Args":"output string"}],"Records":[{"Name":"struct:reporters.TeamCityReporter","Fields":["reporters.TeamCityReporter.testSuiteName string","reporters.TeamCityReporter.writer io.Writer"]},{"Name":"const:reporters","Fields":["reporters.messageId"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/reporters/teamcity_reporter_test.go","Functions":null,"Records":[{"Name":"var:reporters_test","Fields":["reporters_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/reporters/stenographer/console_logging.go","Functions":[{"Uniquefunname":"func colorize(colorCode string, format string, args ...interface{})string","Funname":"colorize","Returntype":"string","Args":"colorCode string, format string, args ...interface{}"},{"Uniquefunname":"func indent(indentation int, format string, args ...interface{})string","Funname":"indent","Returntype":"string","Args":"indentation int, format string, args ...interface{}"},{"Uniquefunname":"func (s *consoleStenographer) print(indentation int, format string, args ...interface","Funname":"print","Returntype":"","Args":"indentation int, format string, args ...interface{}"},{"Uniquefunname":"func (s *consoleStenographer) printBanner(text string, bannerCharacter string)","Funname":"printBanner","Returntype":"","Args":"text string, bannerCharacter string"},{"Uniquefunname":"func (s *consoleStenographer) printDelimiter()","Funname":"printDelimiter","Returntype":"","Args":""},{"Uniquefunname":"func (s *consoleStenographer) printNewLine()","Funname":"printNewLine","Returntype":"","Args":""},{"Uniquefunname":"func (s *consoleStenographer) println(indentation int, format string, args ...interface","Funname":"println","Returntype":"","Args":"indentation int, format string, args ...interface{}"},{"Uniquefunname":"func stenographer.consoleStenographer.colorize(colorCode string, format string, args ...interface{})string","Funname":"stenographer.consoleStenographer.colorize","Returntype":"string","Args":"colorCode string, format string, args ...interface{}"},{"Uniquefunname":"func stenographer.consoleStenographer.indent(indentation int, format string, args ...interface{})string","Funname":"stenographer.consoleStenographer.indent","Returntype":"string","Args":"indentation int, format string, args ...interface{}"},{"Uniquefunname":"func (s *consoleStenographer) print(indentation int, format string, args ...interface","Funname":"stenographer.consoleStenographer.print","Returntype":"","Args":"indentation int, format string, args ...interface{}"},{"Uniquefunname":"func (s *consoleStenographer) printBanner(text string, bannerCharacter string)","Funname":"stenographer.consoleStenographer.printBanner","Returntype":"","Args":"text string, bannerCharacter string"},{"Uniquefunname":"func (s *consoleStenographer) printDelimiter()","Funname":"stenographer.consoleStenographer.printDelimiter","Returntype":"","Args":""},{"Uniquefunname":"func (s *consoleStenographer) printNewLine()","Funname":"stenographer.consoleStenographer.printNewLine","Returntype":"","Args":""},{"Uniquefunname":"func (s *consoleStenographer) println(indentation int, format string, args ...interface","Funname":"stenographer.consoleStenographer.println","Returntype":"","Args":"indentation int, format string, args ...interface{}"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/reporters/stenographer/fake_stenographer.go","Functions":[{"Uniquefunname":"func AnnounceAfterSuiteFailure(summary *types.SetupSummary, succinct bool, fullTrace bool)","Funname":"AnnounceAfterSuiteFailure","Returntype":"","Args":"summary *types.SetupSummary, succinct bool, fullTrace bool"},{"Uniquefunname":"func (stenographer *FakeStenographer) AnnounceAggregatedParallelRun(nodes int, succinct bool)","Funname":"AnnounceAggregatedParallelRun","Returntype":"","Args":"nodes int, succinct bool"},{"Uniquefunname":"func AnnounceBeforeSuiteFailure(summary *types.SetupSummary, succinct bool, fullTrace bool)","Funname":"AnnounceBeforeSuiteFailure","Returntype":"","Args":"summary *types.SetupSummary, succinct bool, fullTrace bool"},{"Uniquefunname":"func (stenographer *FakeStenographer) AnnounceCapturedOutput(output string)","Funname":"AnnounceCapturedOutput","Returntype":"","Args":"output string"},{"Uniquefunname":"func AnnounceNumberOfSpecs(specsToRun int, total int, succinct bool)","Funname":"AnnounceNumberOfSpecs","Returntype":"","Args":"specsToRun int, total int, succinct bool"},{"Uniquefunname":"func (stenographer *FakeStenographer) AnnounceParallelRun(node int, nodes int, succinct bool)","Funname":"AnnounceParallelRun","Returntype":"","Args":"node int, nodes int, succinct bool"},{"Uniquefunname":"func (stenographer *FakeStenographer) AnnouncePendingSpec(spec *types.SpecSummary, noisy bool)","Funname":"AnnouncePendingSpec","Returntype":"","Args":"spec *types.SpecSummary, noisy bool"},{"Uniquefunname":"func AnnounceSkippedSpec(spec *types.SpecSummary, succinct bool, fullTrace bool)","Funname":"AnnounceSkippedSpec","Returntype":"","Args":"spec *types.SpecSummary, succinct bool, fullTrace bool"},{"Uniquefunname":"func AnnounceSpecFailed(spec *types.SpecSummary, succinct bool, fullTrace bool)","Funname":"AnnounceSpecFailed","Returntype":"","Args":"spec *types.SpecSummary, succinct bool, fullTrace bool"},{"Uniquefunname":"func AnnounceSpecPanicked(spec *types.SpecSummary, succinct bool, fullTrace bool)","Funname":"AnnounceSpecPanicked","Returntype":"","Args":"spec *types.SpecSummary, succinct bool, fullTrace bool"},{"Uniquefunname":"func AnnounceSpecRunCompletion(summary *types.SuiteSummary, succinct bool)","Funname":"AnnounceSpecRunCompletion","Returntype":"","Args":"summary *types.SuiteSummary, succinct bool"},{"Uniquefunname":"func AnnounceSpecTimedOut(spec *types.SpecSummary, succinct bool, fullTrace bool)","Funname":"AnnounceSpecTimedOut","Returntype":"","Args":"spec *types.SpecSummary, succinct bool, fullTrace bool"},{"Uniquefunname":"func (stenographer *FakeStenographer) AnnounceSpecWillRun(spec *types.SpecSummary)","Funname":"AnnounceSpecWillRun","Returntype":"","Args":"spec *types.SpecSummary"},{"Uniquefunname":"func AnnounceSuccesfulMeasurement(spec *types.SpecSummary, succinct bool)","Funname":"AnnounceSuccesfulMeasurement","Returntype":"","Args":"spec *types.SpecSummary, succinct bool"},{"Uniquefunname":"func AnnounceSuccesfulSlowSpec(spec *types.SpecSummary, succinct bool)","Funname":"AnnounceSuccesfulSlowSpec","Returntype":"","Args":"spec *types.SpecSummary, succinct bool"},{"Uniquefunname":"func (stenographer *FakeStenographer) AnnounceSuccesfulSpec(spec *types.SpecSummary)","Funname":"AnnounceSuccesfulSpec","Returntype":"","Args":"spec *types.SpecSummary"},{"Uniquefunname":"func AnnounceSuite(description string, randomSeed int64, randomizingAll bool, succinct bool)","Funname":"AnnounceSuite","Returntype":"","Args":"description string, randomSeed int64, randomizingAll bool, succinct bool"},{"Uniquefunname":"func (stenographer *FakeStenographer) AnnounceTotalNumberOfSpecs(total int, succinct bool)","Funname":"AnnounceTotalNumberOfSpecs","Returntype":"","Args":"total int, succinct bool"},{"Uniquefunname":"func (stenographer *FakeStenographer) Calls() []FakeStenographerCall","Funname":"Calls","Returntype":"[]FakeStenographerCall","Args":""},{"Uniquefunname":"func (stenographer *FakeStenographer) CallsTo(method string) []FakeStenographerCall","Funname":"CallsTo","Returntype":"[]FakeStenographerCall","Args":"method string"},{"Uniquefunname":"func NewFakeStenographer() *FakeStenographer","Funname":"NewFakeStenographer","Returntype":"*FakeStenographer","Args":""},{"Uniquefunname":"func NewFakeStenographerCall(method string, args ...interface","Funname":"NewFakeStenographerCall","Returntype":"FakeStenographerCall","Args":"method string, args ...interface{}"},{"Uniquefunname":"func (stenographer *FakeStenographer) Reset()","Funname":"Reset","Returntype":"","Args":""},{"Uniquefunname":"func (stenographer *FakeStenographer) SummarizeFailures(summaries []*types.SpecSummary)","Funname":"SummarizeFailures","Returntype":"","Args":"summaries []*types.SpecSummary"},{"Uniquefunname":"func (stenographer *FakeStenographer) registerCall(method string, args ...interface","Funname":"registerCall","Returntype":"","Args":"method string, args ...interface{}"},{"Uniquefunname":"func stenographer.FakeStenographer.AnnounceAfterSuiteFailure(summary *types.SetupSummary, succinct bool, fullTrace bool)","Funname":"stenographer.FakeStenographer.AnnounceAfterSuiteFailure","Returntype":"","Args":"summary *types.SetupSummary, succinct bool, fullTrace bool"},{"Uniquefunname":"func (stenographer *FakeStenographer) AnnounceAggregatedParallelRun(nodes int, succinct bool)","Funname":"stenographer.FakeStenographer.AnnounceAggregatedParallelRun","Returntype":"","Args":"nodes int, succinct bool"},{"Uniquefunname":"func stenographer.FakeStenographer.AnnounceBeforeSuiteFailure(summary *types.SetupSummary, succinct bool, fullTrace bool)","Funname":"stenographer.FakeStenographer.AnnounceBeforeSuiteFailure","Returntype":"","Args":"summary *types.SetupSummary, succinct bool, fullTrace bool"},{"Uniquefunname":"func (stenographer *FakeStenographer) AnnounceCapturedOutput(output string)","Funname":"stenographer.FakeStenographer.AnnounceCapturedOutput","Returntype":"","Args":"output string"},{"Uniquefunname":"func stenographer.FakeStenographer.AnnounceNumberOfSpecs(specsToRun int, total int, succinct bool)","Funname":"stenographer.FakeStenographer.AnnounceNumberOfSpecs","Returntype":"","Args":"specsToRun int, total int, succinct bool"},{"Uniquefunname":"func (stenographer *FakeStenographer) AnnounceParallelRun(node int, nodes int, succinct bool)","Funname":"stenographer.FakeStenographer.AnnounceParallelRun","Returntype":"","Args":"node int, nodes int, succinct bool"},{"Uniquefunname":"func (stenographer *FakeStenographer) AnnouncePendingSpec(spec *types.SpecSummary, noisy bool)","Funname":"stenographer.FakeStenographer.AnnouncePendingSpec","Returntype":"","Args":"spec *types.SpecSummary, noisy bool"},{"Uniquefunname":"func stenographer.FakeStenographer.AnnounceSkippedSpec(spec *types.SpecSummary, succinct bool, fullTrace bool)","Funname":"stenographer.FakeStenographer.AnnounceSkippedSpec","Returntype":"","Args":"spec *types.SpecSummary, succinct bool, fullTrace bool"},{"Uniquefunname":"func stenographer.FakeStenographer.AnnounceSpecFailed(spec *types.SpecSummary, succinct bool, fullTrace bool)","Funname":"stenographer.FakeStenographer.AnnounceSpecFailed","Returntype":"","Args":"spec *types.SpecSummary, succinct bool, fullTrace bool"},{"Uniquefunname":"func stenographer.FakeStenographer.AnnounceSpecPanicked(spec *types.SpecSummary, succinct bool, fullTrace bool)","Funname":"stenographer.FakeStenographer.AnnounceSpecPanicked","Returntype":"","Args":"spec *types.SpecSummary, succinct bool, fullTrace bool"},{"Uniquefunname":"func stenographer.FakeStenographer.AnnounceSpecRunCompletion(summary *types.SuiteSummary, succinct bool)","Funname":"stenographer.FakeStenographer.AnnounceSpecRunCompletion","Returntype":"","Args":"summary *types.SuiteSummary, succinct bool"},{"Uniquefunname":"func stenographer.FakeStenographer.AnnounceSpecTimedOut(spec *types.SpecSummary, succinct bool, fullTrace bool)","Funname":"stenographer.FakeStenographer.AnnounceSpecTimedOut","Returntype":"","Args":"spec *types.SpecSummary, succinct bool, fullTrace bool"},{"Uniquefunname":"func (stenographer *FakeStenographer) AnnounceSpecWillRun(spec *types.SpecSummary)","Funname":"stenographer.FakeStenographer.AnnounceSpecWillRun","Returntype":"","Args":"spec *types.SpecSummary"},{"Uniquefunname":"func stenographer.FakeStenographer.AnnounceSuccesfulMeasurement(spec *types.SpecSummary, succinct bool)","Funname":"stenographer.FakeStenographer.AnnounceSuccesfulMeasurement","Returntype":"","Args":"spec *types.SpecSummary, succinct bool"},{"Uniquefunname":"func stenographer.FakeStenographer.AnnounceSuccesfulSlowSpec(spec *types.SpecSummary, succinct bool)","Funname":"stenographer.FakeStenographer.AnnounceSuccesfulSlowSpec","Returntype":"","Args":"spec *types.SpecSummary, succinct bool"},{"Uniquefunname":"func (stenographer *FakeStenographer) AnnounceSuccesfulSpec(spec *types.SpecSummary)","Funname":"stenographer.FakeStenographer.AnnounceSuccesfulSpec","Returntype":"","Args":"spec *types.SpecSummary"},{"Uniquefunname":"func stenographer.FakeStenographer.AnnounceSuite(description string, randomSeed int64, randomizingAll bool, succinct bool)","Funname":"stenographer.FakeStenographer.AnnounceSuite","Returntype":"","Args":"description string, randomSeed int64, randomizingAll bool, succinct bool"},{"Uniquefunname":"func (stenographer *FakeStenographer) AnnounceTotalNumberOfSpecs(total int, succinct bool)","Funname":"stenographer.FakeStenographer.AnnounceTotalNumberOfSpecs","Returntype":"","Args":"total int, succinct bool"},{"Uniquefunname":"func (stenographer *FakeStenographer) Calls() []FakeStenographerCall","Funname":"stenographer.FakeStenographer.Calls","Returntype":"[]FakeStenographerCall","Args":""},{"Uniquefunname":"func (stenographer *FakeStenographer) CallsTo(method string) []FakeStenographerCall","Funname":"stenographer.FakeStenographer.CallsTo","Returntype":"[]FakeStenographerCall","Args":"method string"},{"Uniquefunname":"func (stenographer *FakeStenographer) Reset()","Funname":"stenographer.FakeStenographer.Reset","Returntype":"","Args":""},{"Uniquefunname":"func (stenographer *FakeStenographer) SummarizeFailures(summaries []*types.SpecSummary)","Funname":"stenographer.FakeStenographer.SummarizeFailures","Returntype":"","Args":"summaries []*types.SpecSummary"},{"Uniquefunname":"func (stenographer *FakeStenographer) registerCall(method string, args ...interface","Funname":"stenographer.FakeStenographer.registerCall","Returntype":"","Args":"method string, args ...interface{}"},{"Uniquefunname":"func NewFakeStenographer() *FakeStenographer","Funname":"stenographer.NewFakeStenographer","Returntype":"*FakeStenographer","Args":""},{"Uniquefunname":"func NewFakeStenographerCall(method string, args ...interface","Funname":"stenographer.NewFakeStenographerCall","Returntype":"FakeStenographerCall","Args":"method string, args ...interface{}"}],"Records":[{"Name":"struct:stenographer.FakeStenographer","Fields":["stenographer.FakeStenographer.calls []FakeStenographerCall","stenographer.FakeStenographer.lock *sync.Mutex"]},{"Name":"struct:stenographer.FakeStenographerCall","Fields":["stenographer.FakeStenographerCall.Args []interface{}","stenographer.FakeStenographerCall.Method string"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/reporters/stenographer/stenographer.go","Functions":[{"Uniquefunname":"func AnnounceAfterSuiteFailure(summary *types.SetupSummary, succinct bool, fullTrace bool)","Funname":"AnnounceAfterSuiteFailure","Returntype":"","Args":"summary *types.SetupSummary, succinct bool, fullTrace bool"},{"Uniquefunname":"func (s *consoleStenographer) AnnounceAggregatedParallelRun(nodes int, succinct bool)","Funname":"AnnounceAggregatedParallelRun","Returntype":"","Args":"nodes int, succinct bool"},{"Uniquefunname":"func AnnounceBeforeSuiteFailure(summary *types.SetupSummary, succinct bool, fullTrace bool)","Funname":"AnnounceBeforeSuiteFailure","Returntype":"","Args":"summary *types.SetupSummary, succinct bool, fullTrace bool"},{"Uniquefunname":"func (s *consoleStenographer) AnnounceCapturedOutput(output string)","Funname":"AnnounceCapturedOutput","Returntype":"","Args":"output string"},{"Uniquefunname":"func (s *consoleStenographer) AnnounceNumberOfSpecs(specsToRun int, total int, succinct bool)","Funname":"AnnounceNumberOfSpecs","Returntype":"","Args":"specsToRun int, total int, succinct bool"},{"Uniquefunname":"func (s *consoleStenographer) AnnounceParallelRun(node int, nodes int, succinct bool)","Funname":"AnnounceParallelRun","Returntype":"","Args":"node int, nodes int, succinct bool"},{"Uniquefunname":"func (s *consoleStenographer) AnnouncePendingSpec(spec *types.SpecSummary, noisy bool)","Funname":"AnnouncePendingSpec","Returntype":"","Args":"spec *types.SpecSummary, noisy bool"},{"Uniquefunname":"func AnnounceSkippedSpec(spec *types.SpecSummary, succinct bool, fullTrace bool)","Funname":"AnnounceSkippedSpec","Returntype":"","Args":"spec *types.SpecSummary, succinct bool, fullTrace bool"},{"Uniquefunname":"func AnnounceSpecFailed(spec *types.SpecSummary, succinct bool, fullTrace bool)","Funname":"AnnounceSpecFailed","Returntype":"","Args":"spec *types.SpecSummary, succinct bool, fullTrace bool"},{"Uniquefunname":"func AnnounceSpecPanicked(spec *types.SpecSummary, succinct bool, fullTrace bool)","Funname":"AnnounceSpecPanicked","Returntype":"","Args":"spec *types.SpecSummary, succinct bool, fullTrace bool"},{"Uniquefunname":"func AnnounceSpecRunCompletion(summary *types.SuiteSummary, succinct bool)","Funname":"AnnounceSpecRunCompletion","Returntype":"","Args":"summary *types.SuiteSummary, succinct bool"},{"Uniquefunname":"func AnnounceSpecTimedOut(spec *types.SpecSummary, succinct bool, fullTrace bool)","Funname":"AnnounceSpecTimedOut","Returntype":"","Args":"spec *types.SpecSummary, succinct bool, fullTrace bool"},{"Uniquefunname":"func (s *consoleStenographer) AnnounceSpecWillRun(spec *types.SpecSummary)","Funname":"AnnounceSpecWillRun","Returntype":"","Args":"spec *types.SpecSummary"},{"Uniquefunname":"func AnnounceSuccesfulMeasurement(spec *types.SpecSummary, succinct bool)","Funname":"AnnounceSuccesfulMeasurement","Returntype":"","Args":"spec *types.SpecSummary, succinct bool"},{"Uniquefunname":"func AnnounceSuccesfulSlowSpec(spec *types.SpecSummary, succinct bool)","Funname":"AnnounceSuccesfulSlowSpec","Returntype":"","Args":"spec *types.SpecSummary, succinct bool"},{"Uniquefunname":"func (s *consoleStenographer) AnnounceSuccesfulSpec(spec *types.SpecSummary)","Funname":"AnnounceSuccesfulSpec","Returntype":"","Args":"spec *types.SpecSummary"},{"Uniquefunname":"func AnnounceSuite(description string, randomSeed int64, randomizingAll bool, succinct bool)","Funname":"AnnounceSuite","Returntype":"","Args":"description string, randomSeed int64, randomizingAll bool, succinct bool"},{"Uniquefunname":"func (s *consoleStenographer) AnnounceTotalNumberOfSpecs(total int, succinct bool)","Funname":"AnnounceTotalNumberOfSpecs","Returntype":"","Args":"total int, succinct bool"},{"Uniquefunname":"func New(color bool, enableFlakes bool, writer io.Writer) Stenographer","Funname":"New","Returntype":"Stenographer","Args":"color bool, enableFlakes bool, writer io.Writer"},{"Uniquefunname":"func (s *consoleStenographer) SummarizeFailures(summaries []*types.SpecSummary)","Funname":"SummarizeFailures","Returntype":"","Args":"summaries []*types.SpecSummary"},{"Uniquefunname":"func announceSetupFailure(name string, summary *types.SetupSummary, succinct bool, fullTrace bool)","Funname":"announceSetupFailure","Returntype":"","Args":"name string, summary *types.SetupSummary, succinct bool, fullTrace bool"},{"Uniquefunname":"func (s *consoleStenographer) endBlock()","Funname":"endBlock","Returntype":"","Args":""},{"Uniquefunname":"func failureContext(failedComponentType types.SpecComponentType)string","Funname":"failureContext","Returntype":"string","Args":"failedComponentType types.SpecComponentType"},{"Uniquefunname":"func (s *consoleStenographer) measurementReport(spec *types.SpecSummary, succinct bool) string","Funname":"measurementReport","Returntype":"string","Args":"spec *types.SpecSummary, succinct bool"},{"Uniquefunname":"func (s *consoleStenographer) midBlock()","Funname":"midBlock","Returntype":"","Args":""},{"Uniquefunname":"func orderedMeasurementKeys(measurements map[string]*types.SpecMeasurement)[]string","Funname":"orderedMeasurementKeys","Returntype":"[]string","Args":"measurements map[string]*types.SpecMeasurement"},{"Uniquefunname":"func printBlockWithMessage(header string, message string, spec *types.SpecSummary, succinct bool)","Funname":"printBlockWithMessage","Returntype":"","Args":"header string, message string, spec *types.SpecSummary, succinct bool"},{"Uniquefunname":"func printCodeLocationBlock(componentTexts []string, componentCodeLocations []types.CodeLocation, failedComponentType types.SpecComponentType, failedComponentIndex int, state types.SpecState, succinct bool)int","Funname":"printCodeLocationBlock","Returntype":"int","Args":"componentTexts []string, componentCodeLocations []types.CodeLocation, failedComponentType types.SpecComponentType, failedComponentIndex int, state types.SpecState, succinct bool"},{"Uniquefunname":"func printFailure(indentation int, state types.SpecState, failure types.SpecFailure, fullTrace bool)","Funname":"printFailure","Returntype":"","Args":"indentation int, state types.SpecState, failure types.SpecFailure, fullTrace bool"},{"Uniquefunname":"func (s *consoleStenographer) printSkip(indentation int, spec types.SpecFailure)","Funname":"printSkip","Returntype":"","Args":"indentation int, spec types.SpecFailure"},{"Uniquefunname":"func printSpecContext(componentTexts []string, componentCodeLocations []types.CodeLocation, failedComponentType types.SpecComponentType, failedComponentIndex int, state types.SpecState, succinct bool)int","Funname":"printSpecContext","Returntype":"int","Args":"componentTexts []string, componentCodeLocations []types.CodeLocation, failedComponentType types.SpecComponentType, failedComponentIndex int, state types.SpecState, succinct bool"},{"Uniquefunname":"func printSpecFailure(message string, spec *types.SpecSummary, succinct bool, fullTrace bool)","Funname":"printSpecFailure","Returntype":"","Args":"message string, spec *types.SpecSummary, succinct bool, fullTrace bool"},{"Uniquefunname":"func (s *consoleStenographer) startBlock()","Funname":"startBlock","Returntype":"","Args":""},{"Uniquefunname":"func New(color bool, enableFlakes bool, writer io.Writer) Stenographer","Funname":"stenographer.New","Returntype":"Stenographer","Args":"color bool, enableFlakes bool, writer io.Writer"},{"Uniquefunname":"func stenographer.consoleStenographer.AnnounceAfterSuiteFailure(summary *types.SetupSummary, succinct bool, fullTrace bool)","Funname":"stenographer.consoleStenographer.AnnounceAfterSuiteFailure","Returntype":"","Args":"summary *types.SetupSummary, succinct bool, fullTrace bool"},{"Uniquefunname":"func (s *consoleStenographer) AnnounceAggregatedParallelRun(nodes int, succinct bool)","Funname":"stenographer.consoleStenographer.AnnounceAggregatedParallelRun","Returntype":"","Args":"nodes int, succinct bool"},{"Uniquefunname":"func stenographer.consoleStenographer.AnnounceBeforeSuiteFailure(summary *types.SetupSummary, succinct bool, fullTrace bool)","Funname":"stenographer.consoleStenographer.AnnounceBeforeSuiteFailure","Returntype":"","Args":"summary *types.SetupSummary, succinct bool, fullTrace bool"},{"Uniquefunname":"func (s *consoleStenographer) AnnounceCapturedOutput(output string)","Funname":"stenographer.consoleStenographer.AnnounceCapturedOutput","Returntype":"","Args":"output string"},{"Uniquefunname":"func (s *consoleStenographer) AnnounceNumberOfSpecs(specsToRun int, total int, succinct bool)","Funname":"stenographer.consoleStenographer.AnnounceNumberOfSpecs","Returntype":"","Args":"specsToRun int, total int, succinct bool"},{"Uniquefunname":"func (s *consoleStenographer) AnnounceParallelRun(node int, nodes int, succinct bool)","Funname":"stenographer.consoleStenographer.AnnounceParallelRun","Returntype":"","Args":"node int, nodes int, succinct bool"},{"Uniquefunname":"func (s *consoleStenographer) AnnouncePendingSpec(spec *types.SpecSummary, noisy bool)","Funname":"stenographer.consoleStenographer.AnnouncePendingSpec","Returntype":"","Args":"spec *types.SpecSummary, noisy bool"},{"Uniquefunname":"func stenographer.consoleStenographer.AnnounceSkippedSpec(spec *types.SpecSummary, succinct bool, fullTrace bool)","Funname":"stenographer.consoleStenographer.AnnounceSkippedSpec","Returntype":"","Args":"spec *types.SpecSummary, succinct bool, fullTrace bool"},{"Uniquefunname":"func stenographer.consoleStenographer.AnnounceSpecFailed(spec *types.SpecSummary, succinct bool, fullTrace bool)","Funname":"stenographer.consoleStenographer.AnnounceSpecFailed","Returntype":"","Args":"spec *types.SpecSummary, succinct bool, fullTrace bool"},{"Uniquefunname":"func stenographer.consoleStenographer.AnnounceSpecPanicked(spec *types.SpecSummary, succinct bool, fullTrace bool)","Funname":"stenographer.consoleStenographer.AnnounceSpecPanicked","Returntype":"","Args":"spec *types.SpecSummary, succinct bool, fullTrace bool"},{"Uniquefunname":"func stenographer.consoleStenographer.AnnounceSpecRunCompletion(summary *types.SuiteSummary, succinct bool)","Funname":"stenographer.consoleStenographer.AnnounceSpecRunCompletion","Returntype":"","Args":"summary *types.SuiteSummary, succinct bool"},{"Uniquefunname":"func stenographer.consoleStenographer.AnnounceSpecTimedOut(spec *types.SpecSummary, succinct bool, fullTrace bool)","Funname":"stenographer.consoleStenographer.AnnounceSpecTimedOut","Returntype":"","Args":"spec *types.SpecSummary, succinct bool, fullTrace bool"},{"Uniquefunname":"func (s *consoleStenographer) AnnounceSpecWillRun(spec *types.SpecSummary)","Funname":"stenographer.consoleStenographer.AnnounceSpecWillRun","Returntype":"","Args":"spec *types.SpecSummary"},{"Uniquefunname":"func stenographer.consoleStenographer.AnnounceSuccesfulMeasurement(spec *types.SpecSummary, succinct bool)","Funname":"stenographer.consoleStenographer.AnnounceSuccesfulMeasurement","Returntype":"","Args":"spec *types.SpecSummary, succinct bool"},{"Uniquefunname":"func stenographer.consoleStenographer.AnnounceSuccesfulSlowSpec(spec *types.SpecSummary, succinct bool)","Funname":"stenographer.consoleStenographer.AnnounceSuccesfulSlowSpec","Returntype":"","Args":"spec *types.SpecSummary, succinct bool"},{"Uniquefunname":"func (s *consoleStenographer) AnnounceSuccesfulSpec(spec *types.SpecSummary)","Funname":"stenographer.consoleStenographer.AnnounceSuccesfulSpec","Returntype":"","Args":"spec *types.SpecSummary"},{"Uniquefunname":"func stenographer.consoleStenographer.AnnounceSuite(description string, randomSeed int64, randomizingAll bool, succinct bool)","Funname":"stenographer.consoleStenographer.AnnounceSuite","Returntype":"","Args":"description string, randomSeed int64, randomizingAll bool, succinct bool"},{"Uniquefunname":"func (s *consoleStenographer) AnnounceTotalNumberOfSpecs(total int, succinct bool)","Funname":"stenographer.consoleStenographer.AnnounceTotalNumberOfSpecs","Returntype":"","Args":"total int, succinct bool"},{"Uniquefunname":"func (s *consoleStenographer) SummarizeFailures(summaries []*types.SpecSummary)","Funname":"stenographer.consoleStenographer.SummarizeFailures","Returntype":"","Args":"summaries []*types.SpecSummary"},{"Uniquefunname":"func stenographer.consoleStenographer.announceSetupFailure(name string, summary *types.SetupSummary, succinct bool, fullTrace bool)","Funname":"stenographer.consoleStenographer.announceSetupFailure","Returntype":"","Args":"name string, summary *types.SetupSummary, succinct bool, fullTrace bool"},{"Uniquefunname":"func (s *consoleStenographer) endBlock()","Funname":"stenographer.consoleStenographer.endBlock","Returntype":"","Args":""},{"Uniquefunname":"func stenographer.consoleStenographer.failureContext(failedComponentType types.SpecComponentType)string","Funname":"stenographer.consoleStenographer.failureContext","Returntype":"string","Args":"failedComponentType types.SpecComponentType"},{"Uniquefunname":"func (s *consoleStenographer) measurementReport(spec *types.SpecSummary, succinct bool) string","Funname":"stenographer.consoleStenographer.measurementReport","Returntype":"string","Args":"spec *types.SpecSummary, succinct bool"},{"Uniquefunname":"func (s *consoleStenographer) midBlock()","Funname":"stenographer.consoleStenographer.midBlock","Returntype":"","Args":""},{"Uniquefunname":"func stenographer.consoleStenographer.orderedMeasurementKeys(measurements map[string]*types.SpecMeasurement)[]string","Funname":"stenographer.consoleStenographer.orderedMeasurementKeys","Returntype":"[]string","Args":"measurements map[string]*types.SpecMeasurement"},{"Uniquefunname":"func stenographer.consoleStenographer.printBlockWithMessage(header string, message string, spec *types.SpecSummary, succinct bool)","Funname":"stenographer.consoleStenographer.printBlockWithMessage","Returntype":"","Args":"header string, message string, spec *types.SpecSummary, succinct bool"},{"Uniquefunname":"func stenographer.consoleStenographer.printCodeLocationBlock(componentTexts []string, componentCodeLocations []types.CodeLocation, failedComponentType types.SpecComponentType, failedComponentIndex int, state types.SpecState, succinct bool)int","Funname":"stenographer.consoleStenographer.printCodeLocationBlock","Returntype":"int","Args":"componentTexts []string, componentCodeLocations []types.CodeLocation, failedComponentType types.SpecComponentType, failedComponentIndex int, state types.SpecState, succinct bool"},{"Uniquefunname":"func stenographer.consoleStenographer.printFailure(indentation int, state types.SpecState, failure types.SpecFailure, fullTrace bool)","Funname":"stenographer.consoleStenographer.printFailure","Returntype":"","Args":"indentation int, state types.SpecState, failure types.SpecFailure, fullTrace bool"},{"Uniquefunname":"func (s *consoleStenographer) printSkip(indentation int, spec types.SpecFailure)","Funname":"stenographer.consoleStenographer.printSkip","Returntype":"","Args":"indentation int, spec types.SpecFailure"},{"Uniquefunname":"func stenographer.consoleStenographer.printSpecContext(componentTexts []string, componentCodeLocations []types.CodeLocation, failedComponentType types.SpecComponentType, failedComponentIndex int, state types.SpecState, succinct bool)int","Funname":"stenographer.consoleStenographer.printSpecContext","Returntype":"int","Args":"componentTexts []string, componentCodeLocations []types.CodeLocation, failedComponentType types.SpecComponentType, failedComponentIndex int, state types.SpecState, succinct bool"},{"Uniquefunname":"func stenographer.consoleStenographer.printSpecFailure(message string, spec *types.SpecSummary, succinct bool, fullTrace bool)","Funname":"stenographer.consoleStenographer.printSpecFailure","Returntype":"","Args":"message string, spec *types.SpecSummary, succinct bool, fullTrace bool"},{"Uniquefunname":"func (s *consoleStenographer) startBlock()","Funname":"stenographer.consoleStenographer.startBlock","Returntype":"","Args":""},{"Uniquefunname":"func (s *consoleStenographer) stream()","Funname":"stenographer.consoleStenographer.stream","Returntype":"","Args":""},{"Uniquefunname":"func (s *consoleStenographer) stream()","Funname":"stream","Returntype":"","Args":""}],"Records":[{"Name":"interface","Fields":["stenographer.Stenographer"]},{"Name":"var:stenographer","Fields":["stenographer.alternatingColors"]},{"Name":"const:stenographer","Fields":["stenographer.boldStyle","stenographer.cursorStateEndBlock","stenographer.cursorStateMidBlock","stenographer.cursorStateStreaming","stenographer.cursorStateTop","stenographer.cyanColor","stenographer.defaultStyle","stenographer.grayColor","stenographer.greenColor","stenographer.lightGrayColor","stenographer.redColor","stenographer.yellowColor"]},{"Name":"struct:stenographer.consoleStenographer","Fields":["stenographer.consoleStenographer.color bool","stenographer.consoleStenographer.cursorState cursorStateType","stenographer.consoleStenographer.denoter string","stenographer.consoleStenographer.enableFlakes bool","stenographer.consoleStenographer.w io.Writer"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/reporters/stenographer/support/go-colorable/colorable_others.go","Functions":[{"Uniquefunname":"func NewColorable(file *os.File) io.Writer","Funname":"NewColorable","Returntype":"io.Writer","Args":"file *os.File"},{"Uniquefunname":"func NewColorableStderr() io.Writer","Funname":"NewColorableStderr","Returntype":"io.Writer","Args":""},{"Uniquefunname":"func NewColorableStdout() io.Writer","Funname":"NewColorableStdout","Returntype":"io.Writer","Args":""},{"Uniquefunname":"func NewColorable(file *os.File) io.Writer","Funname":"colorable.NewColorable","Returntype":"io.Writer","Args":"file *os.File"},{"Uniquefunname":"func NewColorableStderr() io.Writer","Funname":"colorable.NewColorableStderr","Returntype":"io.Writer","Args":""},{"Uniquefunname":"func NewColorableStdout() io.Writer","Funname":"colorable.NewColorableStdout","Returntype":"io.Writer","Args":""}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/reporters/stenographer/support/go-colorable/colorable_windows.go","Functions":[{"Uniquefunname":"func NewColorable(file *os.File) io.Writer","Funname":"NewColorable","Returntype":"io.Writer","Args":"file *os.File"},{"Uniquefunname":"func NewColorableStderr() io.Writer","Funname":"NewColorableStderr","Returntype":"io.Writer","Args":""},{"Uniquefunname":"func NewColorableStdout() io.Writer","Funname":"NewColorableStdout","Returntype":"io.Writer","Args":""},{"Uniquefunname":"func (w *Writer) Write(data []byte) (n int, err error)","Funname":"Write","Returntype":"(n int, err error)","Args":"data []byte"},{"Uniquefunname":"func (c consoleColor) backgroundAttr() (attr word)","Funname":"backgroundAttr","Returntype":"(attr word)","Args":""},{"Uniquefunname":"func NewColorable(file *os.File) io.Writer","Funname":"colorable.NewColorable","Returntype":"io.Writer","Args":"file *os.File"},{"Uniquefunname":"func NewColorableStderr() io.Writer","Funname":"colorable.NewColorableStderr","Returntype":"io.Writer","Args":""},{"Uniquefunname":"func NewColorableStdout() io.Writer","Funname":"colorable.NewColorableStdout","Returntype":"io.Writer","Args":""},{"Uniquefunname":"func (w *Writer) Write(data []byte) (n int, err error)","Funname":"colorable.Writer.Write","Returntype":"(n int, err error)","Args":"data []byte"},{"Uniquefunname":"func (c consoleColor) backgroundAttr() (attr word)","Funname":"colorable.consoleColor.backgroundAttr","Returntype":"(attr word)","Args":""},{"Uniquefunname":"func (c consoleColor) foregroundAttr() (attr word)","Funname":"colorable.consoleColor.foregroundAttr","Returntype":"(attr word)","Args":""},{"Uniquefunname":"func (a hsv) dist(b hsv) float32","Funname":"colorable.hsv.dist","Returntype":"float32","Args":"b hsv"},{"Uniquefunname":"func (t hsvTable) find(rgb int) consoleColor","Funname":"colorable.hsvTable.find","Returntype":"consoleColor","Args":"rgb int"},{"Uniquefunname":"func minmax3f(a, b, c float32) (min, max float32)","Funname":"colorable.minmax3f","Returntype":"(min, max float32)","Args":"a, b, c float32"},{"Uniquefunname":"func n256setup()","Funname":"colorable.n256setup","Returntype":"","Args":""},{"Uniquefunname":"func toHSV(rgb int) hsv","Funname":"colorable.toHSV","Returntype":"hsv","Args":"rgb int"},{"Uniquefunname":"func toHSVTable(rgbTable []consoleColor) hsvTable","Funname":"colorable.toHSVTable","Returntype":"hsvTable","Args":"rgbTable []consoleColor"},{"Uniquefunname":"func (a hsv) dist(b hsv) float32","Funname":"dist","Returntype":"float32","Args":"b hsv"},{"Uniquefunname":"func (t hsvTable) find(rgb int) consoleColor","Funname":"find","Returntype":"consoleColor","Args":"rgb int"},{"Uniquefunname":"func (c consoleColor) foregroundAttr() (attr word)","Funname":"foregroundAttr","Returntype":"(attr word)","Args":""},{"Uniquefunname":"func minmax3f(a, b, c float32) (min, max float32)","Funname":"minmax3f","Returntype":"(min, max float32)","Args":"a, b, c float32"},{"Uniquefunname":"func n256setup()","Funname":"n256setup","Returntype":"","Args":""},{"Uniquefunname":"func toHSV(rgb int) hsv","Funname":"toHSV","Returntype":"hsv","Args":"rgb int"},{"Uniquefunname":"func toHSVTable(rgbTable []consoleColor) hsvTable","Funname":"toHSVTable","Returntype":"hsvTable","Args":"rgbTable []consoleColor"}],"Records":[{"Name":"struct:colorable.Writer","Fields":["colorable.Writer.handle syscall.Handle","colorable.Writer.lastbuf bytes.Buffer","colorable.Writer.oldattr word","colorable.Writer.out io.Writer"]},{"Name":"const:colorable","Fields":["colorable.backgroundBlue","colorable.backgroundGreen","colorable.backgroundIntensity","colorable.backgroundMask","colorable.backgroundRed","colorable.foregroundBlue","colorable.foregroundGreen","colorable.foregroundIntensity","colorable.foregroundMask","colorable.foregroundRed"]},{"Name":"var:colorable","Fields":["colorable.color16","colorable.color256","colorable.kernel32","colorable.n256backAttr","colorable.n256foreAttr","colorable.procFillConsoleOutputAttribute","colorable.procFillConsoleOutputCharacter","colorable.procGetConsoleScreenBufferInfo","colorable.procSetConsoleCursorPosition","colorable.procSetConsoleTextAttribute"]},{"Name":"struct:colorable.consoleColor","Fields":["colorable.consoleColor.blue bool","colorable.consoleColor.green bool","colorable.consoleColor.intensity bool","colorable.consoleColor.red bool","colorable.consoleColor.rgb int"]},{"Name":"struct:colorable.consoleScreenBufferInfo","Fields":["colorable.consoleScreenBufferInfo.attributes word","colorable.consoleScreenBufferInfo.cursorPosition coord","colorable.consoleScreenBufferInfo.maximumWindowSize coord","colorable.consoleScreenBufferInfo.size coord","colorable.consoleScreenBufferInfo.window smallRect"]},{"Name":"struct:colorable.coord","Fields":["colorable.coord.x short","colorable.coord.y short"]},{"Name":"struct:colorable.hsv","Fields":["colorable.hsv.h float32","colorable.hsv.s float32","colorable.hsv.v float32"]},{"Name":"struct:colorable.smallRect","Fields":["colorable.smallRect.bottom short","colorable.smallRect.left short","colorable.smallRect.right short","colorable.smallRect.top short"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/reporters/stenographer/support/go-colorable/noncolorable.go","Functions":[{"Uniquefunname":"func NewNonColorable(w io.Writer) io.Writer","Funname":"NewNonColorable","Returntype":"io.Writer","Args":"w io.Writer"},{"Uniquefunname":"func (w *NonColorable) Write(data []byte) (n int, err error)","Funname":"Write","Returntype":"(n int, err error)","Args":"data []byte"},{"Uniquefunname":"func NewNonColorable(w io.Writer) io.Writer","Funname":"colorable.NewNonColorable","Returntype":"io.Writer","Args":"w io.Writer"},{"Uniquefunname":"func (w *NonColorable) Write(data []byte) (n int, err error)","Funname":"colorable.NonColorable.Write","Returntype":"(n int, err error)","Args":"data []byte"}],"Records":[{"Name":"struct:colorable.NonColorable","Fields":["colorable.NonColorable.lastbuf bytes.Buffer","colorable.NonColorable.out io.Writer"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/reporters/stenographer/support/go-isatty/isatty_appengine.go","Functions":[{"Uniquefunname":"func IsTerminal(fd uintptr) bool","Funname":"IsTerminal","Returntype":"bool","Args":"fd uintptr"},{"Uniquefunname":"func IsTerminal(fd uintptr) bool","Funname":"isatty.IsTerminal","Returntype":"bool","Args":"fd uintptr"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/reporters/stenographer/support/go-isatty/isatty_bsd.go","Functions":[{"Uniquefunname":"func IsTerminal(fd uintptr) bool","Funname":"IsTerminal","Returntype":"bool","Args":"fd uintptr"},{"Uniquefunname":"func IsTerminal(fd uintptr) bool","Funname":"isatty.IsTerminal","Returntype":"bool","Args":"fd uintptr"}],"Records":[{"Name":"const:isatty","Fields":["isatty.ioctlReadTermios"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/reporters/stenographer/support/go-isatty/isatty_linux.go","Functions":[{"Uniquefunname":"func IsTerminal(fd uintptr) bool","Funname":"IsTerminal","Returntype":"bool","Args":"fd uintptr"},{"Uniquefunname":"func IsTerminal(fd uintptr) bool","Funname":"isatty.IsTerminal","Returntype":"bool","Args":"fd uintptr"}],"Records":[{"Name":"const:isatty","Fields":["isatty.ioctlReadTermios"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/reporters/stenographer/support/go-isatty/isatty_solaris.go","Functions":[{"Uniquefunname":"func IsTerminal(fd uintptr) bool","Funname":"IsTerminal","Returntype":"bool","Args":"fd uintptr"},{"Uniquefunname":"func IsTerminal(fd uintptr) bool","Funname":"isatty.IsTerminal","Returntype":"bool","Args":"fd uintptr"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/reporters/stenographer/support/go-isatty/isatty_windows.go","Functions":[{"Uniquefunname":"func IsTerminal(fd uintptr) bool","Funname":"IsTerminal","Returntype":"bool","Args":"fd uintptr"},{"Uniquefunname":"func IsTerminal(fd uintptr) bool","Funname":"isatty.IsTerminal","Returntype":"bool","Args":"fd uintptr"}],"Records":[{"Name":"var:isatty","Fields":["isatty.kernel32","isatty.procGetConsoleMode"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/types/code_location.go","Functions":[{"Uniquefunname":"func (codeLocation CodeLocation) String() string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func (codeLocation CodeLocation) String() string","Funname":"types.CodeLocation.String","Returntype":"string","Args":""}],"Records":[{"Name":"struct:types.CodeLocation","Fields":["types.CodeLocation.FileName string","types.CodeLocation.FullStackTrace string","types.CodeLocation.LineNumber int"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/types/synchronization.go","Functions":[{"Uniquefunname":"func (r RemoteBeforeSuiteData) ToJSON() []byte","Funname":"ToJSON","Returntype":"[]byte","Args":""},{"Uniquefunname":"func (r RemoteBeforeSuiteData) ToJSON() []byte","Funname":"types.RemoteBeforeSuiteData.ToJSON","Returntype":"[]byte","Args":""}],"Records":[{"Name":"struct:types.RemoteAfterSuiteData","Fields":["types.RemoteAfterSuiteData.CanRun bool"]},{"Name":"struct:types.RemoteBeforeSuiteData","Fields":["types.RemoteBeforeSuiteData.Data []byte","types.RemoteBeforeSuiteData.State RemoteBeforeSuiteState"]},{"Name":"const:types","Fields":["types.RemoteBeforeSuiteStateDisappeared","types.RemoteBeforeSuiteStateFailed","types.RemoteBeforeSuiteStateInvalid","types.RemoteBeforeSuiteStatePassed","types.RemoteBeforeSuiteStatePending"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/types/types.go","Functions":[{"Uniquefunname":"func (s SpecSummary) Failed() bool","Funname":"Failed","Returntype":"bool","Args":""},{"Uniquefunname":"func (s SpecSummary) HasFailureState() bool","Funname":"HasFailureState","Returntype":"bool","Args":""},{"Uniquefunname":"func (state SpecState) IsFailure() bool","Funname":"IsFailure","Returntype":"bool","Args":""},{"Uniquefunname":"func (s SpecSummary) Panicked() bool","Funname":"Panicked","Returntype":"bool","Args":""},{"Uniquefunname":"func (s SpecSummary) Passed() bool","Funname":"Passed","Returntype":"bool","Args":""},{"Uniquefunname":"func (s SpecSummary) Pending() bool","Funname":"Pending","Returntype":"bool","Args":""},{"Uniquefunname":"func (s SpecMeasurement) PrecisionFmt() string","Funname":"PrecisionFmt","Returntype":"string","Args":""},{"Uniquefunname":"func (s SpecSummary) Skipped() bool","Funname":"Skipped","Returntype":"bool","Args":""},{"Uniquefunname":"func (s SpecSummary) TimedOut() bool","Funname":"TimedOut","Returntype":"bool","Args":""},{"Uniquefunname":"func (s SpecMeasurement) PrecisionFmt() string","Funname":"types.SpecMeasurement.PrecisionFmt","Returntype":"string","Args":""},{"Uniquefunname":"func (state SpecState) IsFailure() bool","Funname":"types.SpecState.IsFailure","Returntype":"bool","Args":""},{"Uniquefunname":"func (s SpecSummary) Failed() bool","Funname":"types.SpecSummary.Failed","Returntype":"bool","Args":""},{"Uniquefunname":"func (s SpecSummary) HasFailureState() bool","Funname":"types.SpecSummary.HasFailureState","Returntype":"bool","Args":""},{"Uniquefunname":"func (s SpecSummary) Panicked() bool","Funname":"types.SpecSummary.Panicked","Returntype":"bool","Args":""},{"Uniquefunname":"func (s SpecSummary) Passed() bool","Funname":"types.SpecSummary.Passed","Returntype":"bool","Args":""},{"Uniquefunname":"func (s SpecSummary) Pending() bool","Funname":"types.SpecSummary.Pending","Returntype":"bool","Args":""},{"Uniquefunname":"func (s SpecSummary) Skipped() bool","Funname":"types.SpecSummary.Skipped","Returntype":"bool","Args":""},{"Uniquefunname":"func (s SpecSummary) TimedOut() bool","Funname":"types.SpecSummary.TimedOut","Returntype":"bool","Args":""}],"Records":[{"Name":"const:types","Fields":["types.FlagTypeFocused","types.FlagTypeNone","types.FlagTypePending","types.GINKGO_FOCUS_EXIT_CODE","types.SpecComponentTypeAfterEach","types.SpecComponentTypeAfterSuite","types.SpecComponentTypeBeforeEach","types.SpecComponentTypeBeforeSuite","types.SpecComponentTypeContainer","types.SpecComponentTypeInvalid","types.SpecComponentTypeIt","types.SpecComponentTypeJustAfterEach","types.SpecComponentTypeJustBeforeEach","types.SpecComponentTypeMeasure","types.SpecStateFailed","types.SpecStateInvalid","types.SpecStatePanicked","types.SpecStatePassed","types.SpecStatePending","types.SpecStateSkipped","types.SpecStateTimedOut"]},{"Name":"struct:types.SetupSummary","Fields":["types.SetupSummary.CapturedOutput string","types.SetupSummary.CodeLocation CodeLocation","types.SetupSummary.ComponentType SpecComponentType","types.SetupSummary.Failure SpecFailure","types.SetupSummary.RunTime time.Duration","types.SetupSummary.State SpecState","types.SetupSummary.SuiteID string"]},{"Name":"struct:types.SpecFailure","Fields":["types.SpecFailure.ComponentCodeLocation CodeLocation","types.SpecFailure.ComponentIndex int","types.SpecFailure.ComponentType SpecComponentType","types.SpecFailure.ForwardedPanic string","types.SpecFailure.Location CodeLocation","types.SpecFailure.Message string"]},{"Name":"struct:types.SpecMeasurement","Fields":["types.SpecMeasurement.Average float64","types.SpecMeasurement.AverageLabel string","types.SpecMeasurement.Info interface{}","types.SpecMeasurement.Largest float64","types.SpecMeasurement.LargestLabel string","types.SpecMeasurement.Name string","types.SpecMeasurement.Order int","types.SpecMeasurement.Precision int","types.SpecMeasurement.Results []float64","types.SpecMeasurement.Smallest float64","types.SpecMeasurement.SmallestLabel string","types.SpecMeasurement.StdDeviation float64","types.SpecMeasurement.Units string"]},{"Name":"struct:types.SpecSummary","Fields":["types.SpecSummary.CapturedOutput string","types.SpecSummary.ComponentCodeLocations []CodeLocation","types.SpecSummary.ComponentTexts []string","types.SpecSummary.Failure SpecFailure","types.SpecSummary.IsMeasurement bool","types.SpecSummary.Measurements map[string]*SpecMeasurement","types.SpecSummary.NumberOfSamples int","types.SpecSummary.RunTime time.Duration","types.SpecSummary.State SpecState","types.SpecSummary.SuiteID string"]},{"Name":"struct:types.SuiteSummary","Fields":["types.SuiteSummary.NumberOfFailedSpecs int","types.SuiteSummary.NumberOfFlakedSpecs int","types.SuiteSummary.NumberOfPassedSpecs int","types.SuiteSummary.NumberOfPendingSpecs int","types.SuiteSummary.NumberOfSkippedSpecs int","types.SuiteSummary.NumberOfSpecsBeforeParallelization int","types.SuiteSummary.NumberOfSpecsThatWillBeRun int","types.SuiteSummary.NumberOfTotalSpecs int","types.SuiteSummary.RunTime time.Duration","types.SuiteSummary.SuiteDescription string","types.SuiteSummary.SuiteID string","types.SuiteSummary.SuiteSucceeded bool"]}]}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/types/types_suite_test.go","Functions":[{"Uniquefunname":"func TestTypes(t *testing.T)","Funname":"TestTypes","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTypes(t *testing.T)","Funname":"types_test.TestTypes","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/ginkgo/types/types_test.go","Functions":[{"Uniquefunname":"func verifySpecSummary(caller func(SpecSummary) bool, trueStates ...SpecState)","Funname":"types_test.verifySpecSummary","Returntype":"","Args":"caller func(SpecSummary) bool, trueStates ...SpecState"},{"Uniquefunname":"func verifySpecSummary(caller func(SpecSummary) bool, trueStates ...SpecState)","Funname":"verifySpecSummary","Returntype":"","Args":"caller func(SpecSummary) bool, trueStates ...SpecState"}],"Records":[{"Name":"var:types_test","Fields":["types_test._","types_test.specStates"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/gomega_dsl.go","Functions":[{"Uniquefunname":"func Consistently(actual interface{}, intervals ...interface{})GomegaAsyncAssertion","Funname":"Consistently","Returntype":"GomegaAsyncAssertion","Args":"actual interface{}, intervals ...interface{}"},{"Uniquefunname":"func Consistently(actual interface","Funname":"Consistently","Returntype":"GomegaAsyncAssertion","Args":"actual interface{}, intervals ...interface{}"},{"Uniquefunname":"func ConsistentlyWithOffset(offset int, actual interface{}, intervals ...interface{})GomegaAsyncAssertion","Funname":"ConsistentlyWithOffset","Returntype":"GomegaAsyncAssertion","Args":"offset int, actual interface{}, intervals ...interface{}"},{"Uniquefunname":"func Eventually(actual interface{}, intervals ...interface{})GomegaAsyncAssertion","Funname":"Eventually","Returntype":"GomegaAsyncAssertion","Args":"actual interface{}, intervals ...interface{}"},{"Uniquefunname":"func Eventually(actual interface","Funname":"Eventually","Returntype":"GomegaAsyncAssertion","Args":"actual interface{}, intervals ...interface{}"},{"Uniquefunname":"func EventuallyWithOffset(offset int, actual interface{}, intervals ...interface{})GomegaAsyncAssertion","Funname":"EventuallyWithOffset","Returntype":"GomegaAsyncAssertion","Args":"offset int, actual interface{}, intervals ...interface{}"},{"Uniquefunname":"func (g *GomegaWithT) Expect(actual interface","Funname":"Expect","Returntype":"GomegaAssertion","Args":"actual interface{}, extra ...interface{}"},{"Uniquefunname":"func Expect(actual interface","Funname":"Expect","Returntype":"GomegaAssertion","Args":"actual interface{}, extra ...interface{}"},{"Uniquefunname":"func ExpectWithOffset(offset int, actual interface","Funname":"ExpectWithOffset","Returntype":"GomegaAssertion","Args":"offset int, actual interface{}, extra ...interface{}"},{"Uniquefunname":"func InterceptGomegaFailures(f func()) []string","Funname":"InterceptGomegaFailures","Returntype":"[]string","Args":"f func()"},{"Uniquefunname":"func NewGomegaWithT(t types.GomegaTestingT) *GomegaWithT","Funname":"NewGomegaWithT","Returntype":"*GomegaWithT","Args":"t types.GomegaTestingT"},{"Uniquefunname":"func RegisterFailHandler(handler types.GomegaFailHandler)","Funname":"RegisterFailHandler","Returntype":"","Args":"handler types.GomegaFailHandler"},{"Uniquefunname":"func RegisterTestingT(t types.GomegaTestingT)","Funname":"RegisterTestingT","Returntype":"","Args":"t types.GomegaTestingT"},{"Uniquefunname":"func SetDefaultConsistentlyDuration(t time.Duration)","Funname":"SetDefaultConsistentlyDuration","Returntype":"","Args":"t time.Duration"},{"Uniquefunname":"func SetDefaultConsistentlyPollingInterval(t time.Duration)","Funname":"SetDefaultConsistentlyPollingInterval","Returntype":"","Args":"t time.Duration"},{"Uniquefunname":"func SetDefaultEventuallyPollingInterval(t time.Duration)","Funname":"SetDefaultEventuallyPollingInterval","Returntype":"","Args":"t time.Duration"},{"Uniquefunname":"func SetDefaultEventuallyTimeout(t time.Duration)","Funname":"SetDefaultEventuallyTimeout","Returntype":"","Args":"t time.Duration"},{"Uniquefunname":"func Consistently(actual interface","Funname":"gomega.Consistently","Returntype":"GomegaAsyncAssertion","Args":"actual interface{}, intervals ...interface{}"},{"Uniquefunname":"func gomega.ConsistentlyWithOffset(offset int, actual interface{}, intervals ...interface{})GomegaAsyncAssertion","Funname":"gomega.ConsistentlyWithOffset","Returntype":"GomegaAsyncAssertion","Args":"offset int, actual interface{}, intervals ...interface{}"},{"Uniquefunname":"func Eventually(actual interface","Funname":"gomega.Eventually","Returntype":"GomegaAsyncAssertion","Args":"actual interface{}, intervals ...interface{}"},{"Uniquefunname":"func gomega.EventuallyWithOffset(offset int, actual interface{}, intervals ...interface{})GomegaAsyncAssertion","Funname":"gomega.EventuallyWithOffset","Returntype":"GomegaAsyncAssertion","Args":"offset int, actual interface{}, intervals ...interface{}"},{"Uniquefunname":"func Expect(actual interface","Funname":"gomega.Expect","Returntype":"GomegaAssertion","Args":"actual interface{}, extra ...interface{}"},{"Uniquefunname":"func ExpectWithOffset(offset int, actual interface","Funname":"gomega.ExpectWithOffset","Returntype":"GomegaAssertion","Args":"offset int, actual interface{}, extra ...interface{}"},{"Uniquefunname":"func gomega.GomegaWithT.Consistently(actual interface{}, intervals ...interface{})GomegaAsyncAssertion","Funname":"gomega.GomegaWithT.Consistently","Returntype":"GomegaAsyncAssertion","Args":"actual interface{}, intervals ...interface{}"},{"Uniquefunname":"func gomega.GomegaWithT.Eventually(actual interface{}, intervals ...interface{})GomegaAsyncAssertion","Funname":"gomega.GomegaWithT.Eventually","Returntype":"GomegaAsyncAssertion","Args":"actual interface{}, intervals ...interface{}"},{"Uniquefunname":"func (g *GomegaWithT) Expect(actual interface","Funname":"gomega.GomegaWithT.Expect","Returntype":"GomegaAssertion","Args":"actual interface{}, extra ...interface{}"},{"Uniquefunname":"func InterceptGomegaFailures(f func()) []string","Funname":"gomega.InterceptGomegaFailures","Returntype":"[]string","Args":"f func()"},{"Uniquefunname":"func NewGomegaWithT(t types.GomegaTestingT) *GomegaWithT","Funname":"gomega.NewGomegaWithT","Returntype":"*GomegaWithT","Args":"t types.GomegaTestingT"},{"Uniquefunname":"func RegisterFailHandler(handler types.GomegaFailHandler)","Funname":"gomega.RegisterFailHandler","Returntype":"","Args":"handler types.GomegaFailHandler"},{"Uniquefunname":"func RegisterTestingT(t types.GomegaTestingT)","Funname":"gomega.RegisterTestingT","Returntype":"","Args":"t types.GomegaTestingT"},{"Uniquefunname":"func SetDefaultConsistentlyDuration(t time.Duration)","Funname":"gomega.SetDefaultConsistentlyDuration","Returntype":"","Args":"t time.Duration"},{"Uniquefunname":"func SetDefaultConsistentlyPollingInterval(t time.Duration)","Funname":"gomega.SetDefaultConsistentlyPollingInterval","Returntype":"","Args":"t time.Duration"},{"Uniquefunname":"func SetDefaultEventuallyPollingInterval(t time.Duration)","Funname":"gomega.SetDefaultEventuallyPollingInterval","Returntype":"","Args":"t time.Duration"},{"Uniquefunname":"func SetDefaultEventuallyTimeout(t time.Duration)","Funname":"gomega.SetDefaultEventuallyTimeout","Returntype":"","Args":"t time.Duration"},{"Uniquefunname":"func toDuration(input interface","Funname":"gomega.toDuration","Returntype":"time.Duration","Args":"input interface{}"},{"Uniquefunname":"func Ω(actual interface","Funname":"gomega.Ω","Returntype":"GomegaAssertion","Args":"actual interface{}, extra ...interface{}"},{"Uniquefunname":"func toDuration(input interface","Funname":"toDuration","Returntype":"time.Duration","Args":"input interface{}"},{"Uniquefunname":"func Ω(actual interface","Funname":"Ω","Returntype":"GomegaAssertion","Args":"actual interface{}, extra ...interface{}"}],"Records":[{"Name":"const:gomega","Fields":["gomega.GOMEGA_VERSION","gomega.nilFailHandlerPanic"]},{"Name":"interface","Fields":["gomega.GomegaAssertion","gomega.GomegaAsyncAssertion"]},{"Name":"struct:gomega.GomegaWithT","Fields":["gomega.GomegaWithT.t types.GomegaTestingT"]},{"Name":"var:gomega","Fields":["gomega.defaultConsistentlyDuration","gomega.defaultConsistentlyPollingInterval","gomega.defaultEventuallyPollingInterval","gomega.defaultEventuallyTimeout","gomega.globalFailWrapper"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers.go","Functions":[{"Uniquefunname":"func And(ms ...types.GomegaMatcher) types.GomegaMatcher","Funname":"And","Returntype":"types.GomegaMatcher","Args":"ms ...types.GomegaMatcher"},{"Uniquefunname":"func BeADirectory() types.GomegaMatcher","Funname":"BeADirectory","Returntype":"types.GomegaMatcher","Args":""},{"Uniquefunname":"func BeARegularFile() types.GomegaMatcher","Funname":"BeARegularFile","Returntype":"types.GomegaMatcher","Args":""},{"Uniquefunname":"func BeAnExistingFile() types.GomegaMatcher","Funname":"BeAnExistingFile","Returntype":"types.GomegaMatcher","Args":""},{"Uniquefunname":"func BeAssignableToTypeOf(expected interface","Funname":"BeAssignableToTypeOf","Returntype":"types.GomegaMatcher","Args":"expected interface{}"},{"Uniquefunname":"func BeClosed() types.GomegaMatcher","Funname":"BeClosed","Returntype":"types.GomegaMatcher","Args":""},{"Uniquefunname":"func BeEmpty() types.GomegaMatcher","Funname":"BeEmpty","Returntype":"types.GomegaMatcher","Args":""},{"Uniquefunname":"func BeEquivalentTo(expected interface","Funname":"BeEquivalentTo","Returntype":"types.GomegaMatcher","Args":"expected interface{}"},{"Uniquefunname":"func BeFalse() types.GomegaMatcher","Funname":"BeFalse","Returntype":"types.GomegaMatcher","Args":""},{"Uniquefunname":"func BeIdenticalTo(expected interface","Funname":"BeIdenticalTo","Returntype":"types.GomegaMatcher","Args":"expected interface{}"},{"Uniquefunname":"func BeNil() types.GomegaMatcher","Funname":"BeNil","Returntype":"types.GomegaMatcher","Args":""},{"Uniquefunname":"func BeNumerically(comparator string, compareTo ...interface","Funname":"BeNumerically","Returntype":"types.GomegaMatcher","Args":"comparator string, compareTo ...interface{}"},{"Uniquefunname":"func BeSent(arg interface","Funname":"BeSent","Returntype":"types.GomegaMatcher","Args":"arg interface{}"},{"Uniquefunname":"func BeTemporally(comparator string, compareTo time.Time, threshold ...time.Duration)types.GomegaMatcher","Funname":"BeTemporally","Returntype":"types.GomegaMatcher","Args":"comparator string, compareTo time.Time, threshold ...time.Duration"},{"Uniquefunname":"func BeTrue() types.GomegaMatcher","Funname":"BeTrue","Returntype":"types.GomegaMatcher","Args":""},{"Uniquefunname":"func BeZero() types.GomegaMatcher","Funname":"BeZero","Returntype":"types.GomegaMatcher","Args":""},{"Uniquefunname":"func ConsistOf(elements ...interface","Funname":"ConsistOf","Returntype":"types.GomegaMatcher","Args":"elements ...interface{}"},{"Uniquefunname":"func ContainElement(element interface","Funname":"ContainElement","Returntype":"types.GomegaMatcher","Args":"element interface{}"},{"Uniquefunname":"func ContainSubstring(substr string, args ...interface","Funname":"ContainSubstring","Returntype":"types.GomegaMatcher","Args":"substr string, args ...interface{}"},{"Uniquefunname":"func Equal(expected interface","Funname":"Equal","Returntype":"types.GomegaMatcher","Args":"expected interface{}"},{"Uniquefunname":"func HaveCap(count int) types.GomegaMatcher","Funname":"HaveCap","Returntype":"types.GomegaMatcher","Args":"count int"},{"Uniquefunname":"func HaveKey(key interface","Funname":"HaveKey","Returntype":"types.GomegaMatcher","Args":"key interface{}"},{"Uniquefunname":"func HaveKeyWithValue(key interface","Funname":"HaveKeyWithValue","Returntype":"types.GomegaMatcher","Args":"key interface{}, value interface{}"},{"Uniquefunname":"func HaveLen(count int) types.GomegaMatcher","Funname":"HaveLen","Returntype":"types.GomegaMatcher","Args":"count int"},{"Uniquefunname":"func HaveOccurred() types.GomegaMatcher","Funname":"HaveOccurred","Returntype":"types.GomegaMatcher","Args":""},{"Uniquefunname":"func HavePrefix(prefix string, args ...interface","Funname":"HavePrefix","Returntype":"types.GomegaMatcher","Args":"prefix string, args ...interface{}"},{"Uniquefunname":"func HaveSuffix(suffix string, args ...interface","Funname":"HaveSuffix","Returntype":"types.GomegaMatcher","Args":"suffix string, args ...interface{}"},{"Uniquefunname":"func MatchError(expected interface","Funname":"MatchError","Returntype":"types.GomegaMatcher","Args":"expected interface{}"},{"Uniquefunname":"func MatchJSON(json interface","Funname":"MatchJSON","Returntype":"types.GomegaMatcher","Args":"json interface{}"},{"Uniquefunname":"func MatchRegexp(regexp string, args ...interface","Funname":"MatchRegexp","Returntype":"types.GomegaMatcher","Args":"regexp string, args ...interface{}"},{"Uniquefunname":"func MatchXML(xml interface","Funname":"MatchXML","Returntype":"types.GomegaMatcher","Args":"xml interface{}"},{"Uniquefunname":"func MatchYAML(yaml interface","Funname":"MatchYAML","Returntype":"types.GomegaMatcher","Args":"yaml interface{}"},{"Uniquefunname":"func Not(matcher types.GomegaMatcher) types.GomegaMatcher","Funname":"Not","Returntype":"types.GomegaMatcher","Args":"matcher types.GomegaMatcher"},{"Uniquefunname":"func Or(ms ...types.GomegaMatcher) types.GomegaMatcher","Funname":"Or","Returntype":"types.GomegaMatcher","Args":"ms ...types.GomegaMatcher"},{"Uniquefunname":"func Panic() types.GomegaMatcher","Funname":"Panic","Returntype":"types.GomegaMatcher","Args":""},{"Uniquefunname":"func Receive(args ...interface","Funname":"Receive","Returntype":"types.GomegaMatcher","Args":"args ...interface{}"},{"Uniquefunname":"func SatisfyAll(matchers ...types.GomegaMatcher) types.GomegaMatcher","Funname":"SatisfyAll","Returntype":"types.GomegaMatcher","Args":"matchers ...types.GomegaMatcher"},{"Uniquefunname":"func SatisfyAny(matchers ...types.GomegaMatcher) types.GomegaMatcher","Funname":"SatisfyAny","Returntype":"types.GomegaMatcher","Args":"matchers ...types.GomegaMatcher"},{"Uniquefunname":"func Succeed() types.GomegaMatcher","Funname":"Succeed","Returntype":"types.GomegaMatcher","Args":""},{"Uniquefunname":"func WithTransform(transform interface","Funname":"WithTransform","Returntype":"types.GomegaMatcher","Args":"transform interface{}, matcher types.GomegaMatcher"},{"Uniquefunname":"func And(ms ...types.GomegaMatcher) types.GomegaMatcher","Funname":"gomega.And","Returntype":"types.GomegaMatcher","Args":"ms ...types.GomegaMatcher"},{"Uniquefunname":"func BeADirectory() types.GomegaMatcher","Funname":"gomega.BeADirectory","Returntype":"types.GomegaMatcher","Args":""},{"Uniquefunname":"func BeARegularFile() types.GomegaMatcher","Funname":"gomega.BeARegularFile","Returntype":"types.GomegaMatcher","Args":""},{"Uniquefunname":"func BeAnExistingFile() types.GomegaMatcher","Funname":"gomega.BeAnExistingFile","Returntype":"types.GomegaMatcher","Args":""},{"Uniquefunname":"func BeAssignableToTypeOf(expected interface","Funname":"gomega.BeAssignableToTypeOf","Returntype":"types.GomegaMatcher","Args":"expected interface{}"},{"Uniquefunname":"func BeClosed() types.GomegaMatcher","Funname":"gomega.BeClosed","Returntype":"types.GomegaMatcher","Args":""},{"Uniquefunname":"func BeEmpty() types.GomegaMatcher","Funname":"gomega.BeEmpty","Returntype":"types.GomegaMatcher","Args":""},{"Uniquefunname":"func BeEquivalentTo(expected interface","Funname":"gomega.BeEquivalentTo","Returntype":"types.GomegaMatcher","Args":"expected interface{}"},{"Uniquefunname":"func BeFalse() types.GomegaMatcher","Funname":"gomega.BeFalse","Returntype":"types.GomegaMatcher","Args":""},{"Uniquefunname":"func BeIdenticalTo(expected interface","Funname":"gomega.BeIdenticalTo","Returntype":"types.GomegaMatcher","Args":"expected interface{}"},{"Uniquefunname":"func BeNil() types.GomegaMatcher","Funname":"gomega.BeNil","Returntype":"types.GomegaMatcher","Args":""},{"Uniquefunname":"func BeNumerically(comparator string, compareTo ...interface","Funname":"gomega.BeNumerically","Returntype":"types.GomegaMatcher","Args":"comparator string, compareTo ...interface{}"},{"Uniquefunname":"func BeSent(arg interface","Funname":"gomega.BeSent","Returntype":"types.GomegaMatcher","Args":"arg interface{}"},{"Uniquefunname":"func gomega.BeTemporally(comparator string, compareTo time.Time, threshold ...time.Duration)types.GomegaMatcher","Funname":"gomega.BeTemporally","Returntype":"types.GomegaMatcher","Args":"comparator string, compareTo time.Time, threshold ...time.Duration"},{"Uniquefunname":"func BeTrue() types.GomegaMatcher","Funname":"gomega.BeTrue","Returntype":"types.GomegaMatcher","Args":""},{"Uniquefunname":"func BeZero() types.GomegaMatcher","Funname":"gomega.BeZero","Returntype":"types.GomegaMatcher","Args":""},{"Uniquefunname":"func ConsistOf(elements ...interface","Funname":"gomega.ConsistOf","Returntype":"types.GomegaMatcher","Args":"elements ...interface{}"},{"Uniquefunname":"func ContainElement(element interface","Funname":"gomega.ContainElement","Returntype":"types.GomegaMatcher","Args":"element interface{}"},{"Uniquefunname":"func ContainSubstring(substr string, args ...interface","Funname":"gomega.ContainSubstring","Returntype":"types.GomegaMatcher","Args":"substr string, args ...interface{}"},{"Uniquefunname":"func Equal(expected interface","Funname":"gomega.Equal","Returntype":"types.GomegaMatcher","Args":"expected interface{}"},{"Uniquefunname":"func HaveCap(count int) types.GomegaMatcher","Funname":"gomega.HaveCap","Returntype":"types.GomegaMatcher","Args":"count int"},{"Uniquefunname":"func HaveKey(key interface","Funname":"gomega.HaveKey","Returntype":"types.GomegaMatcher","Args":"key interface{}"},{"Uniquefunname":"func HaveKeyWithValue(key interface","Funname":"gomega.HaveKeyWithValue","Returntype":"types.GomegaMatcher","Args":"key interface{}, value interface{}"},{"Uniquefunname":"func HaveLen(count int) types.GomegaMatcher","Funname":"gomega.HaveLen","Returntype":"types.GomegaMatcher","Args":"count int"},{"Uniquefunname":"func HaveOccurred() types.GomegaMatcher","Funname":"gomega.HaveOccurred","Returntype":"types.GomegaMatcher","Args":""},{"Uniquefunname":"func HavePrefix(prefix string, args ...interface","Funname":"gomega.HavePrefix","Returntype":"types.GomegaMatcher","Args":"prefix string, args ...interface{}"},{"Uniquefunname":"func HaveSuffix(suffix string, args ...interface","Funname":"gomega.HaveSuffix","Returntype":"types.GomegaMatcher","Args":"suffix string, args ...interface{}"},{"Uniquefunname":"func MatchError(expected interface","Funname":"gomega.MatchError","Returntype":"types.GomegaMatcher","Args":"expected interface{}"},{"Uniquefunname":"func MatchJSON(json interface","Funname":"gomega.MatchJSON","Returntype":"types.GomegaMatcher","Args":"json interface{}"},{"Uniquefunname":"func MatchRegexp(regexp string, args ...interface","Funname":"gomega.MatchRegexp","Returntype":"types.GomegaMatcher","Args":"regexp string, args ...interface{}"},{"Uniquefunname":"func MatchXML(xml interface","Funname":"gomega.MatchXML","Returntype":"types.GomegaMatcher","Args":"xml interface{}"},{"Uniquefunname":"func MatchYAML(yaml interface","Funname":"gomega.MatchYAML","Returntype":"types.GomegaMatcher","Args":"yaml interface{}"},{"Uniquefunname":"func Not(matcher types.GomegaMatcher) types.GomegaMatcher","Funname":"gomega.Not","Returntype":"types.GomegaMatcher","Args":"matcher types.GomegaMatcher"},{"Uniquefunname":"func Or(ms ...types.GomegaMatcher) types.GomegaMatcher","Funname":"gomega.Or","Returntype":"types.GomegaMatcher","Args":"ms ...types.GomegaMatcher"},{"Uniquefunname":"func Panic() types.GomegaMatcher","Funname":"gomega.Panic","Returntype":"types.GomegaMatcher","Args":""},{"Uniquefunname":"func Receive(args ...interface","Funname":"gomega.Receive","Returntype":"types.GomegaMatcher","Args":"args ...interface{}"},{"Uniquefunname":"func SatisfyAll(matchers ...types.GomegaMatcher) types.GomegaMatcher","Funname":"gomega.SatisfyAll","Returntype":"types.GomegaMatcher","Args":"matchers ...types.GomegaMatcher"},{"Uniquefunname":"func SatisfyAny(matchers ...types.GomegaMatcher) types.GomegaMatcher","Funname":"gomega.SatisfyAny","Returntype":"types.GomegaMatcher","Args":"matchers ...types.GomegaMatcher"},{"Uniquefunname":"func Succeed() types.GomegaMatcher","Funname":"gomega.Succeed","Returntype":"types.GomegaMatcher","Args":""},{"Uniquefunname":"func WithTransform(transform interface","Funname":"gomega.WithTransform","Returntype":"types.GomegaMatcher","Args":"transform interface{}, matcher types.GomegaMatcher"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/gomega/format/format.go","Functions":[{"Uniquefunname":"func IndentString(s string, indentation uint) string","Funname":"IndentString","Returntype":"string","Args":"s string, indentation uint"},{"Uniquefunname":"func Message(actual interface","Funname":"Message","Returntype":"string","Args":"actual interface{}, message string, expected ...interface{}"},{"Uniquefunname":"func MessageWithDiff(actual, message, expected string) string","Funname":"MessageWithDiff","Returntype":"string","Args":"actual, message, expected string"},{"Uniquefunname":"func Object(object interface","Funname":"Object","Returntype":"string","Args":"object interface{}, indentation uint"},{"Uniquefunname":"func findFirstMismatch(a, b string) int","Funname":"findFirstMismatch","Returntype":"int","Args":"a, b string"},{"Uniquefunname":"func IndentString(s string, indentation uint) string","Funname":"format.IndentString","Returntype":"string","Args":"s string, indentation uint"},{"Uniquefunname":"func Message(actual interface","Funname":"format.Message","Returntype":"string","Args":"actual interface{}, message string, expected ...interface{}"},{"Uniquefunname":"func MessageWithDiff(actual, message, expected string) string","Funname":"format.MessageWithDiff","Returntype":"string","Args":"actual, message, expected string"},{"Uniquefunname":"func Object(object interface","Funname":"format.Object","Returntype":"string","Args":"object interface{}, indentation uint"},{"Uniquefunname":"func findFirstMismatch(a, b string) int","Funname":"format.findFirstMismatch","Returntype":"int","Args":"a, b string"},{"Uniquefunname":"func formatMap(v reflect.Value, indentation uint) string","Funname":"format.formatMap","Returntype":"string","Args":"v reflect.Value, indentation uint"},{"Uniquefunname":"func formatSlice(v reflect.Value, indentation uint) string","Funname":"format.formatSlice","Returntype":"string","Args":"v reflect.Value, indentation uint"},{"Uniquefunname":"func formatString(object interface","Funname":"format.formatString","Returntype":"string","Args":"object interface{}, indentation uint"},{"Uniquefunname":"func formatStruct(v reflect.Value, indentation uint) string","Funname":"format.formatStruct","Returntype":"string","Args":"v reflect.Value, indentation uint"},{"Uniquefunname":"func formatType(object interface","Funname":"format.formatType","Returntype":"string","Args":"object interface{}"},{"Uniquefunname":"func formatValue(value reflect.Value, indentation uint) string","Funname":"format.formatValue","Returntype":"string","Args":"value reflect.Value, indentation uint"},{"Uniquefunname":"func isNilValue(a reflect.Value) bool","Funname":"format.isNilValue","Returntype":"bool","Args":"a reflect.Value"},{"Uniquefunname":"func isPrintableString(str string) bool","Funname":"format.isPrintableString","Returntype":"bool","Args":"str string"},{"Uniquefunname":"func truncateAndFormat(str string, index int) string","Funname":"format.truncateAndFormat","Returntype":"string","Args":"str string, index int"},{"Uniquefunname":"func formatMap(v reflect.Value, indentation uint) string","Funname":"formatMap","Returntype":"string","Args":"v reflect.Value, indentation uint"},{"Uniquefunname":"func formatSlice(v reflect.Value, indentation uint) string","Funname":"formatSlice","Returntype":"string","Args":"v reflect.Value, indentation uint"},{"Uniquefunname":"func formatString(object interface","Funname":"formatString","Returntype":"string","Args":"object interface{}, indentation uint"},{"Uniquefunname":"func formatStruct(v reflect.Value, indentation uint) string","Funname":"formatStruct","Returntype":"string","Args":"v reflect.Value, indentation uint"},{"Uniquefunname":"func formatType(object interface","Funname":"formatType","Returntype":"string","Args":"object interface{}"},{"Uniquefunname":"func formatValue(value reflect.Value, indentation uint) string","Funname":"formatValue","Returntype":"string","Args":"value reflect.Value, indentation uint"},{"Uniquefunname":"func isNilValue(a reflect.Value) bool","Funname":"isNilValue","Returntype":"bool","Args":"a reflect.Value"},{"Uniquefunname":"func isPrintableString(str string) bool","Funname":"isPrintableString","Returntype":"bool","Args":"str string"},{"Uniquefunname":"func truncateAndFormat(str string, index int) string","Funname":"truncateAndFormat","Returntype":"string","Args":"str string, index int"}],"Records":[{"Name":"interface","Fields":["format.Ctx"]},{"Name":"var:format","Fields":["format.Indent","format.MaxDepth","format.PrintContextObjects","format.TruncatedDiff","format.UseStringerRepresentation","format.contextType","format.longFormThreshold","format.timeType"]},{"Name":"const:format","Fields":["format.charactersAroundMismatchToInclude","format.truncateThreshold"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/format/format_suite_test.go","Functions":[{"Uniquefunname":"func TestFormat(t *testing.T)","Funname":"TestFormat","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestFormat(t *testing.T)","Funname":"format_test.TestFormat","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/gomega/format/format_test.go","Functions":[{"Uniquefunname":"func (c *ctx) Deadline() (deadline time.Time, ok bool)","Funname":"Deadline","Returntype":"(deadline time.Time, ok bool)","Args":""},{"Uniquefunname":"func (c *ctx) Done() \u003c-chan struct","Funname":"Done","Returntype":"\u003c-chan struct{}","Args":""},{"Uniquefunname":"func (c *ctx) Err() error","Funname":"Err","Returntype":"error","Args":""},{"Uniquefunname":"func (g GoStringer) GoString() string","Funname":"GoString","Returntype":"string","Args":""},{"Uniquefunname":"func (g GoStringer) String() string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func (g Stringer) String() string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func (c *ctx) Value(key interface","Funname":"Value","Returntype":"interface{}","Args":"key interface{}"},{"Uniquefunname":"func (g GoStringer) GoString() string","Funname":"format_test.GoStringer.GoString","Returntype":"string","Args":""},{"Uniquefunname":"func (g GoStringer) String() string","Funname":"format_test.GoStringer.String","Returntype":"string","Args":""},{"Uniquefunname":"func (g Stringer) String() string","Funname":"format_test.Stringer.String","Returntype":"string","Args":""},{"Uniquefunname":"func (c *ctx) Deadline() (deadline time.Time, ok bool)","Funname":"format_test.ctx.Deadline","Returntype":"(deadline time.Time, ok bool)","Args":""},{"Uniquefunname":"func (c *ctx) Done() \u003c-chan struct","Funname":"format_test.ctx.Done","Returntype":"\u003c-chan struct{}","Args":""},{"Uniquefunname":"func (c *ctx) Err() error","Funname":"format_test.ctx.Err","Returntype":"error","Args":""},{"Uniquefunname":"func (c *ctx) Value(key interface","Funname":"format_test.ctx.Value","Returntype":"interface{}","Args":"key interface{}"}],"Records":[{"Name":"struct:format_test.AStruct","Fields":["format_test.AStruct.Exported string"]},{"Name":"struct:format_test.ComplexStruct","Fields":["format_test.ComplexStruct.DataMaps map[int]ByteAlias","format_test.ComplexStruct.SimpleThings []*SimpleStruct","format_test.ComplexStruct.Strings []string"]},{"Name":"struct:format_test.SecretiveStruct","Fields":["format_test.SecretiveStruct.arrValue [3]int","format_test.SecretiveStruct.boolValue bool","format_test.SecretiveStruct.byteArrValue [3]byte","format_test.SecretiveStruct.byteSliceValue []byte","format_test.SecretiveStruct.chanValue chan bool","format_test.SecretiveStruct.complexValue complex64","format_test.SecretiveStruct.floatValue float32","format_test.SecretiveStruct.funcValue func()","format_test.SecretiveStruct.intValue int","format_test.SecretiveStruct.interfaceValue interface{}","format_test.SecretiveStruct.mapValue map[string]int","format_test.SecretiveStruct.pointerValue *int","format_test.SecretiveStruct.sliceValue []string","format_test.SecretiveStruct.stringValue string","format_test.SecretiveStruct.structValue AStruct","format_test.SecretiveStruct.uintValue uint","format_test.SecretiveStruct.uintptrValue uintptr"]},{"Name":"struct:format_test.SimpleStruct","Fields":["format_test.SimpleStruct.Data []byte","format_test.SimpleStruct.Enumeration int","format_test.SimpleStruct.Name string","format_test.SimpleStruct.Veritas bool","format_test.SimpleStruct.secret uint32"]},{"Name":"var:format_test","Fields":["format_test._","format_test.expectedFullFailureDiff","format_test.expectedLongStringFailureMessage","format_test.expectedTruncatedEndStringFailureMessage","format_test.expectedTruncatedMultiByteFailureMessage","format_test.expectedTruncatedStartSizeFailureMessage","format_test.expectedTruncatedStartSizeSwappedFailureMessage","format_test.expectedTruncatedStartStringFailureMessage"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/gbytes/buffer.go","Functions":[{"Uniquefunname":"func BufferReader(reader io.Reader) *Buffer","Funname":"BufferReader","Returntype":"*Buffer","Args":"reader io.Reader"},{"Uniquefunname":"func BufferWithBytes(bytes []byte) *Buffer","Funname":"BufferWithBytes","Returntype":"*Buffer","Args":"bytes []byte"},{"Uniquefunname":"func (b *Buffer) CancelDetects()","Funname":"CancelDetects","Returntype":"","Args":""},{"Uniquefunname":"func (b *Buffer) Close() error","Funname":"Close","Returntype":"error","Args":""},{"Uniquefunname":"func (b *Buffer) Closed() bool","Funname":"Closed","Returntype":"bool","Args":""},{"Uniquefunname":"func (b *Buffer) Contents() []byte","Funname":"Contents","Returntype":"[]byte","Args":""},{"Uniquefunname":"func (b *Buffer) Detect(desired string, args ...interface","Funname":"Detect","Returntype":"chan bool","Args":"desired string, args ...interface{}"},{"Uniquefunname":"func NewBuffer() *Buffer","Funname":"NewBuffer","Returntype":"*Buffer","Args":""},{"Uniquefunname":"func (b *Buffer) Read(d []byte) (int, error)","Funname":"Read","Returntype":"(int, error)","Args":"d []byte"},{"Uniquefunname":"func (b *Buffer) Write(p []byte) (n int, err error)","Funname":"Write","Returntype":"(n int, err error)","Args":"p []byte"},{"Uniquefunname":"func (b *Buffer) didSay(re *regexp.Regexp) (bool, []byte)","Funname":"didSay","Returntype":"(bool, []byte)","Args":"re *regexp.Regexp"},{"Uniquefunname":"func (b *Buffer) CancelDetects()","Funname":"gbytes.Buffer.CancelDetects","Returntype":"","Args":""},{"Uniquefunname":"func (b *Buffer) Close() error","Funname":"gbytes.Buffer.Close","Returntype":"error","Args":""},{"Uniquefunname":"func (b *Buffer) Closed() bool","Funname":"gbytes.Buffer.Closed","Returntype":"bool","Args":""},{"Uniquefunname":"func (b *Buffer) Contents() []byte","Funname":"gbytes.Buffer.Contents","Returntype":"[]byte","Args":""},{"Uniquefunname":"func (b *Buffer) Detect(desired string, args ...interface","Funname":"gbytes.Buffer.Detect","Returntype":"chan bool","Args":"desired string, args ...interface{}"},{"Uniquefunname":"func (b *Buffer) Read(d []byte) (int, error)","Funname":"gbytes.Buffer.Read","Returntype":"(int, error)","Args":"d []byte"},{"Uniquefunname":"func (b *Buffer) Write(p []byte) (n int, err error)","Funname":"gbytes.Buffer.Write","Returntype":"(n int, err error)","Args":"p []byte"},{"Uniquefunname":"func (b *Buffer) didSay(re *regexp.Regexp) (bool, []byte)","Funname":"gbytes.Buffer.didSay","Returntype":"(bool, []byte)","Args":"re *regexp.Regexp"},{"Uniquefunname":"func BufferReader(reader io.Reader) *Buffer","Funname":"gbytes.BufferReader","Returntype":"*Buffer","Args":"reader io.Reader"},{"Uniquefunname":"func BufferWithBytes(bytes []byte) *Buffer","Funname":"gbytes.BufferWithBytes","Returntype":"*Buffer","Args":"bytes []byte"},{"Uniquefunname":"func NewBuffer() *Buffer","Funname":"gbytes.NewBuffer","Returntype":"*Buffer","Args":""}],"Records":[{"Name":"struct:gbytes.Buffer","Fields":["gbytes.Buffer.closed bool","gbytes.Buffer.contents []byte","gbytes.Buffer.detectCloser chan interface{}","gbytes.Buffer.lock *sync.Mutex","gbytes.Buffer.readCursor uint64"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/gbytes/buffer_test.go","Functions":[{"Uniquefunname":"func (s SlowReader) Read(p []byte) (int, error)","Funname":"Read","Returntype":"(int, error)","Args":"p []byte"},{"Uniquefunname":"func (s SlowReader) Read(p []byte) (int, error)","Funname":"gbytes_test.SlowReader.Read","Returntype":"(int, error)","Args":"p []byte"}],"Records":[{"Name":"struct:gbytes_test.SlowReader","Fields":["gbytes_test.SlowReader.D time.Duration","gbytes_test.SlowReader.R io.Reader"]},{"Name":"var:gbytes_test","Fields":["gbytes_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/gbytes/gbuffer_suite_test.go","Functions":[{"Uniquefunname":"func TestGbytes(t *testing.T)","Funname":"TestGbytes","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestGbytes(t *testing.T)","Funname":"gbytes_test.TestGbytes","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/gomega/gbytes/io_wrappers.go","Functions":[{"Uniquefunname":"func (t timeoutReaderWriterCloser) Close() error","Funname":"Close","Returntype":"error","Args":""},{"Uniquefunname":"func (t timeoutReaderWriterCloser) Read(p []byte) (int, error)","Funname":"Read","Returntype":"(int, error)","Args":"p []byte"},{"Uniquefunname":"func TimeoutCloser(c io.Closer, timeout time.Duration) io.Closer","Funname":"TimeoutCloser","Returntype":"io.Closer","Args":"c io.Closer, timeout time.Duration"},{"Uniquefunname":"func TimeoutReader(r io.Reader, timeout time.Duration) io.Reader","Funname":"TimeoutReader","Returntype":"io.Reader","Args":"r io.Reader, timeout time.Duration"},{"Uniquefunname":"func TimeoutWriter(w io.Writer, timeout time.Duration) io.Writer","Funname":"TimeoutWriter","Returntype":"io.Writer","Args":"w io.Writer, timeout time.Duration"},{"Uniquefunname":"func (t timeoutReaderWriterCloser) Write(p []byte) (int, error)","Funname":"Write","Returntype":"(int, error)","Args":"p []byte"},{"Uniquefunname":"func TimeoutCloser(c io.Closer, timeout time.Duration) io.Closer","Funname":"gbytes.TimeoutCloser","Returntype":"io.Closer","Args":"c io.Closer, timeout time.Duration"},{"Uniquefunname":"func TimeoutReader(r io.Reader, timeout time.Duration) io.Reader","Funname":"gbytes.TimeoutReader","Returntype":"io.Reader","Args":"r io.Reader, timeout time.Duration"},{"Uniquefunname":"func TimeoutWriter(w io.Writer, timeout time.Duration) io.Writer","Funname":"gbytes.TimeoutWriter","Returntype":"io.Writer","Args":"w io.Writer, timeout time.Duration"},{"Uniquefunname":"func (t timeoutReaderWriterCloser) Close() error","Funname":"gbytes.timeoutReaderWriterCloser.Close","Returntype":"error","Args":""},{"Uniquefunname":"func (t timeoutReaderWriterCloser) Read(p []byte) (int, error)","Funname":"gbytes.timeoutReaderWriterCloser.Read","Returntype":"(int, error)","Args":"p []byte"},{"Uniquefunname":"func (t timeoutReaderWriterCloser) Write(p []byte) (int, error)","Funname":"gbytes.timeoutReaderWriterCloser.Write","Returntype":"(int, error)","Args":"p []byte"}],"Records":[{"Name":"var:gbytes","Fields":["gbytes.ErrTimeout"]},{"Name":"struct:gbytes.timeoutReaderWriterCloser","Fields":["gbytes.timeoutReaderWriterCloser.c io.Closer","gbytes.timeoutReaderWriterCloser.d time.Duration","gbytes.timeoutReaderWriterCloser.r io.Reader","gbytes.timeoutReaderWriterCloser.w io.Writer"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/gbytes/io_wrappers_test.go","Functions":[{"Uniquefunname":"func (f FakeCloser) Close() error","Funname":"Close","Returntype":"error","Args":""},{"Uniquefunname":"func (f FakeReader) Read(p []byte) (int, error)","Funname":"Read","Returntype":"(int, error)","Args":"p []byte"},{"Uniquefunname":"func (f FakeWriter) Write(p []byte) (int, error)","Funname":"Write","Returntype":"(int, error)","Args":"p []byte"},{"Uniquefunname":"func (f FakeCloser) Close() error","Funname":"gbytes_test.FakeCloser.Close","Returntype":"error","Args":""},{"Uniquefunname":"func (f FakeReader) Read(p []byte) (int, error)","Funname":"gbytes_test.FakeReader.Read","Returntype":"(int, error)","Args":"p []byte"},{"Uniquefunname":"func (f FakeWriter) Write(p []byte) (int, error)","Funname":"gbytes_test.FakeWriter.Write","Returntype":"(int, error)","Args":"p []byte"}],"Records":[{"Name":"struct:gbytes_test.FakeCloser","Fields":["gbytes_test.FakeCloser.duration time.Duration","gbytes_test.FakeCloser.err error"]},{"Name":"struct:gbytes_test.FakeReader","Fields":["gbytes_test.FakeReader.duration time.Duration","gbytes_test.FakeReader.err error"]},{"Name":"struct:gbytes_test.FakeWriter","Fields":["gbytes_test.FakeWriter.duration time.Duration","gbytes_test.FakeWriter.err error"]},{"Name":"var:gbytes_test","Fields":["gbytes_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/gbytes/say_matcher.go","Functions":[{"Uniquefunname":"func (m *sayMatcher) FailureMessage(actual interface","Funname":"FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (m *sayMatcher) Match(actual interface","Funname":"Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (m *sayMatcher) MatchMayChangeInTheFuture(actual interface","Funname":"MatchMayChangeInTheFuture","Returntype":"bool","Args":"actual interface{}"},{"Uniquefunname":"func (m *sayMatcher) NegatedFailureMessage(actual interface","Funname":"NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func Say(expected string, args ...interface","Funname":"Say","Returntype":"*sayMatcher","Args":"expected string, args ...interface{}"},{"Uniquefunname":"func (m *sayMatcher) buffer(actual interface","Funname":"buffer","Returntype":"(*Buffer, bool)","Args":"actual interface{}"},{"Uniquefunname":"func Say(expected string, args ...interface","Funname":"gbytes.Say","Returntype":"*sayMatcher","Args":"expected string, args ...interface{}"},{"Uniquefunname":"func (m *sayMatcher) FailureMessage(actual interface","Funname":"gbytes.sayMatcher.FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (m *sayMatcher) Match(actual interface","Funname":"gbytes.sayMatcher.Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (m *sayMatcher) MatchMayChangeInTheFuture(actual interface","Funname":"gbytes.sayMatcher.MatchMayChangeInTheFuture","Returntype":"bool","Args":"actual interface{}"},{"Uniquefunname":"func (m *sayMatcher) NegatedFailureMessage(actual interface","Funname":"gbytes.sayMatcher.NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (m *sayMatcher) buffer(actual interface","Funname":"gbytes.sayMatcher.buffer","Returntype":"(*Buffer, bool)","Args":"actual interface{}"}],"Records":[{"Name":"interface","Fields":["gbytes.BufferProvider"]},{"Name":"struct:gbytes.sayMatcher","Fields":["gbytes.sayMatcher.re *regexp.Regexp","gbytes.sayMatcher.receivedSayings []byte"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/gbytes/say_matcher_test.go","Functions":[{"Uniquefunname":"func (s *speaker) Buffer() *Buffer","Funname":"Buffer","Returntype":"*Buffer","Args":""},{"Uniquefunname":"func (s *speaker) Buffer() *Buffer","Funname":"gbytes_test.speaker.Buffer","Returntype":"*Buffer","Args":""}],"Records":[{"Name":"var:gbytes_test","Fields":["gbytes_test._"]},{"Name":"struct:gbytes_test.speaker","Fields":["gbytes_test.speaker.buffer *Buffer"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/gexec/build.go","Functions":[{"Uniquefunname":"func Build(packagePath string, args ...string) (compiledPath string, err error)","Funname":"Build","Returntype":"(compiledPath string, err error)","Args":"packagePath string, args ...string"},{"Uniquefunname":"func BuildIn(gopath string, packagePath string, args ...string)(compiledPath string, err error)","Funname":"BuildIn","Returntype":"(compiledPath string, err error)","Args":"gopath string, packagePath string, args ...string"},{"Uniquefunname":"func BuildWithEnvironment(packagePath string, env []string, args ...string)(compiledPath string, err error)","Funname":"BuildWithEnvironment","Returntype":"(compiledPath string, err error)","Args":"packagePath string, env []string, args ...string"},{"Uniquefunname":"func CleanupBuildArtifacts()","Funname":"CleanupBuildArtifacts","Returntype":"","Args":""},{"Uniquefunname":"func doBuild(gopath, packagePath string, env []string, args ...string)(compiledPath string, err error)","Funname":"doBuild","Returntype":"(compiledPath string, err error)","Args":"gopath, packagePath string, env []string, args ...string"},{"Uniquefunname":"func Build(packagePath string, args ...string) (compiledPath string, err error)","Funname":"gexec.Build","Returntype":"(compiledPath string, err error)","Args":"packagePath string, args ...string"},{"Uniquefunname":"func gexec.BuildIn(gopath string, packagePath string, args ...string)(compiledPath string, err error)","Funname":"gexec.BuildIn","Returntype":"(compiledPath string, err error)","Args":"gopath string, packagePath string, args ...string"},{"Uniquefunname":"func gexec.BuildWithEnvironment(packagePath string, env []string, args ...string)(compiledPath string, err error)","Funname":"gexec.BuildWithEnvironment","Returntype":"(compiledPath string, err error)","Args":"packagePath string, env []string, args ...string"},{"Uniquefunname":"func CleanupBuildArtifacts()","Funname":"gexec.CleanupBuildArtifacts","Returntype":"","Args":""},{"Uniquefunname":"func gexec.doBuild(gopath, packagePath string, env []string, args ...string)(compiledPath string, err error)","Funname":"gexec.doBuild","Returntype":"(compiledPath string, err error)","Args":"gopath, packagePath string, env []string, args ...string"},{"Uniquefunname":"func replaceGoPath(environ []string, newGoPath string) []string","Funname":"gexec.replaceGoPath","Returntype":"[]string","Args":"environ []string, newGoPath string"},{"Uniquefunname":"func temporaryDirectory() (string, error)","Funname":"gexec.temporaryDirectory","Returntype":"(string, error)","Args":""},{"Uniquefunname":"func replaceGoPath(environ []string, newGoPath string) []string","Funname":"replaceGoPath","Returntype":"[]string","Args":"environ []string, newGoPath string"},{"Uniquefunname":"func temporaryDirectory() (string, error)","Funname":"temporaryDirectory","Returntype":"(string, error)","Args":""}],"Records":[{"Name":"var:gexec","Fields":["gexec.mu","gexec.tmpDir"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/gexec/build_test.go","Functions":[{"Uniquefunname":"func copyFile(source, directory, basename string)","Funname":"copyFile","Returntype":"","Args":"source, directory, basename string"},{"Uniquefunname":"func copyFile(source, directory, basename string)","Funname":"gexec_test.copyFile","Returntype":"","Args":"source, directory, basename string"}],"Records":[{"Name":"var:gexec_test","Fields":["gexec_test._","gexec_test._","gexec_test._","gexec_test.packagePath"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/gexec/exit_matcher.go","Functions":[{"Uniquefunname":"func Exit(optionalExitCode ...int) *exitMatcher","Funname":"Exit","Returntype":"*exitMatcher","Args":"optionalExitCode ...int"},{"Uniquefunname":"func (m *exitMatcher) FailureMessage(actual interface","Funname":"FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (m *exitMatcher) Match(actual interface","Funname":"Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (m *exitMatcher) MatchMayChangeInTheFuture(actual interface","Funname":"MatchMayChangeInTheFuture","Returntype":"bool","Args":"actual interface{}"},{"Uniquefunname":"func (m *exitMatcher) NegatedFailureMessage(actual interface","Funname":"NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func Exit(optionalExitCode ...int) *exitMatcher","Funname":"gexec.Exit","Returntype":"*exitMatcher","Args":"optionalExitCode ...int"},{"Uniquefunname":"func (m *exitMatcher) FailureMessage(actual interface","Funname":"gexec.exitMatcher.FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (m *exitMatcher) Match(actual interface","Funname":"gexec.exitMatcher.Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (m *exitMatcher) MatchMayChangeInTheFuture(actual interface","Funname":"gexec.exitMatcher.MatchMayChangeInTheFuture","Returntype":"bool","Args":"actual interface{}"},{"Uniquefunname":"func (m *exitMatcher) NegatedFailureMessage(actual interface","Funname":"gexec.exitMatcher.NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"}],"Records":[{"Name":"interface","Fields":["gexec.Exiter"]},{"Name":"struct:gexec.exitMatcher","Fields":["gexec.exitMatcher.actualExitCode int","gexec.exitMatcher.didExit bool","gexec.exitMatcher.exitCode int"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/gexec/exit_matcher_test.go","Functions":[{"Uniquefunname":"func (e NeverExits) ExitCode() int","Funname":"ExitCode","Returntype":"int","Args":""},{"Uniquefunname":"func (e NeverExits) ExitCode() int","Funname":"gexec_test.NeverExits.ExitCode","Returntype":"int","Args":""}],"Records":[{"Name":"var:gexec_test","Fields":["gexec_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/gexec/gexec_suite_test.go","Functions":[{"Uniquefunname":"func TestGexec(t *testing.T)","Funname":"TestGexec","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestGexec(t *testing.T)","Funname":"gexec_test.TestGexec","Returntype":"","Args":"t *testing.T"}],"Records":[{"Name":"var:gexec_test","Fields":["gexec_test.fireflyPath"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/gexec/prefixed_writer.go","Functions":[{"Uniquefunname":"func NewPrefixedWriter(prefix string, writer io.Writer) *PrefixedWriter","Funname":"NewPrefixedWriter","Returntype":"*PrefixedWriter","Args":"prefix string, writer io.Writer"},{"Uniquefunname":"func (w *PrefixedWriter) Write(b []byte) (int, error)","Funname":"Write","Returntype":"(int, error)","Args":"b []byte"},{"Uniquefunname":"func NewPrefixedWriter(prefix string, writer io.Writer) *PrefixedWriter","Funname":"gexec.NewPrefixedWriter","Returntype":"*PrefixedWriter","Args":"prefix string, writer io.Writer"},{"Uniquefunname":"func (w *PrefixedWriter) Write(b []byte) (int, error)","Funname":"gexec.PrefixedWriter.Write","Returntype":"(int, error)","Args":"b []byte"}],"Records":[{"Name":"struct:gexec.PrefixedWriter","Fields":["gexec.PrefixedWriter.atStartOfLine bool","gexec.PrefixedWriter.lock *sync.Mutex","gexec.PrefixedWriter.prefix []byte","gexec.PrefixedWriter.writer io.Writer"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/gexec/prefixed_writer_test.go","Functions":null,"Records":[{"Name":"var:gexec_test","Fields":["gexec_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/gexec/session.go","Functions":[{"Uniquefunname":"func (s *Session) Buffer() *gbytes.Buffer","Funname":"Buffer","Returntype":"*gbytes.Buffer","Args":""},{"Uniquefunname":"func (s *Session) ExitCode() int","Funname":"ExitCode","Returntype":"int","Args":""},{"Uniquefunname":"func (s *Session) Interrupt() *Session","Funname":"Interrupt","Returntype":"*Session","Args":""},{"Uniquefunname":"func Interrupt()","Funname":"Interrupt","Returntype":"","Args":""},{"Uniquefunname":"func (s *Session) Kill() *Session","Funname":"Kill","Returntype":"*Session","Args":""},{"Uniquefunname":"func Kill()","Funname":"Kill","Returntype":"","Args":""},{"Uniquefunname":"func KillAndWait(timeout ...interface","Funname":"KillAndWait","Returntype":"","Args":"timeout ...interface{}"},{"Uniquefunname":"func (s *Session) Signal(signal os.Signal) *Session","Funname":"Signal","Returntype":"*Session","Args":"signal os.Signal"},{"Uniquefunname":"func Signal(signal os.Signal)","Funname":"Signal","Returntype":"","Args":"signal os.Signal"},{"Uniquefunname":"func Start(command *exec.Cmd, outWriter io.Writer, errWriter io.Writer) (*Session, error)","Funname":"Start","Returntype":"(*Session, error)","Args":"command *exec.Cmd, outWriter io.Writer, errWriter io.Writer"},{"Uniquefunname":"func (s *Session) Terminate() *Session","Funname":"Terminate","Returntype":"*Session","Args":""},{"Uniquefunname":"func Terminate()","Funname":"Terminate","Returntype":"","Args":""},{"Uniquefunname":"func TerminateAndWait(timeout ...interface","Funname":"TerminateAndWait","Returntype":"","Args":"timeout ...interface{}"},{"Uniquefunname":"func (s *Session) Wait(timeout ...interface","Funname":"Wait","Returntype":"*Session","Args":"timeout ...interface{}"},{"Uniquefunname":"func Interrupt()","Funname":"gexec.Interrupt","Returntype":"","Args":""},{"Uniquefunname":"func Kill()","Funname":"gexec.Kill","Returntype":"","Args":""},{"Uniquefunname":"func KillAndWait(timeout ...interface","Funname":"gexec.KillAndWait","Returntype":"","Args":"timeout ...interface{}"},{"Uniquefunname":"func (s *Session) Buffer() *gbytes.Buffer","Funname":"gexec.Session.Buffer","Returntype":"*gbytes.Buffer","Args":""},{"Uniquefunname":"func (s *Session) ExitCode() int","Funname":"gexec.Session.ExitCode","Returntype":"int","Args":""},{"Uniquefunname":"func (s *Session) Interrupt() *Session","Funname":"gexec.Session.Interrupt","Returntype":"*Session","Args":""},{"Uniquefunname":"func (s *Session) Kill() *Session","Funname":"gexec.Session.Kill","Returntype":"*Session","Args":""},{"Uniquefunname":"func (s *Session) Signal(signal os.Signal) *Session","Funname":"gexec.Session.Signal","Returntype":"*Session","Args":"signal os.Signal"},{"Uniquefunname":"func (s *Session) Terminate() *Session","Funname":"gexec.Session.Terminate","Returntype":"*Session","Args":""},{"Uniquefunname":"func (s *Session) Wait(timeout ...interface","Funname":"gexec.Session.Wait","Returntype":"*Session","Args":"timeout ...interface{}"},{"Uniquefunname":"func (s *Session) monitorForExit(exited chan\u003c- struct","Funname":"gexec.Session.monitorForExit","Returntype":"","Args":"exited chan\u003c- struct{}"},{"Uniquefunname":"func (s *Session) processIsAlive() bool","Funname":"gexec.Session.processIsAlive","Returntype":"bool","Args":""},{"Uniquefunname":"func Signal(signal os.Signal)","Funname":"gexec.Signal","Returntype":"","Args":"signal os.Signal"},{"Uniquefunname":"func Start(command *exec.Cmd, outWriter io.Writer, errWriter io.Writer) (*Session, error)","Funname":"gexec.Start","Returntype":"(*Session, error)","Args":"command *exec.Cmd, outWriter io.Writer, errWriter io.Writer"},{"Uniquefunname":"func Terminate()","Funname":"gexec.Terminate","Returntype":"","Args":""},{"Uniquefunname":"func TerminateAndWait(timeout ...interface","Funname":"gexec.TerminateAndWait","Returntype":"","Args":"timeout ...interface{}"},{"Uniquefunname":"func (s *Session) monitorForExit(exited chan\u003c- struct","Funname":"monitorForExit","Returntype":"","Args":"exited chan\u003c- struct{}"},{"Uniquefunname":"func (s *Session) processIsAlive() bool","Funname":"processIsAlive","Returntype":"bool","Args":""}],"Records":[{"Name":"const:gexec","Fields":["gexec.INVALID_EXIT_CODE"]},{"Name":"struct:gexec.Session","Fields":["gexec.Session.Command *exec.Cmd","gexec.Session.Err *gbytes.Buffer","gexec.Session.Exited \u003c-chan struct{}","gexec.Session.Out *gbytes.Buffer","gexec.Session.exitCode int","gexec.Session.lock *sync.Mutex"]},{"Name":"var:gexec","Fields":["gexec.trackedSessions","gexec.trackedSessionsMutex"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/gexec/session_test.go","Functions":null,"Records":[{"Name":"var:gexec_test","Fields":["gexec_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/gexec/_fixture/firefly/main.go","Functions":[{"Uniquefunname":"func main()","Funname":"main","Returntype":"","Args":""},{"Uniquefunname":"func main()","Funname":"main.main","Returntype":"","Args":""}],"Records":[{"Name":"var:main","Fields":["main.errQuote","main.outQuote","main.randomQuotes"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/ghttp/handlers.go","Functions":[{"Uniquefunname":"func CombineHandlers(handlers ...http.HandlerFunc) http.HandlerFunc","Funname":"CombineHandlers","Returntype":"http.HandlerFunc","Args":"handlers ...http.HandlerFunc"},{"Uniquefunname":"func RespondWith(statusCode int, body interface{}, optionalHeader ...http.Header)http.HandlerFunc","Funname":"RespondWith","Returntype":"http.HandlerFunc","Args":"statusCode int, body interface{}, optionalHeader ...http.Header"},{"Uniquefunname":"func RespondWithJSONEncoded(statusCode int, object interface{}, optionalHeader ...http.Header)http.HandlerFunc","Funname":"RespondWithJSONEncoded","Returntype":"http.HandlerFunc","Args":"statusCode int, object interface{}, optionalHeader ...http.Header"},{"Uniquefunname":"func RespondWithJSONEncodedPtr(statusCode *int, object interface{}, optionalHeader ...http.Header)http.HandlerFunc","Funname":"RespondWithJSONEncodedPtr","Returntype":"http.HandlerFunc","Args":"statusCode *int, object interface{}, optionalHeader ...http.Header"},{"Uniquefunname":"func RespondWithProto(statusCode int, message proto.Message, optionalHeader ...http.Header)http.HandlerFunc","Funname":"RespondWithProto","Returntype":"http.HandlerFunc","Args":"statusCode int, message proto.Message, optionalHeader ...http.Header"},{"Uniquefunname":"func RespondWithPtr(statusCode *int, body interface{}, optionalHeader ...http.Header)http.HandlerFunc","Funname":"RespondWithPtr","Returntype":"http.HandlerFunc","Args":"statusCode *int, body interface{}, optionalHeader ...http.Header"},{"Uniquefunname":"func VerifyBasicAuth(username string, password string) http.HandlerFunc","Funname":"VerifyBasicAuth","Returntype":"http.HandlerFunc","Args":"username string, password string"},{"Uniquefunname":"func VerifyBody(expectedBody []byte) http.HandlerFunc","Funname":"VerifyBody","Returntype":"http.HandlerFunc","Args":"expectedBody []byte"},{"Uniquefunname":"func VerifyContentType(contentType string) http.HandlerFunc","Funname":"VerifyContentType","Returntype":"http.HandlerFunc","Args":"contentType string"},{"Uniquefunname":"func VerifyForm(values url.Values) http.HandlerFunc","Funname":"VerifyForm","Returntype":"http.HandlerFunc","Args":"values url.Values"},{"Uniquefunname":"func VerifyFormKV(key string, values ...string) http.HandlerFunc","Funname":"VerifyFormKV","Returntype":"http.HandlerFunc","Args":"key string, values ...string"},{"Uniquefunname":"func VerifyHeader(header http.Header) http.HandlerFunc","Funname":"VerifyHeader","Returntype":"http.HandlerFunc","Args":"header http.Header"},{"Uniquefunname":"func VerifyHeaderKV(key string, values ...string) http.HandlerFunc","Funname":"VerifyHeaderKV","Returntype":"http.HandlerFunc","Args":"key string, values ...string"},{"Uniquefunname":"func VerifyJSON(expectedJSON string) http.HandlerFunc","Funname":"VerifyJSON","Returntype":"http.HandlerFunc","Args":"expectedJSON string"},{"Uniquefunname":"func VerifyJSONRepresenting(object interface","Funname":"VerifyJSONRepresenting","Returntype":"http.HandlerFunc","Args":"object interface{}"},{"Uniquefunname":"func VerifyMimeType(mimeType string) http.HandlerFunc","Funname":"VerifyMimeType","Returntype":"http.HandlerFunc","Args":"mimeType string"},{"Uniquefunname":"func VerifyProtoRepresenting(expected proto.Message) http.HandlerFunc","Funname":"VerifyProtoRepresenting","Returntype":"http.HandlerFunc","Args":"expected proto.Message"},{"Uniquefunname":"func VerifyRequest(method string, path interface","Funname":"VerifyRequest","Returntype":"http.HandlerFunc","Args":"method string, path interface{}, rawQuery ...string"},{"Uniquefunname":"func copyHeader(src http.Header, dst http.Header)","Funname":"copyHeader","Returntype":"","Args":"src http.Header, dst http.Header"},{"Uniquefunname":"func CombineHandlers(handlers ...http.HandlerFunc) http.HandlerFunc","Funname":"ghttp.CombineHandlers","Returntype":"http.HandlerFunc","Args":"handlers ...http.HandlerFunc"},{"Uniquefunname":"func ghttp.RespondWith(statusCode int, body interface{}, optionalHeader ...http.Header)http.HandlerFunc","Funname":"ghttp.RespondWith","Returntype":"http.HandlerFunc","Args":"statusCode int, body interface{}, optionalHeader ...http.Header"},{"Uniquefunname":"func ghttp.RespondWithJSONEncoded(statusCode int, object interface{}, optionalHeader ...http.Header)http.HandlerFunc","Funname":"ghttp.RespondWithJSONEncoded","Returntype":"http.HandlerFunc","Args":"statusCode int, object interface{}, optionalHeader ...http.Header"},{"Uniquefunname":"func ghttp.RespondWithJSONEncodedPtr(statusCode *int, object interface{}, optionalHeader ...http.Header)http.HandlerFunc","Funname":"ghttp.RespondWithJSONEncodedPtr","Returntype":"http.HandlerFunc","Args":"statusCode *int, object interface{}, optionalHeader ...http.Header"},{"Uniquefunname":"func ghttp.RespondWithProto(statusCode int, message proto.Message, optionalHeader ...http.Header)http.HandlerFunc","Funname":"ghttp.RespondWithProto","Returntype":"http.HandlerFunc","Args":"statusCode int, message proto.Message, optionalHeader ...http.Header"},{"Uniquefunname":"func ghttp.RespondWithPtr(statusCode *int, body interface{}, optionalHeader ...http.Header)http.HandlerFunc","Funname":"ghttp.RespondWithPtr","Returntype":"http.HandlerFunc","Args":"statusCode *int, body interface{}, optionalHeader ...http.Header"},{"Uniquefunname":"func VerifyBasicAuth(username string, password string) http.HandlerFunc","Funname":"ghttp.VerifyBasicAuth","Returntype":"http.HandlerFunc","Args":"username string, password string"},{"Uniquefunname":"func VerifyBody(expectedBody []byte) http.HandlerFunc","Funname":"ghttp.VerifyBody","Returntype":"http.HandlerFunc","Args":"expectedBody []byte"},{"Uniquefunname":"func VerifyContentType(contentType string) http.HandlerFunc","Funname":"ghttp.VerifyContentType","Returntype":"http.HandlerFunc","Args":"contentType string"},{"Uniquefunname":"func VerifyForm(values url.Values) http.HandlerFunc","Funname":"ghttp.VerifyForm","Returntype":"http.HandlerFunc","Args":"values url.Values"},{"Uniquefunname":"func VerifyFormKV(key string, values ...string) http.HandlerFunc","Funname":"ghttp.VerifyFormKV","Returntype":"http.HandlerFunc","Args":"key string, values ...string"},{"Uniquefunname":"func VerifyHeader(header http.Header) http.HandlerFunc","Funname":"ghttp.VerifyHeader","Returntype":"http.HandlerFunc","Args":"header http.Header"},{"Uniquefunname":"func VerifyHeaderKV(key string, values ...string) http.HandlerFunc","Funname":"ghttp.VerifyHeaderKV","Returntype":"http.HandlerFunc","Args":"key string, values ...string"},{"Uniquefunname":"func VerifyJSON(expectedJSON string) http.HandlerFunc","Funname":"ghttp.VerifyJSON","Returntype":"http.HandlerFunc","Args":"expectedJSON string"},{"Uniquefunname":"func VerifyJSONRepresenting(object interface","Funname":"ghttp.VerifyJSONRepresenting","Returntype":"http.HandlerFunc","Args":"object interface{}"},{"Uniquefunname":"func VerifyMimeType(mimeType string) http.HandlerFunc","Funname":"ghttp.VerifyMimeType","Returntype":"http.HandlerFunc","Args":"mimeType string"},{"Uniquefunname":"func VerifyProtoRepresenting(expected proto.Message) http.HandlerFunc","Funname":"ghttp.VerifyProtoRepresenting","Returntype":"http.HandlerFunc","Args":"expected proto.Message"},{"Uniquefunname":"func VerifyRequest(method string, path interface","Funname":"ghttp.VerifyRequest","Returntype":"http.HandlerFunc","Args":"method string, path interface{}, rawQuery ...string"},{"Uniquefunname":"func copyHeader(src http.Header, dst http.Header)","Funname":"ghttp.copyHeader","Returntype":"","Args":"src http.Header, dst http.Header"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/gomega/ghttp/test_server.go","Functions":[{"Uniquefunname":"func (s *Server) Addr() string","Funname":"Addr","Returntype":"string","Args":""},{"Uniquefunname":"func (s *Server) AppendHandlers(handlers ...http.HandlerFunc)","Funname":"AppendHandlers","Returntype":"","Args":"handlers ...http.HandlerFunc"},{"Uniquefunname":"func (s *Server) Close()","Funname":"Close","Returntype":"","Args":""},{"Uniquefunname":"func (s *Server) CloseClientConnections()","Funname":"CloseClientConnections","Returntype":"","Args":""},{"Uniquefunname":"func (s *Server) GetAllowUnhandledRequests() bool","Funname":"GetAllowUnhandledRequests","Returntype":"bool","Args":""},{"Uniquefunname":"func (s *Server) GetHandler(index int) http.HandlerFunc","Funname":"GetHandler","Returntype":"http.HandlerFunc","Args":"index int"},{"Uniquefunname":"func (s *Server) GetUnhandledRequestStatusCode() int","Funname":"GetUnhandledRequestStatusCode","Returntype":"int","Args":""},{"Uniquefunname":"func NewServer() *Server","Funname":"NewServer","Returntype":"*Server","Args":""},{"Uniquefunname":"func NewTLSServer() *Server","Funname":"NewTLSServer","Returntype":"*Server","Args":""},{"Uniquefunname":"func NewUnstartedServer() *Server","Funname":"NewUnstartedServer","Returntype":"*Server","Args":""},{"Uniquefunname":"func (s *Server) ReceivedRequests() []*http.Request","Funname":"ReceivedRequests","Returntype":"[]*http.Request","Args":""},{"Uniquefunname":"func (s *Server) Reset()","Funname":"Reset","Returntype":"","Args":""},{"Uniquefunname":"func (s *Server) RouteToHandler(method string, path interface","Funname":"RouteToHandler","Returntype":"","Args":"method string, path interface{}, handler http.HandlerFunc"},{"Uniquefunname":"func (s *Server) ServeHTTP(w http.ResponseWriter, req *http.Request)","Funname":"ServeHTTP","Returntype":"","Args":"w http.ResponseWriter, req *http.Request"},{"Uniquefunname":"func (s *Server) SetAllowUnhandledRequests(allowUnhandledRequests bool)","Funname":"SetAllowUnhandledRequests","Returntype":"","Args":"allowUnhandledRequests bool"},{"Uniquefunname":"func (s *Server) SetHandler(index int, handler http.HandlerFunc)","Funname":"SetHandler","Returntype":"","Args":"index int, handler http.HandlerFunc"},{"Uniquefunname":"func (s *Server) SetUnhandledRequestStatusCode(statusCode int)","Funname":"SetUnhandledRequestStatusCode","Returntype":"","Args":"statusCode int"},{"Uniquefunname":"func (s *Server) Start()","Funname":"Start","Returntype":"","Args":""},{"Uniquefunname":"func (s *Server) URL() string","Funname":"URL","Returntype":"string","Args":""},{"Uniquefunname":"func (s *Server) WrapHandler(index int, handler http.HandlerFunc)","Funname":"WrapHandler","Returntype":"","Args":"index int, handler http.HandlerFunc"},{"Uniquefunname":"func NewServer() *Server","Funname":"ghttp.NewServer","Returntype":"*Server","Args":""},{"Uniquefunname":"func NewTLSServer() *Server","Funname":"ghttp.NewTLSServer","Returntype":"*Server","Args":""},{"Uniquefunname":"func NewUnstartedServer() *Server","Funname":"ghttp.NewUnstartedServer","Returntype":"*Server","Args":""},{"Uniquefunname":"func (s *Server) Addr() string","Funname":"ghttp.Server.Addr","Returntype":"string","Args":""},{"Uniquefunname":"func (s *Server) AppendHandlers(handlers ...http.HandlerFunc)","Funname":"ghttp.Server.AppendHandlers","Returntype":"","Args":"handlers ...http.HandlerFunc"},{"Uniquefunname":"func (s *Server) Close()","Funname":"ghttp.Server.Close","Returntype":"","Args":""},{"Uniquefunname":"func (s *Server) CloseClientConnections()","Funname":"ghttp.Server.CloseClientConnections","Returntype":"","Args":""},{"Uniquefunname":"func (s *Server) GetAllowUnhandledRequests() bool","Funname":"ghttp.Server.GetAllowUnhandledRequests","Returntype":"bool","Args":""},{"Uniquefunname":"func (s *Server) GetHandler(index int) http.HandlerFunc","Funname":"ghttp.Server.GetHandler","Returntype":"http.HandlerFunc","Args":"index int"},{"Uniquefunname":"func (s *Server) GetUnhandledRequestStatusCode() int","Funname":"ghttp.Server.GetUnhandledRequestStatusCode","Returntype":"int","Args":""},{"Uniquefunname":"func (s *Server) ReceivedRequests() []*http.Request","Funname":"ghttp.Server.ReceivedRequests","Returntype":"[]*http.Request","Args":""},{"Uniquefunname":"func (s *Server) Reset()","Funname":"ghttp.Server.Reset","Returntype":"","Args":""},{"Uniquefunname":"func (s *Server) RouteToHandler(method string, path interface","Funname":"ghttp.Server.RouteToHandler","Returntype":"","Args":"method string, path interface{}, handler http.HandlerFunc"},{"Uniquefunname":"func (s *Server) ServeHTTP(w http.ResponseWriter, req *http.Request)","Funname":"ghttp.Server.ServeHTTP","Returntype":"","Args":"w http.ResponseWriter, req *http.Request"},{"Uniquefunname":"func (s *Server) SetAllowUnhandledRequests(allowUnhandledRequests bool)","Funname":"ghttp.Server.SetAllowUnhandledRequests","Returntype":"","Args":"allowUnhandledRequests bool"},{"Uniquefunname":"func (s *Server) SetHandler(index int, handler http.HandlerFunc)","Funname":"ghttp.Server.SetHandler","Returntype":"","Args":"index int, handler http.HandlerFunc"},{"Uniquefunname":"func (s *Server) SetUnhandledRequestStatusCode(statusCode int)","Funname":"ghttp.Server.SetUnhandledRequestStatusCode","Returntype":"","Args":"statusCode int"},{"Uniquefunname":"func (s *Server) Start()","Funname":"ghttp.Server.Start","Returntype":"","Args":""},{"Uniquefunname":"func (s *Server) URL() string","Funname":"ghttp.Server.URL","Returntype":"string","Args":""},{"Uniquefunname":"func (s *Server) WrapHandler(index int, handler http.HandlerFunc)","Funname":"ghttp.Server.WrapHandler","Returntype":"","Args":"index int, handler http.HandlerFunc"},{"Uniquefunname":"func (s *Server) handlerForRoute(method string, path string) (http.HandlerFunc, bool)","Funname":"ghttp.Server.handlerForRoute","Returntype":"(http.HandlerFunc, bool)","Args":"method string, path string"},{"Uniquefunname":"func new() *Server","Funname":"ghttp.new","Returntype":"*Server","Args":""},{"Uniquefunname":"func (s *Server) handlerForRoute(method string, path string) (http.HandlerFunc, bool)","Funname":"handlerForRoute","Returntype":"(http.HandlerFunc, bool)","Args":"method string, path string"},{"Uniquefunname":"func new() *Server","Funname":"new","Returntype":"*Server","Args":""}],"Records":[{"Name":"struct:ghttp.Server","Fields":["ghttp.Server.AllowUnhandledRequests bool","ghttp.Server.HTTPTestServer *httptest.Server","ghttp.Server.UnhandledRequestStatusCode int","ghttp.Server.Writer io.Writer","ghttp.Server.calls int","ghttp.Server.receivedRequests []*http.Request","ghttp.Server.requestHandlers []http.HandlerFunc","ghttp.Server.routedHandlers []routedHandler","ghttp.Server.rwMutex *sync.RWMutex"]},{"Name":"struct:ghttp.routedHandler","Fields":["ghttp.routedHandler.handler http.HandlerFunc","ghttp.routedHandler.method string","ghttp.routedHandler.path string","ghttp.routedHandler.pathRegexp *regexp.Regexp"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/ghttp/test_server_suite_test.go","Functions":[{"Uniquefunname":"func TestGHTTP(t *testing.T)","Funname":"TestGHTTP","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestGHTTP(t *testing.T)","Funname":"ghttp_test.TestGHTTP","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/gomega/ghttp/test_server_test.go","Functions":null,"Records":[{"Name":"var:ghttp_test","Fields":["ghttp_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/ghttp/protobuf/simple_message.pb.go","Functions":[{"Uniquefunname":"func (m *SimpleMessage) GetDescription() string","Funname":"GetDescription","Returntype":"string","Args":""},{"Uniquefunname":"func (m *SimpleMessage) GetId() int32","Funname":"GetId","Returntype":"int32","Args":""},{"Uniquefunname":"func (m *SimpleMessage) GetMetadata() string","Funname":"GetMetadata","Returntype":"string","Args":""},{"Uniquefunname":"func ProtoMessage()","Funname":"ProtoMessage","Returntype":"","Args":""},{"Uniquefunname":"func Reset()","Funname":"Reset","Returntype":"","Args":""},{"Uniquefunname":"func String()string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func (m *SimpleMessage) GetDescription() string","Funname":"protobuf.SimpleMessage.GetDescription","Returntype":"string","Args":""},{"Uniquefunname":"func (m *SimpleMessage) GetId() int32","Funname":"protobuf.SimpleMessage.GetId","Returntype":"int32","Args":""},{"Uniquefunname":"func (m *SimpleMessage) GetMetadata() string","Funname":"protobuf.SimpleMessage.GetMetadata","Returntype":"string","Args":""},{"Uniquefunname":"func protobuf.SimpleMessage.ProtoMessage()","Funname":"protobuf.SimpleMessage.ProtoMessage","Returntype":"","Args":""},{"Uniquefunname":"func protobuf.SimpleMessage.Reset()","Funname":"protobuf.SimpleMessage.Reset","Returntype":"","Args":""},{"Uniquefunname":"func protobuf.SimpleMessage.String()string","Funname":"protobuf.SimpleMessage.String","Returntype":"string","Args":""}],"Records":[{"Name":"struct:protobuf.SimpleMessage","Fields":["protobuf.SimpleMessage.Description *string","protobuf.SimpleMessage.Id *int32","protobuf.SimpleMessage.Metadata *string","protobuf.SimpleMessage.XXX_unrecognized []byte"]},{"Name":"var:protobuf","Fields":["protobuf._","protobuf._","protobuf._"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/gstruct/elements.go","Functions":[{"Uniquefunname":"func (m *ElementsMatcher) FailureMessage(actual interface","Funname":"FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (m *ElementsMatcher) Failures() []error","Funname":"Failures","Returntype":"[]error","Args":""},{"Uniquefunname":"func (m *ElementsMatcher) Match(actual interface","Funname":"Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func MatchAllElements(identifier Identifier, elements Elements) types.GomegaMatcher","Funname":"MatchAllElements","Returntype":"types.GomegaMatcher","Args":"identifier Identifier, elements Elements"},{"Uniquefunname":"func MatchElements(identifier Identifier, options Options, elements Elements)types.GomegaMatcher","Funname":"MatchElements","Returntype":"types.GomegaMatcher","Args":"identifier Identifier, options Options, elements Elements"},{"Uniquefunname":"func (m *ElementsMatcher) NegatedFailureMessage(actual interface","Funname":"NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (m *ElementsMatcher) FailureMessage(actual interface","Funname":"gstruct.ElementsMatcher.FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (m *ElementsMatcher) Failures() []error","Funname":"gstruct.ElementsMatcher.Failures","Returntype":"[]error","Args":""},{"Uniquefunname":"func (m *ElementsMatcher) Match(actual interface","Funname":"gstruct.ElementsMatcher.Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (m *ElementsMatcher) NegatedFailureMessage(actual interface","Funname":"gstruct.ElementsMatcher.NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (m *ElementsMatcher) matchElements(actual interface","Funname":"gstruct.ElementsMatcher.matchElements","Returntype":"(errs []error)","Args":"actual interface{}"},{"Uniquefunname":"func MatchAllElements(identifier Identifier, elements Elements) types.GomegaMatcher","Funname":"gstruct.MatchAllElements","Returntype":"types.GomegaMatcher","Args":"identifier Identifier, elements Elements"},{"Uniquefunname":"func gstruct.MatchElements(identifier Identifier, options Options, elements Elements)types.GomegaMatcher","Funname":"gstruct.MatchElements","Returntype":"types.GomegaMatcher","Args":"identifier Identifier, options Options, elements Elements"},{"Uniquefunname":"func (m *ElementsMatcher) matchElements(actual interface","Funname":"matchElements","Returntype":"(errs []error)","Args":"actual interface{}"}],"Records":[{"Name":"struct:gstruct.ElementsMatcher","Fields":["gstruct.ElementsMatcher.AllowDuplicates bool","gstruct.ElementsMatcher.Elements Elements","gstruct.ElementsMatcher.Identifier Identifier","gstruct.ElementsMatcher.IgnoreExtras bool","gstruct.ElementsMatcher.IgnoreMissing bool","gstruct.ElementsMatcher.failures []error"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/gstruct/elements_test.go","Functions":[{"Uniquefunname":"func id(element interface","Funname":"gstruct_test.id","Returntype":"string","Args":"element interface{}"},{"Uniquefunname":"func id(element interface","Funname":"id","Returntype":"string","Args":"element interface{}"}],"Records":[{"Name":"var:gstruct_test","Fields":["gstruct_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/gstruct/fields.go","Functions":[{"Uniquefunname":"func (m *FieldsMatcher) FailureMessage(actual interface","Funname":"FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (m *FieldsMatcher) Failures() []error","Funname":"Failures","Returntype":"[]error","Args":""},{"Uniquefunname":"func (m *FieldsMatcher) Match(actual interface","Funname":"Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func MatchAllFields(fields Fields) types.GomegaMatcher","Funname":"MatchAllFields","Returntype":"types.GomegaMatcher","Args":"fields Fields"},{"Uniquefunname":"func MatchFields(options Options, fields Fields) types.GomegaMatcher","Funname":"MatchFields","Returntype":"types.GomegaMatcher","Args":"options Options, fields Fields"},{"Uniquefunname":"func (m *FieldsMatcher) NegatedFailureMessage(actual interface","Funname":"NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (m *FieldsMatcher) FailureMessage(actual interface","Funname":"gstruct.FieldsMatcher.FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (m *FieldsMatcher) Failures() []error","Funname":"gstruct.FieldsMatcher.Failures","Returntype":"[]error","Args":""},{"Uniquefunname":"func (m *FieldsMatcher) Match(actual interface","Funname":"gstruct.FieldsMatcher.Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (m *FieldsMatcher) NegatedFailureMessage(actual interface","Funname":"gstruct.FieldsMatcher.NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (m *FieldsMatcher) matchFields(actual interface","Funname":"gstruct.FieldsMatcher.matchFields","Returntype":"(errs []error)","Args":"actual interface{}"},{"Uniquefunname":"func MatchAllFields(fields Fields) types.GomegaMatcher","Funname":"gstruct.MatchAllFields","Returntype":"types.GomegaMatcher","Args":"fields Fields"},{"Uniquefunname":"func MatchFields(options Options, fields Fields) types.GomegaMatcher","Funname":"gstruct.MatchFields","Returntype":"types.GomegaMatcher","Args":"options Options, fields Fields"},{"Uniquefunname":"func (m *FieldsMatcher) matchFields(actual interface","Funname":"matchFields","Returntype":"(errs []error)","Args":"actual interface{}"}],"Records":[{"Name":"struct:gstruct.FieldsMatcher","Fields":["gstruct.FieldsMatcher.Fields Fields","gstruct.FieldsMatcher.IgnoreExtras bool","gstruct.FieldsMatcher.IgnoreMissing bool","gstruct.FieldsMatcher.failures []error"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/gstruct/fields_test.go","Functions":null,"Records":[{"Name":"var:gstruct_test","Fields":["gstruct_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/gstruct/gstruct_tests_suite_test.go","Functions":[{"Uniquefunname":"func Test(t *testing.T)","Funname":"Test","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func Test(t *testing.T)","Funname":"gstruct_test.Test","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/gomega/gstruct/ignore.go","Functions":[{"Uniquefunname":"func (m *IgnoreMatcher) FailureMessage(_ interface","Funname":"FailureMessage","Returntype":"(message string)","Args":"_ interface{}"},{"Uniquefunname":"func Ignore() types.GomegaMatcher","Funname":"Ignore","Returntype":"types.GomegaMatcher","Args":""},{"Uniquefunname":"func (m *IgnoreMatcher) Match(actual interface","Funname":"Match","Returntype":"(bool, error)","Args":"actual interface{}"},{"Uniquefunname":"func (m *IgnoreMatcher) NegatedFailureMessage(_ interface","Funname":"NegatedFailureMessage","Returntype":"(message string)","Args":"_ interface{}"},{"Uniquefunname":"func Reject() types.GomegaMatcher","Funname":"Reject","Returntype":"types.GomegaMatcher","Args":""},{"Uniquefunname":"func Ignore() types.GomegaMatcher","Funname":"gstruct.Ignore","Returntype":"types.GomegaMatcher","Args":""},{"Uniquefunname":"func (m *IgnoreMatcher) FailureMessage(_ interface","Funname":"gstruct.IgnoreMatcher.FailureMessage","Returntype":"(message string)","Args":"_ interface{}"},{"Uniquefunname":"func (m *IgnoreMatcher) Match(actual interface","Funname":"gstruct.IgnoreMatcher.Match","Returntype":"(bool, error)","Args":"actual interface{}"},{"Uniquefunname":"func (m *IgnoreMatcher) NegatedFailureMessage(_ interface","Funname":"gstruct.IgnoreMatcher.NegatedFailureMessage","Returntype":"(message string)","Args":"_ interface{}"},{"Uniquefunname":"func Reject() types.GomegaMatcher","Funname":"gstruct.Reject","Returntype":"types.GomegaMatcher","Args":""}],"Records":[{"Name":"struct:gstruct.IgnoreMatcher","Fields":["gstruct.IgnoreMatcher.Succeed bool"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/gstruct/ignore_test.go","Functions":null,"Records":[{"Name":"var:gstruct_test","Fields":["gstruct_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/gstruct/pointer.go","Functions":[{"Uniquefunname":"func (m *PointerMatcher) FailureMessage(_ interface","Funname":"FailureMessage","Returntype":"(message string)","Args":"_ interface{}"},{"Uniquefunname":"func (m *PointerMatcher) Match(actual interface","Funname":"Match","Returntype":"(bool, error)","Args":"actual interface{}"},{"Uniquefunname":"func (m *PointerMatcher) NegatedFailureMessage(actual interface","Funname":"NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func PointTo(matcher types.GomegaMatcher) types.GomegaMatcher","Funname":"PointTo","Returntype":"types.GomegaMatcher","Args":"matcher types.GomegaMatcher"},{"Uniquefunname":"func PointTo(matcher types.GomegaMatcher) types.GomegaMatcher","Funname":"gstruct.PointTo","Returntype":"types.GomegaMatcher","Args":"matcher types.GomegaMatcher"},{"Uniquefunname":"func (m *PointerMatcher) FailureMessage(_ interface","Funname":"gstruct.PointerMatcher.FailureMessage","Returntype":"(message string)","Args":"_ interface{}"},{"Uniquefunname":"func (m *PointerMatcher) Match(actual interface","Funname":"gstruct.PointerMatcher.Match","Returntype":"(bool, error)","Args":"actual interface{}"},{"Uniquefunname":"func (m *PointerMatcher) NegatedFailureMessage(actual interface","Funname":"gstruct.PointerMatcher.NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"}],"Records":[{"Name":"struct:gstruct.PointerMatcher","Fields":["gstruct.PointerMatcher.Matcher types.GomegaMatcher","gstruct.PointerMatcher.failure string"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/gstruct/pointer_test.go","Functions":null,"Records":[{"Name":"var:gstruct_test","Fields":["gstruct_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/gstruct/types.go","Functions":null,"Records":[{"Name":"const:gstruct","Fields":["gstruct.AllowDuplicates","gstruct.IgnoreExtras","gstruct.IgnoreMissing"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/gstruct/errors/nested_types.go","Functions":[{"Uniquefunname":"func (e *NestedError) Error() string","Funname":"Error","Returntype":"string","Args":""},{"Uniquefunname":"func (err AggregateError) Error() string","Funname":"Error","Returntype":"string","Args":""},{"Uniquefunname":"func Nest(path string, err error) error","Funname":"Nest","Returntype":"error","Args":"path string, err error"},{"Uniquefunname":"func (err AggregateError) Error() string","Funname":"errors.AggregateError.Error","Returntype":"string","Args":""},{"Uniquefunname":"func Nest(path string, err error) error","Funname":"errors.Nest","Returntype":"error","Args":"path string, err error"},{"Uniquefunname":"func (e *NestedError) Error() string","Funname":"errors.NestedError.Error","Returntype":"string","Args":""}],"Records":[{"Name":"struct:errors.NestedError","Fields":["errors.NestedError.Err error","errors.NestedError.Path string"]},{"Name":"interface","Fields":["errors.NestingMatcher"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/internal/assertion/assertion.go","Functions":[{"Uniquefunname":"func New(actualInput interface{}, failWrapper *types.GomegaFailWrapper, offset int, extra ...interface{})*Assertion","Funname":"New","Returntype":"*Assertion","Args":"actualInput interface{}, failWrapper *types.GomegaFailWrapper, offset int, extra ...interface{}"},{"Uniquefunname":"func NotTo(matcher types.GomegaMatcher, optionalDescription ...interface{})bool","Funname":"NotTo","Returntype":"bool","Args":"matcher types.GomegaMatcher, optionalDescription ...interface{}"},{"Uniquefunname":"func Should(matcher types.GomegaMatcher, optionalDescription ...interface{})bool","Funname":"Should","Returntype":"bool","Args":"matcher types.GomegaMatcher, optionalDescription ...interface{}"},{"Uniquefunname":"func ShouldNot(matcher types.GomegaMatcher, optionalDescription ...interface{})bool","Funname":"ShouldNot","Returntype":"bool","Args":"matcher types.GomegaMatcher, optionalDescription ...interface{}"},{"Uniquefunname":"func To(matcher types.GomegaMatcher, optionalDescription ...interface{})bool","Funname":"To","Returntype":"bool","Args":"matcher types.GomegaMatcher, optionalDescription ...interface{}"},{"Uniquefunname":"func ToNot(matcher types.GomegaMatcher, optionalDescription ...interface{})bool","Funname":"ToNot","Returntype":"bool","Args":"matcher types.GomegaMatcher, optionalDescription ...interface{}"},{"Uniquefunname":"func assertion.Assertion.NotTo(matcher types.GomegaMatcher, optionalDescription ...interface{})bool","Funname":"assertion.Assertion.NotTo","Returntype":"bool","Args":"matcher types.GomegaMatcher, optionalDescription ...interface{}"},{"Uniquefunname":"func assertion.Assertion.Should(matcher types.GomegaMatcher, optionalDescription ...interface{})bool","Funname":"assertion.Assertion.Should","Returntype":"bool","Args":"matcher types.GomegaMatcher, optionalDescription ...interface{}"},{"Uniquefunname":"func assertion.Assertion.ShouldNot(matcher types.GomegaMatcher, optionalDescription ...interface{})bool","Funname":"assertion.Assertion.ShouldNot","Returntype":"bool","Args":"matcher types.GomegaMatcher, optionalDescription ...interface{}"},{"Uniquefunname":"func assertion.Assertion.To(matcher types.GomegaMatcher, optionalDescription ...interface{})bool","Funname":"assertion.Assertion.To","Returntype":"bool","Args":"matcher types.GomegaMatcher, optionalDescription ...interface{}"},{"Uniquefunname":"func assertion.Assertion.ToNot(matcher types.GomegaMatcher, optionalDescription ...interface{})bool","Funname":"assertion.Assertion.ToNot","Returntype":"bool","Args":"matcher types.GomegaMatcher, optionalDescription ...interface{}"},{"Uniquefunname":"func (assertion *Assertion) buildDescription(optionalDescription ...interface","Funname":"assertion.Assertion.buildDescription","Returntype":"string","Args":"optionalDescription ...interface{}"},{"Uniquefunname":"func assertion.Assertion.match(matcher types.GomegaMatcher, desiredMatch bool, optionalDescription ...interface{})bool","Funname":"assertion.Assertion.match","Returntype":"bool","Args":"matcher types.GomegaMatcher, desiredMatch bool, optionalDescription ...interface{}"},{"Uniquefunname":"func (assertion *Assertion) vetExtras(optionalDescription ...interface","Funname":"assertion.Assertion.vetExtras","Returntype":"bool","Args":"optionalDescription ...interface{}"},{"Uniquefunname":"func assertion.New(actualInput interface{}, failWrapper *types.GomegaFailWrapper, offset int, extra ...interface{})*Assertion","Funname":"assertion.New","Returntype":"*Assertion","Args":"actualInput interface{}, failWrapper *types.GomegaFailWrapper, offset int, extra ...interface{}"},{"Uniquefunname":"func vetExtras(extras []interface","Funname":"assertion.vetExtras","Returntype":"(bool, string)","Args":"extras []interface{}"},{"Uniquefunname":"func (assertion *Assertion) buildDescription(optionalDescription ...interface","Funname":"buildDescription","Returntype":"string","Args":"optionalDescription ...interface{}"},{"Uniquefunname":"func match(matcher types.GomegaMatcher, desiredMatch bool, optionalDescription ...interface{})bool","Funname":"match","Returntype":"bool","Args":"matcher types.GomegaMatcher, desiredMatch bool, optionalDescription ...interface{}"},{"Uniquefunname":"func (assertion *Assertion) vetExtras(optionalDescription ...interface","Funname":"vetExtras","Returntype":"bool","Args":"optionalDescription ...interface{}"},{"Uniquefunname":"func vetExtras(extras []interface","Funname":"vetExtras","Returntype":"(bool, string)","Args":"extras []interface{}"}],"Records":[{"Name":"struct:assertion.Assertion","Fields":["assertion.Assertion.actualInput interface{}","assertion.Assertion.extra []interface{}","assertion.Assertion.failWrapper *types.GomegaFailWrapper","assertion.Assertion.offset int"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/internal/assertion/assertion_suite_test.go","Functions":[{"Uniquefunname":"func TestAssertion(t *testing.T)","Funname":"TestAssertion","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestAssertion(t *testing.T)","Funname":"assertion_test.TestAssertion","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/gomega/internal/assertion/assertion_test.go","Functions":null,"Records":[{"Name":"var:assertion_test","Fields":["assertion_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/internal/asyncassertion/async_assertion.go","Functions":[{"Uniquefunname":"func New(asyncType AsyncAssertionType, actualInput interface{}, failWrapper *types.GomegaFailWrapper, timeoutInterval time.Duration, pollingInterval time.Duration, offset int)*AsyncAssertion","Funname":"New","Returntype":"*AsyncAssertion","Args":"asyncType AsyncAssertionType, actualInput interface{}, failWrapper *types.GomegaFailWrapper, timeoutInterval time.Duration, pollingInterval time.Duration, offset int"},{"Uniquefunname":"func Should(matcher types.GomegaMatcher, optionalDescription ...interface{})bool","Funname":"Should","Returntype":"bool","Args":"matcher types.GomegaMatcher, optionalDescription ...interface{}"},{"Uniquefunname":"func ShouldNot(matcher types.GomegaMatcher, optionalDescription ...interface{})bool","Funname":"ShouldNot","Returntype":"bool","Args":"matcher types.GomegaMatcher, optionalDescription ...interface{}"},{"Uniquefunname":"func (assertion *AsyncAssertion) actualInputIsAFunction() bool","Funname":"actualInputIsAFunction","Returntype":"bool","Args":""},{"Uniquefunname":"func asyncassertion.AsyncAssertion.Should(matcher types.GomegaMatcher, optionalDescription ...interface{})bool","Funname":"asyncassertion.AsyncAssertion.Should","Returntype":"bool","Args":"matcher types.GomegaMatcher, optionalDescription ...interface{}"},{"Uniquefunname":"func asyncassertion.AsyncAssertion.ShouldNot(matcher types.GomegaMatcher, optionalDescription ...interface{})bool","Funname":"asyncassertion.AsyncAssertion.ShouldNot","Returntype":"bool","Args":"matcher types.GomegaMatcher, optionalDescription ...interface{}"},{"Uniquefunname":"func (assertion *AsyncAssertion) actualInputIsAFunction() bool","Funname":"asyncassertion.AsyncAssertion.actualInputIsAFunction","Returntype":"bool","Args":""},{"Uniquefunname":"func (assertion *AsyncAssertion) buildDescription(optionalDescription ...interface","Funname":"asyncassertion.AsyncAssertion.buildDescription","Returntype":"string","Args":"optionalDescription ...interface{}"},{"Uniquefunname":"func asyncassertion.AsyncAssertion.match(matcher types.GomegaMatcher, desiredMatch bool, optionalDescription ...interface{})bool","Funname":"asyncassertion.AsyncAssertion.match","Returntype":"bool","Args":"matcher types.GomegaMatcher, desiredMatch bool, optionalDescription ...interface{}"},{"Uniquefunname":"func asyncassertion.AsyncAssertion.matcherMayChange(matcher types.GomegaMatcher, value interface{})bool","Funname":"asyncassertion.AsyncAssertion.matcherMayChange","Returntype":"bool","Args":"matcher types.GomegaMatcher, value interface{}"},{"Uniquefunname":"func (assertion *AsyncAssertion) pollActual() (interface","Funname":"asyncassertion.AsyncAssertion.pollActual","Returntype":"(interface{}, error)","Args":""},{"Uniquefunname":"func asyncassertion.New(asyncType AsyncAssertionType, actualInput interface{}, failWrapper *types.GomegaFailWrapper, timeoutInterval time.Duration, pollingInterval time.Duration, offset int)*AsyncAssertion","Funname":"asyncassertion.New","Returntype":"*AsyncAssertion","Args":"asyncType AsyncAssertionType, actualInput interface{}, failWrapper *types.GomegaFailWrapper, timeoutInterval time.Duration, pollingInterval time.Duration, offset int"},{"Uniquefunname":"func vetExtras(extras []interface","Funname":"asyncassertion.vetExtras","Returntype":"(bool, string)","Args":"extras []interface{}"},{"Uniquefunname":"func (assertion *AsyncAssertion) buildDescription(optionalDescription ...interface","Funname":"buildDescription","Returntype":"string","Args":"optionalDescription ...interface{}"},{"Uniquefunname":"func match(matcher types.GomegaMatcher, desiredMatch bool, optionalDescription ...interface{})bool","Funname":"match","Returntype":"bool","Args":"matcher types.GomegaMatcher, desiredMatch bool, optionalDescription ...interface{}"},{"Uniquefunname":"func matcherMayChange(matcher types.GomegaMatcher, value interface{})bool","Funname":"matcherMayChange","Returntype":"bool","Args":"matcher types.GomegaMatcher, value interface{}"},{"Uniquefunname":"func (assertion *AsyncAssertion) pollActual() (interface","Funname":"pollActual","Returntype":"(interface{}, error)","Args":""},{"Uniquefunname":"func vetExtras(extras []interface","Funname":"vetExtras","Returntype":"(bool, string)","Args":"extras []interface{}"}],"Records":[{"Name":"struct:asyncassertion.AsyncAssertion","Fields":["asyncassertion.AsyncAssertion.actualInput interface{}","asyncassertion.AsyncAssertion.asyncType AsyncAssertionType","asyncassertion.AsyncAssertion.failWrapper *types.GomegaFailWrapper","asyncassertion.AsyncAssertion.offset int","asyncassertion.AsyncAssertion.pollingInterval time.Duration","asyncassertion.AsyncAssertion.timeoutInterval time.Duration"]},{"Name":"const:asyncassertion","Fields":["asyncassertion.AsyncAssertionTypeConsistently","asyncassertion.AsyncAssertionTypeEventually"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/internal/asyncassertion/async_assertion_suite_test.go","Functions":[{"Uniquefunname":"func TestAsyncAssertion(t *testing.T)","Funname":"TestAsyncAssertion","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestAsyncAssertion(t *testing.T)","Funname":"asyncassertion_test.TestAsyncAssertion","Returntype":"","Args":"t *testing.T"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/gomega/internal/asyncassertion/async_assertion_test.go","Functions":null,"Records":[{"Name":"var:asyncassertion_test","Fields":["asyncassertion_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/internal/fakematcher/fake_matcher.go","Functions":[{"Uniquefunname":"func (matcher *FakeMatcher) FailureMessage(actual interface","Funname":"FailureMessage","Returntype":"string","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *FakeMatcher) Match(actual interface","Funname":"Match","Returntype":"(bool, error)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *FakeMatcher) NegatedFailureMessage(actual interface","Funname":"NegatedFailureMessage","Returntype":"string","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *FakeMatcher) FailureMessage(actual interface","Funname":"fakematcher.FakeMatcher.FailureMessage","Returntype":"string","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *FakeMatcher) Match(actual interface","Funname":"fakematcher.FakeMatcher.Match","Returntype":"(bool, error)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *FakeMatcher) NegatedFailureMessage(actual interface","Funname":"fakematcher.FakeMatcher.NegatedFailureMessage","Returntype":"string","Args":"actual interface{}"}],"Records":[{"Name":"struct:fakematcher.FakeMatcher","Fields":["fakematcher.FakeMatcher.ErrToReturn error","fakematcher.FakeMatcher.MatchesToReturn bool","fakematcher.FakeMatcher.ReceivedActual interface{}"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/internal/oraclematcher/oracle_matcher.go","Functions":[{"Uniquefunname":"func MatchMayChangeInTheFuture(matcher types.GomegaMatcher, value interface","Funname":"MatchMayChangeInTheFuture","Returntype":"bool","Args":"matcher types.GomegaMatcher, value interface{}"},{"Uniquefunname":"func MatchMayChangeInTheFuture(matcher types.GomegaMatcher, value interface","Funname":"oraclematcher.MatchMayChangeInTheFuture","Returntype":"bool","Args":"matcher types.GomegaMatcher, value interface{}"}],"Records":[{"Name":"interface","Fields":["oraclematcher.OracleMatcher"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/internal/testingtsupport/testing_t_support.go","Functions":[{"Uniquefunname":"func BuildTestingTGomegaFailWrapper(t gomegaTestingT) *types.GomegaFailWrapper","Funname":"BuildTestingTGomegaFailWrapper","Returntype":"*types.GomegaFailWrapper","Args":"t gomegaTestingT"},{"Uniquefunname":"func Helper()","Funname":"Helper","Returntype":"","Args":""},{"Uniquefunname":"func pruneStack(fullStackTrace string, skip int) string","Funname":"pruneStack","Returntype":"string","Args":"fullStackTrace string, skip int"},{"Uniquefunname":"func BuildTestingTGomegaFailWrapper(t gomegaTestingT) *types.GomegaFailWrapper","Funname":"testingtsupport.BuildTestingTGomegaFailWrapper","Returntype":"*types.GomegaFailWrapper","Args":"t gomegaTestingT"},{"Uniquefunname":"func testingtsupport.EmptyTWithHelper.Helper()","Funname":"testingtsupport.EmptyTWithHelper.Helper","Returntype":"","Args":""},{"Uniquefunname":"func pruneStack(fullStackTrace string, skip int) string","Funname":"testingtsupport.pruneStack","Returntype":"string","Args":"fullStackTrace string, skip int"}],"Records":[{"Name":"var:testingtsupport","Fields":["testingtsupport.StackTracePruneRE"]},{"Name":"interface","Fields":["testingtsupport.gomegaTestingT"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/internal/testingtsupport/testing_t_support_test.go","Functions":[{"Uniquefunname":"func (f *FakeTWithHelper) Fatalf(format string, args ...interface","Funname":"Fatalf","Returntype":"","Args":"format string, args ...interface{}"},{"Uniquefunname":"func (f *FakeTWithoutHelper) Fatalf(format string, args ...interface","Funname":"Fatalf","Returntype":"","Args":"format string, args ...interface{}"},{"Uniquefunname":"func (f *FakeTWithoutHelper) Helper()","Funname":"Helper","Returntype":"","Args":""},{"Uniquefunname":"func (f *FakeTWithoutHelper) ResetHelper()","Funname":"ResetHelper","Returntype":"","Args":""},{"Uniquefunname":"func TestGomegaWithTWithHelper(t *testing.T)","Funname":"TestGomegaWithTWithHelper","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestGomegaWithTWithoutHelper(t *testing.T)","Funname":"TestGomegaWithTWithoutHelper","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTestingT(t *testing.T)","Funname":"TestTestingT","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func (f *FakeTWithHelper) Fatalf(format string, args ...interface","Funname":"testingtsupport_test.FakeTWithHelper.Fatalf","Returntype":"","Args":"format string, args ...interface{}"},{"Uniquefunname":"func (f *FakeTWithoutHelper) Fatalf(format string, args ...interface","Funname":"testingtsupport_test.FakeTWithoutHelper.Fatalf","Returntype":"","Args":"format string, args ...interface{}"},{"Uniquefunname":"func (f *FakeTWithoutHelper) Helper()","Funname":"testingtsupport_test.FakeTWithoutHelper.Helper","Returntype":"","Args":""},{"Uniquefunname":"func (f *FakeTWithoutHelper) ResetHelper()","Funname":"testingtsupport_test.FakeTWithoutHelper.ResetHelper","Returntype":"","Args":""},{"Uniquefunname":"func TestGomegaWithTWithHelper(t *testing.T)","Funname":"testingtsupport_test.TestGomegaWithTWithHelper","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestGomegaWithTWithoutHelper(t *testing.T)","Funname":"testingtsupport_test.TestGomegaWithTWithoutHelper","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func TestTestingT(t *testing.T)","Funname":"testingtsupport_test.TestTestingT","Returntype":"","Args":"t *testing.T"}],"Records":[{"Name":"struct:testingtsupport_test.FakeTWithHelper","Fields":["testingtsupport_test.FakeTWithHelper.LastFatal string"]},{"Name":"struct:testingtsupport_test.FakeTWithoutHelper","Fields":["testingtsupport_test.FakeTWithoutHelper.HelperCount int","testingtsupport_test.FakeTWithoutHelper.LastFatal string"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/and.go","Functions":[{"Uniquefunname":"func (m *AndMatcher) FailureMessage(actual interface","Funname":"FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (m *AndMatcher) Match(actual interface","Funname":"Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (m *AndMatcher) MatchMayChangeInTheFuture(actual interface","Funname":"MatchMayChangeInTheFuture","Returntype":"bool","Args":"actual interface{}"},{"Uniquefunname":"func (m *AndMatcher) NegatedFailureMessage(actual interface","Funname":"NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (m *AndMatcher) FailureMessage(actual interface","Funname":"matchers.AndMatcher.FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (m *AndMatcher) Match(actual interface","Funname":"matchers.AndMatcher.Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (m *AndMatcher) MatchMayChangeInTheFuture(actual interface","Funname":"matchers.AndMatcher.MatchMayChangeInTheFuture","Returntype":"bool","Args":"actual interface{}"},{"Uniquefunname":"func (m *AndMatcher) NegatedFailureMessage(actual interface","Funname":"matchers.AndMatcher.NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"}],"Records":[{"Name":"struct:matchers.AndMatcher","Fields":["matchers.AndMatcher.Matchers []types.GomegaMatcher","matchers.AndMatcher.firstFailedMatcher types.GomegaMatcher"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/and_test.go","Functions":[{"Uniquefunname":"func matchers_test.verifyFailureMessage(m types.GomegaMatcher, input string, expectedFailureMsgFragment string)","Funname":"matchers_test.verifyFailureMessage","Returntype":"","Args":"m types.GomegaMatcher, input string, expectedFailureMsgFragment string"},{"Uniquefunname":"func verifyFailureMessage(m types.GomegaMatcher, input string, expectedFailureMsgFragment string)","Funname":"verifyFailureMessage","Returntype":"","Args":"m types.GomegaMatcher, input string, expectedFailureMsgFragment string"}],"Records":[{"Name":"var:matchers_test","Fields":["matchers_test._","matchers_test.false1","matchers_test.false2","matchers_test.false3","matchers_test.input","matchers_test.true1","matchers_test.true2","matchers_test.true3"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/assignable_to_type_of_matcher.go","Functions":[{"Uniquefunname":"func (matcher *AssignableToTypeOfMatcher) FailureMessage(actual interface","Funname":"FailureMessage","Returntype":"string","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *AssignableToTypeOfMatcher) Match(actual interface","Funname":"Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *AssignableToTypeOfMatcher) NegatedFailureMessage(actual interface","Funname":"NegatedFailureMessage","Returntype":"string","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *AssignableToTypeOfMatcher) FailureMessage(actual interface","Funname":"matchers.AssignableToTypeOfMatcher.FailureMessage","Returntype":"string","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *AssignableToTypeOfMatcher) Match(actual interface","Funname":"matchers.AssignableToTypeOfMatcher.Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *AssignableToTypeOfMatcher) NegatedFailureMessage(actual interface","Funname":"matchers.AssignableToTypeOfMatcher.NegatedFailureMessage","Returntype":"string","Args":"actual interface{}"}],"Records":[{"Name":"struct:matchers.AssignableToTypeOfMatcher","Fields":["matchers.AssignableToTypeOfMatcher.Expected interface{}"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/assignable_to_type_of_matcher_test.go","Functions":null,"Records":[{"Name":"var:matchers_test","Fields":["matchers_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/attributes_slice.go","Functions":[{"Uniquefunname":"func Len()int","Funname":"Len","Returntype":"int","Args":""},{"Uniquefunname":"func (attrs attributesSlice) Less(i, j int) bool","Funname":"Less","Returntype":"bool","Args":"i, j int"},{"Uniquefunname":"func Swap(i, j int)","Funname":"Swap","Returntype":"","Args":"i, j int"},{"Uniquefunname":"func matchers.attributesSlice.Len()int","Funname":"matchers.attributesSlice.Len","Returntype":"int","Args":""},{"Uniquefunname":"func (attrs attributesSlice) Less(i, j int) bool","Funname":"matchers.attributesSlice.Less","Returntype":"bool","Args":"i, j int"},{"Uniquefunname":"func matchers.attributesSlice.Swap(i, j int)","Funname":"matchers.attributesSlice.Swap","Returntype":"","Args":"i, j int"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/be_a_directory.go","Functions":[{"Uniquefunname":"func (t notADirectoryError) Error() string","Funname":"Error","Returntype":"string","Args":""},{"Uniquefunname":"func (matcher *BeADirectoryMatcher) FailureMessage(actual interface","Funname":"FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeADirectoryMatcher) Match(actual interface","Funname":"Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeADirectoryMatcher) NegatedFailureMessage(actual interface","Funname":"NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeADirectoryMatcher) FailureMessage(actual interface","Funname":"matchers.BeADirectoryMatcher.FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeADirectoryMatcher) Match(actual interface","Funname":"matchers.BeADirectoryMatcher.Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeADirectoryMatcher) NegatedFailureMessage(actual interface","Funname":"matchers.BeADirectoryMatcher.NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (t notADirectoryError) Error() string","Funname":"matchers.notADirectoryError.Error","Returntype":"string","Args":""}],"Records":[{"Name":"struct:matchers.BeADirectoryMatcher","Fields":["matchers.BeADirectoryMatcher.err error","matchers.BeADirectoryMatcher.expected interface{}"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/be_a_directory_test.go","Functions":null,"Records":[{"Name":"var:matchers_test","Fields":["matchers_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/be_a_regular_file.go","Functions":[{"Uniquefunname":"func (t notARegularFileError) Error() string","Funname":"Error","Returntype":"string","Args":""},{"Uniquefunname":"func (matcher *BeARegularFileMatcher) FailureMessage(actual interface","Funname":"FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeARegularFileMatcher) Match(actual interface","Funname":"Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func NegatedFailureMessage(actual interface{})(message string)","Funname":"NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeARegularFileMatcher) FailureMessage(actual interface","Funname":"matchers.BeARegularFileMatcher.FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeARegularFileMatcher) Match(actual interface","Funname":"matchers.BeARegularFileMatcher.Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func matchers.BeARegularFileMatcher.NegatedFailureMessage(actual interface{})(message string)","Funname":"matchers.BeARegularFileMatcher.NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (t notARegularFileError) Error() string","Funname":"matchers.notARegularFileError.Error","Returntype":"string","Args":""}],"Records":[{"Name":"struct:matchers.BeARegularFileMatcher","Fields":["matchers.BeARegularFileMatcher.err error","matchers.BeARegularFileMatcher.expected interface{}"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/be_a_regular_file_test.go","Functions":null,"Records":[{"Name":"var:matchers_test","Fields":["matchers_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/be_an_existing_file.go","Functions":[{"Uniquefunname":"func (matcher *BeAnExistingFileMatcher) FailureMessage(actual interface","Funname":"FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeAnExistingFileMatcher) Match(actual interface","Funname":"Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func NegatedFailureMessage(actual interface{})(message string)","Funname":"NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeAnExistingFileMatcher) FailureMessage(actual interface","Funname":"matchers.BeAnExistingFileMatcher.FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeAnExistingFileMatcher) Match(actual interface","Funname":"matchers.BeAnExistingFileMatcher.Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func matchers.BeAnExistingFileMatcher.NegatedFailureMessage(actual interface{})(message string)","Funname":"matchers.BeAnExistingFileMatcher.NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"}],"Records":[{"Name":"struct:matchers.BeAnExistingFileMatcher","Fields":["matchers.BeAnExistingFileMatcher.expected interface{}"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/be_an_existing_file_test.go","Functions":null,"Records":[{"Name":"var:matchers_test","Fields":["matchers_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/be_closed_matcher.go","Functions":[{"Uniquefunname":"func (matcher *BeClosedMatcher) FailureMessage(actual interface","Funname":"FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeClosedMatcher) Match(actual interface","Funname":"Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeClosedMatcher) NegatedFailureMessage(actual interface","Funname":"NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeClosedMatcher) FailureMessage(actual interface","Funname":"matchers.BeClosedMatcher.FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeClosedMatcher) Match(actual interface","Funname":"matchers.BeClosedMatcher.Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeClosedMatcher) NegatedFailureMessage(actual interface","Funname":"matchers.BeClosedMatcher.NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/be_closed_matcher_test.go","Functions":null,"Records":[{"Name":"var:matchers_test","Fields":["matchers_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/be_empty_matcher.go","Functions":[{"Uniquefunname":"func (matcher *BeEmptyMatcher) FailureMessage(actual interface","Funname":"FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeEmptyMatcher) Match(actual interface","Funname":"Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeEmptyMatcher) NegatedFailureMessage(actual interface","Funname":"NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeEmptyMatcher) FailureMessage(actual interface","Funname":"matchers.BeEmptyMatcher.FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeEmptyMatcher) Match(actual interface","Funname":"matchers.BeEmptyMatcher.Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeEmptyMatcher) NegatedFailureMessage(actual interface","Funname":"matchers.BeEmptyMatcher.NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/be_empty_matcher_test.go","Functions":null,"Records":[{"Name":"var:matchers_test","Fields":["matchers_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/be_equivalent_to_matcher.go","Functions":[{"Uniquefunname":"func (matcher *BeEquivalentToMatcher) FailureMessage(actual interface","Funname":"FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeEquivalentToMatcher) Match(actual interface","Funname":"Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func NegatedFailureMessage(actual interface{})(message string)","Funname":"NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeEquivalentToMatcher) FailureMessage(actual interface","Funname":"matchers.BeEquivalentToMatcher.FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeEquivalentToMatcher) Match(actual interface","Funname":"matchers.BeEquivalentToMatcher.Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func matchers.BeEquivalentToMatcher.NegatedFailureMessage(actual interface{})(message string)","Funname":"matchers.BeEquivalentToMatcher.NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"}],"Records":[{"Name":"struct:matchers.BeEquivalentToMatcher","Fields":["matchers.BeEquivalentToMatcher.Expected interface{}"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/be_equivalent_to_matcher_test.go","Functions":null,"Records":[{"Name":"var:matchers_test","Fields":["matchers_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/be_false_matcher.go","Functions":[{"Uniquefunname":"func (matcher *BeFalseMatcher) FailureMessage(actual interface","Funname":"FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeFalseMatcher) Match(actual interface","Funname":"Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeFalseMatcher) NegatedFailureMessage(actual interface","Funname":"NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeFalseMatcher) FailureMessage(actual interface","Funname":"matchers.BeFalseMatcher.FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeFalseMatcher) Match(actual interface","Funname":"matchers.BeFalseMatcher.Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeFalseMatcher) NegatedFailureMessage(actual interface","Funname":"matchers.BeFalseMatcher.NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/be_false_matcher_test.go","Functions":null,"Records":[{"Name":"var:matchers_test","Fields":["matchers_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/be_identical_to.go","Functions":[{"Uniquefunname":"func (matcher *BeIdenticalToMatcher) FailureMessage(actual interface","Funname":"FailureMessage","Returntype":"string","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeIdenticalToMatcher) Match(actual interface","Funname":"Match","Returntype":"(success bool, matchErr error)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeIdenticalToMatcher) NegatedFailureMessage(actual interface","Funname":"NegatedFailureMessage","Returntype":"string","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeIdenticalToMatcher) FailureMessage(actual interface","Funname":"matchers.BeIdenticalToMatcher.FailureMessage","Returntype":"string","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeIdenticalToMatcher) Match(actual interface","Funname":"matchers.BeIdenticalToMatcher.Match","Returntype":"(success bool, matchErr error)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeIdenticalToMatcher) NegatedFailureMessage(actual interface","Funname":"matchers.BeIdenticalToMatcher.NegatedFailureMessage","Returntype":"string","Args":"actual interface{}"}],"Records":[{"Name":"struct:matchers.BeIdenticalToMatcher","Fields":["matchers.BeIdenticalToMatcher.Expected interface{}"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/be_identical_to_test.go","Functions":null,"Records":[{"Name":"var:matchers_test","Fields":["matchers_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/be_nil_matcher.go","Functions":[{"Uniquefunname":"func (matcher *BeNilMatcher) FailureMessage(actual interface","Funname":"FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeNilMatcher) Match(actual interface","Funname":"Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeNilMatcher) NegatedFailureMessage(actual interface","Funname":"NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeNilMatcher) FailureMessage(actual interface","Funname":"matchers.BeNilMatcher.FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeNilMatcher) Match(actual interface","Funname":"matchers.BeNilMatcher.Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeNilMatcher) NegatedFailureMessage(actual interface","Funname":"matchers.BeNilMatcher.NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/be_nil_matcher_test.go","Functions":null,"Records":[{"Name":"var:matchers_test","Fields":["matchers_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/be_numerically_matcher.go","Functions":[{"Uniquefunname":"func (matcher *BeNumericallyMatcher) FailureMessage(actual interface","Funname":"FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func FormatFailureMessage(actual interface{}, negated bool)(message string)","Funname":"FormatFailureMessage","Returntype":"(message string)","Args":"actual interface{}, negated bool"},{"Uniquefunname":"func (matcher *BeNumericallyMatcher) Match(actual interface","Funname":"Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func NegatedFailureMessage(actual interface{})(message string)","Funname":"NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func matchFloats(actual, compareTo, threshold float64)(success bool)","Funname":"matchFloats","Returntype":"(success bool)","Args":"actual, compareTo, threshold float64"},{"Uniquefunname":"func matchIntegers(actual, compareTo, threshold int64)(success bool)","Funname":"matchIntegers","Returntype":"(success bool)","Args":"actual, compareTo, threshold int64"},{"Uniquefunname":"func matchUnsignedIntegers(actual, compareTo, threshold uint64)(success bool)","Funname":"matchUnsignedIntegers","Returntype":"(success bool)","Args":"actual, compareTo, threshold uint64"},{"Uniquefunname":"func (matcher *BeNumericallyMatcher) FailureMessage(actual interface","Funname":"matchers.BeNumericallyMatcher.FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func matchers.BeNumericallyMatcher.FormatFailureMessage(actual interface{}, negated bool)(message string)","Funname":"matchers.BeNumericallyMatcher.FormatFailureMessage","Returntype":"(message string)","Args":"actual interface{}, negated bool"},{"Uniquefunname":"func (matcher *BeNumericallyMatcher) Match(actual interface","Funname":"matchers.BeNumericallyMatcher.Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func matchers.BeNumericallyMatcher.NegatedFailureMessage(actual interface{})(message string)","Funname":"matchers.BeNumericallyMatcher.NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func matchers.BeNumericallyMatcher.matchFloats(actual, compareTo, threshold float64)(success bool)","Funname":"matchers.BeNumericallyMatcher.matchFloats","Returntype":"(success bool)","Args":"actual, compareTo, threshold float64"},{"Uniquefunname":"func matchers.BeNumericallyMatcher.matchIntegers(actual, compareTo, threshold int64)(success bool)","Funname":"matchers.BeNumericallyMatcher.matchIntegers","Returntype":"(success bool)","Args":"actual, compareTo, threshold int64"},{"Uniquefunname":"func matchers.BeNumericallyMatcher.matchUnsignedIntegers(actual, compareTo, threshold uint64)(success bool)","Funname":"matchers.BeNumericallyMatcher.matchUnsignedIntegers","Returntype":"(success bool)","Args":"actual, compareTo, threshold uint64"}],"Records":[{"Name":"struct:matchers.BeNumericallyMatcher","Fields":["matchers.BeNumericallyMatcher.Comparator string","matchers.BeNumericallyMatcher.CompareTo []interface{}"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/be_numerically_matcher_test.go","Functions":null,"Records":[{"Name":"var:matchers_test","Fields":["matchers_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/be_sent_matcher.go","Functions":[{"Uniquefunname":"func (matcher *BeSentMatcher) FailureMessage(actual interface","Funname":"FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeSentMatcher) Match(actual interface","Funname":"Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeSentMatcher) MatchMayChangeInTheFuture(actual interface","Funname":"MatchMayChangeInTheFuture","Returntype":"bool","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeSentMatcher) NegatedFailureMessage(actual interface","Funname":"NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeSentMatcher) FailureMessage(actual interface","Funname":"matchers.BeSentMatcher.FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeSentMatcher) Match(actual interface","Funname":"matchers.BeSentMatcher.Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeSentMatcher) MatchMayChangeInTheFuture(actual interface","Funname":"matchers.BeSentMatcher.MatchMayChangeInTheFuture","Returntype":"bool","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeSentMatcher) NegatedFailureMessage(actual interface","Funname":"matchers.BeSentMatcher.NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"}],"Records":[{"Name":"struct:matchers.BeSentMatcher","Fields":["matchers.BeSentMatcher.Arg interface{}","matchers.BeSentMatcher.channelClosed bool"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/be_sent_matcher_test.go","Functions":null,"Records":[{"Name":"var:matchers_test","Fields":["matchers_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/be_temporally_matcher.go","Functions":[{"Uniquefunname":"func (matcher *BeTemporallyMatcher) FailureMessage(actual interface","Funname":"FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeTemporallyMatcher) Match(actual interface","Funname":"Match","Returntype":"(bool, error)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeTemporallyMatcher) NegatedFailureMessage(actual interface","Funname":"NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func matchTimes(actual, compareTo time.Time, threshold time.Duration)(success bool)","Funname":"matchTimes","Returntype":"(success bool)","Args":"actual, compareTo time.Time, threshold time.Duration"},{"Uniquefunname":"func (matcher *BeTemporallyMatcher) FailureMessage(actual interface","Funname":"matchers.BeTemporallyMatcher.FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeTemporallyMatcher) Match(actual interface","Funname":"matchers.BeTemporallyMatcher.Match","Returntype":"(bool, error)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeTemporallyMatcher) NegatedFailureMessage(actual interface","Funname":"matchers.BeTemporallyMatcher.NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func matchers.BeTemporallyMatcher.matchTimes(actual, compareTo time.Time, threshold time.Duration)(success bool)","Funname":"matchers.BeTemporallyMatcher.matchTimes","Returntype":"(success bool)","Args":"actual, compareTo time.Time, threshold time.Duration"}],"Records":[{"Name":"struct:matchers.BeTemporallyMatcher","Fields":["matchers.BeTemporallyMatcher.Comparator string","matchers.BeTemporallyMatcher.CompareTo time.Time","matchers.BeTemporallyMatcher.Threshold []time.Duration"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/be_temporally_matcher_test.go","Functions":null,"Records":[{"Name":"var:matchers_test","Fields":["matchers_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/be_true_matcher.go","Functions":[{"Uniquefunname":"func (matcher *BeTrueMatcher) FailureMessage(actual interface","Funname":"FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeTrueMatcher) Match(actual interface","Funname":"Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeTrueMatcher) NegatedFailureMessage(actual interface","Funname":"NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeTrueMatcher) FailureMessage(actual interface","Funname":"matchers.BeTrueMatcher.FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeTrueMatcher) Match(actual interface","Funname":"matchers.BeTrueMatcher.Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeTrueMatcher) NegatedFailureMessage(actual interface","Funname":"matchers.BeTrueMatcher.NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/be_true_matcher_test.go","Functions":null,"Records":[{"Name":"var:matchers_test","Fields":["matchers_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/be_zero_matcher.go","Functions":[{"Uniquefunname":"func (matcher *BeZeroMatcher) FailureMessage(actual interface","Funname":"FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeZeroMatcher) Match(actual interface","Funname":"Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeZeroMatcher) NegatedFailureMessage(actual interface","Funname":"NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeZeroMatcher) FailureMessage(actual interface","Funname":"matchers.BeZeroMatcher.FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeZeroMatcher) Match(actual interface","Funname":"matchers.BeZeroMatcher.Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *BeZeroMatcher) NegatedFailureMessage(actual interface","Funname":"matchers.BeZeroMatcher.NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/be_zero_matcher_test.go","Functions":null,"Records":[{"Name":"var:matchers_test","Fields":["matchers_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/consist_of.go","Functions":[{"Uniquefunname":"func (matcher *ConsistOfMatcher) FailureMessage(actual interface","Funname":"FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *ConsistOfMatcher) Match(actual interface","Funname":"Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *ConsistOfMatcher) NegatedFailureMessage(actual interface","Funname":"NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *ConsistOfMatcher) FailureMessage(actual interface","Funname":"matchers.ConsistOfMatcher.FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *ConsistOfMatcher) Match(actual interface","Funname":"matchers.ConsistOfMatcher.Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *ConsistOfMatcher) NegatedFailureMessage(actual interface","Funname":"matchers.ConsistOfMatcher.NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *ConsistOfMatcher) valuesOf(actual interface","Funname":"matchers.ConsistOfMatcher.valuesOf","Returntype":"[]interface{}","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *ConsistOfMatcher) valuesOf(actual interface","Funname":"valuesOf","Returntype":"[]interface{}","Args":"actual interface{}"}],"Records":[{"Name":"struct:matchers.ConsistOfMatcher","Fields":["matchers.ConsistOfMatcher.Elements []interface{}"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/consist_of_test.go","Functions":null,"Records":[{"Name":"var:matchers_test","Fields":["matchers_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/contain_element_matcher.go","Functions":[{"Uniquefunname":"func (matcher *ContainElementMatcher) FailureMessage(actual interface","Funname":"FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *ContainElementMatcher) Match(actual interface","Funname":"Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func NegatedFailureMessage(actual interface{})(message string)","Funname":"NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *ContainElementMatcher) FailureMessage(actual interface","Funname":"matchers.ContainElementMatcher.FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *ContainElementMatcher) Match(actual interface","Funname":"matchers.ContainElementMatcher.Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func matchers.ContainElementMatcher.NegatedFailureMessage(actual interface{})(message string)","Funname":"matchers.ContainElementMatcher.NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"}],"Records":[{"Name":"struct:matchers.ContainElementMatcher","Fields":["matchers.ContainElementMatcher.Element interface{}"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/contain_element_matcher_test.go","Functions":null,"Records":[{"Name":"var:matchers_test","Fields":["matchers_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/contain_substring_matcher.go","Functions":[{"Uniquefunname":"func (matcher *ContainSubstringMatcher) FailureMessage(actual interface","Funname":"FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *ContainSubstringMatcher) Match(actual interface","Funname":"Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func NegatedFailureMessage(actual interface{})(message string)","Funname":"NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *ContainSubstringMatcher) FailureMessage(actual interface","Funname":"matchers.ContainSubstringMatcher.FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *ContainSubstringMatcher) Match(actual interface","Funname":"matchers.ContainSubstringMatcher.Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func matchers.ContainSubstringMatcher.NegatedFailureMessage(actual interface{})(message string)","Funname":"matchers.ContainSubstringMatcher.NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *ContainSubstringMatcher) stringToMatch() string","Funname":"matchers.ContainSubstringMatcher.stringToMatch","Returntype":"string","Args":""},{"Uniquefunname":"func (matcher *ContainSubstringMatcher) stringToMatch() string","Funname":"stringToMatch","Returntype":"string","Args":""}],"Records":[{"Name":"struct:matchers.ContainSubstringMatcher","Fields":["matchers.ContainSubstringMatcher.Args []interface{}","matchers.ContainSubstringMatcher.Substr string"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/contain_substring_matcher_test.go","Functions":null,"Records":[{"Name":"var:matchers_test","Fields":["matchers_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/equal_matcher.go","Functions":[{"Uniquefunname":"func (matcher *EqualMatcher) FailureMessage(actual interface","Funname":"FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *EqualMatcher) Match(actual interface","Funname":"Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *EqualMatcher) NegatedFailureMessage(actual interface","Funname":"NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *EqualMatcher) FailureMessage(actual interface","Funname":"matchers.EqualMatcher.FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *EqualMatcher) Match(actual interface","Funname":"matchers.EqualMatcher.Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *EqualMatcher) NegatedFailureMessage(actual interface","Funname":"matchers.EqualMatcher.NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"}],"Records":[{"Name":"struct:matchers.EqualMatcher","Fields":["matchers.EqualMatcher.Expected interface{}"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/equal_matcher_test.go","Functions":null,"Records":[{"Name":"var:matchers_test","Fields":["matchers_test._","matchers_test.expectedLongStringFailureMessage","matchers_test.expectedShortStringFailureMessage"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/have_cap_matcher.go","Functions":[{"Uniquefunname":"func (matcher *HaveCapMatcher) FailureMessage(actual interface","Funname":"FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *HaveCapMatcher) Match(actual interface","Funname":"Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *HaveCapMatcher) NegatedFailureMessage(actual interface","Funname":"NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *HaveCapMatcher) FailureMessage(actual interface","Funname":"matchers.HaveCapMatcher.FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *HaveCapMatcher) Match(actual interface","Funname":"matchers.HaveCapMatcher.Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *HaveCapMatcher) NegatedFailureMessage(actual interface","Funname":"matchers.HaveCapMatcher.NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"}],"Records":[{"Name":"struct:matchers.HaveCapMatcher","Fields":["matchers.HaveCapMatcher.Count int"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/have_cap_matcher_test.go","Functions":null,"Records":[{"Name":"var:matchers_test","Fields":["matchers_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/have_key_matcher.go","Functions":[{"Uniquefunname":"func (matcher *HaveKeyMatcher) FailureMessage(actual interface","Funname":"FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *HaveKeyMatcher) Match(actual interface","Funname":"Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *HaveKeyMatcher) NegatedFailureMessage(actual interface","Funname":"NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *HaveKeyMatcher) FailureMessage(actual interface","Funname":"matchers.HaveKeyMatcher.FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *HaveKeyMatcher) Match(actual interface","Funname":"matchers.HaveKeyMatcher.Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *HaveKeyMatcher) NegatedFailureMessage(actual interface","Funname":"matchers.HaveKeyMatcher.NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"}],"Records":[{"Name":"struct:matchers.HaveKeyMatcher","Fields":["matchers.HaveKeyMatcher.Key interface{}"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/have_key_matcher_test.go","Functions":null,"Records":[{"Name":"var:matchers_test","Fields":["matchers_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/have_key_with_value_matcher.go","Functions":[{"Uniquefunname":"func (matcher *HaveKeyWithValueMatcher) FailureMessage(actual interface","Funname":"FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *HaveKeyWithValueMatcher) Match(actual interface","Funname":"Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func NegatedFailureMessage(actual interface{})(message string)","Funname":"NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *HaveKeyWithValueMatcher) FailureMessage(actual interface","Funname":"matchers.HaveKeyWithValueMatcher.FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *HaveKeyWithValueMatcher) Match(actual interface","Funname":"matchers.HaveKeyWithValueMatcher.Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func matchers.HaveKeyWithValueMatcher.NegatedFailureMessage(actual interface{})(message string)","Funname":"matchers.HaveKeyWithValueMatcher.NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"}],"Records":[{"Name":"struct:matchers.HaveKeyWithValueMatcher","Fields":["matchers.HaveKeyWithValueMatcher.Key interface{}","matchers.HaveKeyWithValueMatcher.Value interface{}"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/have_key_with_value_matcher_test.go","Functions":null,"Records":[{"Name":"var:matchers_test","Fields":["matchers_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/have_len_matcher.go","Functions":[{"Uniquefunname":"func (matcher *HaveLenMatcher) FailureMessage(actual interface","Funname":"FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *HaveLenMatcher) Match(actual interface","Funname":"Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *HaveLenMatcher) NegatedFailureMessage(actual interface","Funname":"NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *HaveLenMatcher) FailureMessage(actual interface","Funname":"matchers.HaveLenMatcher.FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *HaveLenMatcher) Match(actual interface","Funname":"matchers.HaveLenMatcher.Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *HaveLenMatcher) NegatedFailureMessage(actual interface","Funname":"matchers.HaveLenMatcher.NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"}],"Records":[{"Name":"struct:matchers.HaveLenMatcher","Fields":["matchers.HaveLenMatcher.Count int"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/have_len_matcher_test.go","Functions":null,"Records":[{"Name":"var:matchers_test","Fields":["matchers_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/have_occurred_matcher.go","Functions":[{"Uniquefunname":"func (matcher *HaveOccurredMatcher) FailureMessage(actual interface","Funname":"FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *HaveOccurredMatcher) Match(actual interface","Funname":"Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *HaveOccurredMatcher) NegatedFailureMessage(actual interface","Funname":"NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *HaveOccurredMatcher) FailureMessage(actual interface","Funname":"matchers.HaveOccurredMatcher.FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *HaveOccurredMatcher) Match(actual interface","Funname":"matchers.HaveOccurredMatcher.Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *HaveOccurredMatcher) NegatedFailureMessage(actual interface","Funname":"matchers.HaveOccurredMatcher.NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/have_occurred_matcher_test.go","Functions":[{"Uniquefunname":"func (e *CustomErr) Error() string","Funname":"Error","Returntype":"string","Args":""},{"Uniquefunname":"func (e *CustomErr) Error() string","Funname":"matchers_test.CustomErr.Error","Returntype":"string","Args":""}],"Records":[{"Name":"struct:matchers_test.CustomErr","Fields":["matchers_test.CustomErr.msg string"]},{"Name":"var:matchers_test","Fields":["matchers_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/have_prefix_matcher.go","Functions":[{"Uniquefunname":"func (matcher *HavePrefixMatcher) FailureMessage(actual interface","Funname":"FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *HavePrefixMatcher) Match(actual interface","Funname":"Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *HavePrefixMatcher) NegatedFailureMessage(actual interface","Funname":"NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *HavePrefixMatcher) FailureMessage(actual interface","Funname":"matchers.HavePrefixMatcher.FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *HavePrefixMatcher) Match(actual interface","Funname":"matchers.HavePrefixMatcher.Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *HavePrefixMatcher) NegatedFailureMessage(actual interface","Funname":"matchers.HavePrefixMatcher.NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *HavePrefixMatcher) prefix() string","Funname":"matchers.HavePrefixMatcher.prefix","Returntype":"string","Args":""},{"Uniquefunname":"func (matcher *HavePrefixMatcher) prefix() string","Funname":"prefix","Returntype":"string","Args":""}],"Records":[{"Name":"struct:matchers.HavePrefixMatcher","Fields":["matchers.HavePrefixMatcher.Args []interface{}","matchers.HavePrefixMatcher.Prefix string"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/have_prefix_matcher_test.go","Functions":null,"Records":[{"Name":"var:matchers_test","Fields":["matchers_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/have_suffix_matcher.go","Functions":[{"Uniquefunname":"func (matcher *HaveSuffixMatcher) FailureMessage(actual interface","Funname":"FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *HaveSuffixMatcher) Match(actual interface","Funname":"Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *HaveSuffixMatcher) NegatedFailureMessage(actual interface","Funname":"NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *HaveSuffixMatcher) FailureMessage(actual interface","Funname":"matchers.HaveSuffixMatcher.FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *HaveSuffixMatcher) Match(actual interface","Funname":"matchers.HaveSuffixMatcher.Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *HaveSuffixMatcher) NegatedFailureMessage(actual interface","Funname":"matchers.HaveSuffixMatcher.NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *HaveSuffixMatcher) suffix() string","Funname":"matchers.HaveSuffixMatcher.suffix","Returntype":"string","Args":""},{"Uniquefunname":"func (matcher *HaveSuffixMatcher) suffix() string","Funname":"suffix","Returntype":"string","Args":""}],"Records":[{"Name":"struct:matchers.HaveSuffixMatcher","Fields":["matchers.HaveSuffixMatcher.Args []interface{}","matchers.HaveSuffixMatcher.Suffix string"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/have_suffix_matcher_test.go","Functions":null,"Records":[{"Name":"var:matchers_test","Fields":["matchers_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/match_error_matcher.go","Functions":[{"Uniquefunname":"func (matcher *MatchErrorMatcher) FailureMessage(actual interface","Funname":"FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *MatchErrorMatcher) Match(actual interface","Funname":"Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *MatchErrorMatcher) NegatedFailureMessage(actual interface","Funname":"NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *MatchErrorMatcher) FailureMessage(actual interface","Funname":"matchers.MatchErrorMatcher.FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *MatchErrorMatcher) Match(actual interface","Funname":"matchers.MatchErrorMatcher.Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *MatchErrorMatcher) NegatedFailureMessage(actual interface","Funname":"matchers.MatchErrorMatcher.NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"}],"Records":[{"Name":"struct:matchers.MatchErrorMatcher","Fields":["matchers.MatchErrorMatcher.Expected interface{}"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/match_error_matcher_test.go","Functions":[{"Uniquefunname":"func (c CustomError) Error() string","Funname":"Error","Returntype":"string","Args":""},{"Uniquefunname":"func Error()string","Funname":"Error","Returntype":"string","Args":""},{"Uniquefunname":"func (c CustomError) Error() string","Funname":"matchers_test.CustomError.Error","Returntype":"string","Args":""},{"Uniquefunname":"func matchers_test.mockErr.Error()string","Funname":"matchers_test.mockErr.Error","Returntype":"string","Args":""}],"Records":[{"Name":"var:matchers_test","Fields":["matchers_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/match_json_matcher.go","Functions":[{"Uniquefunname":"func (matcher *MatchJSONMatcher) FailureMessage(actual interface","Funname":"FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *MatchJSONMatcher) Match(actual interface","Funname":"Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *MatchJSONMatcher) NegatedFailureMessage(actual interface","Funname":"NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *MatchJSONMatcher) FailureMessage(actual interface","Funname":"matchers.MatchJSONMatcher.FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *MatchJSONMatcher) Match(actual interface","Funname":"matchers.MatchJSONMatcher.Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *MatchJSONMatcher) NegatedFailureMessage(actual interface","Funname":"matchers.MatchJSONMatcher.NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func matchers.MatchJSONMatcher.prettyPrint(actual interface{})(actualFormatted, expectedFormatted string, err error)","Funname":"matchers.MatchJSONMatcher.prettyPrint","Returntype":"(actualFormatted, expectedFormatted string, err error)","Args":"actual interface{}"},{"Uniquefunname":"func prettyPrint(actual interface{})(actualFormatted, expectedFormatted string, err error)","Funname":"prettyPrint","Returntype":"(actualFormatted, expectedFormatted string, err error)","Args":"actual interface{}"}],"Records":[{"Name":"struct:matchers.MatchJSONMatcher","Fields":["matchers.MatchJSONMatcher.JSONToMatch interface{}","matchers.MatchJSONMatcher.firstFailurePath []interface{}"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/match_json_matcher_test.go","Functions":null,"Records":[{"Name":"var:matchers_test","Fields":["matchers_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/match_regexp_matcher.go","Functions":[{"Uniquefunname":"func (matcher *MatchRegexpMatcher) FailureMessage(actual interface","Funname":"FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *MatchRegexpMatcher) Match(actual interface","Funname":"Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *MatchRegexpMatcher) NegatedFailureMessage(actual interface","Funname":"NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *MatchRegexpMatcher) FailureMessage(actual interface","Funname":"matchers.MatchRegexpMatcher.FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *MatchRegexpMatcher) Match(actual interface","Funname":"matchers.MatchRegexpMatcher.Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *MatchRegexpMatcher) NegatedFailureMessage(actual interface","Funname":"matchers.MatchRegexpMatcher.NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *MatchRegexpMatcher) regexp() string","Funname":"matchers.MatchRegexpMatcher.regexp","Returntype":"string","Args":""},{"Uniquefunname":"func (matcher *MatchRegexpMatcher) regexp() string","Funname":"regexp","Returntype":"string","Args":""}],"Records":[{"Name":"struct:matchers.MatchRegexpMatcher","Fields":["matchers.MatchRegexpMatcher.Args []interface{}","matchers.MatchRegexpMatcher.Regexp string"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/match_regexp_matcher_test.go","Functions":null,"Records":[{"Name":"var:matchers_test","Fields":["matchers_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/match_xml_matcher.go","Functions":[{"Uniquefunname":"func (matcher *MatchXMLMatcher) FailureMessage(actual interface","Funname":"FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *MatchXMLMatcher) Match(actual interface","Funname":"Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *MatchXMLMatcher) NegatedFailureMessage(actual interface","Funname":"NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func formattedPrint(actual interface{})(actualString, expectedString string, err error)","Funname":"formattedPrint","Returntype":"(actualString, expectedString string, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *MatchXMLMatcher) FailureMessage(actual interface","Funname":"matchers.MatchXMLMatcher.FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *MatchXMLMatcher) Match(actual interface","Funname":"matchers.MatchXMLMatcher.Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *MatchXMLMatcher) NegatedFailureMessage(actual interface","Funname":"matchers.MatchXMLMatcher.NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func matchers.MatchXMLMatcher.formattedPrint(actual interface{})(actualString, expectedString string, err error)","Funname":"matchers.MatchXMLMatcher.formattedPrint","Returntype":"(actualString, expectedString string, err error)","Args":"actual interface{}"},{"Uniquefunname":"func newXmlDecoder(reader io.Reader) *xml.Decoder","Funname":"matchers.newXmlDecoder","Returntype":"*xml.Decoder","Args":"reader io.Reader"},{"Uniquefunname":"func parseXmlContent(content string) (*xmlNode, error)","Funname":"matchers.parseXmlContent","Returntype":"(*xmlNode, error)","Args":"content string"},{"Uniquefunname":"func trimParentNodesContentSpaces(node *xmlNode)","Funname":"matchers.trimParentNodesContentSpaces","Returntype":"","Args":"node *xmlNode"},{"Uniquefunname":"func newXmlDecoder(reader io.Reader) *xml.Decoder","Funname":"newXmlDecoder","Returntype":"*xml.Decoder","Args":"reader io.Reader"},{"Uniquefunname":"func parseXmlContent(content string) (*xmlNode, error)","Funname":"parseXmlContent","Returntype":"(*xmlNode, error)","Args":"content string"},{"Uniquefunname":"func trimParentNodesContentSpaces(node *xmlNode)","Funname":"trimParentNodesContentSpaces","Returntype":"","Args":"node *xmlNode"}],"Records":[{"Name":"struct:matchers.MatchXMLMatcher","Fields":["matchers.MatchXMLMatcher.XMLToMatch interface{}"]},{"Name":"struct:matchers.xmlNode","Fields":["matchers.xmlNode.Comments []xml.Comment","matchers.xmlNode.Content []byte","matchers.xmlNode.Nodes []*xmlNode","matchers.xmlNode.ProcInsts []xml.ProcInst","matchers.xmlNode.XMLAttr []xml.Attr","matchers.xmlNode.XMLName xml.Name"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/match_xml_matcher_test.go","Functions":null,"Records":[{"Name":"var:matchers_test","Fields":["matchers_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/match_yaml_matcher.go","Functions":[{"Uniquefunname":"func (matcher *MatchYAMLMatcher) FailureMessage(actual interface","Funname":"FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *MatchYAMLMatcher) Match(actual interface","Funname":"Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *MatchYAMLMatcher) NegatedFailureMessage(actual interface","Funname":"NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *MatchYAMLMatcher) FailureMessage(actual interface","Funname":"matchers.MatchYAMLMatcher.FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *MatchYAMLMatcher) Match(actual interface","Funname":"matchers.MatchYAMLMatcher.Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *MatchYAMLMatcher) NegatedFailureMessage(actual interface","Funname":"matchers.MatchYAMLMatcher.NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func matchers.MatchYAMLMatcher.toNormalisedStrings(actual interface{})(actualFormatted, expectedFormatted string, err error)","Funname":"matchers.MatchYAMLMatcher.toNormalisedStrings","Returntype":"(actualFormatted, expectedFormatted string, err error)","Args":"actual interface{}"},{"Uniquefunname":"func matchers.MatchYAMLMatcher.toStrings(actual interface{})(actualFormatted, expectedFormatted string, err error)","Funname":"matchers.MatchYAMLMatcher.toStrings","Returntype":"(actualFormatted, expectedFormatted string, err error)","Args":"actual interface{}"},{"Uniquefunname":"func normalise(input string) string","Funname":"matchers.normalise","Returntype":"string","Args":"input string"},{"Uniquefunname":"func normalise(input string) string","Funname":"normalise","Returntype":"string","Args":"input string"},{"Uniquefunname":"func toNormalisedStrings(actual interface{})(actualFormatted, expectedFormatted string, err error)","Funname":"toNormalisedStrings","Returntype":"(actualFormatted, expectedFormatted string, err error)","Args":"actual interface{}"},{"Uniquefunname":"func toStrings(actual interface{})(actualFormatted, expectedFormatted string, err error)","Funname":"toStrings","Returntype":"(actualFormatted, expectedFormatted string, err error)","Args":"actual interface{}"}],"Records":[{"Name":"struct:matchers.MatchYAMLMatcher","Fields":["matchers.MatchYAMLMatcher.YAMLToMatch interface{}","matchers.MatchYAMLMatcher.firstFailurePath []interface{}"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/match_yaml_matcher_test.go","Functions":null,"Records":[{"Name":"var:matchers_test","Fields":["matchers_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/matcher_tests_suite_test.go","Functions":[{"Uniquefunname":"func (s *myStringer) String() string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func Test(t *testing.T)","Funname":"Test","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func Test(t *testing.T)","Funname":"matchers_test.Test","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func (s *myStringer) String() string","Funname":"matchers_test.myStringer.String","Returntype":"string","Args":""},{"Uniquefunname":"func openFile(filePath string) *os.File","Funname":"matchers_test.openFile","Returntype":"*os.File","Args":"filePath string"},{"Uniquefunname":"func readFileContents(filePath string) []byte","Funname":"matchers_test.readFileContents","Returntype":"[]byte","Args":"filePath string"},{"Uniquefunname":"func openFile(filePath string) *os.File","Funname":"openFile","Returntype":"*os.File","Args":"filePath string"},{"Uniquefunname":"func readFileContents(filePath string) []byte","Funname":"readFileContents","Returntype":"[]byte","Args":"filePath string"}],"Records":[{"Name":"struct:matchers_test.myCustomType","Fields":["matchers_test.myCustomType.arr []string","matchers_test.myCustomType.f float32","matchers_test.myCustomType.n int","matchers_test.myCustomType.s string"]},{"Name":"struct:matchers_test.myStringer","Fields":["matchers_test.myStringer.a string"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/not.go","Functions":[{"Uniquefunname":"func (m *NotMatcher) FailureMessage(actual interface","Funname":"FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (m *NotMatcher) Match(actual interface","Funname":"Match","Returntype":"(bool, error)","Args":"actual interface{}"},{"Uniquefunname":"func (m *NotMatcher) MatchMayChangeInTheFuture(actual interface","Funname":"MatchMayChangeInTheFuture","Returntype":"bool","Args":"actual interface{}"},{"Uniquefunname":"func (m *NotMatcher) NegatedFailureMessage(actual interface","Funname":"NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (m *NotMatcher) FailureMessage(actual interface","Funname":"matchers.NotMatcher.FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (m *NotMatcher) Match(actual interface","Funname":"matchers.NotMatcher.Match","Returntype":"(bool, error)","Args":"actual interface{}"},{"Uniquefunname":"func (m *NotMatcher) MatchMayChangeInTheFuture(actual interface","Funname":"matchers.NotMatcher.MatchMayChangeInTheFuture","Returntype":"bool","Args":"actual interface{}"},{"Uniquefunname":"func (m *NotMatcher) NegatedFailureMessage(actual interface","Funname":"matchers.NotMatcher.NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"}],"Records":[{"Name":"struct:matchers.NotMatcher","Fields":["matchers.NotMatcher.Matcher types.GomegaMatcher"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/not_test.go","Functions":null,"Records":[{"Name":"var:matchers_test","Fields":["matchers_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/or.go","Functions":[{"Uniquefunname":"func (m *OrMatcher) FailureMessage(actual interface","Funname":"FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (m *OrMatcher) Match(actual interface","Funname":"Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (m *OrMatcher) MatchMayChangeInTheFuture(actual interface","Funname":"MatchMayChangeInTheFuture","Returntype":"bool","Args":"actual interface{}"},{"Uniquefunname":"func (m *OrMatcher) NegatedFailureMessage(actual interface","Funname":"NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (m *OrMatcher) FailureMessage(actual interface","Funname":"matchers.OrMatcher.FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (m *OrMatcher) Match(actual interface","Funname":"matchers.OrMatcher.Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (m *OrMatcher) MatchMayChangeInTheFuture(actual interface","Funname":"matchers.OrMatcher.MatchMayChangeInTheFuture","Returntype":"bool","Args":"actual interface{}"},{"Uniquefunname":"func (m *OrMatcher) NegatedFailureMessage(actual interface","Funname":"matchers.OrMatcher.NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"}],"Records":[{"Name":"struct:matchers.OrMatcher","Fields":["matchers.OrMatcher.Matchers []types.GomegaMatcher","matchers.OrMatcher.firstSuccessfulMatcher types.GomegaMatcher"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/or_test.go","Functions":null,"Records":[{"Name":"var:matchers_test","Fields":["matchers_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/panic_matcher.go","Functions":[{"Uniquefunname":"func (matcher *PanicMatcher) FailureMessage(actual interface","Funname":"FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *PanicMatcher) Match(actual interface","Funname":"Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *PanicMatcher) NegatedFailureMessage(actual interface","Funname":"NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *PanicMatcher) FailureMessage(actual interface","Funname":"matchers.PanicMatcher.FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *PanicMatcher) Match(actual interface","Funname":"matchers.PanicMatcher.Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *PanicMatcher) NegatedFailureMessage(actual interface","Funname":"matchers.PanicMatcher.NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"}],"Records":[{"Name":"struct:matchers.PanicMatcher","Fields":["matchers.PanicMatcher.object interface{}"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/panic_matcher_test.go","Functions":null,"Records":[{"Name":"var:matchers_test","Fields":["matchers_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/receive_matcher.go","Functions":[{"Uniquefunname":"func (matcher *ReceiveMatcher) FailureMessage(actual interface","Funname":"FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *ReceiveMatcher) Match(actual interface","Funname":"Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *ReceiveMatcher) MatchMayChangeInTheFuture(actual interface","Funname":"MatchMayChangeInTheFuture","Returntype":"bool","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *ReceiveMatcher) NegatedFailureMessage(actual interface","Funname":"NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *ReceiveMatcher) FailureMessage(actual interface","Funname":"matchers.ReceiveMatcher.FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *ReceiveMatcher) Match(actual interface","Funname":"matchers.ReceiveMatcher.Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *ReceiveMatcher) MatchMayChangeInTheFuture(actual interface","Funname":"matchers.ReceiveMatcher.MatchMayChangeInTheFuture","Returntype":"bool","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *ReceiveMatcher) NegatedFailureMessage(actual interface","Funname":"matchers.ReceiveMatcher.NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"}],"Records":[{"Name":"struct:matchers.ReceiveMatcher","Fields":["matchers.ReceiveMatcher.Arg interface{}","matchers.ReceiveMatcher.channelClosed bool","matchers.ReceiveMatcher.receivedValue reflect.Value"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/receive_matcher_test.go","Functions":[{"Uniquefunname":"func (j *jackie) DrunkenMaster() bool","Funname":"DrunkenMaster","Returntype":"bool","Args":""},{"Uniquefunname":"func Error()string","Funname":"Error","Returntype":"string","Args":""},{"Uniquefunname":"func (j *jackie) DrunkenMaster() bool","Funname":"matchers_test.jackie.DrunkenMaster","Returntype":"bool","Args":""},{"Uniquefunname":"func matchers_test.someError.Error()string","Funname":"matchers_test.someError.Error","Returntype":"string","Args":""}],"Records":[{"Name":"var:matchers_test","Fields":["matchers_test._"]},{"Name":"struct:matchers_test.jackie","Fields":["matchers_test.jackie.name string"]},{"Name":"interface","Fields":["matchers_test.kungFuActor"]},{"Name":"struct:matchers_test.someError","Fields":["matchers_test.someError.s string"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/semi_structured_data_support.go","Functions":[{"Uniquefunname":"func deepEqual(a interface","Funname":"deepEqual","Returntype":"(bool, []interface{})","Args":"a interface{}, b interface{}"},{"Uniquefunname":"func formattedFailurePath(failurePath []interface","Funname":"formattedFailurePath","Returntype":"string","Args":"failurePath []interface{}"},{"Uniquefunname":"func formattedMessage(comparisonMessage string, failurePath []interface","Funname":"formattedMessage","Returntype":"string","Args":"comparisonMessage string, failurePath []interface{}"},{"Uniquefunname":"func deepEqual(a interface","Funname":"matchers.deepEqual","Returntype":"(bool, []interface{})","Args":"a interface{}, b interface{}"},{"Uniquefunname":"func formattedFailurePath(failurePath []interface","Funname":"matchers.formattedFailurePath","Returntype":"string","Args":"failurePath []interface{}"},{"Uniquefunname":"func formattedMessage(comparisonMessage string, failurePath []interface","Funname":"matchers.formattedMessage","Returntype":"string","Args":"comparisonMessage string, failurePath []interface{}"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/succeed_matcher.go","Functions":[{"Uniquefunname":"func (matcher *SucceedMatcher) FailureMessage(actual interface","Funname":"FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *SucceedMatcher) Match(actual interface","Funname":"Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *SucceedMatcher) NegatedFailureMessage(actual interface","Funname":"NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *SucceedMatcher) FailureMessage(actual interface","Funname":"matchers.SucceedMatcher.FailureMessage","Returntype":"(message string)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *SucceedMatcher) Match(actual interface","Funname":"matchers.SucceedMatcher.Match","Returntype":"(success bool, err error)","Args":"actual interface{}"},{"Uniquefunname":"func (matcher *SucceedMatcher) NegatedFailureMessage(actual interface","Funname":"matchers.SucceedMatcher.NegatedFailureMessage","Returntype":"(message string)","Args":"actual interface{}"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/succeed_matcher_test.go","Functions":[{"Uniquefunname":"func Erroring() error","Funname":"Erroring","Returntype":"error","Args":""},{"Uniquefunname":"func Invalid() *AnyType","Funname":"Invalid","Returntype":"*AnyType","Args":""},{"Uniquefunname":"func NotErroring() error","Funname":"NotErroring","Returntype":"error","Args":""},{"Uniquefunname":"func Erroring() error","Funname":"matchers_test.Erroring","Returntype":"error","Args":""},{"Uniquefunname":"func Invalid() *AnyType","Funname":"matchers_test.Invalid","Returntype":"*AnyType","Args":""},{"Uniquefunname":"func NotErroring() error","Funname":"matchers_test.NotErroring","Returntype":"error","Args":""}],"Records":[{"Name":"var:matchers_test","Fields":["matchers_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/type_support.go","Functions":[{"Uniquefunname":"func capOf(a interface","Funname":"capOf","Returntype":"(int, bool)","Args":"a interface{}"},{"Uniquefunname":"func isArrayOrSlice(a interface","Funname":"isArrayOrSlice","Returntype":"bool","Args":"a interface{}"},{"Uniquefunname":"func isBool(a interface","Funname":"isBool","Returntype":"bool","Args":"a interface{}"},{"Uniquefunname":"func isChan(a interface","Funname":"isChan","Returntype":"bool","Args":"a interface{}"},{"Uniquefunname":"func isError(a interface","Funname":"isError","Returntype":"bool","Args":"a interface{}"},{"Uniquefunname":"func isFloat(a interface","Funname":"isFloat","Returntype":"bool","Args":"a interface{}"},{"Uniquefunname":"func isInteger(a interface","Funname":"isInteger","Returntype":"bool","Args":"a interface{}"},{"Uniquefunname":"func isMap(a interface","Funname":"isMap","Returntype":"bool","Args":"a interface{}"},{"Uniquefunname":"func isNil(a interface","Funname":"isNil","Returntype":"bool","Args":"a interface{}"},{"Uniquefunname":"func isNumber(a interface","Funname":"isNumber","Returntype":"bool","Args":"a interface{}"},{"Uniquefunname":"func isString(a interface","Funname":"isString","Returntype":"bool","Args":"a interface{}"},{"Uniquefunname":"func isUnsignedInteger(a interface","Funname":"isUnsignedInteger","Returntype":"bool","Args":"a interface{}"},{"Uniquefunname":"func lengthOf(a interface","Funname":"lengthOf","Returntype":"(int, bool)","Args":"a interface{}"},{"Uniquefunname":"func capOf(a interface","Funname":"matchers.capOf","Returntype":"(int, bool)","Args":"a interface{}"},{"Uniquefunname":"func isArrayOrSlice(a interface","Funname":"matchers.isArrayOrSlice","Returntype":"bool","Args":"a interface{}"},{"Uniquefunname":"func isBool(a interface","Funname":"matchers.isBool","Returntype":"bool","Args":"a interface{}"},{"Uniquefunname":"func isChan(a interface","Funname":"matchers.isChan","Returntype":"bool","Args":"a interface{}"},{"Uniquefunname":"func isError(a interface","Funname":"matchers.isError","Returntype":"bool","Args":"a interface{}"},{"Uniquefunname":"func isFloat(a interface","Funname":"matchers.isFloat","Returntype":"bool","Args":"a interface{}"},{"Uniquefunname":"func isInteger(a interface","Funname":"matchers.isInteger","Returntype":"bool","Args":"a interface{}"},{"Uniquefunname":"func isMap(a interface","Funname":"matchers.isMap","Returntype":"bool","Args":"a interface{}"},{"Uniquefunname":"func isNil(a interface","Funname":"matchers.isNil","Returntype":"bool","Args":"a interface{}"},{"Uniquefunname":"func isNumber(a interface","Funname":"matchers.isNumber","Returntype":"bool","Args":"a interface{}"},{"Uniquefunname":"func isString(a interface","Funname":"matchers.isString","Returntype":"bool","Args":"a interface{}"},{"Uniquefunname":"func isUnsignedInteger(a interface","Funname":"matchers.isUnsignedInteger","Returntype":"bool","Args":"a interface{}"},{"Uniquefunname":"func lengthOf(a interface","Funname":"matchers.lengthOf","Returntype":"(int, bool)","Args":"a interface{}"},{"Uniquefunname":"func toFloat(a interface","Funname":"matchers.toFloat","Returntype":"float64","Args":"a interface{}"},{"Uniquefunname":"func toInteger(a interface","Funname":"matchers.toInteger","Returntype":"int64","Args":"a interface{}"},{"Uniquefunname":"func toString(a interface","Funname":"matchers.toString","Returntype":"(string, bool)","Args":"a interface{}"},{"Uniquefunname":"func toUnsignedInteger(a interface","Funname":"matchers.toUnsignedInteger","Returntype":"uint64","Args":"a interface{}"},{"Uniquefunname":"func toFloat(a interface","Funname":"toFloat","Returntype":"float64","Args":"a interface{}"},{"Uniquefunname":"func toInteger(a interface","Funname":"toInteger","Returntype":"int64","Args":"a interface{}"},{"Uniquefunname":"func toString(a interface","Funname":"toString","Returntype":"(string, bool)","Args":"a interface{}"},{"Uniquefunname":"func toUnsignedInteger(a interface","Funname":"toUnsignedInteger","Returntype":"uint64","Args":"a interface{}"}],"Records":[{"Name":"interface","Fields":["matchers.omegaMatcher"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/with_transform.go","Functions":[{"Uniquefunname":"func (m *WithTransformMatcher) FailureMessage(_ interface","Funname":"FailureMessage","Returntype":"(message string)","Args":"_ interface{}"},{"Uniquefunname":"func (m *WithTransformMatcher) Match(actual interface","Funname":"Match","Returntype":"(bool, error)","Args":"actual interface{}"},{"Uniquefunname":"func (m *WithTransformMatcher) MatchMayChangeInTheFuture(_ interface","Funname":"MatchMayChangeInTheFuture","Returntype":"bool","Args":"_ interface{}"},{"Uniquefunname":"func (m *WithTransformMatcher) NegatedFailureMessage(_ interface","Funname":"NegatedFailureMessage","Returntype":"(message string)","Args":"_ interface{}"},{"Uniquefunname":"func NewWithTransformMatcher(transform interface{}, matcher types.GomegaMatcher)*WithTransformMatcher","Funname":"NewWithTransformMatcher","Returntype":"*WithTransformMatcher","Args":"transform interface{}, matcher types.GomegaMatcher"},{"Uniquefunname":"func matchers.NewWithTransformMatcher(transform interface{}, matcher types.GomegaMatcher)*WithTransformMatcher","Funname":"matchers.NewWithTransformMatcher","Returntype":"*WithTransformMatcher","Args":"transform interface{}, matcher types.GomegaMatcher"},{"Uniquefunname":"func (m *WithTransformMatcher) FailureMessage(_ interface","Funname":"matchers.WithTransformMatcher.FailureMessage","Returntype":"(message string)","Args":"_ interface{}"},{"Uniquefunname":"func (m *WithTransformMatcher) Match(actual interface","Funname":"matchers.WithTransformMatcher.Match","Returntype":"(bool, error)","Args":"actual interface{}"},{"Uniquefunname":"func (m *WithTransformMatcher) MatchMayChangeInTheFuture(_ interface","Funname":"matchers.WithTransformMatcher.MatchMayChangeInTheFuture","Returntype":"bool","Args":"_ interface{}"},{"Uniquefunname":"func (m *WithTransformMatcher) NegatedFailureMessage(_ interface","Funname":"matchers.WithTransformMatcher.NegatedFailureMessage","Returntype":"(message string)","Args":"_ interface{}"}],"Records":[{"Name":"struct:matchers.WithTransformMatcher","Fields":["matchers.WithTransformMatcher.Matcher types.GomegaMatcher","matchers.WithTransformMatcher.Transform interface{}","matchers.WithTransformMatcher.transformArgType reflect.Type","matchers.WithTransformMatcher.transformedValue interface{}"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/with_transform_test.go","Functions":null,"Records":[{"Name":"var:matchers_test","Fields":["matchers_test._"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/support/goraph/bipartitegraph/bipartitegraph.go","Functions":[{"Uniquefunname":"func NewBipartiteGraph(leftValues, rightValues []interface{}, neighbours func(interface{}, interface{}) (bool, error))(*BipartiteGraph, error)","Funname":"NewBipartiteGraph","Returntype":"(*BipartiteGraph, error)","Args":"leftValues, rightValues []interface{}, neighbours func(interface{}, interface{}) (bool, error)"},{"Uniquefunname":"func bipartitegraph.NewBipartiteGraph(leftValues, rightValues []interface{}, neighbours func(interface{}, interface{}) (bool, error))(*BipartiteGraph, error)","Funname":"bipartitegraph.NewBipartiteGraph","Returntype":"(*BipartiteGraph, error)","Args":"leftValues, rightValues []interface{}, neighbours func(interface{}, interface{}) (bool, error)"}],"Records":[{"Name":"struct:bipartitegraph.BipartiteGraph","Fields":["bipartitegraph.BipartiteGraph.Edges EdgeSet","bipartitegraph.BipartiteGraph.Left NodeOrderedSet","bipartitegraph.BipartiteGraph.Right NodeOrderedSet"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/support/goraph/bipartitegraph/bipartitegraphmatching.go","Functions":[{"Uniquefunname":"func (bg *BipartiteGraph) LargestMatching() (matching EdgeSet)","Funname":"LargestMatching","Returntype":"(matching EdgeSet)","Args":""},{"Uniquefunname":"func (bg *BipartiteGraph) LargestMatching() (matching EdgeSet)","Funname":"bipartitegraph.BipartiteGraph.LargestMatching","Returntype":"(matching EdgeSet)","Args":""},{"Uniquefunname":"func bipartitegraph.BipartiteGraph.createSLAPGuideLayers(matching EdgeSet)(guideLayers []NodeOrderedSet)","Funname":"bipartitegraph.BipartiteGraph.createSLAPGuideLayers","Returntype":"(guideLayers []NodeOrderedSet)","Args":"matching EdgeSet"},{"Uniquefunname":"func bipartitegraph.BipartiteGraph.findDisjointSLAP(start Node, matching EdgeSet, guideLayers []NodeOrderedSet, used map[Node]bool,)([]Edge, bool)","Funname":"bipartitegraph.BipartiteGraph.findDisjointSLAP","Returntype":"([]Edge, bool)","Args":"start Node, matching EdgeSet, guideLayers []NodeOrderedSet, used map[Node]bool,"},{"Uniquefunname":"func bipartitegraph.BipartiteGraph.findDisjointSLAPHelper(currentNode Node, currentSLAP EdgeSet, currentLevel int, matching EdgeSet, guideLayers []NodeOrderedSet, used map[Node]bool,)(EdgeSet, bool)","Funname":"bipartitegraph.BipartiteGraph.findDisjointSLAPHelper","Returntype":"(EdgeSet, bool)","Args":"currentNode Node, currentSLAP EdgeSet, currentLevel int, matching EdgeSet, guideLayers []NodeOrderedSet, used map[Node]bool,"},{"Uniquefunname":"func (bg *BipartiteGraph) maximalDisjointSLAPCollection(matching EdgeSet) (result []EdgeSet)","Funname":"bipartitegraph.BipartiteGraph.maximalDisjointSLAPCollection","Returntype":"(result []EdgeSet)","Args":"matching EdgeSet"},{"Uniquefunname":"func createSLAPGuideLayers(matching EdgeSet)(guideLayers []NodeOrderedSet)","Funname":"createSLAPGuideLayers","Returntype":"(guideLayers []NodeOrderedSet)","Args":"matching EdgeSet"},{"Uniquefunname":"func findDisjointSLAP(start Node, matching EdgeSet, guideLayers []NodeOrderedSet, used map[Node]bool,)([]Edge, bool)","Funname":"findDisjointSLAP","Returntype":"([]Edge, bool)","Args":"start Node, matching EdgeSet, guideLayers []NodeOrderedSet, used map[Node]bool,"},{"Uniquefunname":"func findDisjointSLAPHelper(currentNode Node, currentSLAP EdgeSet, currentLevel int, matching EdgeSet, guideLayers []NodeOrderedSet, used map[Node]bool,)(EdgeSet, bool)","Funname":"findDisjointSLAPHelper","Returntype":"(EdgeSet, bool)","Args":"currentNode Node, currentSLAP EdgeSet, currentLevel int, matching EdgeSet, guideLayers []NodeOrderedSet, used map[Node]bool,"},{"Uniquefunname":"func (bg *BipartiteGraph) maximalDisjointSLAPCollection(matching EdgeSet) (result []EdgeSet)","Funname":"maximalDisjointSLAPCollection","Returntype":"(result []EdgeSet)","Args":"matching EdgeSet"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/support/goraph/edge/edge.go","Functions":[{"Uniquefunname":"func (ec EdgeSet) Contains(edge Edge) bool","Funname":"Contains","Returntype":"bool","Args":"edge Edge"},{"Uniquefunname":"func (ec EdgeSet) FindByNodes(node1, node2 Node) (Edge, bool)","Funname":"FindByNodes","Returntype":"(Edge, bool)","Args":"node1, node2 Node"},{"Uniquefunname":"func (ec EdgeSet) Free(node Node) bool","Funname":"Free","Returntype":"bool","Args":"node Node"},{"Uniquefunname":"func (ec EdgeSet) SymmetricDifference(ec2 EdgeSet) EdgeSet","Funname":"SymmetricDifference","Returntype":"EdgeSet","Args":"ec2 EdgeSet"},{"Uniquefunname":"func (ec EdgeSet) Contains(edge Edge) bool","Funname":"edge.EdgeSet.Contains","Returntype":"bool","Args":"edge Edge"},{"Uniquefunname":"func (ec EdgeSet) FindByNodes(node1, node2 Node) (Edge, bool)","Funname":"edge.EdgeSet.FindByNodes","Returntype":"(Edge, bool)","Args":"node1, node2 Node"},{"Uniquefunname":"func (ec EdgeSet) Free(node Node) bool","Funname":"edge.EdgeSet.Free","Returntype":"bool","Args":"node Node"},{"Uniquefunname":"func (ec EdgeSet) SymmetricDifference(ec2 EdgeSet) EdgeSet","Funname":"edge.EdgeSet.SymmetricDifference","Returntype":"EdgeSet","Args":"ec2 EdgeSet"}],"Records":[{"Name":"struct:edge.Edge","Fields":["edge.Edge.Node1 Node","edge.Edge.Node2 Node"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/support/goraph/node/node.go","Functions":null,"Records":[{"Name":"struct:node.Node","Fields":["node.Node.Id int"]}]}
{"Filepath":"vendor/src/github.com/onsi/gomega/matchers/support/goraph/util/util.go","Functions":[{"Uniquefunname":"func Odd(n int) bool","Funname":"Odd","Returntype":"bool","Args":"n int"},{"Uniquefunname":"func Odd(n int) bool","Funname":"util.Odd","Returntype":"bool","Args":"n int"}],"Records":null}
{"Filepath":"vendor/src/github.com/onsi/gomega/types/types.go","Functions":null,"Records":[{"Name":"struct:types.GomegaFailWrapper","Fields":["types.GomegaFailWrapper.Fail GomegaFailHandler","types.GomegaFailWrapper.TWithHelper TWithHelper"]},{"Name":"interface","Fields":["types.GomegaMatcher","types.GomegaTestingT","types.TWithHelper"]}]}
{"Filepath":"vendor/src/gopkg.in/check.v1/benchmark.go","Functions":[{"Uniquefunname":"func (c *C) ResetTimer()","Funname":"ResetTimer","Returntype":"","Args":""},{"Uniquefunname":"func (c *C) SetBytes(n int64)","Funname":"SetBytes","Returntype":"","Args":"n int64"},{"Uniquefunname":"func (c *C) StartTimer()","Funname":"StartTimer","Returntype":"","Args":""},{"Uniquefunname":"func (c *C) StopTimer()","Funname":"StopTimer","Returntype":"","Args":""},{"Uniquefunname":"func (c *C) ResetTimer()","Funname":"check.C.ResetTimer","Returntype":"","Args":""},{"Uniquefunname":"func (c *C) SetBytes(n int64)","Funname":"check.C.SetBytes","Returntype":"","Args":"n int64"},{"Uniquefunname":"func (c *C) StartTimer()","Funname":"check.C.StartTimer","Returntype":"","Args":""},{"Uniquefunname":"func (c *C) StopTimer()","Funname":"check.C.StopTimer","Returntype":"","Args":""},{"Uniquefunname":"func (c *C) mbPerSec() float64","Funname":"check.C.mbPerSec","Returntype":"float64","Args":""},{"Uniquefunname":"func (c *C) nsPerOp() int64","Funname":"check.C.nsPerOp","Returntype":"int64","Args":""},{"Uniquefunname":"func (c *C) timerString() string","Funname":"check.C.timerString","Returntype":"string","Args":""},{"Uniquefunname":"func max(x, y int) int","Funname":"check.max","Returntype":"int","Args":"x, y int"},{"Uniquefunname":"func min(x, y int) int","Funname":"check.min","Returntype":"int","Args":"x, y int"},{"Uniquefunname":"func roundDown10(n int) int","Funname":"check.roundDown10","Returntype":"int","Args":"n int"},{"Uniquefunname":"func roundUp(n int) int","Funname":"check.roundUp","Returntype":"int","Args":"n int"},{"Uniquefunname":"func max(x, y int) int","Funname":"max","Returntype":"int","Args":"x, y int"},{"Uniquefunname":"func (c *C) mbPerSec() float64","Funname":"mbPerSec","Returntype":"float64","Args":""},{"Uniquefunname":"func min(x, y int) int","Funname":"min","Returntype":"int","Args":"x, y int"},{"Uniquefunname":"func (c *C) nsPerOp() int64","Funname":"nsPerOp","Returntype":"int64","Args":""},{"Uniquefunname":"func roundDown10(n int) int","Funname":"roundDown10","Returntype":"int","Args":"n int"},{"Uniquefunname":"func roundUp(n int) int","Funname":"roundUp","Returntype":"int","Args":"n int"},{"Uniquefunname":"func (c *C) timerString() string","Funname":"timerString","Returntype":"string","Args":""}],"Records":[{"Name":"var:check","Fields":["check.memStats"]},{"Name":"struct:check.timer","Fields":["check.timer.N int","check.timer.benchTime time.Duration","check.timer.bytes int64","check.timer.duration time.Duration","check.timer.netAllocs uint64","check.timer.netBytes uint64","check.timer.start time.Time","check.timer.startAllocs uint64","check.timer.startBytes uint64","check.timer.timerOn bool"]}]}
{"Filepath":"vendor/src/gopkg.in/check.v1/benchmark_test.go","Functions":[{"Uniquefunname":"func (s *BenchmarkS) TestBasicTestTiming(c *C)","Funname":"TestBasicTestTiming","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *BenchmarkS) TestBenchmark(c *C)","Funname":"TestBenchmark","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *BenchmarkS) TestBenchmarkBytes(c *C)","Funname":"TestBenchmarkBytes","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *BenchmarkS) TestBenchmarkMem(c *C)","Funname":"TestBenchmarkMem","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *BenchmarkS) TestCountSuite(c *C)","Funname":"TestCountSuite","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *BenchmarkS) TestStreamTestTiming(c *C)","Funname":"TestStreamTestTiming","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *BenchmarkS) TestBasicTestTiming(c *C)","Funname":"check_test.BenchmarkS.TestBasicTestTiming","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *BenchmarkS) TestBenchmark(c *C)","Funname":"check_test.BenchmarkS.TestBenchmark","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *BenchmarkS) TestBenchmarkBytes(c *C)","Funname":"check_test.BenchmarkS.TestBenchmarkBytes","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *BenchmarkS) TestBenchmarkMem(c *C)","Funname":"check_test.BenchmarkS.TestBenchmarkMem","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *BenchmarkS) TestCountSuite(c *C)","Funname":"check_test.BenchmarkS.TestCountSuite","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *BenchmarkS) TestStreamTestTiming(c *C)","Funname":"check_test.BenchmarkS.TestStreamTestTiming","Returntype":"","Args":"c *C"}],"Records":[{"Name":"var:check_test","Fields":["check_test.benchmarkS"]}]}
{"Filepath":"vendor/src/gopkg.in/check.v1/bootstrap_test.go","Functions":[{"Uniquefunname":"func (s *BootstrapS) TestCountSuite(c *check.C)","Funname":"TestCountSuite","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *BootstrapS) TestFailedAndFail(c *check.C)","Funname":"TestFailedAndFail","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *BootstrapS) TestFailedAndSucceed(c *check.C)","Funname":"TestFailedAndSucceed","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *BootstrapS) TestLogAndGetTestLog(c *check.C)","Funname":"TestLogAndGetTestLog","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *BootstrapS) TestLogfAndGetTestLog(c *check.C)","Funname":"TestLogfAndGetTestLog","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *BootstrapS) TestRunDoesntShowSuccesses(c *check.C)","Funname":"TestRunDoesntShowSuccesses","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *BootstrapS) TestRunShowsErrors(c *check.C)","Funname":"TestRunShowsErrors","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *BootstrapS) TestCountSuite(c *check.C)","Funname":"check_test.BootstrapS.TestCountSuite","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *BootstrapS) TestFailedAndFail(c *check.C)","Funname":"check_test.BootstrapS.TestFailedAndFail","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *BootstrapS) TestFailedAndSucceed(c *check.C)","Funname":"check_test.BootstrapS.TestFailedAndSucceed","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *BootstrapS) TestLogAndGetTestLog(c *check.C)","Funname":"check_test.BootstrapS.TestLogAndGetTestLog","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *BootstrapS) TestLogfAndGetTestLog(c *check.C)","Funname":"check_test.BootstrapS.TestLogfAndGetTestLog","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *BootstrapS) TestRunDoesntShowSuccesses(c *check.C)","Funname":"check_test.BootstrapS.TestRunDoesntShowSuccesses","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *BootstrapS) TestRunShowsErrors(c *check.C)","Funname":"check_test.BootstrapS.TestRunShowsErrors","Returntype":"","Args":"c *check.C"}],"Records":[{"Name":"var:check_test","Fields":["check_test.boostrapS"]}]}
{"Filepath":"vendor/src/gopkg.in/check.v1/check.go","Functions":[{"Uniquefunname":"func (c *C) MkDir() string","Funname":"MkDir","Returntype":"string","Args":""},{"Uniquefunname":"func (method *methodType) PC() uintptr","Funname":"PC","Returntype":"uintptr","Args":""},{"Uniquefunname":"func (l *logger) String() string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func (method *methodType) String() string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func (l *logger) Write(buf []byte) (int, error)","Funname":"Write","Returntype":"(int, error)","Args":"buf []byte"},{"Uniquefunname":"func (ow *outputWriter) Write(content []byte) (n int, err error)","Funname":"Write","Returntype":"(n int, err error)","Args":"content []byte"},{"Uniquefunname":"func (ow *outputWriter) WriteCallProblem(label string, c *C)","Funname":"WriteCallProblem","Returntype":"","Args":"label string, c *C"},{"Uniquefunname":"func (ow *outputWriter) WriteCallStarted(label string, c *C)","Funname":"WriteCallStarted","Returntype":"","Args":"label string, c *C"},{"Uniquefunname":"func (ow *outputWriter) WriteCallSuccess(label string, c *C)","Funname":"WriteCallSuccess","Returntype":"","Args":"label string, c *C"},{"Uniquefunname":"func (l *logger) WriteTo(w io.Writer) (int64, error)","Funname":"WriteTo","Returntype":"(int64, error)","Args":"w io.Writer"},{"Uniquefunname":"func (tracker *resultTracker) _loopRoutine()","Funname":"_loopRoutine","Returntype":"","Args":""},{"Uniquefunname":"func (runner *suiteRunner) callDone(c *C)","Funname":"callDone","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (tracker *resultTracker) callDone(c *C)","Funname":"callDone","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (c *C) MkDir() string","Funname":"check.C.MkDir","Returntype":"string","Args":""},{"Uniquefunname":"func (c *C) log(args ...interface","Funname":"check.C.log","Returntype":"","Args":"args ...interface{}"},{"Uniquefunname":"func (c *C) logArgPanic(method *methodType, expectedType string)","Funname":"check.C.logArgPanic","Returntype":"","Args":"method *methodType, expectedType string"},{"Uniquefunname":"func (c *C) logCaller(skip int)","Funname":"check.C.logCaller","Returntype":"","Args":"skip int"},{"Uniquefunname":"func (c *C) logCode(path string, line int)","Funname":"check.C.logCode","Returntype":"","Args":"path string, line int"},{"Uniquefunname":"func (c *C) logMultiLine(s string)","Funname":"check.C.logMultiLine","Returntype":"","Args":"s string"},{"Uniquefunname":"func (c *C) logNewLine()","Funname":"check.C.logNewLine","Returntype":"","Args":""},{"Uniquefunname":"func (c *C) logPanic(skip int, value interface","Funname":"check.C.logPanic","Returntype":"","Args":"skip int, value interface{}"},{"Uniquefunname":"func (c *C) logSoftPanic(issue string)","Funname":"check.C.logSoftPanic","Returntype":"","Args":"issue string"},{"Uniquefunname":"func (c *C) logString(issue string)","Funname":"check.C.logString","Returntype":"","Args":"issue string"},{"Uniquefunname":"func (c *C) logValue(label string, value interface","Funname":"check.C.logValue","Returntype":"","Args":"label string, value interface{}"},{"Uniquefunname":"func (c *C) logf(format string, args ...interface","Funname":"check.C.logf","Returntype":"","Args":"format string, args ...interface{}"},{"Uniquefunname":"func (c *C) setStatus(s funcStatus)","Funname":"check.C.setStatus","Returntype":"","Args":"s funcStatus"},{"Uniquefunname":"func (c *C) status() funcStatus","Funname":"check.C.status","Returntype":"funcStatus","Args":""},{"Uniquefunname":"func (c *C) stopNow()","Funname":"check.C.stopNow","Returntype":"","Args":""},{"Uniquefunname":"func (c *C) writeLog(buf []byte)","Funname":"check.C.writeLog","Returntype":"","Args":"buf []byte"},{"Uniquefunname":"func hasStringOrError(x interface","Funname":"check.hasStringOrError","Returntype":"(ok bool)","Args":"x interface{}"},{"Uniquefunname":"func init()","Funname":"check.init","Returntype":"","Args":""},{"Uniquefunname":"func isMultiLine(s string) bool","Funname":"check.isMultiLine","Returntype":"bool","Args":"s string"},{"Uniquefunname":"func (l *logger) String() string","Funname":"check.logger.String","Returntype":"string","Args":""},{"Uniquefunname":"func (l *logger) Write(buf []byte) (int, error)","Funname":"check.logger.Write","Returntype":"(int, error)","Args":"buf []byte"},{"Uniquefunname":"func (l *logger) WriteTo(w io.Writer) (int64, error)","Funname":"check.logger.WriteTo","Returntype":"(int64, error)","Args":"w io.Writer"},{"Uniquefunname":"func (method *methodType) PC() uintptr","Funname":"check.methodType.PC","Returntype":"uintptr","Args":""},{"Uniquefunname":"func (method *methodType) String() string","Funname":"check.methodType.String","Returntype":"string","Args":""},{"Uniquefunname":"func (method *methodType) matches(re *regexp.Regexp) bool","Funname":"check.methodType.matches","Returntype":"bool","Args":"re *regexp.Regexp"},{"Uniquefunname":"func (method *methodType) suiteName() string","Funname":"check.methodType.suiteName","Returntype":"string","Args":""},{"Uniquefunname":"func newMethod(receiver reflect.Value, i int) *methodType","Funname":"check.newMethod","Returntype":"*methodType","Args":"receiver reflect.Value, i int"},{"Uniquefunname":"func newOutputWriter(writer io.Writer, stream, verbose bool) *outputWriter","Funname":"check.newOutputWriter","Returntype":"*outputWriter","Args":"writer io.Writer, stream, verbose bool"},{"Uniquefunname":"func newResultTracker() *resultTracker","Funname":"check.newResultTracker","Returntype":"*resultTracker","Args":""},{"Uniquefunname":"func newSuiteRunner(suite interface","Funname":"check.newSuiteRunner","Returntype":"*suiteRunner","Args":"suite interface{}, runConf *RunConf"},{"Uniquefunname":"func niceFuncName(pc uintptr) string","Funname":"check.niceFuncName","Returntype":"string","Args":"pc uintptr"},{"Uniquefunname":"func niceFuncPath(pc uintptr) string","Funname":"check.niceFuncPath","Returntype":"string","Args":"pc uintptr"},{"Uniquefunname":"func nicePath(path string) string","Funname":"check.nicePath","Returntype":"string","Args":"path string"},{"Uniquefunname":"func (ow *outputWriter) Write(content []byte) (n int, err error)","Funname":"check.outputWriter.Write","Returntype":"(n int, err error)","Args":"content []byte"},{"Uniquefunname":"func (ow *outputWriter) WriteCallProblem(label string, c *C)","Funname":"check.outputWriter.WriteCallProblem","Returntype":"","Args":"label string, c *C"},{"Uniquefunname":"func (ow *outputWriter) WriteCallStarted(label string, c *C)","Funname":"check.outputWriter.WriteCallStarted","Returntype":"","Args":"label string, c *C"},{"Uniquefunname":"func (ow *outputWriter) WriteCallSuccess(label string, c *C)","Funname":"check.outputWriter.WriteCallSuccess","Returntype":"","Args":"label string, c *C"},{"Uniquefunname":"func renderCallHeader(label string, c *C, prefix, suffix string) string","Funname":"check.renderCallHeader","Returntype":"string","Args":"label string, c *C, prefix, suffix string"},{"Uniquefunname":"func (tracker *resultTracker) _loopRoutine()","Funname":"check.resultTracker._loopRoutine","Returntype":"","Args":""},{"Uniquefunname":"func (tracker *resultTracker) callDone(c *C)","Funname":"check.resultTracker.callDone","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (tracker *resultTracker) expectCall(c *C)","Funname":"check.resultTracker.expectCall","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (tracker *resultTracker) start()","Funname":"check.resultTracker.start","Returntype":"","Args":""},{"Uniquefunname":"func (tracker *resultTracker) waitAndStop()","Funname":"check.resultTracker.waitAndStop","Returntype":"","Args":""},{"Uniquefunname":"func (runner *suiteRunner) callDone(c *C)","Funname":"check.suiteRunner.callDone","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (runner *suiteRunner) checkFixtureArgs() bool","Funname":"check.suiteRunner.checkFixtureArgs","Returntype":"bool","Args":""},{"Uniquefunname":"func check.suiteRunner.forkCall(method *methodType, kind funcKind, testName string, logb *logger, dispatcher func(c *C))*C","Funname":"check.suiteRunner.forkCall","Returntype":"*C","Args":"method *methodType, kind funcKind, testName string, logb *logger, dispatcher func(c *C)"},{"Uniquefunname":"func (runner *suiteRunner) forkTest(method *methodType) *C","Funname":"check.suiteRunner.forkTest","Returntype":"*C","Args":"method *methodType"},{"Uniquefunname":"func (runner *suiteRunner) reportCallDone(c *C)","Funname":"check.suiteRunner.reportCallDone","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (runner *suiteRunner) reportCallStarted(c *C)","Funname":"check.suiteRunner.reportCallStarted","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (runner *suiteRunner) run() *Result","Funname":"check.suiteRunner.run","Returntype":"*Result","Args":""},{"Uniquefunname":"func (runner *suiteRunner) runFixture(method *methodType, testName string, logb *logger) *C","Funname":"check.suiteRunner.runFixture","Returntype":"*C","Args":"method *methodType, testName string, logb *logger"},{"Uniquefunname":"func check.suiteRunner.runFixtureWithPanic(method *methodType, testName string, logb *logger, skipped *bool)*C","Funname":"check.suiteRunner.runFixtureWithPanic","Returntype":"*C","Args":"method *methodType, testName string, logb *logger, skipped *bool"},{"Uniquefunname":"func check.suiteRunner.runFunc(method *methodType, kind funcKind, testName string, logb *logger, dispatcher func(c *C))*C","Funname":"check.suiteRunner.runFunc","Returntype":"*C","Args":"method *methodType, kind funcKind, testName string, logb *logger, dispatcher func(c *C)"},{"Uniquefunname":"func (runner *suiteRunner) runTest(method *methodType) *C","Funname":"check.suiteRunner.runTest","Returntype":"*C","Args":"method *methodType"},{"Uniquefunname":"func (runner *suiteRunner) skipTests(status funcStatus, methods []*methodType)","Funname":"check.suiteRunner.skipTests","Returntype":"","Args":"status funcStatus, methods []*methodType"},{"Uniquefunname":"func (td *tempDir) newPath() string","Funname":"check.tempDir.newPath","Returntype":"string","Args":""},{"Uniquefunname":"func (td *tempDir) removeAll()","Funname":"check.tempDir.removeAll","Returntype":"","Args":""},{"Uniquefunname":"func (runner *suiteRunner) checkFixtureArgs() bool","Funname":"checkFixtureArgs","Returntype":"bool","Args":""},{"Uniquefunname":"func (tracker *resultTracker) expectCall(c *C)","Funname":"expectCall","Returntype":"","Args":"c *C"},{"Uniquefunname":"func forkCall(method *methodType, kind funcKind, testName string, logb *logger, dispatcher func(c *C))*C","Funname":"forkCall","Returntype":"*C","Args":"method *methodType, kind funcKind, testName string, logb *logger, dispatcher func(c *C)"},{"Uniquefunname":"func (runner *suiteRunner) forkTest(method *methodType) *C","Funname":"forkTest","Returntype":"*C","Args":"method *methodType"},{"Uniquefunname":"func hasStringOrError(x interface","Funname":"hasStringOrError","Returntype":"(ok bool)","Args":"x interface{}"},{"Uniquefunname":"func init()","Funname":"init","Returntype":"","Args":""},{"Uniquefunname":"func isMultiLine(s string) bool","Funname":"isMultiLine","Returntype":"bool","Args":"s string"},{"Uniquefunname":"func (c *C) log(args ...interface","Funname":"log","Returntype":"","Args":"args ...interface{}"},{"Uniquefunname":"func (c *C) logArgPanic(method *methodType, expectedType string)","Funname":"logArgPanic","Returntype":"","Args":"method *methodType, expectedType string"},{"Uniquefunname":"func (c *C) logCaller(skip int)","Funname":"logCaller","Returntype":"","Args":"skip int"},{"Uniquefunname":"func (c *C) logCode(path string, line int)","Funname":"logCode","Returntype":"","Args":"path string, line int"},{"Uniquefunname":"func (c *C) logMultiLine(s string)","Funname":"logMultiLine","Returntype":"","Args":"s string"},{"Uniquefunname":"func (c *C) logNewLine()","Funname":"logNewLine","Returntype":"","Args":""},{"Uniquefunname":"func (c *C) logPanic(skip int, value interface","Funname":"logPanic","Returntype":"","Args":"skip int, value interface{}"},{"Uniquefunname":"func (c *C) logSoftPanic(issue string)","Funname":"logSoftPanic","Returntype":"","Args":"issue string"},{"Uniquefunname":"func (c *C) logString(issue string)","Funname":"logString","Returntype":"","Args":"issue string"},{"Uniquefunname":"func (c *C) logValue(label string, value interface","Funname":"logValue","Returntype":"","Args":"label string, value interface{}"},{"Uniquefunname":"func (c *C) logf(format string, args ...interface","Funname":"logf","Returntype":"","Args":"format string, args ...interface{}"},{"Uniquefunname":"func (method *methodType) matches(re *regexp.Regexp) bool","Funname":"matches","Returntype":"bool","Args":"re *regexp.Regexp"},{"Uniquefunname":"func newMethod(receiver reflect.Value, i int) *methodType","Funname":"newMethod","Returntype":"*methodType","Args":"receiver reflect.Value, i int"},{"Uniquefunname":"func newOutputWriter(writer io.Writer, stream, verbose bool) *outputWriter","Funname":"newOutputWriter","Returntype":"*outputWriter","Args":"writer io.Writer, stream, verbose bool"},{"Uniquefunname":"func (td *tempDir) newPath() string","Funname":"newPath","Returntype":"string","Args":""},{"Uniquefunname":"func newResultTracker() *resultTracker","Funname":"newResultTracker","Returntype":"*resultTracker","Args":""},{"Uniquefunname":"func newSuiteRunner(suite interface","Funname":"newSuiteRunner","Returntype":"*suiteRunner","Args":"suite interface{}, runConf *RunConf"},{"Uniquefunname":"func niceFuncName(pc uintptr) string","Funname":"niceFuncName","Returntype":"string","Args":"pc uintptr"},{"Uniquefunname":"func niceFuncPath(pc uintptr) string","Funname":"niceFuncPath","Returntype":"string","Args":"pc uintptr"},{"Uniquefunname":"func nicePath(path string) string","Funname":"nicePath","Returntype":"string","Args":"path string"},{"Uniquefunname":"func (td *tempDir) removeAll()","Funname":"removeAll","Returntype":"","Args":""},{"Uniquefunname":"func renderCallHeader(label string, c *C, prefix, suffix string) string","Funname":"renderCallHeader","Returntype":"string","Args":"label string, c *C, prefix, suffix string"},{"Uniquefunname":"func (runner *suiteRunner) reportCallDone(c *C)","Funname":"reportCallDone","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (runner *suiteRunner) reportCallStarted(c *C)","Funname":"reportCallStarted","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (runner *suiteRunner) run() *Result","Funname":"run","Returntype":"*Result","Args":""},{"Uniquefunname":"func (runner *suiteRunner) runFixture(method *methodType, testName string, logb *logger) *C","Funname":"runFixture","Returntype":"*C","Args":"method *methodType, testName string, logb *logger"},{"Uniquefunname":"func runFixtureWithPanic(method *methodType, testName string, logb *logger, skipped *bool)*C","Funname":"runFixtureWithPanic","Returntype":"*C","Args":"method *methodType, testName string, logb *logger, skipped *bool"},{"Uniquefunname":"func runFunc(method *methodType, kind funcKind, testName string, logb *logger, dispatcher func(c *C))*C","Funname":"runFunc","Returntype":"*C","Args":"method *methodType, kind funcKind, testName string, logb *logger, dispatcher func(c *C)"},{"Uniquefunname":"func (runner *suiteRunner) runTest(method *methodType) *C","Funname":"runTest","Returntype":"*C","Args":"method *methodType"},{"Uniquefunname":"func (c *C) setStatus(s funcStatus)","Funname":"setStatus","Returntype":"","Args":"s funcStatus"},{"Uniquefunname":"func (runner *suiteRunner) skipTests(status funcStatus, methods []*methodType)","Funname":"skipTests","Returntype":"","Args":"status funcStatus, methods []*methodType"},{"Uniquefunname":"func (tracker *resultTracker) start()","Funname":"start","Returntype":"","Args":""},{"Uniquefunname":"func (c *C) status() funcStatus","Funname":"status","Returntype":"funcStatus","Args":""},{"Uniquefunname":"func (c *C) stopNow()","Funname":"stopNow","Returntype":"","Args":""},{"Uniquefunname":"func (method *methodType) suiteName() string","Funname":"suiteName","Returntype":"string","Args":""},{"Uniquefunname":"func (tracker *resultTracker) waitAndStop()","Funname":"waitAndStop","Returntype":"","Args":""},{"Uniquefunname":"func (c *C) writeLog(buf []byte)","Funname":"writeLog","Returntype":"","Args":"buf []byte"}],"Records":[{"Name":"struct:check.C","Fields":["check.C._status funcStatus","check.C.benchMem bool","check.C.done chan *C","check.C.kind funcKind","check.C.logb *logger","check.C.logw io.Writer","check.C.method *methodType","check.C.mustFail bool","check.C.reason string","check.C.startTime time.Time","check.C.tempDir *tempDir","check.C.testName string"]},{"Name":"struct:check.Result","Fields":["check.Result.ExpectedFailures int","check.Result.Failed int","check.Result.FixturePanicked int","check.Result.Missed int","check.Result.Panicked int","check.Result.RunError error","check.Result.Skipped int","check.Result.Succeeded int","check.Result.WorkDir string"]},{"Name":"struct:check.RunConf","Fields":["check.RunConf.Benchmark bool","check.RunConf.BenchmarkMem bool","check.RunConf.BenchmarkTime time.Duration","check.RunConf.Filter string","check.RunConf.KeepWorkDir bool","check.RunConf.Output io.Writer","check.RunConf.Stream bool","check.RunConf.Verbose bool"]},{"Name":"var:check","Fields":["check.asmGo","check.initWD","check.initWDErr","check.valueGo"]},{"Name":"const:check","Fields":["check.failedSt","check.fixtureKd","check.fixturePanickedSt","check.missedSt","check.panickedSt","check.skippedSt","check.succeededSt","check.testKd"]},{"Name":"struct:check.fixturePanic","Fields":["check.fixturePanic.method *methodType","check.fixturePanic.status funcStatus"]},{"Name":"struct:check.logger","Fields":["check.logger.writer bytes.Buffer"]},{"Name":"struct:check.methodType","Fields":["check.methodType.Info reflect.Method"]},{"Name":"struct:check.outputWriter","Fields":["check.outputWriter.Stream bool","check.outputWriter.Verbose bool","check.outputWriter.m sync.Mutex","check.outputWriter.writer io.Writer","check.outputWriter.wroteCallProblemLast bool"]},{"Name":"struct:check.resultTracker","Fields":["check.resultTracker._doneChan chan *C","check.resultTracker._expectChan chan *C","check.resultTracker._lastWasProblem bool","check.resultTracker._missed int","check.resultTracker._stopChan chan bool","check.resultTracker._waiting int","check.resultTracker.result Result"]},{"Name":"struct:check.suiteRunner","Fields":["check.suiteRunner.benchMem bool","check.suiteRunner.benchTime time.Duration","check.suiteRunner.keepDir bool","check.suiteRunner.output *outputWriter","check.suiteRunner.reportedProblemLast bool","check.suiteRunner.setUpSuite *methodType","check.suiteRunner.setUpTest *methodType","check.suiteRunner.suite interface{}","check.suiteRunner.tearDownSuite *methodType","check.suiteRunner.tearDownTest *methodType","check.suiteRunner.tempDir *tempDir","check.suiteRunner.tests []*methodType","check.suiteRunner.tracker *resultTracker"]},{"Name":"struct:check.tempDir","Fields":["check.tempDir.counter int","check.tempDir.path string"]}]}
{"Filepath":"vendor/src/gopkg.in/check.v1/check_test.go","Functions":[{"Uniquefunname":"func (s *FixtureHelper) Benchmark1(c *check.C)","Funname":"Benchmark1","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *FixtureHelper) Benchmark2(c *check.C)","Funname":"Benchmark2","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *FixtureHelper) Benchmark3(c *check.C)","Funname":"Benchmark3","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *FixtureHelper) SetUpSuite(c *check.C)","Funname":"SetUpSuite","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *FixtureHelper) SetUpTest(c *check.C)","Funname":"SetUpTest","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *FixtureHelper) TearDownSuite(c *check.C)","Funname":"TearDownSuite","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *FixtureHelper) TearDownTest(c *check.C)","Funname":"TearDownTest","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func Test(t *testing.T)","Funname":"Test","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func (s *FixtureHelper) Test1(c *check.C)","Funname":"Test1","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *FixtureHelper) Test2(c *check.C)","Funname":"Test2","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *FailHelper) TestLogAndFail(c *check.C)","Funname":"TestLogAndFail","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *SuccessHelper) TestLogAndSucceed(c *check.C)","Funname":"TestLogAndSucceed","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *String) Write(p []byte) (n int, err error)","Funname":"Write","Returntype":"(n int, err error)","Args":"p []byte"},{"Uniquefunname":"func checkEqualWrapper(c *check.C, obtained, expected interface","Funname":"checkEqualWrapper","Returntype":"(result bool, line int)","Args":"c *check.C, obtained, expected interface{}"},{"Uniquefunname":"func checkState(c *check.C, result interface","Funname":"checkState","Returntype":"","Args":"c *check.C, result interface{}, expected *expectedState"},{"Uniquefunname":"func (s *FailHelper) TestLogAndFail(c *check.C)","Funname":"check_test.FailHelper.TestLogAndFail","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *FixtureHelper) Benchmark1(c *check.C)","Funname":"check_test.FixtureHelper.Benchmark1","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *FixtureHelper) Benchmark2(c *check.C)","Funname":"check_test.FixtureHelper.Benchmark2","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *FixtureHelper) Benchmark3(c *check.C)","Funname":"check_test.FixtureHelper.Benchmark3","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *FixtureHelper) SetUpSuite(c *check.C)","Funname":"check_test.FixtureHelper.SetUpSuite","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *FixtureHelper) SetUpTest(c *check.C)","Funname":"check_test.FixtureHelper.SetUpTest","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *FixtureHelper) TearDownSuite(c *check.C)","Funname":"check_test.FixtureHelper.TearDownSuite","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *FixtureHelper) TearDownTest(c *check.C)","Funname":"check_test.FixtureHelper.TearDownTest","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *FixtureHelper) Test1(c *check.C)","Funname":"check_test.FixtureHelper.Test1","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *FixtureHelper) Test2(c *check.C)","Funname":"check_test.FixtureHelper.Test2","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *FixtureHelper) trace(name string, c *check.C)","Funname":"check_test.FixtureHelper.trace","Returntype":"","Args":"name string, c *check.C"},{"Uniquefunname":"func (s *String) Write(p []byte) (n int, err error)","Funname":"check_test.String.Write","Returntype":"(n int, err error)","Args":"p []byte"},{"Uniquefunname":"func (s *SuccessHelper) TestLogAndSucceed(c *check.C)","Funname":"check_test.SuccessHelper.TestLogAndSucceed","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func Test(t *testing.T)","Funname":"check_test.Test","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func checkEqualWrapper(c *check.C, obtained, expected interface","Funname":"check_test.checkEqualWrapper","Returntype":"(result bool, line int)","Args":"c *check.C, obtained, expected interface{}"},{"Uniquefunname":"func checkState(c *check.C, result interface","Funname":"check_test.checkState","Returntype":"","Args":"c *check.C, result interface{}, expected *expectedState"},{"Uniquefunname":"func critical(error string)","Funname":"check_test.critical","Returntype":"","Args":"error string"},{"Uniquefunname":"func getMyLine() int","Funname":"check_test.getMyLine","Returntype":"int","Args":""},{"Uniquefunname":"func critical(error string)","Funname":"critical","Returntype":"","Args":"error string"},{"Uniquefunname":"func getMyLine() int","Funname":"getMyLine","Returntype":"int","Args":""},{"Uniquefunname":"func (s *FixtureHelper) trace(name string, c *check.C)","Funname":"trace","Returntype":"","Args":"name string, c *check.C"}],"Records":[{"Name":"struct:check_test.FailHelper","Fields":["check_test.FailHelper.testLine int"]},{"Name":"struct:check_test.FixtureHelper","Fields":["check_test.FixtureHelper.bytes int64","check_test.FixtureHelper.calls []string","check_test.FixtureHelper.panicOn string","check_test.FixtureHelper.skip bool","check_test.FixtureHelper.skipOnN int","check_test.FixtureHelper.sleep time.Duration","check_test.FixtureHelper.sleepOn string"]},{"Name":"struct:check_test.String","Fields":["check_test.String.value string"]},{"Name":"struct:check_test.expectedState","Fields":["check_test.expectedState.failed bool","check_test.expectedState.log string","check_test.expectedState.name string","check_test.expectedState.result interface{}"]},{"Name":"var:check_test","Fields":["check_test.suitesRun"]},{"Name":"const:check_test","Fields":["check_test.suitesRunExpected"]}]}
{"Filepath":"vendor/src/gopkg.in/check.v1/checkers.go","Functions":[{"Uniquefunname":"func Check(params []interface{}, names []string)(result bool, error string)","Funname":"Check","Returntype":"(result bool, error string)","Args":"params []interface{}, names []string"},{"Uniquefunname":"func Check(params []interface{}, names []string)(result bool, error string)","Funname":"Check","Returntype":"(result bool, error string)","Args":"params []interface{}, names []string"},{"Uniquefunname":"func Check(params []interface{}, names []string)(result bool, error string)","Funname":"Check","Returntype":"(result bool, error string)","Args":"params []interface{}, names []string"},{"Uniquefunname":"func Check(params []interface{}, names []string)(result bool, error string)","Funname":"Check","Returntype":"(result bool, error string)","Args":"params []interface{}, names []string"},{"Uniquefunname":"func Check(params []interface{}, names []string)(result bool, error string)","Funname":"Check","Returntype":"(result bool, error string)","Args":"params []interface{}, names []string"},{"Uniquefunname":"func Check(params []interface{}, names []string)(result bool, error string)","Funname":"Check","Returntype":"(result bool, error string)","Args":"params []interface{}, names []string"},{"Uniquefunname":"func Check(params []interface{}, names []string)(result bool, error string)","Funname":"Check","Returntype":"(result bool, error string)","Args":"params []interface{}, names []string"},{"Uniquefunname":"func Check(params []interface{}, names []string)(result bool, error string)","Funname":"Check","Returntype":"(result bool, error string)","Args":"params []interface{}, names []string"},{"Uniquefunname":"func Check(params []interface{}, names []string)(result bool, error string)","Funname":"Check","Returntype":"(result bool, error string)","Args":"params []interface{}, names []string"},{"Uniquefunname":"func Check(params []interface{}, names []string)(result bool, errmsg string)","Funname":"Check","Returntype":"(result bool, errmsg string)","Args":"params []interface{}, names []string"},{"Uniquefunname":"func Check(params []interface{}, names []string)(result bool, error string)","Funname":"Check","Returntype":"(result bool, error string)","Args":"params []interface{}, names []string"},{"Uniquefunname":"func Check(params []interface{}, names []string)(result bool, errStr string)","Funname":"Check","Returntype":"(result bool, errStr string)","Args":"params []interface{}, names []string"},{"Uniquefunname":"func (c *comment) CheckCommentString() string","Funname":"CheckCommentString","Returntype":"string","Args":""},{"Uniquefunname":"func Commentf(format string, args ...interface","Funname":"Commentf","Returntype":"CommentInterface","Args":"format string, args ...interface{}"},{"Uniquefunname":"func (checker *notChecker) Info() *CheckerInfo","Funname":"Info","Returntype":"*CheckerInfo","Args":""},{"Uniquefunname":"func (info *CheckerInfo) Info() *CheckerInfo","Funname":"Info","Returntype":"*CheckerInfo","Args":""},{"Uniquefunname":"func Not(checker Checker) Checker","Funname":"Not","Returntype":"Checker","Args":"checker Checker"},{"Uniquefunname":"func (info *CheckerInfo) Info() *CheckerInfo","Funname":"check.CheckerInfo.Info","Returntype":"*CheckerInfo","Args":""},{"Uniquefunname":"func Commentf(format string, args ...interface","Funname":"check.Commentf","Returntype":"CommentInterface","Args":"format string, args ...interface{}"},{"Uniquefunname":"func Not(checker Checker) Checker","Funname":"check.Not","Returntype":"Checker","Args":"checker Checker"},{"Uniquefunname":"func (c *comment) CheckCommentString() string","Funname":"check.comment.CheckCommentString","Returntype":"string","Args":""},{"Uniquefunname":"func check.deepEqualsChecker.Check(params []interface{}, names []string)(result bool, error string)","Funname":"check.deepEqualsChecker.Check","Returntype":"(result bool, error string)","Args":"params []interface{}, names []string"},{"Uniquefunname":"func check.equalsChecker.Check(params []interface{}, names []string)(result bool, error string)","Funname":"check.equalsChecker.Check","Returntype":"(result bool, error string)","Args":"params []interface{}, names []string"},{"Uniquefunname":"func check.errorMatchesChecker.Check(params []interface{}, names []string)(result bool, errStr string)","Funname":"check.errorMatchesChecker.Check","Returntype":"(result bool, errStr string)","Args":"params []interface{}, names []string"},{"Uniquefunname":"func check.fitsTypeChecker.Check(params []interface{}, names []string)(result bool, error string)","Funname":"check.fitsTypeChecker.Check","Returntype":"(result bool, error string)","Args":"params []interface{}, names []string"},{"Uniquefunname":"func check.hasLenChecker.Check(params []interface{}, names []string)(result bool, error string)","Funname":"check.hasLenChecker.Check","Returntype":"(result bool, error string)","Args":"params []interface{}, names []string"},{"Uniquefunname":"func check.implementsChecker.Check(params []interface{}, names []string)(result bool, error string)","Funname":"check.implementsChecker.Check","Returntype":"(result bool, error string)","Args":"params []interface{}, names []string"},{"Uniquefunname":"func isNil(obtained interface","Funname":"check.isNil","Returntype":"(result bool)","Args":"obtained interface{}"},{"Uniquefunname":"func check.isNilChecker.Check(params []interface{}, names []string)(result bool, error string)","Funname":"check.isNilChecker.Check","Returntype":"(result bool, error string)","Args":"params []interface{}, names []string"},{"Uniquefunname":"func matches(value, regex interface","Funname":"check.matches","Returntype":"(result bool, error string)","Args":"value, regex interface{}"},{"Uniquefunname":"func check.matchesChecker.Check(params []interface{}, names []string)(result bool, error string)","Funname":"check.matchesChecker.Check","Returntype":"(result bool, error string)","Args":"params []interface{}, names []string"},{"Uniquefunname":"func check.notChecker.Check(params []interface{}, names []string)(result bool, error string)","Funname":"check.notChecker.Check","Returntype":"(result bool, error string)","Args":"params []interface{}, names []string"},{"Uniquefunname":"func (checker *notChecker) Info() *CheckerInfo","Funname":"check.notChecker.Info","Returntype":"*CheckerInfo","Args":""},{"Uniquefunname":"func check.notNilChecker.Check(params []interface{}, names []string)(result bool, error string)","Funname":"check.notNilChecker.Check","Returntype":"(result bool, error string)","Args":"params []interface{}, names []string"},{"Uniquefunname":"func check.panicMatchesChecker.Check(params []interface{}, names []string)(result bool, errmsg string)","Funname":"check.panicMatchesChecker.Check","Returntype":"(result bool, errmsg string)","Args":"params []interface{}, names []string"},{"Uniquefunname":"func check.panicsChecker.Check(params []interface{}, names []string)(result bool, error string)","Funname":"check.panicsChecker.Check","Returntype":"(result bool, error string)","Args":"params []interface{}, names []string"},{"Uniquefunname":"func isNil(obtained interface","Funname":"isNil","Returntype":"(result bool)","Args":"obtained interface{}"},{"Uniquefunname":"func matches(value, regex interface","Funname":"matches","Returntype":"(result bool, error string)","Args":"value, regex interface{}"}],"Records":[{"Name":"interface","Fields":["check.Checker","check.CommentInterface"]},{"Name":"struct:check.CheckerInfo","Fields":["check.CheckerInfo.Name string","check.CheckerInfo.Params []string"]},{"Name":"var:check","Fields":["check.DeepEquals","check.Equals","check.ErrorMatches","check.FitsTypeOf","check.HasLen","check.Implements","check.IsNil","check.Matches","check.NotNil","check.PanicMatches","check.Panics"]},{"Name":"struct:check.comment","Fields":["check.comment.args []interface{}","check.comment.format string"]},{"Name":"struct:check.notChecker","Fields":["check.notChecker.sub Checker"]}]}
{"Filepath":"vendor/src/gopkg.in/check.v1/checkers_test.go","Functions":[{"Uniquefunname":"func (s *CheckersS) TestComment(c *check.C)","Funname":"TestComment","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *CheckersS) TestDeepEquals(c *check.C)","Funname":"TestDeepEquals","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *CheckersS) TestEquals(c *check.C)","Funname":"TestEquals","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *CheckersS) TestErrorMatches(c *check.C)","Funname":"TestErrorMatches","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *CheckersS) TestFitsTypeOf(c *check.C)","Funname":"TestFitsTypeOf","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *CheckersS) TestHasLen(c *check.C)","Funname":"TestHasLen","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *CheckersS) TestImplements(c *check.C)","Funname":"TestImplements","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *CheckersS) TestIsNil(c *check.C)","Funname":"TestIsNil","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *CheckersS) TestMatches(c *check.C)","Funname":"TestMatches","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *CheckersS) TestNot(c *check.C)","Funname":"TestNot","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *CheckersS) TestNotNil(c *check.C)","Funname":"TestNotNil","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *CheckersS) TestPanicMatches(c *check.C)","Funname":"TestPanicMatches","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *CheckersS) TestPanics(c *check.C)","Funname":"TestPanics","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *CheckersS) TestComment(c *check.C)","Funname":"check_test.CheckersS.TestComment","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *CheckersS) TestDeepEquals(c *check.C)","Funname":"check_test.CheckersS.TestDeepEquals","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *CheckersS) TestEquals(c *check.C)","Funname":"check_test.CheckersS.TestEquals","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *CheckersS) TestErrorMatches(c *check.C)","Funname":"check_test.CheckersS.TestErrorMatches","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *CheckersS) TestFitsTypeOf(c *check.C)","Funname":"check_test.CheckersS.TestFitsTypeOf","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *CheckersS) TestHasLen(c *check.C)","Funname":"check_test.CheckersS.TestHasLen","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *CheckersS) TestImplements(c *check.C)","Funname":"check_test.CheckersS.TestImplements","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *CheckersS) TestIsNil(c *check.C)","Funname":"check_test.CheckersS.TestIsNil","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *CheckersS) TestMatches(c *check.C)","Funname":"check_test.CheckersS.TestMatches","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *CheckersS) TestNot(c *check.C)","Funname":"check_test.CheckersS.TestNot","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *CheckersS) TestNotNil(c *check.C)","Funname":"check_test.CheckersS.TestNotNil","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *CheckersS) TestPanicMatches(c *check.C)","Funname":"check_test.CheckersS.TestPanicMatches","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *CheckersS) TestPanics(c *check.C)","Funname":"check_test.CheckersS.TestPanics","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func check_test.testCheck(c *check.C, checker check.Checker, result bool, error string, params ...interface{})([]interface{}, []string)","Funname":"check_test.testCheck","Returntype":"([]interface{}, []string)","Args":"c *check.C, checker check.Checker, result bool, error string, params ...interface{}"},{"Uniquefunname":"func testInfo(c *check.C, checker check.Checker, name string, paramNames []string)","Funname":"check_test.testInfo","Returntype":"","Args":"c *check.C, checker check.Checker, name string, paramNames []string"},{"Uniquefunname":"func testCheck(c *check.C, checker check.Checker, result bool, error string, params ...interface{})([]interface{}, []string)","Funname":"testCheck","Returntype":"([]interface{}, []string)","Args":"c *check.C, checker check.Checker, result bool, error string, params ...interface{}"},{"Uniquefunname":"func testInfo(c *check.C, checker check.Checker, name string, paramNames []string)","Funname":"testInfo","Returntype":"","Args":"c *check.C, checker check.Checker, name string, paramNames []string"}],"Records":[{"Name":"var:check_test","Fields":["check_test._"]},{"Name":"struct:check_test.simpleStruct","Fields":["check_test.simpleStruct.i int"]}]}
{"Filepath":"vendor/src/gopkg.in/check.v1/export_test.go","Functions":[{"Uniquefunname":"func Indent(s, with string) string","Funname":"Indent","Returntype":"string","Args":"s, with string"},{"Uniquefunname":"func PrintLine(filename string, line int) (string, error)","Funname":"PrintLine","Returntype":"(string, error)","Args":"filename string, line int"},{"Uniquefunname":"func Indent(s, with string) string","Funname":"check.Indent","Returntype":"string","Args":"s, with string"},{"Uniquefunname":"func PrintLine(filename string, line int) (string, error)","Funname":"check.PrintLine","Returntype":"(string, error)","Args":"filename string, line int"}],"Records":null}
{"Filepath":"vendor/src/gopkg.in/check.v1/fixture_test.go","Functions":[{"Uniquefunname":"func (s *FixtureCheckHelper) SetUpSuite(c *C)","Funname":"SetUpSuite","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *NoTestsHelper) SetUpSuite(c *C)","Funname":"SetUpSuite","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *WrongSetUpSuiteArgCountHelper) SetUpSuite(c *C, i int)","Funname":"SetUpSuite","Returntype":"","Args":"c *C, i int"},{"Uniquefunname":"func (s *WrongSetUpSuiteArgHelper) SetUpSuite(t int)","Funname":"SetUpSuite","Returntype":"","Args":"t int"},{"Uniquefunname":"func (s *FixtureCheckHelper) SetUpTest(c *C)","Funname":"SetUpTest","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *FixtureLogHelper) SetUpTest(c *C)","Funname":"SetUpTest","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *WrongSetUpTestArgCountHelper) SetUpTest(c *C, i int)","Funname":"SetUpTest","Returntype":"","Args":"c *C, i int"},{"Uniquefunname":"func (s *WrongSetUpTestArgHelper) SetUpTest(t int)","Funname":"SetUpTest","Returntype":"","Args":"t int"},{"Uniquefunname":"func (s *NoTestsHelper) TearDownSuite(c *C)","Funname":"TearDownSuite","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *FixtureLogHelper) TearDownTest(c *C)","Funname":"TearDownTest","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *FixtureCheckHelper) Test(c *C)","Funname":"Test","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *FixtureLogHelper) Test(c *C)","Funname":"Test","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *WrongTestArgCountHelper) Test1(c *C, i int)","Funname":"Test1","Returntype":"","Args":"c *C, i int"},{"Uniquefunname":"func (s *WrongTestArgHelper) Test1(t int)","Funname":"Test1","Returntype":"","Args":"t int"},{"Uniquefunname":"func (s *FixtureS) TestCountSuite(c *C)","Funname":"TestCountSuite","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *FixtureS) TestFixtureDoesntRunWithoutTests(c *C)","Funname":"TestFixtureDoesntRunWithoutTests","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *FixtureS) TestFixtureLogging(c *C)","Funname":"TestFixtureLogging","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *FixtureS) TestOrder(c *C)","Funname":"TestOrder","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *FixtureS) TestPanicOnSetUpSuite(c *C)","Funname":"TestPanicOnSetUpSuite","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *FixtureS) TestPanicOnSetUpTest(c *C)","Funname":"TestPanicOnSetUpTest","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *FixtureS) TestPanicOnTearDownSuite(c *C)","Funname":"TestPanicOnTearDownSuite","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *FixtureS) TestPanicOnTearDownTest(c *C)","Funname":"TestPanicOnTearDownTest","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *FixtureS) TestPanicOnTest(c *C)","Funname":"TestPanicOnTest","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *FixtureS) TestPanicOnWrongSetUpSuiteArg(c *C)","Funname":"TestPanicOnWrongSetUpSuiteArg","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *FixtureS) TestPanicOnWrongSetUpSuiteArgCount(c *C)","Funname":"TestPanicOnWrongSetUpSuiteArgCount","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *FixtureS) TestPanicOnWrongSetUpTestArg(c *C)","Funname":"TestPanicOnWrongSetUpTestArg","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *FixtureS) TestPanicOnWrongSetUpTestArgCount(c *C)","Funname":"TestPanicOnWrongSetUpTestArgCount","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *FixtureS) TestPanicOnWrongTestArg(c *C)","Funname":"TestPanicOnWrongTestArg","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *FixtureS) TestPanicOnWrongTestArgCount(c *C)","Funname":"TestPanicOnWrongTestArgCount","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *FixtureS) TestSetUpSuiteAssert(c *C)","Funname":"TestSetUpSuiteAssert","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *FixtureS) TestSetUpSuiteCheck(c *C)","Funname":"TestSetUpSuiteCheck","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *FixtureS) TestSkipSuite(c *C)","Funname":"TestSkipSuite","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *FixtureS) TestSkipTest(c *C)","Funname":"TestSkipTest","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *FixtureCheckHelper) SetUpSuite(c *C)","Funname":"check_test.FixtureCheckHelper.SetUpSuite","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *FixtureCheckHelper) SetUpTest(c *C)","Funname":"check_test.FixtureCheckHelper.SetUpTest","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *FixtureCheckHelper) Test(c *C)","Funname":"check_test.FixtureCheckHelper.Test","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *FixtureLogHelper) SetUpTest(c *C)","Funname":"check_test.FixtureLogHelper.SetUpTest","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *FixtureLogHelper) TearDownTest(c *C)","Funname":"check_test.FixtureLogHelper.TearDownTest","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *FixtureLogHelper) Test(c *C)","Funname":"check_test.FixtureLogHelper.Test","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *FixtureS) TestCountSuite(c *C)","Funname":"check_test.FixtureS.TestCountSuite","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *FixtureS) TestFixtureDoesntRunWithoutTests(c *C)","Funname":"check_test.FixtureS.TestFixtureDoesntRunWithoutTests","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *FixtureS) TestFixtureLogging(c *C)","Funname":"check_test.FixtureS.TestFixtureLogging","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *FixtureS) TestOrder(c *C)","Funname":"check_test.FixtureS.TestOrder","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *FixtureS) TestPanicOnSetUpSuite(c *C)","Funname":"check_test.FixtureS.TestPanicOnSetUpSuite","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *FixtureS) TestPanicOnSetUpTest(c *C)","Funname":"check_test.FixtureS.TestPanicOnSetUpTest","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *FixtureS) TestPanicOnTearDownSuite(c *C)","Funname":"check_test.FixtureS.TestPanicOnTearDownSuite","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *FixtureS) TestPanicOnTearDownTest(c *C)","Funname":"check_test.FixtureS.TestPanicOnTearDownTest","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *FixtureS) TestPanicOnTest(c *C)","Funname":"check_test.FixtureS.TestPanicOnTest","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *FixtureS) TestPanicOnWrongSetUpSuiteArg(c *C)","Funname":"check_test.FixtureS.TestPanicOnWrongSetUpSuiteArg","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *FixtureS) TestPanicOnWrongSetUpSuiteArgCount(c *C)","Funname":"check_test.FixtureS.TestPanicOnWrongSetUpSuiteArgCount","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *FixtureS) TestPanicOnWrongSetUpTestArg(c *C)","Funname":"check_test.FixtureS.TestPanicOnWrongSetUpTestArg","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *FixtureS) TestPanicOnWrongSetUpTestArgCount(c *C)","Funname":"check_test.FixtureS.TestPanicOnWrongSetUpTestArgCount","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *FixtureS) TestPanicOnWrongTestArg(c *C)","Funname":"check_test.FixtureS.TestPanicOnWrongTestArg","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *FixtureS) TestPanicOnWrongTestArgCount(c *C)","Funname":"check_test.FixtureS.TestPanicOnWrongTestArgCount","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *FixtureS) TestSetUpSuiteAssert(c *C)","Funname":"check_test.FixtureS.TestSetUpSuiteAssert","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *FixtureS) TestSetUpSuiteCheck(c *C)","Funname":"check_test.FixtureS.TestSetUpSuiteCheck","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *FixtureS) TestSkipSuite(c *C)","Funname":"check_test.FixtureS.TestSkipSuite","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *FixtureS) TestSkipTest(c *C)","Funname":"check_test.FixtureS.TestSkipTest","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *NoTestsHelper) SetUpSuite(c *C)","Funname":"check_test.NoTestsHelper.SetUpSuite","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *NoTestsHelper) TearDownSuite(c *C)","Funname":"check_test.NoTestsHelper.TearDownSuite","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *WrongSetUpSuiteArgCountHelper) SetUpSuite(c *C, i int)","Funname":"check_test.WrongSetUpSuiteArgCountHelper.SetUpSuite","Returntype":"","Args":"c *C, i int"},{"Uniquefunname":"func (s *WrongSetUpSuiteArgHelper) SetUpSuite(t int)","Funname":"check_test.WrongSetUpSuiteArgHelper.SetUpSuite","Returntype":"","Args":"t int"},{"Uniquefunname":"func (s *WrongSetUpTestArgCountHelper) SetUpTest(c *C, i int)","Funname":"check_test.WrongSetUpTestArgCountHelper.SetUpTest","Returntype":"","Args":"c *C, i int"},{"Uniquefunname":"func (s *WrongSetUpTestArgHelper) SetUpTest(t int)","Funname":"check_test.WrongSetUpTestArgHelper.SetUpTest","Returntype":"","Args":"t int"},{"Uniquefunname":"func (s *WrongTestArgCountHelper) Test1(c *C, i int)","Funname":"check_test.WrongTestArgCountHelper.Test1","Returntype":"","Args":"c *C, i int"},{"Uniquefunname":"func (s *WrongTestArgHelper) Test1(t int)","Funname":"check_test.WrongTestArgHelper.Test1","Returntype":"","Args":"t int"}],"Records":[{"Name":"struct:check_test.FixtureCheckHelper","Fields":["check_test.FixtureCheckHelper.completed bool","check_test.FixtureCheckHelper.fail string"]},{"Name":"struct:check_test.FixtureLogHelper","Fields":["check_test.FixtureLogHelper.c *C"]},{"Name":"struct:check_test.NoTestsHelper","Fields":["check_test.NoTestsHelper.hasRun bool"]},{"Name":"var:check_test","Fields":["check_test.fixtureS"]}]}
{"Filepath":"vendor/src/gopkg.in/check.v1/foundation_test.go","Functions":[{"Uniquefunname":"func (s *FoundationS) TestCallerLoggingInDifferentFile(c *check.C)","Funname":"TestCallerLoggingInDifferentFile","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *FoundationS) TestCallerLoggingInsideTest(c *check.C)","Funname":"TestCallerLoggingInsideTest","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *EmbeddedS) TestCountSuite(c *check.C)","Funname":"TestCountSuite","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *FoundationS) TestCountSuite(c *check.C)","Funname":"TestCountSuite","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *FoundationS) TestError(c *check.C)","Funname":"TestError","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *FoundationS) TestErrorf(c *check.C)","Funname":"TestErrorf","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *FoundationS) TestExpectFailureFail(c *check.C)","Funname":"TestExpectFailureFail","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *FoundationS) TestExpectFailureSucceed(c *check.C)","Funname":"TestExpectFailureSucceed","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *FoundationS) TestExpectFailureSucceedVerbose(c *check.C)","Funname":"TestExpectFailureSucceedVerbose","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *ExpectFailureFailHelper) TestFail(c *check.C)","Funname":"TestFail","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *SkipTestHelper) TestFail(c *check.C)","Funname":"TestFail","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *FoundationS) TestFailNow(c *check.C)","Funname":"TestFailNow","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *FoundationS) TestFailureHeader(c *check.C)","Funname":"TestFailureHeader","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *FoundationS) TestFatal(c *check.C)","Funname":"TestFatal","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *FoundationS) TestFatalf(c *check.C)","Funname":"TestFatalf","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *EmbeddedInternalS) TestMethod(c *check.C)","Funname":"TestMethod","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *EmbeddedS) TestMethod(c *check.C)","Funname":"TestMethod","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *BootstrapS) TestMinLogger(c *check.C)","Funname":"TestMinLogger","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *FoundationS) TestSkip(c *check.C)","Funname":"TestSkip","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *FoundationS) TestSkipVerbose(c *check.C)","Funname":"TestSkipVerbose","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *ExpectFailureSucceedHelper) TestSucceed(c *check.C)","Funname":"TestSucceed","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *FoundationS) TestSucceedNow(c *check.C)","Funname":"TestSucceedNow","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *BootstrapS) TestMinLogger(c *check.C)","Funname":"check_test.BootstrapS.TestMinLogger","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *EmbeddedInternalS) TestMethod(c *check.C)","Funname":"check_test.EmbeddedInternalS.TestMethod","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *EmbeddedS) TestCountSuite(c *check.C)","Funname":"check_test.EmbeddedS.TestCountSuite","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *EmbeddedS) TestMethod(c *check.C)","Funname":"check_test.EmbeddedS.TestMethod","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *ExpectFailureFailHelper) TestFail(c *check.C)","Funname":"check_test.ExpectFailureFailHelper.TestFail","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *ExpectFailureSucceedHelper) TestSucceed(c *check.C)","Funname":"check_test.ExpectFailureSucceedHelper.TestSucceed","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *FoundationS) TestCallerLoggingInDifferentFile(c *check.C)","Funname":"check_test.FoundationS.TestCallerLoggingInDifferentFile","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *FoundationS) TestCallerLoggingInsideTest(c *check.C)","Funname":"check_test.FoundationS.TestCallerLoggingInsideTest","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *FoundationS) TestCountSuite(c *check.C)","Funname":"check_test.FoundationS.TestCountSuite","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *FoundationS) TestError(c *check.C)","Funname":"check_test.FoundationS.TestError","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *FoundationS) TestErrorf(c *check.C)","Funname":"check_test.FoundationS.TestErrorf","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *FoundationS) TestExpectFailureFail(c *check.C)","Funname":"check_test.FoundationS.TestExpectFailureFail","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *FoundationS) TestExpectFailureSucceed(c *check.C)","Funname":"check_test.FoundationS.TestExpectFailureSucceed","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *FoundationS) TestExpectFailureSucceedVerbose(c *check.C)","Funname":"check_test.FoundationS.TestExpectFailureSucceedVerbose","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *FoundationS) TestFailNow(c *check.C)","Funname":"check_test.FoundationS.TestFailNow","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *FoundationS) TestFailureHeader(c *check.C)","Funname":"check_test.FoundationS.TestFailureHeader","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *FoundationS) TestFatal(c *check.C)","Funname":"check_test.FoundationS.TestFatal","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *FoundationS) TestFatalf(c *check.C)","Funname":"check_test.FoundationS.TestFatalf","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *FoundationS) TestSkip(c *check.C)","Funname":"check_test.FoundationS.TestSkip","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *FoundationS) TestSkipVerbose(c *check.C)","Funname":"check_test.FoundationS.TestSkipVerbose","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *FoundationS) TestSucceedNow(c *check.C)","Funname":"check_test.FoundationS.TestSucceedNow","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *SkipTestHelper) TestFail(c *check.C)","Funname":"check_test.SkipTestHelper.TestFail","Returntype":"","Args":"c *check.C"}],"Records":[{"Name":"struct:check_test.EmbeddedInternalS","Fields":["check_test.EmbeddedInternalS.called bool"]},{"Name":"var:check_test","Fields":["check_test.embeddedS","check_test.foundationS"]},{"Name":"interface","Fields":["check_test.minLogger"]}]}
{"Filepath":"vendor/src/gopkg.in/check.v1/helpers.go","Functions":[{"Uniquefunname":"func (c *C) Assert(obtained interface","Funname":"Assert","Returntype":"","Args":"obtained interface{}, checker Checker, args ...interface{}"},{"Uniquefunname":"func (c *C) Check(obtained interface","Funname":"Check","Returntype":"bool","Args":"obtained interface{}, checker Checker, args ...interface{}"},{"Uniquefunname":"func (c *C) Error(args ...interface","Funname":"Error","Returntype":"","Args":"args ...interface{}"},{"Uniquefunname":"func (c *C) Errorf(format string, args ...interface","Funname":"Errorf","Returntype":"","Args":"format string, args ...interface{}"},{"Uniquefunname":"func (c *C) ExpectFailure(reason string)","Funname":"ExpectFailure","Returntype":"","Args":"reason string"},{"Uniquefunname":"func (c *C) Fail()","Funname":"Fail","Returntype":"","Args":""},{"Uniquefunname":"func (c *C) FailNow()","Funname":"FailNow","Returntype":"","Args":""},{"Uniquefunname":"func (c *C) Failed() bool","Funname":"Failed","Returntype":"bool","Args":""},{"Uniquefunname":"func (c *C) Fatal(args ...interface","Funname":"Fatal","Returntype":"","Args":"args ...interface{}"},{"Uniquefunname":"func (c *C) Fatalf(format string, args ...interface","Funname":"Fatalf","Returntype":"","Args":"format string, args ...interface{}"},{"Uniquefunname":"func (c *C) GetTestLog() string","Funname":"GetTestLog","Returntype":"string","Args":""},{"Uniquefunname":"func (c *C) Log(args ...interface","Funname":"Log","Returntype":"","Args":"args ...interface{}"},{"Uniquefunname":"func (c *C) Logf(format string, args ...interface","Funname":"Logf","Returntype":"","Args":"format string, args ...interface{}"},{"Uniquefunname":"func (c *C) Output(calldepth int, s string) error","Funname":"Output","Returntype":"error","Args":"calldepth int, s string"},{"Uniquefunname":"func (c *C) Skip(reason string)","Funname":"Skip","Returntype":"","Args":"reason string"},{"Uniquefunname":"func (c *C) Succeed()","Funname":"Succeed","Returntype":"","Args":""},{"Uniquefunname":"func (c *C) SucceedNow()","Funname":"SucceedNow","Returntype":"","Args":""},{"Uniquefunname":"func (c *C) TestName() string","Funname":"TestName","Returntype":"string","Args":""},{"Uniquefunname":"func (c *C) Assert(obtained interface","Funname":"check.C.Assert","Returntype":"","Args":"obtained interface{}, checker Checker, args ...interface{}"},{"Uniquefunname":"func (c *C) Check(obtained interface","Funname":"check.C.Check","Returntype":"bool","Args":"obtained interface{}, checker Checker, args ...interface{}"},{"Uniquefunname":"func (c *C) Error(args ...interface","Funname":"check.C.Error","Returntype":"","Args":"args ...interface{}"},{"Uniquefunname":"func (c *C) Errorf(format string, args ...interface","Funname":"check.C.Errorf","Returntype":"","Args":"format string, args ...interface{}"},{"Uniquefunname":"func (c *C) ExpectFailure(reason string)","Funname":"check.C.ExpectFailure","Returntype":"","Args":"reason string"},{"Uniquefunname":"func (c *C) Fail()","Funname":"check.C.Fail","Returntype":"","Args":""},{"Uniquefunname":"func (c *C) FailNow()","Funname":"check.C.FailNow","Returntype":"","Args":""},{"Uniquefunname":"func (c *C) Failed() bool","Funname":"check.C.Failed","Returntype":"bool","Args":""},{"Uniquefunname":"func (c *C) Fatal(args ...interface","Funname":"check.C.Fatal","Returntype":"","Args":"args ...interface{}"},{"Uniquefunname":"func (c *C) Fatalf(format string, args ...interface","Funname":"check.C.Fatalf","Returntype":"","Args":"format string, args ...interface{}"},{"Uniquefunname":"func (c *C) GetTestLog() string","Funname":"check.C.GetTestLog","Returntype":"string","Args":""},{"Uniquefunname":"func (c *C) Log(args ...interface","Funname":"check.C.Log","Returntype":"","Args":"args ...interface{}"},{"Uniquefunname":"func (c *C) Logf(format string, args ...interface","Funname":"check.C.Logf","Returntype":"","Args":"format string, args ...interface{}"},{"Uniquefunname":"func (c *C) Output(calldepth int, s string) error","Funname":"check.C.Output","Returntype":"error","Args":"calldepth int, s string"},{"Uniquefunname":"func (c *C) Skip(reason string)","Funname":"check.C.Skip","Returntype":"","Args":"reason string"},{"Uniquefunname":"func (c *C) Succeed()","Funname":"check.C.Succeed","Returntype":"","Args":""},{"Uniquefunname":"func (c *C) SucceedNow()","Funname":"check.C.SucceedNow","Returntype":"","Args":""},{"Uniquefunname":"func (c *C) TestName() string","Funname":"check.C.TestName","Returntype":"string","Args":""},{"Uniquefunname":"func check.C.internalCheck(funcName string, obtained interface{}, checker Checker, args ...interface{})bool","Funname":"check.C.internalCheck","Returntype":"bool","Args":"funcName string, obtained interface{}, checker Checker, args ...interface{}"},{"Uniquefunname":"func internalCheck(funcName string, obtained interface{}, checker Checker, args ...interface{})bool","Funname":"internalCheck","Returntype":"bool","Args":"funcName string, obtained interface{}, checker Checker, args ...interface{}"}],"Records":null}
{"Filepath":"vendor/src/gopkg.in/check.v1/helpers_test.go","Functions":[{"Uniquefunname":"func (checker *MyChecker) Check(params []interface","Funname":"Check","Returntype":"(bool, string)","Args":"params []interface{}, names []string"},{"Uniquefunname":"func (c myCommentType) CheckCommentString() string","Funname":"CheckCommentString","Returntype":"string","Args":""},{"Uniquefunname":"func (checker *MyChecker) Info() *check.CheckerInfo","Funname":"Info","Returntype":"*check.CheckerInfo","Args":""},{"Uniquefunname":"func (s *MkDirHelper) SetUpSuite(c *check.C)","Funname":"SetUpSuite","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func SetUpSuite(c *check.C)","Funname":"SetUpSuite","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func SetUpTest(c *check.C)","Funname":"SetUpTest","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *MkDirHelper) TearDownSuite(c *check.C)","Funname":"TearDownSuite","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func TearDownSuite(c *check.C)","Funname":"TearDownSuite","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func TearDownTest(c *check.C)","Funname":"TearDownTest","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *MkDirHelper) Test(c *check.C)","Funname":"Test","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func Test(c *check.C)","Funname":"Test","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *HelpersS) TestAssertFailWithExpected(c *check.C)","Funname":"TestAssertFailWithExpected","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *HelpersS) TestAssertFailWithExpectedAndMessage(c *check.C)","Funname":"TestAssertFailWithExpectedAndMessage","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *HelpersS) TestAssertFailWithoutExpected(c *check.C)","Funname":"TestAssertFailWithoutExpected","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *HelpersS) TestAssertFailWithoutExpectedAndMessage(c *check.C)","Funname":"TestAssertFailWithoutExpectedAndMessage","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *HelpersS) TestAssertSucceedWithExpected(c *check.C)","Funname":"TestAssertSucceedWithExpected","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *HelpersS) TestAssertSucceedWithoutExpected(c *check.C)","Funname":"TestAssertSucceedWithoutExpected","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *HelpersS) TestAssertWithError(c *check.C)","Funname":"TestAssertWithError","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *HelpersS) TestAssertWithMissingExpected(c *check.C)","Funname":"TestAssertWithMissingExpected","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *HelpersS) TestAssertWithNilChecker(c *check.C)","Funname":"TestAssertWithNilChecker","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *HelpersS) TestCheckFailWithExpected(c *check.C)","Funname":"TestCheckFailWithExpected","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *HelpersS) TestCheckFailWithExpectedAndComment(c *check.C)","Funname":"TestCheckFailWithExpectedAndComment","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *HelpersS) TestCheckFailWithExpectedAndStaticComment(c *check.C)","Funname":"TestCheckFailWithExpectedAndStaticComment","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *HelpersS) TestCheckFailWithoutExpected(c *check.C)","Funname":"TestCheckFailWithoutExpected","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *HelpersS) TestCheckFailWithoutExpectedAndMessage(c *check.C)","Funname":"TestCheckFailWithoutExpectedAndMessage","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *HelpersS) TestCheckSucceedWithExpected(c *check.C)","Funname":"TestCheckSucceedWithExpected","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *HelpersS) TestCheckSucceedWithoutExpected(c *check.C)","Funname":"TestCheckSucceedWithoutExpected","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *HelpersS) TestCheckWithError(c *check.C)","Funname":"TestCheckWithError","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *HelpersS) TestCheckWithMissingExpected(c *check.C)","Funname":"TestCheckWithMissingExpected","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *HelpersS) TestCheckWithNilChecker(c *check.C)","Funname":"TestCheckWithNilChecker","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *HelpersS) TestCheckWithParamsAndNamesMutation(c *check.C)","Funname":"TestCheckWithParamsAndNamesMutation","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *HelpersS) TestCheckWithTooManyExpected(c *check.C)","Funname":"TestCheckWithTooManyExpected","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *HelpersS) TestCheckerInterface(c *check.C)","Funname":"TestCheckerInterface","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *HelpersS) TestConcurrentLogging(c *check.C)","Funname":"TestConcurrentLogging","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *HelpersS) TestCountSuite(c *check.C)","Funname":"TestCountSuite","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *HelpersS) TestMkDir(c *check.C)","Funname":"TestMkDir","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *HelpersS) TestTestName(c *check.C)","Funname":"TestTestName","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *HelpersS) TestValueLoggingWithArrays(c *check.C)","Funname":"TestValueLoggingWithArrays","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *HelpersS) TestValueLoggingWithMultiLine(c *check.C)","Funname":"TestValueLoggingWithMultiLine","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *HelpersS) TestValueLoggingWithMultiLineException(c *check.C)","Funname":"TestValueLoggingWithMultiLineException","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *HelpersS) TestAssertFailWithExpected(c *check.C)","Funname":"check_test.HelpersS.TestAssertFailWithExpected","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *HelpersS) TestAssertFailWithExpectedAndMessage(c *check.C)","Funname":"check_test.HelpersS.TestAssertFailWithExpectedAndMessage","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *HelpersS) TestAssertFailWithoutExpected(c *check.C)","Funname":"check_test.HelpersS.TestAssertFailWithoutExpected","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *HelpersS) TestAssertFailWithoutExpectedAndMessage(c *check.C)","Funname":"check_test.HelpersS.TestAssertFailWithoutExpectedAndMessage","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *HelpersS) TestAssertSucceedWithExpected(c *check.C)","Funname":"check_test.HelpersS.TestAssertSucceedWithExpected","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *HelpersS) TestAssertSucceedWithoutExpected(c *check.C)","Funname":"check_test.HelpersS.TestAssertSucceedWithoutExpected","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *HelpersS) TestAssertWithError(c *check.C)","Funname":"check_test.HelpersS.TestAssertWithError","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *HelpersS) TestAssertWithMissingExpected(c *check.C)","Funname":"check_test.HelpersS.TestAssertWithMissingExpected","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *HelpersS) TestAssertWithNilChecker(c *check.C)","Funname":"check_test.HelpersS.TestAssertWithNilChecker","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *HelpersS) TestCheckFailWithExpected(c *check.C)","Funname":"check_test.HelpersS.TestCheckFailWithExpected","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *HelpersS) TestCheckFailWithExpectedAndComment(c *check.C)","Funname":"check_test.HelpersS.TestCheckFailWithExpectedAndComment","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *HelpersS) TestCheckFailWithExpectedAndStaticComment(c *check.C)","Funname":"check_test.HelpersS.TestCheckFailWithExpectedAndStaticComment","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *HelpersS) TestCheckFailWithoutExpected(c *check.C)","Funname":"check_test.HelpersS.TestCheckFailWithoutExpected","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *HelpersS) TestCheckFailWithoutExpectedAndMessage(c *check.C)","Funname":"check_test.HelpersS.TestCheckFailWithoutExpectedAndMessage","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *HelpersS) TestCheckSucceedWithExpected(c *check.C)","Funname":"check_test.HelpersS.TestCheckSucceedWithExpected","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *HelpersS) TestCheckSucceedWithoutExpected(c *check.C)","Funname":"check_test.HelpersS.TestCheckSucceedWithoutExpected","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *HelpersS) TestCheckWithError(c *check.C)","Funname":"check_test.HelpersS.TestCheckWithError","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *HelpersS) TestCheckWithMissingExpected(c *check.C)","Funname":"check_test.HelpersS.TestCheckWithMissingExpected","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *HelpersS) TestCheckWithNilChecker(c *check.C)","Funname":"check_test.HelpersS.TestCheckWithNilChecker","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *HelpersS) TestCheckWithParamsAndNamesMutation(c *check.C)","Funname":"check_test.HelpersS.TestCheckWithParamsAndNamesMutation","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *HelpersS) TestCheckWithTooManyExpected(c *check.C)","Funname":"check_test.HelpersS.TestCheckWithTooManyExpected","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *HelpersS) TestCheckerInterface(c *check.C)","Funname":"check_test.HelpersS.TestCheckerInterface","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *HelpersS) TestConcurrentLogging(c *check.C)","Funname":"check_test.HelpersS.TestConcurrentLogging","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *HelpersS) TestCountSuite(c *check.C)","Funname":"check_test.HelpersS.TestCountSuite","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *HelpersS) TestMkDir(c *check.C)","Funname":"check_test.HelpersS.TestMkDir","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *HelpersS) TestTestName(c *check.C)","Funname":"check_test.HelpersS.TestTestName","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *HelpersS) TestValueLoggingWithArrays(c *check.C)","Funname":"check_test.HelpersS.TestValueLoggingWithArrays","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *HelpersS) TestValueLoggingWithMultiLine(c *check.C)","Funname":"check_test.HelpersS.TestValueLoggingWithMultiLine","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *HelpersS) TestValueLoggingWithMultiLineException(c *check.C)","Funname":"check_test.HelpersS.TestValueLoggingWithMultiLineException","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *MkDirHelper) SetUpSuite(c *check.C)","Funname":"check_test.MkDirHelper.SetUpSuite","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *MkDirHelper) TearDownSuite(c *check.C)","Funname":"check_test.MkDirHelper.TearDownSuite","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (s *MkDirHelper) Test(c *check.C)","Funname":"check_test.MkDirHelper.Test","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func (checker *MyChecker) Check(params []interface","Funname":"check_test.MyChecker.Check","Returntype":"(bool, string)","Args":"params []interface{}, names []string"},{"Uniquefunname":"func (checker *MyChecker) Info() *check.CheckerInfo","Funname":"check_test.MyChecker.Info","Returntype":"*check.CheckerInfo","Args":""},{"Uniquefunname":"func check_test.TestNameHelper.SetUpSuite(c *check.C)","Funname":"check_test.TestNameHelper.SetUpSuite","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func check_test.TestNameHelper.SetUpTest(c *check.C)","Funname":"check_test.TestNameHelper.SetUpTest","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func check_test.TestNameHelper.TearDownSuite(c *check.C)","Funname":"check_test.TestNameHelper.TearDownSuite","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func check_test.TestNameHelper.TearDownTest(c *check.C)","Funname":"check_test.TestNameHelper.TearDownTest","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func check_test.TestNameHelper.Test(c *check.C)","Funname":"check_test.TestNameHelper.Test","Returntype":"","Args":"c *check.C"},{"Uniquefunname":"func isDir(path string) bool","Funname":"check_test.isDir","Returntype":"bool","Args":"path string"},{"Uniquefunname":"func myComment(s string) myCommentType","Funname":"check_test.myComment","Returntype":"myCommentType","Args":"s string"},{"Uniquefunname":"func (c myCommentType) CheckCommentString() string","Funname":"check_test.myCommentType.CheckCommentString","Returntype":"string","Args":""},{"Uniquefunname":"func check_test.testHelperFailure(c *check.C, name string, expectedResult interface{}, shouldStop bool, log string, closure func() interface{})","Funname":"check_test.testHelperFailure","Returntype":"","Args":"c *check.C, name string, expectedResult interface{}, shouldStop bool, log string, closure func() interface{}"},{"Uniquefunname":"func check_test.testHelperSuccess(c *check.C, name string, expectedResult interface{}, closure func() interface{})","Funname":"check_test.testHelperSuccess","Returntype":"","Args":"c *check.C, name string, expectedResult interface{}, closure func() interface{}"},{"Uniquefunname":"func isDir(path string) bool","Funname":"isDir","Returntype":"bool","Args":"path string"},{"Uniquefunname":"func myComment(s string) myCommentType","Funname":"myComment","Returntype":"myCommentType","Args":"s string"},{"Uniquefunname":"func testHelperFailure(c *check.C, name string, expectedResult interface{}, shouldStop bool, log string, closure func() interface{})","Funname":"testHelperFailure","Returntype":"","Args":"c *check.C, name string, expectedResult interface{}, shouldStop bool, log string, closure func() interface{}"},{"Uniquefunname":"func testHelperSuccess(c *check.C, name string, expectedResult interface{}, closure func() interface{})","Funname":"testHelperSuccess","Returntype":"","Args":"c *check.C, name string, expectedResult interface{}, closure func() interface{}"}],"Records":[{"Name":"struct:check_test.MkDirHelper","Fields":["check_test.MkDirHelper.isDir1 bool","check_test.MkDirHelper.isDir2 bool","check_test.MkDirHelper.isDir3 bool","check_test.MkDirHelper.isDir4 bool","check_test.MkDirHelper.path1 string","check_test.MkDirHelper.path2 string"]},{"Name":"struct:check_test.MyChecker","Fields":["check_test.MyChecker.error string","check_test.MyChecker.info *check.CheckerInfo","check_test.MyChecker.names []string","check_test.MyChecker.params []interface{}","check_test.MyChecker.result bool"]},{"Name":"struct:check_test.TestNameHelper","Fields":["check_test.TestNameHelper.name1 string","check_test.TestNameHelper.name2 string","check_test.TestNameHelper.name3 string","check_test.TestNameHelper.name4 string","check_test.TestNameHelper.name5 string"]},{"Name":"var:check_test","Fields":["check_test.helpersS"]}]}
{"Filepath":"vendor/src/gopkg.in/check.v1/printer.go","Functions":[{"Uniquefunname":"func (lp *linePrinter) Visit(n ast.Node) (w ast.Visitor)","Funname":"Visit","Returntype":"(w ast.Visitor)","Args":"n ast.Node"},{"Uniquefunname":"func indent(s, with string) (r string)","Funname":"check.indent","Returntype":"(r string)","Args":"s, with string"},{"Uniquefunname":"func (lp *linePrinter) Visit(n ast.Node) (w ast.Visitor)","Funname":"check.linePrinter.Visit","Returntype":"(w ast.Visitor)","Args":"n ast.Node"},{"Uniquefunname":"func (lp *linePrinter) emit() bool","Funname":"check.linePrinter.emit","Returntype":"bool","Args":""},{"Uniquefunname":"func (lp *linePrinter) emptyBlock(n ast.Node) *ast.BlockStmt","Funname":"check.linePrinter.emptyBlock","Returntype":"*ast.BlockStmt","Args":"n ast.Node"},{"Uniquefunname":"func (lp *linePrinter) emptyStmt(n ast.Node) *ast.ExprStmt","Funname":"check.linePrinter.emptyStmt","Returntype":"*ast.ExprStmt","Args":"n ast.Node"},{"Uniquefunname":"func (lp *linePrinter) printWithComments(n ast.Node)","Funname":"check.linePrinter.printWithComments","Returntype":"","Args":"n ast.Node"},{"Uniquefunname":"func (lp *linePrinter) trim(n ast.Node) bool","Funname":"check.linePrinter.trim","Returntype":"bool","Args":"n ast.Node"},{"Uniquefunname":"func (lp *linePrinter) trimBlock(stmt *ast.BlockStmt) *ast.BlockStmt","Funname":"check.linePrinter.trimBlock","Returntype":"*ast.BlockStmt","Args":"stmt *ast.BlockStmt"},{"Uniquefunname":"func (lp *linePrinter) trimList(stmts []ast.Stmt) []ast.Stmt","Funname":"check.linePrinter.trimList","Returntype":"[]ast.Stmt","Args":"stmts []ast.Stmt"},{"Uniquefunname":"func printLine(filename string, line int) (string, error)","Funname":"check.printLine","Returntype":"(string, error)","Args":"filename string, line int"},{"Uniquefunname":"func (lp *linePrinter) emit() bool","Funname":"emit","Returntype":"bool","Args":""},{"Uniquefunname":"func (lp *linePrinter) emptyBlock(n ast.Node) *ast.BlockStmt","Funname":"emptyBlock","Returntype":"*ast.BlockStmt","Args":"n ast.Node"},{"Uniquefunname":"func (lp *linePrinter) emptyStmt(n ast.Node) *ast.ExprStmt","Funname":"emptyStmt","Returntype":"*ast.ExprStmt","Args":"n ast.Node"},{"Uniquefunname":"func indent(s, with string) (r string)","Funname":"indent","Returntype":"(r string)","Args":"s, with string"},{"Uniquefunname":"func printLine(filename string, line int) (string, error)","Funname":"printLine","Returntype":"(string, error)","Args":"filename string, line int"},{"Uniquefunname":"func (lp *linePrinter) printWithComments(n ast.Node)","Funname":"printWithComments","Returntype":"","Args":"n ast.Node"},{"Uniquefunname":"func (lp *linePrinter) trim(n ast.Node) bool","Funname":"trim","Returntype":"bool","Args":"n ast.Node"},{"Uniquefunname":"func (lp *linePrinter) trimBlock(stmt *ast.BlockStmt) *ast.BlockStmt","Funname":"trimBlock","Returntype":"*ast.BlockStmt","Args":"stmt *ast.BlockStmt"},{"Uniquefunname":"func (lp *linePrinter) trimList(stmts []ast.Stmt) []ast.Stmt","Funname":"trimList","Returntype":"[]ast.Stmt","Args":"stmts []ast.Stmt"}],"Records":[{"Name":"struct:check.linePrinter","Fields":["check.linePrinter.config *printer.Config","check.linePrinter.fnode *ast.File","check.linePrinter.fset *token.FileSet","check.linePrinter.line int","check.linePrinter.output bytes.Buffer","check.linePrinter.stmt ast.Stmt"]}]}
{"Filepath":"vendor/src/gopkg.in/check.v1/printer_test.go","Functions":[{"Uniquefunname":"func (s *PrinterS) TestCountSuite(c *C)","Funname":"TestCountSuite","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *PrinterS) TestIndent(c *C)","Funname":"TestIndent","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *PrinterS) TestPrintLine(c *C)","Funname":"TestPrintLine","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *PrinterS) TestCountSuite(c *C)","Funname":"check_test.PrinterS.TestCountSuite","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *PrinterS) TestIndent(c *C)","Funname":"check_test.PrinterS.TestIndent","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *PrinterS) TestPrintLine(c *C)","Funname":"check_test.PrinterS.TestPrintLine","Returntype":"","Args":"c *C"},{"Uniquefunname":"func init()","Funname":"check_test.init","Returntype":"","Args":""},{"Uniquefunname":"func printTestFunc()","Funname":"check_test.printTestFunc","Returntype":"","Args":""},{"Uniquefunname":"func init()","Funname":"init","Returntype":"","Args":""},{"Uniquefunname":"func printTestFunc()","Funname":"printTestFunc","Returntype":"","Args":""}],"Records":[{"Name":"var:check_test","Fields":["check_test._","check_test.indentTests","check_test.printLineTests","check_test.printTestFuncLine"]}]}
{"Filepath":"vendor/src/gopkg.in/check.v1/run.go","Functions":[{"Uniquefunname":"func (r *Result) Add(other *Result)","Funname":"Add","Returntype":"","Args":"other *Result"},{"Uniquefunname":"func List(suite interface","Funname":"List","Returntype":"[]string","Args":"suite interface{}, runConf *RunConf"},{"Uniquefunname":"func ListAll(runConf *RunConf) []string","Funname":"ListAll","Returntype":"[]string","Args":"runConf *RunConf"},{"Uniquefunname":"func (r *Result) Passed() bool","Funname":"Passed","Returntype":"bool","Args":""},{"Uniquefunname":"func Run(suite interface","Funname":"Run","Returntype":"*Result","Args":"suite interface{}, runConf *RunConf"},{"Uniquefunname":"func RunAll(runConf *RunConf) *Result","Funname":"RunAll","Returntype":"*Result","Args":"runConf *RunConf"},{"Uniquefunname":"func (r *Result) String() string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func Suite(suite interface","Funname":"Suite","Returntype":"interface{}","Args":"suite interface{}"},{"Uniquefunname":"func TestingT(testingT *testing.T)","Funname":"TestingT","Returntype":"","Args":"testingT *testing.T"},{"Uniquefunname":"func List(suite interface","Funname":"check.List","Returntype":"[]string","Args":"suite interface{}, runConf *RunConf"},{"Uniquefunname":"func ListAll(runConf *RunConf) []string","Funname":"check.ListAll","Returntype":"[]string","Args":"runConf *RunConf"},{"Uniquefunname":"func (r *Result) Add(other *Result)","Funname":"check.Result.Add","Returntype":"","Args":"other *Result"},{"Uniquefunname":"func (r *Result) Passed() bool","Funname":"check.Result.Passed","Returntype":"bool","Args":""},{"Uniquefunname":"func (r *Result) String() string","Funname":"check.Result.String","Returntype":"string","Args":""},{"Uniquefunname":"func Run(suite interface","Funname":"check.Run","Returntype":"*Result","Args":"suite interface{}, runConf *RunConf"},{"Uniquefunname":"func RunAll(runConf *RunConf) *Result","Funname":"check.RunAll","Returntype":"*Result","Args":"runConf *RunConf"},{"Uniquefunname":"func Suite(suite interface","Funname":"check.Suite","Returntype":"interface{}","Args":"suite interface{}"},{"Uniquefunname":"func TestingT(testingT *testing.T)","Funname":"check.TestingT","Returntype":"","Args":"testingT *testing.T"}],"Records":[{"Name":"var:check","Fields":["check.allSuites","check.newBenchFlag","check.newBenchMem","check.newBenchTime","check.newFilterFlag","check.newListFlag","check.newStreamFlag","check.newVerboseFlag","check.newWorkFlag","check.oldBenchFlag","check.oldBenchTime","check.oldFilterFlag","check.oldListFlag","check.oldStreamFlag","check.oldVerboseFlag","check.oldWorkFlag"]}]}
{"Filepath":"vendor/src/gopkg.in/check.v1/run_test.go","Functions":[{"Uniquefunname":"func (s *StreamHelper) SetUpSuite(c *C)","Funname":"SetUpSuite","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *StreamMissHelper) SetUpSuite(c *C)","Funname":"SetUpSuite","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *WorkDirSuite) Test(c *C)","Funname":"Test","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *StreamHelper) Test1(c *C)","Funname":"Test1","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *StreamMissHelper) Test1(c *C)","Funname":"Test1","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *StreamHelper) Test2(c *C)","Funname":"Test2","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestAdd(c *C)","Funname":"TestAdd","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestCountSuite(c *C)","Funname":"TestCountSuite","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestFailure(c *C)","Funname":"TestFailure","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestFilterAllOut(c *C)","Funname":"TestFilterAllOut","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestFilterError(c *C)","Funname":"TestFilterError","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestFilterSuiteName(c *C)","Funname":"TestFilterSuiteName","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestFilterSuiteNameAndTestName(c *C)","Funname":"TestFilterSuiteNameAndTestName","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestFilterTestName(c *C)","Funname":"TestFilterTestName","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestFilterTestNameWithAll(c *C)","Funname":"TestFilterTestNameWithAll","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestFixture(c *C)","Funname":"TestFixture","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestKeepWorkDir(c *C)","Funname":"TestKeepWorkDir","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestList(c *C)","Funname":"TestList","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestListFiltered(c *C)","Funname":"TestListFiltered","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestPanicOnSetUpSuite(c *C)","Funname":"TestPanicOnSetUpSuite","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestPanicOnSetUpTest(c *C)","Funname":"TestPanicOnSetUpTest","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestPanicOnTest(c *C)","Funname":"TestPanicOnTest","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestPassed(c *C)","Funname":"TestPassed","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestPrintAll(c *C)","Funname":"TestPrintAll","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestPrintExpectedFailures(c *C)","Funname":"TestPrintExpectedFailures","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestPrintFailure(c *C)","Funname":"TestPrintFailure","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestPrintFixturePanicked(c *C)","Funname":"TestPrintFixturePanicked","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestPrintMissed(c *C)","Funname":"TestPrintMissed","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestPrintPanicked(c *C)","Funname":"TestPrintPanicked","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestPrintRunError(c *C)","Funname":"TestPrintRunError","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestPrintSkipped(c *C)","Funname":"TestPrintSkipped","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestPrintSuccess(c *C)","Funname":"TestPrintSuccess","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestRequirePartialMatch(c *C)","Funname":"TestRequirePartialMatch","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestStreamMode(c *C)","Funname":"TestStreamMode","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestStreamModeWithMiss(c *C)","Funname":"TestStreamModeWithMiss","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestSuccess(c *C)","Funname":"TestSuccess","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestVerboseMode(c *C)","Funname":"TestVerboseMode","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestVerboseModeWithFailBeforePass(c *C)","Funname":"TestVerboseModeWithFailBeforePass","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestAdd(c *C)","Funname":"check_test.RunS.TestAdd","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestCountSuite(c *C)","Funname":"check_test.RunS.TestCountSuite","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestFailure(c *C)","Funname":"check_test.RunS.TestFailure","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestFilterAllOut(c *C)","Funname":"check_test.RunS.TestFilterAllOut","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestFilterError(c *C)","Funname":"check_test.RunS.TestFilterError","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestFilterSuiteName(c *C)","Funname":"check_test.RunS.TestFilterSuiteName","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestFilterSuiteNameAndTestName(c *C)","Funname":"check_test.RunS.TestFilterSuiteNameAndTestName","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestFilterTestName(c *C)","Funname":"check_test.RunS.TestFilterTestName","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestFilterTestNameWithAll(c *C)","Funname":"check_test.RunS.TestFilterTestNameWithAll","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestFixture(c *C)","Funname":"check_test.RunS.TestFixture","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestKeepWorkDir(c *C)","Funname":"check_test.RunS.TestKeepWorkDir","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestList(c *C)","Funname":"check_test.RunS.TestList","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestListFiltered(c *C)","Funname":"check_test.RunS.TestListFiltered","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestPanicOnSetUpSuite(c *C)","Funname":"check_test.RunS.TestPanicOnSetUpSuite","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestPanicOnSetUpTest(c *C)","Funname":"check_test.RunS.TestPanicOnSetUpTest","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestPanicOnTest(c *C)","Funname":"check_test.RunS.TestPanicOnTest","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestPassed(c *C)","Funname":"check_test.RunS.TestPassed","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestPrintAll(c *C)","Funname":"check_test.RunS.TestPrintAll","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestPrintExpectedFailures(c *C)","Funname":"check_test.RunS.TestPrintExpectedFailures","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestPrintFailure(c *C)","Funname":"check_test.RunS.TestPrintFailure","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestPrintFixturePanicked(c *C)","Funname":"check_test.RunS.TestPrintFixturePanicked","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestPrintMissed(c *C)","Funname":"check_test.RunS.TestPrintMissed","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestPrintPanicked(c *C)","Funname":"check_test.RunS.TestPrintPanicked","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestPrintRunError(c *C)","Funname":"check_test.RunS.TestPrintRunError","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestPrintSkipped(c *C)","Funname":"check_test.RunS.TestPrintSkipped","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestPrintSuccess(c *C)","Funname":"check_test.RunS.TestPrintSuccess","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestRequirePartialMatch(c *C)","Funname":"check_test.RunS.TestRequirePartialMatch","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestStreamMode(c *C)","Funname":"check_test.RunS.TestStreamMode","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestStreamModeWithMiss(c *C)","Funname":"check_test.RunS.TestStreamModeWithMiss","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestSuccess(c *C)","Funname":"check_test.RunS.TestSuccess","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestVerboseMode(c *C)","Funname":"check_test.RunS.TestVerboseMode","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *RunS) TestVerboseModeWithFailBeforePass(c *C)","Funname":"check_test.RunS.TestVerboseModeWithFailBeforePass","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *StreamHelper) SetUpSuite(c *C)","Funname":"check_test.StreamHelper.SetUpSuite","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *StreamHelper) Test1(c *C)","Funname":"check_test.StreamHelper.Test1","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *StreamHelper) Test2(c *C)","Funname":"check_test.StreamHelper.Test2","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *StreamMissHelper) SetUpSuite(c *C)","Funname":"check_test.StreamMissHelper.SetUpSuite","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *StreamMissHelper) Test1(c *C)","Funname":"check_test.StreamMissHelper.Test1","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *WorkDirSuite) Test(c *C)","Funname":"check_test.WorkDirSuite.Test","Returntype":"","Args":"c *C"}],"Records":[{"Name":"struct:check_test.StreamHelper","Fields":["check_test.StreamHelper.l2 sync.Mutex","check_test.StreamHelper.l3 sync.Mutex"]},{"Name":"var:check_test","Fields":["check_test.runnerS"]}]}
{"Filepath":"vendor/src/gopkg.in/yaml.v2/apic.go","Functions":[{"Uniquefunname":"func yaml_document_end_event_initialize(event *yaml_event_t, implicit bool)","Funname":"yaml.yaml_document_end_event_initialize","Returntype":"","Args":"event *yaml_event_t, implicit bool"},{"Uniquefunname":"func yaml.yaml_document_start_event_initialize(event *yaml_event_t, version_directive *yaml_version_directive_t, tag_directives []yaml_tag_directive_t, implicit bool,)","Funname":"yaml.yaml_document_start_event_initialize","Returntype":"","Args":"event *yaml_event_t, version_directive *yaml_version_directive_t, tag_directives []yaml_tag_directive_t, implicit bool,"},{"Uniquefunname":"func yaml_emitter_delete(emitter *yaml_emitter_t)","Funname":"yaml.yaml_emitter_delete","Returntype":"","Args":"emitter *yaml_emitter_t"},{"Uniquefunname":"func yaml_emitter_initialize(emitter *yaml_emitter_t)","Funname":"yaml.yaml_emitter_initialize","Returntype":"","Args":"emitter *yaml_emitter_t"},{"Uniquefunname":"func yaml_emitter_set_break(emitter *yaml_emitter_t, line_break yaml_break_t)","Funname":"yaml.yaml_emitter_set_break","Returntype":"","Args":"emitter *yaml_emitter_t, line_break yaml_break_t"},{"Uniquefunname":"func yaml_emitter_set_canonical(emitter *yaml_emitter_t, canonical bool)","Funname":"yaml.yaml_emitter_set_canonical","Returntype":"","Args":"emitter *yaml_emitter_t, canonical bool"},{"Uniquefunname":"func yaml_emitter_set_encoding(emitter *yaml_emitter_t, encoding yaml_encoding_t)","Funname":"yaml.yaml_emitter_set_encoding","Returntype":"","Args":"emitter *yaml_emitter_t, encoding yaml_encoding_t"},{"Uniquefunname":"func yaml_emitter_set_indent(emitter *yaml_emitter_t, indent int)","Funname":"yaml.yaml_emitter_set_indent","Returntype":"","Args":"emitter *yaml_emitter_t, indent int"},{"Uniquefunname":"func yaml_emitter_set_output_string(emitter *yaml_emitter_t, output_buffer *[]byte)","Funname":"yaml.yaml_emitter_set_output_string","Returntype":"","Args":"emitter *yaml_emitter_t, output_buffer *[]byte"},{"Uniquefunname":"func yaml_emitter_set_output_writer(emitter *yaml_emitter_t, w io.Writer)","Funname":"yaml.yaml_emitter_set_output_writer","Returntype":"","Args":"emitter *yaml_emitter_t, w io.Writer"},{"Uniquefunname":"func yaml_emitter_set_unicode(emitter *yaml_emitter_t, unicode bool)","Funname":"yaml.yaml_emitter_set_unicode","Returntype":"","Args":"emitter *yaml_emitter_t, unicode bool"},{"Uniquefunname":"func yaml_emitter_set_width(emitter *yaml_emitter_t, width int)","Funname":"yaml.yaml_emitter_set_width","Returntype":"","Args":"emitter *yaml_emitter_t, width int"},{"Uniquefunname":"func yaml_event_delete(event *yaml_event_t)","Funname":"yaml.yaml_event_delete","Returntype":"","Args":"event *yaml_event_t"},{"Uniquefunname":"func yaml_insert_token(parser *yaml_parser_t, pos int, token *yaml_token_t)","Funname":"yaml.yaml_insert_token","Returntype":"","Args":"parser *yaml_parser_t, pos int, token *yaml_token_t"},{"Uniquefunname":"func yaml_mapping_end_event_initialize(event *yaml_event_t)","Funname":"yaml.yaml_mapping_end_event_initialize","Returntype":"","Args":"event *yaml_event_t"},{"Uniquefunname":"func yaml.yaml_mapping_start_event_initialize(event *yaml_event_t, anchor, tag []byte, implicit bool, style yaml_mapping_style_t)","Funname":"yaml.yaml_mapping_start_event_initialize","Returntype":"","Args":"event *yaml_event_t, anchor, tag []byte, implicit bool, style yaml_mapping_style_t"},{"Uniquefunname":"func yaml_parser_delete(parser *yaml_parser_t)","Funname":"yaml.yaml_parser_delete","Returntype":"","Args":"parser *yaml_parser_t"},{"Uniquefunname":"func yaml_parser_initialize(parser *yaml_parser_t) bool","Funname":"yaml.yaml_parser_initialize","Returntype":"bool","Args":"parser *yaml_parser_t"},{"Uniquefunname":"func yaml_parser_set_encoding(parser *yaml_parser_t, encoding yaml_encoding_t)","Funname":"yaml.yaml_parser_set_encoding","Returntype":"","Args":"parser *yaml_parser_t, encoding yaml_encoding_t"},{"Uniquefunname":"func yaml_parser_set_input_reader(parser *yaml_parser_t, r io.Reader)","Funname":"yaml.yaml_parser_set_input_reader","Returntype":"","Args":"parser *yaml_parser_t, r io.Reader"},{"Uniquefunname":"func yaml_parser_set_input_string(parser *yaml_parser_t, input []byte)","Funname":"yaml.yaml_parser_set_input_string","Returntype":"","Args":"parser *yaml_parser_t, input []byte"},{"Uniquefunname":"func yaml_reader_read_handler(parser *yaml_parser_t, buffer []byte) (n int, err error)","Funname":"yaml.yaml_reader_read_handler","Returntype":"(n int, err error)","Args":"parser *yaml_parser_t, buffer []byte"},{"Uniquefunname":"func yaml.yaml_scalar_event_initialize(event *yaml_event_t, anchor, tag, value []byte, plain_implicit, quoted_implicit bool, style yaml_scalar_style_t)bool","Funname":"yaml.yaml_scalar_event_initialize","Returntype":"bool","Args":"event *yaml_event_t, anchor, tag, value []byte, plain_implicit, quoted_implicit bool, style yaml_scalar_style_t"},{"Uniquefunname":"func yaml_sequence_end_event_initialize(event *yaml_event_t) bool","Funname":"yaml.yaml_sequence_end_event_initialize","Returntype":"bool","Args":"event *yaml_event_t"},{"Uniquefunname":"func yaml.yaml_sequence_start_event_initialize(event *yaml_event_t, anchor, tag []byte, implicit bool, style yaml_sequence_style_t)bool","Funname":"yaml.yaml_sequence_start_event_initialize","Returntype":"bool","Args":"event *yaml_event_t, anchor, tag []byte, implicit bool, style yaml_sequence_style_t"},{"Uniquefunname":"func yaml_stream_end_event_initialize(event *yaml_event_t)","Funname":"yaml.yaml_stream_end_event_initialize","Returntype":"","Args":"event *yaml_event_t"},{"Uniquefunname":"func yaml_stream_start_event_initialize(event *yaml_event_t, encoding yaml_encoding_t)","Funname":"yaml.yaml_stream_start_event_initialize","Returntype":"","Args":"event *yaml_event_t, encoding yaml_encoding_t"},{"Uniquefunname":"func yaml_string_read_handler(parser *yaml_parser_t, buffer []byte) (n int, err error)","Funname":"yaml.yaml_string_read_handler","Returntype":"(n int, err error)","Args":"parser *yaml_parser_t, buffer []byte"},{"Uniquefunname":"func yaml_string_write_handler(emitter *yaml_emitter_t, buffer []byte) error","Funname":"yaml.yaml_string_write_handler","Returntype":"error","Args":"emitter *yaml_emitter_t, buffer []byte"},{"Uniquefunname":"func yaml_writer_write_handler(emitter *yaml_emitter_t, buffer []byte) error","Funname":"yaml.yaml_writer_write_handler","Returntype":"error","Args":"emitter *yaml_emitter_t, buffer []byte"},{"Uniquefunname":"func yaml_document_end_event_initialize(event *yaml_event_t, implicit bool)","Funname":"yaml_document_end_event_initialize","Returntype":"","Args":"event *yaml_event_t, implicit bool"},{"Uniquefunname":"func yaml_document_start_event_initialize(event *yaml_event_t, version_directive *yaml_version_directive_t, tag_directives []yaml_tag_directive_t, implicit bool,)","Funname":"yaml_document_start_event_initialize","Returntype":"","Args":"event *yaml_event_t, version_directive *yaml_version_directive_t, tag_directives []yaml_tag_directive_t, implicit bool,"},{"Uniquefunname":"func yaml_emitter_delete(emitter *yaml_emitter_t)","Funname":"yaml_emitter_delete","Returntype":"","Args":"emitter *yaml_emitter_t"},{"Uniquefunname":"func yaml_emitter_initialize(emitter *yaml_emitter_t)","Funname":"yaml_emitter_initialize","Returntype":"","Args":"emitter *yaml_emitter_t"},{"Uniquefunname":"func yaml_emitter_set_break(emitter *yaml_emitter_t, line_break yaml_break_t)","Funname":"yaml_emitter_set_break","Returntype":"","Args":"emitter *yaml_emitter_t, line_break yaml_break_t"},{"Uniquefunname":"func yaml_emitter_set_canonical(emitter *yaml_emitter_t, canonical bool)","Funname":"yaml_emitter_set_canonical","Returntype":"","Args":"emitter *yaml_emitter_t, canonical bool"},{"Uniquefunname":"func yaml_emitter_set_encoding(emitter *yaml_emitter_t, encoding yaml_encoding_t)","Funname":"yaml_emitter_set_encoding","Returntype":"","Args":"emitter *yaml_emitter_t, encoding yaml_encoding_t"},{"Uniquefunname":"func yaml_emitter_set_indent(emitter *yaml_emitter_t, indent int)","Funname":"yaml_emitter_set_indent","Returntype":"","Args":"emitter *yaml_emitter_t, indent int"},{"Uniquefunname":"func yaml_emitter_set_output_string(emitter *yaml_emitter_t, output_buffer *[]byte)","Funname":"yaml_emitter_set_output_string","Returntype":"","Args":"emitter *yaml_emitter_t, output_buffer *[]byte"},{"Uniquefunname":"func yaml_emitter_set_output_writer(emitter *yaml_emitter_t, w io.Writer)","Funname":"yaml_emitter_set_output_writer","Returntype":"","Args":"emitter *yaml_emitter_t, w io.Writer"},{"Uniquefunname":"func yaml_emitter_set_unicode(emitter *yaml_emitter_t, unicode bool)","Funname":"yaml_emitter_set_unicode","Returntype":"","Args":"emitter *yaml_emitter_t, unicode bool"},{"Uniquefunname":"func yaml_emitter_set_width(emitter *yaml_emitter_t, width int)","Funname":"yaml_emitter_set_width","Returntype":"","Args":"emitter *yaml_emitter_t, width int"},{"Uniquefunname":"func yaml_event_delete(event *yaml_event_t)","Funname":"yaml_event_delete","Returntype":"","Args":"event *yaml_event_t"},{"Uniquefunname":"func yaml_insert_token(parser *yaml_parser_t, pos int, token *yaml_token_t)","Funname":"yaml_insert_token","Returntype":"","Args":"parser *yaml_parser_t, pos int, token *yaml_token_t"},{"Uniquefunname":"func yaml_mapping_end_event_initialize(event *yaml_event_t)","Funname":"yaml_mapping_end_event_initialize","Returntype":"","Args":"event *yaml_event_t"},{"Uniquefunname":"func yaml_mapping_start_event_initialize(event *yaml_event_t, anchor, tag []byte, implicit bool, style yaml_mapping_style_t)","Funname":"yaml_mapping_start_event_initialize","Returntype":"","Args":"event *yaml_event_t, anchor, tag []byte, implicit bool, style yaml_mapping_style_t"},{"Uniquefunname":"func yaml_parser_delete(parser *yaml_parser_t)","Funname":"yaml_parser_delete","Returntype":"","Args":"parser *yaml_parser_t"},{"Uniquefunname":"func yaml_parser_initialize(parser *yaml_parser_t) bool","Funname":"yaml_parser_initialize","Returntype":"bool","Args":"parser *yaml_parser_t"},{"Uniquefunname":"func yaml_parser_set_encoding(parser *yaml_parser_t, encoding yaml_encoding_t)","Funname":"yaml_parser_set_encoding","Returntype":"","Args":"parser *yaml_parser_t, encoding yaml_encoding_t"},{"Uniquefunname":"func yaml_parser_set_input_reader(parser *yaml_parser_t, r io.Reader)","Funname":"yaml_parser_set_input_reader","Returntype":"","Args":"parser *yaml_parser_t, r io.Reader"},{"Uniquefunname":"func yaml_parser_set_input_string(parser *yaml_parser_t, input []byte)","Funname":"yaml_parser_set_input_string","Returntype":"","Args":"parser *yaml_parser_t, input []byte"},{"Uniquefunname":"func yaml_reader_read_handler(parser *yaml_parser_t, buffer []byte) (n int, err error)","Funname":"yaml_reader_read_handler","Returntype":"(n int, err error)","Args":"parser *yaml_parser_t, buffer []byte"},{"Uniquefunname":"func yaml_scalar_event_initialize(event *yaml_event_t, anchor, tag, value []byte, plain_implicit, quoted_implicit bool, style yaml_scalar_style_t)bool","Funname":"yaml_scalar_event_initialize","Returntype":"bool","Args":"event *yaml_event_t, anchor, tag, value []byte, plain_implicit, quoted_implicit bool, style yaml_scalar_style_t"},{"Uniquefunname":"func yaml_sequence_end_event_initialize(event *yaml_event_t) bool","Funname":"yaml_sequence_end_event_initialize","Returntype":"bool","Args":"event *yaml_event_t"},{"Uniquefunname":"func yaml_sequence_start_event_initialize(event *yaml_event_t, anchor, tag []byte, implicit bool, style yaml_sequence_style_t)bool","Funname":"yaml_sequence_start_event_initialize","Returntype":"bool","Args":"event *yaml_event_t, anchor, tag []byte, implicit bool, style yaml_sequence_style_t"},{"Uniquefunname":"func yaml_stream_end_event_initialize(event *yaml_event_t)","Funname":"yaml_stream_end_event_initialize","Returntype":"","Args":"event *yaml_event_t"},{"Uniquefunname":"func yaml_stream_start_event_initialize(event *yaml_event_t, encoding yaml_encoding_t)","Funname":"yaml_stream_start_event_initialize","Returntype":"","Args":"event *yaml_event_t, encoding yaml_encoding_t"},{"Uniquefunname":"func yaml_string_read_handler(parser *yaml_parser_t, buffer []byte) (n int, err error)","Funname":"yaml_string_read_handler","Returntype":"(n int, err error)","Args":"parser *yaml_parser_t, buffer []byte"},{"Uniquefunname":"func yaml_string_write_handler(emitter *yaml_emitter_t, buffer []byte) error","Funname":"yaml_string_write_handler","Returntype":"error","Args":"emitter *yaml_emitter_t, buffer []byte"},{"Uniquefunname":"func yaml_writer_write_handler(emitter *yaml_emitter_t, buffer []byte) error","Funname":"yaml_writer_write_handler","Returntype":"error","Args":"emitter *yaml_emitter_t, buffer []byte"}],"Records":null}
{"Filepath":"vendor/src/gopkg.in/yaml.v2/decode.go","Functions":[{"Uniquefunname":"func (d *decoder) alias(n *node, out reflect.Value) (good bool)","Funname":"alias","Returntype":"(good bool)","Args":"n *node, out reflect.Value"},{"Uniquefunname":"func (p *parser) alias() *node","Funname":"alias","Returntype":"*node","Args":""},{"Uniquefunname":"func (p *parser) anchor(n *node, anchor []byte)","Funname":"anchor","Returntype":"","Args":"n *node, anchor []byte"},{"Uniquefunname":"func (d *decoder) callUnmarshaler(n *node, u Unmarshaler) (good bool)","Funname":"callUnmarshaler","Returntype":"(good bool)","Args":"n *node, u Unmarshaler"},{"Uniquefunname":"func (p *parser) destroy()","Funname":"destroy","Returntype":"","Args":""},{"Uniquefunname":"func (d *decoder) document(n *node, out reflect.Value) (good bool)","Funname":"document","Returntype":"(good bool)","Args":"n *node, out reflect.Value"},{"Uniquefunname":"func (p *parser) document() *node","Funname":"document","Returntype":"*node","Args":""},{"Uniquefunname":"func (p *parser) expect(e yaml_event_type_t)","Funname":"expect","Returntype":"","Args":"e yaml_event_type_t"},{"Uniquefunname":"func (p *parser) fail()","Funname":"fail","Returntype":"","Args":""},{"Uniquefunname":"func failWantMap()","Funname":"failWantMap","Returntype":"","Args":""},{"Uniquefunname":"func (p *parser) init()","Funname":"init","Returntype":"","Args":""},{"Uniquefunname":"func isMerge(n *node) bool","Funname":"isMerge","Returntype":"bool","Args":"n *node"},{"Uniquefunname":"func (d *decoder) mapping(n *node, out reflect.Value) (good bool)","Funname":"mapping","Returntype":"(good bool)","Args":"n *node, out reflect.Value"},{"Uniquefunname":"func (p *parser) mapping() *node","Funname":"mapping","Returntype":"*node","Args":""},{"Uniquefunname":"func (d *decoder) mappingSlice(n *node, out reflect.Value) (good bool)","Funname":"mappingSlice","Returntype":"(good bool)","Args":"n *node, out reflect.Value"},{"Uniquefunname":"func (d *decoder) mappingStruct(n *node, out reflect.Value) (good bool)","Funname":"mappingStruct","Returntype":"(good bool)","Args":"n *node, out reflect.Value"},{"Uniquefunname":"func (d *decoder) merge(n *node, out reflect.Value)","Funname":"merge","Returntype":"","Args":"n *node, out reflect.Value"},{"Uniquefunname":"func newDecoder(strict bool) *decoder","Funname":"newDecoder","Returntype":"*decoder","Args":"strict bool"},{"Uniquefunname":"func newParser(b []byte) *parser","Funname":"newParser","Returntype":"*parser","Args":"b []byte"},{"Uniquefunname":"func newParserFromReader(r io.Reader) *parser","Funname":"newParserFromReader","Returntype":"*parser","Args":"r io.Reader"},{"Uniquefunname":"func (p *parser) node(kind int) *node","Funname":"node","Returntype":"*node","Args":"kind int"},{"Uniquefunname":"func (p *parser) parse() *node","Funname":"parse","Returntype":"*node","Args":""},{"Uniquefunname":"func (p *parser) peek() yaml_event_type_t","Funname":"peek","Returntype":"yaml_event_type_t","Args":""},{"Uniquefunname":"func prepare(n *node, out reflect.Value)(newout reflect.Value, unmarshaled, good bool)","Funname":"prepare","Returntype":"(newout reflect.Value, unmarshaled, good bool)","Args":"n *node, out reflect.Value"},{"Uniquefunname":"func resetMap(out reflect.Value)","Funname":"resetMap","Returntype":"","Args":"out reflect.Value"},{"Uniquefunname":"func (d *decoder) scalar(n *node, out reflect.Value) bool","Funname":"scalar","Returntype":"bool","Args":"n *node, out reflect.Value"},{"Uniquefunname":"func (p *parser) scalar() *node","Funname":"scalar","Returntype":"*node","Args":""},{"Uniquefunname":"func (d *decoder) sequence(n *node, out reflect.Value) (good bool)","Funname":"sequence","Returntype":"(good bool)","Args":"n *node, out reflect.Value"},{"Uniquefunname":"func (p *parser) sequence() *node","Funname":"sequence","Returntype":"*node","Args":""},{"Uniquefunname":"func (d *decoder) setMapIndex(n *node, out, k, v reflect.Value)","Funname":"setMapIndex","Returntype":"","Args":"n *node, out, k, v reflect.Value"},{"Uniquefunname":"func settableValueOf(i interface","Funname":"settableValueOf","Returntype":"reflect.Value","Args":"i interface{}"},{"Uniquefunname":"func (d *decoder) terror(n *node, tag string, out reflect.Value)","Funname":"terror","Returntype":"","Args":"n *node, tag string, out reflect.Value"},{"Uniquefunname":"func (d *decoder) unmarshal(n *node, out reflect.Value) (good bool)","Funname":"unmarshal","Returntype":"(good bool)","Args":"n *node, out reflect.Value"},{"Uniquefunname":"func (d *decoder) alias(n *node, out reflect.Value) (good bool)","Funname":"yaml.decoder.alias","Returntype":"(good bool)","Args":"n *node, out reflect.Value"},{"Uniquefunname":"func (d *decoder) callUnmarshaler(n *node, u Unmarshaler) (good bool)","Funname":"yaml.decoder.callUnmarshaler","Returntype":"(good bool)","Args":"n *node, u Unmarshaler"},{"Uniquefunname":"func (d *decoder) document(n *node, out reflect.Value) (good bool)","Funname":"yaml.decoder.document","Returntype":"(good bool)","Args":"n *node, out reflect.Value"},{"Uniquefunname":"func (d *decoder) mapping(n *node, out reflect.Value) (good bool)","Funname":"yaml.decoder.mapping","Returntype":"(good bool)","Args":"n *node, out reflect.Value"},{"Uniquefunname":"func (d *decoder) mappingSlice(n *node, out reflect.Value) (good bool)","Funname":"yaml.decoder.mappingSlice","Returntype":"(good bool)","Args":"n *node, out reflect.Value"},{"Uniquefunname":"func (d *decoder) mappingStruct(n *node, out reflect.Value) (good bool)","Funname":"yaml.decoder.mappingStruct","Returntype":"(good bool)","Args":"n *node, out reflect.Value"},{"Uniquefunname":"func (d *decoder) merge(n *node, out reflect.Value)","Funname":"yaml.decoder.merge","Returntype":"","Args":"n *node, out reflect.Value"},{"Uniquefunname":"func yaml.decoder.prepare(n *node, out reflect.Value)(newout reflect.Value, unmarshaled, good bool)","Funname":"yaml.decoder.prepare","Returntype":"(newout reflect.Value, unmarshaled, good bool)","Args":"n *node, out reflect.Value"},{"Uniquefunname":"func (d *decoder) scalar(n *node, out reflect.Value) bool","Funname":"yaml.decoder.scalar","Returntype":"bool","Args":"n *node, out reflect.Value"},{"Uniquefunname":"func (d *decoder) sequence(n *node, out reflect.Value) (good bool)","Funname":"yaml.decoder.sequence","Returntype":"(good bool)","Args":"n *node, out reflect.Value"},{"Uniquefunname":"func (d *decoder) setMapIndex(n *node, out, k, v reflect.Value)","Funname":"yaml.decoder.setMapIndex","Returntype":"","Args":"n *node, out, k, v reflect.Value"},{"Uniquefunname":"func (d *decoder) terror(n *node, tag string, out reflect.Value)","Funname":"yaml.decoder.terror","Returntype":"","Args":"n *node, tag string, out reflect.Value"},{"Uniquefunname":"func (d *decoder) unmarshal(n *node, out reflect.Value) (good bool)","Funname":"yaml.decoder.unmarshal","Returntype":"(good bool)","Args":"n *node, out reflect.Value"},{"Uniquefunname":"func failWantMap()","Funname":"yaml.failWantMap","Returntype":"","Args":""},{"Uniquefunname":"func isMerge(n *node) bool","Funname":"yaml.isMerge","Returntype":"bool","Args":"n *node"},{"Uniquefunname":"func newDecoder(strict bool) *decoder","Funname":"yaml.newDecoder","Returntype":"*decoder","Args":"strict bool"},{"Uniquefunname":"func newParser(b []byte) *parser","Funname":"yaml.newParser","Returntype":"*parser","Args":"b []byte"},{"Uniquefunname":"func newParserFromReader(r io.Reader) *parser","Funname":"yaml.newParserFromReader","Returntype":"*parser","Args":"r io.Reader"},{"Uniquefunname":"func (p *parser) alias() *node","Funname":"yaml.parser.alias","Returntype":"*node","Args":""},{"Uniquefunname":"func (p *parser) anchor(n *node, anchor []byte)","Funname":"yaml.parser.anchor","Returntype":"","Args":"n *node, anchor []byte"},{"Uniquefunname":"func (p *parser) destroy()","Funname":"yaml.parser.destroy","Returntype":"","Args":""},{"Uniquefunname":"func (p *parser) document() *node","Funname":"yaml.parser.document","Returntype":"*node","Args":""},{"Uniquefunname":"func (p *parser) expect(e yaml_event_type_t)","Funname":"yaml.parser.expect","Returntype":"","Args":"e yaml_event_type_t"},{"Uniquefunname":"func (p *parser) fail()","Funname":"yaml.parser.fail","Returntype":"","Args":""},{"Uniquefunname":"func (p *parser) init()","Funname":"yaml.parser.init","Returntype":"","Args":""},{"Uniquefunname":"func (p *parser) mapping() *node","Funname":"yaml.parser.mapping","Returntype":"*node","Args":""},{"Uniquefunname":"func (p *parser) node(kind int) *node","Funname":"yaml.parser.node","Returntype":"*node","Args":"kind int"},{"Uniquefunname":"func (p *parser) parse() *node","Funname":"yaml.parser.parse","Returntype":"*node","Args":""},{"Uniquefunname":"func (p *parser) peek() yaml_event_type_t","Funname":"yaml.parser.peek","Returntype":"yaml_event_type_t","Args":""},{"Uniquefunname":"func (p *parser) scalar() *node","Funname":"yaml.parser.scalar","Returntype":"*node","Args":""},{"Uniquefunname":"func (p *parser) sequence() *node","Funname":"yaml.parser.sequence","Returntype":"*node","Args":""},{"Uniquefunname":"func resetMap(out reflect.Value)","Funname":"yaml.resetMap","Returntype":"","Args":"out reflect.Value"},{"Uniquefunname":"func settableValueOf(i interface","Funname":"yaml.settableValueOf","Returntype":"reflect.Value","Args":"i interface{}"}],"Records":[{"Name":"const:yaml","Fields":["yaml.aliasNode","yaml.documentNode","yaml.mappingNode","yaml.scalarNode","yaml.sequenceNode"]},{"Name":"struct:yaml.decoder","Fields":["yaml.decoder.aliases map[*node]bool","yaml.decoder.doc *node","yaml.decoder.mapType reflect.Type","yaml.decoder.strict bool","yaml.decoder.terrors []string"]},{"Name":"var:yaml","Fields":["yaml.defaultMapType","yaml.durationType","yaml.ifaceType","yaml.mapItemType","yaml.ptrTimeType","yaml.timeType","yaml.zeroValue"]},{"Name":"struct:yaml.node","Fields":["yaml.node.alias *node","yaml.node.anchors map[string]*node","yaml.node.children []*node","yaml.node.column int","yaml.node.implicit bool","yaml.node.kind int","yaml.node.line int","yaml.node.tag string","yaml.node.value string"]},{"Name":"struct:yaml.parser","Fields":["yaml.parser.doc *node","yaml.parser.doneInit bool","yaml.parser.event yaml_event_t","yaml.parser.parser yaml_parser_t"]}]}
{"Filepath":"vendor/src/gopkg.in/yaml.v2/decode_test.go","Functions":[{"Uniquefunname":"func (errReader) Read([]byte) (int, error)","Funname":"Read","Returntype":"(int, error)","Args":"[]byte"},{"Uniquefunname":"func (s *S) TestDecoder(c *C)","Funname":"TestDecoder","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *S) TestDecoderErrors(c *C)","Funname":"TestDecoderErrors","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *S) TestDecoderReadError(c *C)","Funname":"TestDecoderReadError","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *S) TestDecoderSingleDocument(c *C)","Funname":"TestDecoderSingleDocument","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *S) TestFuzzCrashers(c *C)","Funname":"TestFuzzCrashers","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *S) TestMerge(c *C)","Funname":"TestMerge","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *S) TestMergeStruct(c *C)","Funname":"TestMergeStruct","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *S) TestUnmarshal(c *C)","Funname":"TestUnmarshal","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *S) TestUnmarshalErrors(c *C)","Funname":"TestUnmarshalErrors","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *S) TestUnmarshalFullTimestamp(c *C)","Funname":"TestUnmarshalFullTimestamp","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *S) TestUnmarshalNaN(c *C)","Funname":"TestUnmarshalNaN","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *S) TestUnmarshalNull(c *C)","Funname":"TestUnmarshalNull","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *S) TestUnmarshalSliceOnPreset(c *C)","Funname":"TestUnmarshalSliceOnPreset","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *S) TestUnmarshalStrict(c *C)","Funname":"TestUnmarshalStrict","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *S) TestUnmarshalerError(c *C)","Funname":"TestUnmarshalerError","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *S) TestUnmarshalerPointerField(c *C)","Funname":"TestUnmarshalerPointerField","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *S) TestUnmarshalerRetry(c *C)","Funname":"TestUnmarshalerRetry","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *S) TestUnmarshalerTypeError(c *C)","Funname":"TestUnmarshalerTypeError","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *S) TestUnmarshalerTypeErrorProxying(c *C)","Funname":"TestUnmarshalerTypeErrorProxying","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *S) TestUnmarshalerValueField(c *C)","Funname":"TestUnmarshalerValueField","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *S) TestUnmarshalerWholeDocument(c *C)","Funname":"TestUnmarshalerWholeDocument","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (t *textUnmarshaler) UnmarshalText(s []byte) error","Funname":"UnmarshalText","Returntype":"error","Args":"s []byte"},{"Uniquefunname":"func (ft *failingUnmarshaler) UnmarshalYAML(unmarshal func(interface","Funname":"UnmarshalYAML","Returntype":"error","Args":"unmarshal func(interface{}) error"},{"Uniquefunname":"func (o *unmarshalerType) UnmarshalYAML(unmarshal func(v interface","Funname":"UnmarshalYAML","Returntype":"error","Args":"unmarshal func(v interface{}) error"},{"Uniquefunname":"func (su *sliceUnmarshaler) UnmarshalYAML(unmarshal func(interface","Funname":"UnmarshalYAML","Returntype":"error","Args":"unmarshal func(interface{}) error"},{"Uniquefunname":"func (v *proxyTypeError) UnmarshalYAML(unmarshal func(interface","Funname":"UnmarshalYAML","Returntype":"error","Args":"unmarshal func(interface{}) error"},{"Uniquefunname":"func (s *S) TestDecoder(c *C)","Funname":"yaml_test.S.TestDecoder","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *S) TestDecoderErrors(c *C)","Funname":"yaml_test.S.TestDecoderErrors","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *S) TestDecoderReadError(c *C)","Funname":"yaml_test.S.TestDecoderReadError","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *S) TestDecoderSingleDocument(c *C)","Funname":"yaml_test.S.TestDecoderSingleDocument","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *S) TestFuzzCrashers(c *C)","Funname":"yaml_test.S.TestFuzzCrashers","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *S) TestMerge(c *C)","Funname":"yaml_test.S.TestMerge","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *S) TestMergeStruct(c *C)","Funname":"yaml_test.S.TestMergeStruct","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *S) TestUnmarshal(c *C)","Funname":"yaml_test.S.TestUnmarshal","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *S) TestUnmarshalErrors(c *C)","Funname":"yaml_test.S.TestUnmarshalErrors","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *S) TestUnmarshalFullTimestamp(c *C)","Funname":"yaml_test.S.TestUnmarshalFullTimestamp","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *S) TestUnmarshalNaN(c *C)","Funname":"yaml_test.S.TestUnmarshalNaN","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *S) TestUnmarshalNull(c *C)","Funname":"yaml_test.S.TestUnmarshalNull","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *S) TestUnmarshalSliceOnPreset(c *C)","Funname":"yaml_test.S.TestUnmarshalSliceOnPreset","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *S) TestUnmarshalStrict(c *C)","Funname":"yaml_test.S.TestUnmarshalStrict","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *S) TestUnmarshalerError(c *C)","Funname":"yaml_test.S.TestUnmarshalerError","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *S) TestUnmarshalerPointerField(c *C)","Funname":"yaml_test.S.TestUnmarshalerPointerField","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *S) TestUnmarshalerRetry(c *C)","Funname":"yaml_test.S.TestUnmarshalerRetry","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *S) TestUnmarshalerTypeError(c *C)","Funname":"yaml_test.S.TestUnmarshalerTypeError","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *S) TestUnmarshalerTypeErrorProxying(c *C)","Funname":"yaml_test.S.TestUnmarshalerTypeErrorProxying","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *S) TestUnmarshalerValueField(c *C)","Funname":"yaml_test.S.TestUnmarshalerValueField","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *S) TestUnmarshalerWholeDocument(c *C)","Funname":"yaml_test.S.TestUnmarshalerWholeDocument","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (errReader) Read([]byte) (int, error)","Funname":"yaml_test.errReader.Read","Returntype":"(int, error)","Args":"[]byte"},{"Uniquefunname":"func (ft *failingUnmarshaler) UnmarshalYAML(unmarshal func(interface","Funname":"yaml_test.failingUnmarshaler.UnmarshalYAML","Returntype":"error","Args":"unmarshal func(interface{}) error"},{"Uniquefunname":"func (v *proxyTypeError) UnmarshalYAML(unmarshal func(interface","Funname":"yaml_test.proxyTypeError.UnmarshalYAML","Returntype":"error","Args":"unmarshal func(interface{}) error"},{"Uniquefunname":"func (su *sliceUnmarshaler) UnmarshalYAML(unmarshal func(interface","Funname":"yaml_test.sliceUnmarshaler.UnmarshalYAML","Returntype":"error","Args":"unmarshal func(interface{}) error"},{"Uniquefunname":"func (t *textUnmarshaler) UnmarshalText(s []byte) error","Funname":"yaml_test.textUnmarshaler.UnmarshalText","Returntype":"error","Args":"s []byte"},{"Uniquefunname":"func (o *unmarshalerType) UnmarshalYAML(unmarshal func(v interface","Funname":"yaml_test.unmarshalerType.UnmarshalYAML","Returntype":"error","Args":"unmarshal func(v interface{}) error"}],"Records":[{"Name":"var:yaml_test","Fields":["yaml_test.decoderTests","yaml_test.failingErr","yaml_test.i","yaml_test.i","yaml_test.mergeTests","yaml_test.s","yaml_test.s","yaml_test.unmarshalErrorTests","yaml_test.unmarshalIntTest","yaml_test.unmarshalNullTests","yaml_test.unmarshalStrictTests","yaml_test.unmarshalTests","yaml_test.unmarshalerResult","yaml_test.unmarshalerTests"]},{"Name":"struct:yaml_test.inlineB","Fields":["yaml_test.inlineB.B int"]},{"Name":"struct:yaml_test.inlineC","Fields":["yaml_test.inlineC.C int"]},{"Name":"struct:yaml_test.textUnmarshaler","Fields":["yaml_test.textUnmarshaler.S string"]},{"Name":"struct:yaml_test.unmarshalerPointer","Fields":["yaml_test.unmarshalerPointer.Field *unmarshalerType"]},{"Name":"struct:yaml_test.unmarshalerType","Fields":["yaml_test.unmarshalerType.value interface{}"]},{"Name":"struct:yaml_test.unmarshalerValue","Fields":["yaml_test.unmarshalerValue.Field unmarshalerType"]}]}
{"Filepath":"vendor/src/gopkg.in/yaml.v2/emitterc.go","Functions":[{"Uniquefunname":"func flush(emitter *yaml_emitter_t) bool","Funname":"flush","Returntype":"bool","Args":"emitter *yaml_emitter_t"},{"Uniquefunname":"func put(emitter *yaml_emitter_t, value byte) bool","Funname":"put","Returntype":"bool","Args":"emitter *yaml_emitter_t, value byte"},{"Uniquefunname":"func put_break(emitter *yaml_emitter_t) bool","Funname":"put_break","Returntype":"bool","Args":"emitter *yaml_emitter_t"},{"Uniquefunname":"func write(emitter *yaml_emitter_t, s []byte, i *int) bool","Funname":"write","Returntype":"bool","Args":"emitter *yaml_emitter_t, s []byte, i *int"},{"Uniquefunname":"func write_all(emitter *yaml_emitter_t, s []byte) bool","Funname":"write_all","Returntype":"bool","Args":"emitter *yaml_emitter_t, s []byte"},{"Uniquefunname":"func write_break(emitter *yaml_emitter_t, s []byte, i *int) bool","Funname":"write_break","Returntype":"bool","Args":"emitter *yaml_emitter_t, s []byte, i *int"},{"Uniquefunname":"func flush(emitter *yaml_emitter_t) bool","Funname":"yaml.flush","Returntype":"bool","Args":"emitter *yaml_emitter_t"},{"Uniquefunname":"func put(emitter *yaml_emitter_t, value byte) bool","Funname":"yaml.put","Returntype":"bool","Args":"emitter *yaml_emitter_t, value byte"},{"Uniquefunname":"func put_break(emitter *yaml_emitter_t) bool","Funname":"yaml.put_break","Returntype":"bool","Args":"emitter *yaml_emitter_t"},{"Uniquefunname":"func write(emitter *yaml_emitter_t, s []byte, i *int) bool","Funname":"yaml.write","Returntype":"bool","Args":"emitter *yaml_emitter_t, s []byte, i *int"},{"Uniquefunname":"func write_all(emitter *yaml_emitter_t, s []byte) bool","Funname":"yaml.write_all","Returntype":"bool","Args":"emitter *yaml_emitter_t, s []byte"},{"Uniquefunname":"func write_break(emitter *yaml_emitter_t, s []byte, i *int) bool","Funname":"yaml.write_break","Returntype":"bool","Args":"emitter *yaml_emitter_t, s []byte, i *int"},{"Uniquefunname":"func yaml_emitter_analyze_anchor(emitter *yaml_emitter_t, anchor []byte, alias bool) bool","Funname":"yaml.yaml_emitter_analyze_anchor","Returntype":"bool","Args":"emitter *yaml_emitter_t, anchor []byte, alias bool"},{"Uniquefunname":"func yaml_emitter_analyze_event(emitter *yaml_emitter_t, event *yaml_event_t) bool","Funname":"yaml.yaml_emitter_analyze_event","Returntype":"bool","Args":"emitter *yaml_emitter_t, event *yaml_event_t"},{"Uniquefunname":"func yaml_emitter_analyze_scalar(emitter *yaml_emitter_t, value []byte) bool","Funname":"yaml.yaml_emitter_analyze_scalar","Returntype":"bool","Args":"emitter *yaml_emitter_t, value []byte"},{"Uniquefunname":"func yaml_emitter_analyze_tag(emitter *yaml_emitter_t, tag []byte) bool","Funname":"yaml.yaml_emitter_analyze_tag","Returntype":"bool","Args":"emitter *yaml_emitter_t, tag []byte"},{"Uniquefunname":"func yaml.yaml_emitter_analyze_tag_directive(emitter *yaml_emitter_t, tag_directive *yaml_tag_directive_t)bool","Funname":"yaml.yaml_emitter_analyze_tag_directive","Returntype":"bool","Args":"emitter *yaml_emitter_t, tag_directive *yaml_tag_directive_t"},{"Uniquefunname":"func yaml.yaml_emitter_analyze_version_directive(emitter *yaml_emitter_t, version_directive *yaml_version_directive_t)bool","Funname":"yaml.yaml_emitter_analyze_version_directive","Returntype":"bool","Args":"emitter *yaml_emitter_t, version_directive *yaml_version_directive_t"},{"Uniquefunname":"func yaml.yaml_emitter_append_tag_directive(emitter *yaml_emitter_t, value *yaml_tag_directive_t, allow_duplicates bool)bool","Funname":"yaml.yaml_emitter_append_tag_directive","Returntype":"bool","Args":"emitter *yaml_emitter_t, value *yaml_tag_directive_t, allow_duplicates bool"},{"Uniquefunname":"func yaml_emitter_check_empty_document(emitter *yaml_emitter_t) bool","Funname":"yaml.yaml_emitter_check_empty_document","Returntype":"bool","Args":"emitter *yaml_emitter_t"},{"Uniquefunname":"func yaml_emitter_check_empty_mapping(emitter *yaml_emitter_t) bool","Funname":"yaml.yaml_emitter_check_empty_mapping","Returntype":"bool","Args":"emitter *yaml_emitter_t"},{"Uniquefunname":"func yaml_emitter_check_empty_sequence(emitter *yaml_emitter_t) bool","Funname":"yaml.yaml_emitter_check_empty_sequence","Returntype":"bool","Args":"emitter *yaml_emitter_t"},{"Uniquefunname":"func yaml_emitter_check_simple_key(emitter *yaml_emitter_t) bool","Funname":"yaml.yaml_emitter_check_simple_key","Returntype":"bool","Args":"emitter *yaml_emitter_t"},{"Uniquefunname":"func yaml_emitter_emit(emitter *yaml_emitter_t, event *yaml_event_t) bool","Funname":"yaml.yaml_emitter_emit","Returntype":"bool","Args":"emitter *yaml_emitter_t, event *yaml_event_t"},{"Uniquefunname":"func yaml_emitter_emit_alias(emitter *yaml_emitter_t, event *yaml_event_t) bool","Funname":"yaml.yaml_emitter_emit_alias","Returntype":"bool","Args":"emitter *yaml_emitter_t, event *yaml_event_t"},{"Uniquefunname":"func yaml.yaml_emitter_emit_block_mapping_key(emitter *yaml_emitter_t, event *yaml_event_t, first bool)bool","Funname":"yaml.yaml_emitter_emit_block_mapping_key","Returntype":"bool","Args":"emitter *yaml_emitter_t, event *yaml_event_t, first bool"},{"Uniquefunname":"func yaml.yaml_emitter_emit_block_mapping_value(emitter *yaml_emitter_t, event *yaml_event_t, simple bool)bool","Funname":"yaml.yaml_emitter_emit_block_mapping_value","Returntype":"bool","Args":"emitter *yaml_emitter_t, event *yaml_event_t, simple bool"},{"Uniquefunname":"func yaml.yaml_emitter_emit_block_sequence_item(emitter *yaml_emitter_t, event *yaml_event_t, first bool)bool","Funname":"yaml.yaml_emitter_emit_block_sequence_item","Returntype":"bool","Args":"emitter *yaml_emitter_t, event *yaml_event_t, first bool"},{"Uniquefunname":"func yaml_emitter_emit_document_content(emitter *yaml_emitter_t, event *yaml_event_t) bool","Funname":"yaml.yaml_emitter_emit_document_content","Returntype":"bool","Args":"emitter *yaml_emitter_t, event *yaml_event_t"},{"Uniquefunname":"func yaml_emitter_emit_document_end(emitter *yaml_emitter_t, event *yaml_event_t) bool","Funname":"yaml.yaml_emitter_emit_document_end","Returntype":"bool","Args":"emitter *yaml_emitter_t, event *yaml_event_t"},{"Uniquefunname":"func yaml.yaml_emitter_emit_document_start(emitter *yaml_emitter_t, event *yaml_event_t, first bool)bool","Funname":"yaml.yaml_emitter_emit_document_start","Returntype":"bool","Args":"emitter *yaml_emitter_t, event *yaml_event_t, first bool"},{"Uniquefunname":"func yaml.yaml_emitter_emit_flow_mapping_key(emitter *yaml_emitter_t, event *yaml_event_t, first bool)bool","Funname":"yaml.yaml_emitter_emit_flow_mapping_key","Returntype":"bool","Args":"emitter *yaml_emitter_t, event *yaml_event_t, first bool"},{"Uniquefunname":"func yaml.yaml_emitter_emit_flow_mapping_value(emitter *yaml_emitter_t, event *yaml_event_t, simple bool)bool","Funname":"yaml.yaml_emitter_emit_flow_mapping_value","Returntype":"bool","Args":"emitter *yaml_emitter_t, event *yaml_event_t, simple bool"},{"Uniquefunname":"func yaml.yaml_emitter_emit_flow_sequence_item(emitter *yaml_emitter_t, event *yaml_event_t, first bool)bool","Funname":"yaml.yaml_emitter_emit_flow_sequence_item","Returntype":"bool","Args":"emitter *yaml_emitter_t, event *yaml_event_t, first bool"},{"Uniquefunname":"func yaml_emitter_emit_mapping_start(emitter *yaml_emitter_t, event *yaml_event_t) bool","Funname":"yaml.yaml_emitter_emit_mapping_start","Returntype":"bool","Args":"emitter *yaml_emitter_t, event *yaml_event_t"},{"Uniquefunname":"func yaml.yaml_emitter_emit_node(emitter *yaml_emitter_t, event *yaml_event_t, root bool, sequence bool, mapping bool, simple_key bool)bool","Funname":"yaml.yaml_emitter_emit_node","Returntype":"bool","Args":"emitter *yaml_emitter_t, event *yaml_event_t, root bool, sequence bool, mapping bool, simple_key bool"},{"Uniquefunname":"func yaml_emitter_emit_scalar(emitter *yaml_emitter_t, event *yaml_event_t) bool","Funname":"yaml.yaml_emitter_emit_scalar","Returntype":"bool","Args":"emitter *yaml_emitter_t, event *yaml_event_t"},{"Uniquefunname":"func yaml_emitter_emit_sequence_start(emitter *yaml_emitter_t, event *yaml_event_t) bool","Funname":"yaml.yaml_emitter_emit_sequence_start","Returntype":"bool","Args":"emitter *yaml_emitter_t, event *yaml_event_t"},{"Uniquefunname":"func yaml_emitter_emit_stream_start(emitter *yaml_emitter_t, event *yaml_event_t) bool","Funname":"yaml.yaml_emitter_emit_stream_start","Returntype":"bool","Args":"emitter *yaml_emitter_t, event *yaml_event_t"},{"Uniquefunname":"func yaml_emitter_increase_indent(emitter *yaml_emitter_t, flow, indentless bool) bool","Funname":"yaml.yaml_emitter_increase_indent","Returntype":"bool","Args":"emitter *yaml_emitter_t, flow, indentless bool"},{"Uniquefunname":"func yaml_emitter_need_more_events(emitter *yaml_emitter_t) bool","Funname":"yaml.yaml_emitter_need_more_events","Returntype":"bool","Args":"emitter *yaml_emitter_t"},{"Uniquefunname":"func yaml_emitter_process_anchor(emitter *yaml_emitter_t) bool","Funname":"yaml.yaml_emitter_process_anchor","Returntype":"bool","Args":"emitter *yaml_emitter_t"},{"Uniquefunname":"func yaml_emitter_process_scalar(emitter *yaml_emitter_t) bool","Funname":"yaml.yaml_emitter_process_scalar","Returntype":"bool","Args":"emitter *yaml_emitter_t"},{"Uniquefunname":"func yaml_emitter_process_tag(emitter *yaml_emitter_t) bool","Funname":"yaml.yaml_emitter_process_tag","Returntype":"bool","Args":"emitter *yaml_emitter_t"},{"Uniquefunname":"func yaml_emitter_select_scalar_style(emitter *yaml_emitter_t, event *yaml_event_t) bool","Funname":"yaml.yaml_emitter_select_scalar_style","Returntype":"bool","Args":"emitter *yaml_emitter_t, event *yaml_event_t"},{"Uniquefunname":"func yaml_emitter_set_emitter_error(emitter *yaml_emitter_t, problem string) bool","Funname":"yaml.yaml_emitter_set_emitter_error","Returntype":"bool","Args":"emitter *yaml_emitter_t, problem string"},{"Uniquefunname":"func yaml_emitter_state_machine(emitter *yaml_emitter_t, event *yaml_event_t) bool","Funname":"yaml.yaml_emitter_state_machine","Returntype":"bool","Args":"emitter *yaml_emitter_t, event *yaml_event_t"},{"Uniquefunname":"func yaml_emitter_write_anchor(emitter *yaml_emitter_t, value []byte) bool","Funname":"yaml.yaml_emitter_write_anchor","Returntype":"bool","Args":"emitter *yaml_emitter_t, value []byte"},{"Uniquefunname":"func yaml_emitter_write_block_scalar_hints(emitter *yaml_emitter_t, value []byte) bool","Funname":"yaml.yaml_emitter_write_block_scalar_hints","Returntype":"bool","Args":"emitter *yaml_emitter_t, value []byte"},{"Uniquefunname":"func yaml_emitter_write_bom(emitter *yaml_emitter_t) bool","Funname":"yaml.yaml_emitter_write_bom","Returntype":"bool","Args":"emitter *yaml_emitter_t"},{"Uniquefunname":"func yaml.yaml_emitter_write_double_quoted_scalar(emitter *yaml_emitter_t, value []byte, allow_breaks bool)bool","Funname":"yaml.yaml_emitter_write_double_quoted_scalar","Returntype":"bool","Args":"emitter *yaml_emitter_t, value []byte, allow_breaks bool"},{"Uniquefunname":"func yaml_emitter_write_folded_scalar(emitter *yaml_emitter_t, value []byte) bool","Funname":"yaml.yaml_emitter_write_folded_scalar","Returntype":"bool","Args":"emitter *yaml_emitter_t, value []byte"},{"Uniquefunname":"func yaml_emitter_write_indent(emitter *yaml_emitter_t) bool","Funname":"yaml.yaml_emitter_write_indent","Returntype":"bool","Args":"emitter *yaml_emitter_t"},{"Uniquefunname":"func yaml.yaml_emitter_write_indicator(emitter *yaml_emitter_t, indicator []byte, need_whitespace, is_whitespace, is_indention bool)bool","Funname":"yaml.yaml_emitter_write_indicator","Returntype":"bool","Args":"emitter *yaml_emitter_t, indicator []byte, need_whitespace, is_whitespace, is_indention bool"},{"Uniquefunname":"func yaml_emitter_write_literal_scalar(emitter *yaml_emitter_t, value []byte) bool","Funname":"yaml.yaml_emitter_write_literal_scalar","Returntype":"bool","Args":"emitter *yaml_emitter_t, value []byte"},{"Uniquefunname":"func yaml.yaml_emitter_write_plain_scalar(emitter *yaml_emitter_t, value []byte, allow_breaks bool)bool","Funname":"yaml.yaml_emitter_write_plain_scalar","Returntype":"bool","Args":"emitter *yaml_emitter_t, value []byte, allow_breaks bool"},{"Uniquefunname":"func yaml.yaml_emitter_write_single_quoted_scalar(emitter *yaml_emitter_t, value []byte, allow_breaks bool)bool","Funname":"yaml.yaml_emitter_write_single_quoted_scalar","Returntype":"bool","Args":"emitter *yaml_emitter_t, value []byte, allow_breaks bool"},{"Uniquefunname":"func yaml.yaml_emitter_write_tag_content(emitter *yaml_emitter_t, value []byte, need_whitespace bool)bool","Funname":"yaml.yaml_emitter_write_tag_content","Returntype":"bool","Args":"emitter *yaml_emitter_t, value []byte, need_whitespace bool"},{"Uniquefunname":"func yaml_emitter_write_tag_handle(emitter *yaml_emitter_t, value []byte) bool","Funname":"yaml.yaml_emitter_write_tag_handle","Returntype":"bool","Args":"emitter *yaml_emitter_t, value []byte"},{"Uniquefunname":"func yaml_emitter_analyze_anchor(emitter *yaml_emitter_t, anchor []byte, alias bool) bool","Funname":"yaml_emitter_analyze_anchor","Returntype":"bool","Args":"emitter *yaml_emitter_t, anchor []byte, alias bool"},{"Uniquefunname":"func yaml_emitter_analyze_event(emitter *yaml_emitter_t, event *yaml_event_t) bool","Funname":"yaml_emitter_analyze_event","Returntype":"bool","Args":"emitter *yaml_emitter_t, event *yaml_event_t"},{"Uniquefunname":"func yaml_emitter_analyze_scalar(emitter *yaml_emitter_t, value []byte) bool","Funname":"yaml_emitter_analyze_scalar","Returntype":"bool","Args":"emitter *yaml_emitter_t, value []byte"},{"Uniquefunname":"func yaml_emitter_analyze_tag(emitter *yaml_emitter_t, tag []byte) bool","Funname":"yaml_emitter_analyze_tag","Returntype":"bool","Args":"emitter *yaml_emitter_t, tag []byte"},{"Uniquefunname":"func yaml_emitter_analyze_tag_directive(emitter *yaml_emitter_t, tag_directive *yaml_tag_directive_t)bool","Funname":"yaml_emitter_analyze_tag_directive","Returntype":"bool","Args":"emitter *yaml_emitter_t, tag_directive *yaml_tag_directive_t"},{"Uniquefunname":"func yaml_emitter_analyze_version_directive(emitter *yaml_emitter_t, version_directive *yaml_version_directive_t)bool","Funname":"yaml_emitter_analyze_version_directive","Returntype":"bool","Args":"emitter *yaml_emitter_t, version_directive *yaml_version_directive_t"},{"Uniquefunname":"func yaml_emitter_append_tag_directive(emitter *yaml_emitter_t, value *yaml_tag_directive_t, allow_duplicates bool)bool","Funname":"yaml_emitter_append_tag_directive","Returntype":"bool","Args":"emitter *yaml_emitter_t, value *yaml_tag_directive_t, allow_duplicates bool"},{"Uniquefunname":"func yaml_emitter_check_empty_document(emitter *yaml_emitter_t) bool","Funname":"yaml_emitter_check_empty_document","Returntype":"bool","Args":"emitter *yaml_emitter_t"},{"Uniquefunname":"func yaml_emitter_check_empty_mapping(emitter *yaml_emitter_t) bool","Funname":"yaml_emitter_check_empty_mapping","Returntype":"bool","Args":"emitter *yaml_emitter_t"},{"Uniquefunname":"func yaml_emitter_check_empty_sequence(emitter *yaml_emitter_t) bool","Funname":"yaml_emitter_check_empty_sequence","Returntype":"bool","Args":"emitter *yaml_emitter_t"},{"Uniquefunname":"func yaml_emitter_check_simple_key(emitter *yaml_emitter_t) bool","Funname":"yaml_emitter_check_simple_key","Returntype":"bool","Args":"emitter *yaml_emitter_t"},{"Uniquefunname":"func yaml_emitter_emit(emitter *yaml_emitter_t, event *yaml_event_t) bool","Funname":"yaml_emitter_emit","Returntype":"bool","Args":"emitter *yaml_emitter_t, event *yaml_event_t"},{"Uniquefunname":"func yaml_emitter_emit_alias(emitter *yaml_emitter_t, event *yaml_event_t) bool","Funname":"yaml_emitter_emit_alias","Returntype":"bool","Args":"emitter *yaml_emitter_t, event *yaml_event_t"},{"Uniquefunname":"func yaml_emitter_emit_block_mapping_key(emitter *yaml_emitter_t, event *yaml_event_t, first bool)bool","Funname":"yaml_emitter_emit_block_mapping_key","Returntype":"bool","Args":"emitter *yaml_emitter_t, event *yaml_event_t, first bool"},{"Uniquefunname":"func yaml_emitter_emit_block_mapping_value(emitter *yaml_emitter_t, event *yaml_event_t, simple bool)bool","Funname":"yaml_emitter_emit_block_mapping_value","Returntype":"bool","Args":"emitter *yaml_emitter_t, event *yaml_event_t, simple bool"},{"Uniquefunname":"func yaml_emitter_emit_block_sequence_item(emitter *yaml_emitter_t, event *yaml_event_t, first bool)bool","Funname":"yaml_emitter_emit_block_sequence_item","Returntype":"bool","Args":"emitter *yaml_emitter_t, event *yaml_event_t, first bool"},{"Uniquefunname":"func yaml_emitter_emit_document_content(emitter *yaml_emitter_t, event *yaml_event_t) bool","Funname":"yaml_emitter_emit_document_content","Returntype":"bool","Args":"emitter *yaml_emitter_t, event *yaml_event_t"},{"Uniquefunname":"func yaml_emitter_emit_document_end(emitter *yaml_emitter_t, event *yaml_event_t) bool","Funname":"yaml_emitter_emit_document_end","Returntype":"bool","Args":"emitter *yaml_emitter_t, event *yaml_event_t"},{"Uniquefunname":"func yaml_emitter_emit_document_start(emitter *yaml_emitter_t, event *yaml_event_t, first bool)bool","Funname":"yaml_emitter_emit_document_start","Returntype":"bool","Args":"emitter *yaml_emitter_t, event *yaml_event_t, first bool"},{"Uniquefunname":"func yaml_emitter_emit_flow_mapping_key(emitter *yaml_emitter_t, event *yaml_event_t, first bool)bool","Funname":"yaml_emitter_emit_flow_mapping_key","Returntype":"bool","Args":"emitter *yaml_emitter_t, event *yaml_event_t, first bool"},{"Uniquefunname":"func yaml_emitter_emit_flow_mapping_value(emitter *yaml_emitter_t, event *yaml_event_t, simple bool)bool","Funname":"yaml_emitter_emit_flow_mapping_value","Returntype":"bool","Args":"emitter *yaml_emitter_t, event *yaml_event_t, simple bool"},{"Uniquefunname":"func yaml_emitter_emit_flow_sequence_item(emitter *yaml_emitter_t, event *yaml_event_t, first bool)bool","Funname":"yaml_emitter_emit_flow_sequence_item","Returntype":"bool","Args":"emitter *yaml_emitter_t, event *yaml_event_t, first bool"},{"Uniquefunname":"func yaml_emitter_emit_mapping_start(emitter *yaml_emitter_t, event *yaml_event_t) bool","Funname":"yaml_emitter_emit_mapping_start","Returntype":"bool","Args":"emitter *yaml_emitter_t, event *yaml_event_t"},{"Uniquefunname":"func yaml_emitter_emit_node(emitter *yaml_emitter_t, event *yaml_event_t, root bool, sequence bool, mapping bool, simple_key bool)bool","Funname":"yaml_emitter_emit_node","Returntype":"bool","Args":"emitter *yaml_emitter_t, event *yaml_event_t, root bool, sequence bool, mapping bool, simple_key bool"},{"Uniquefunname":"func yaml_emitter_emit_scalar(emitter *yaml_emitter_t, event *yaml_event_t) bool","Funname":"yaml_emitter_emit_scalar","Returntype":"bool","Args":"emitter *yaml_emitter_t, event *yaml_event_t"},{"Uniquefunname":"func yaml_emitter_emit_sequence_start(emitter *yaml_emitter_t, event *yaml_event_t) bool","Funname":"yaml_emitter_emit_sequence_start","Returntype":"bool","Args":"emitter *yaml_emitter_t, event *yaml_event_t"},{"Uniquefunname":"func yaml_emitter_emit_stream_start(emitter *yaml_emitter_t, event *yaml_event_t) bool","Funname":"yaml_emitter_emit_stream_start","Returntype":"bool","Args":"emitter *yaml_emitter_t, event *yaml_event_t"},{"Uniquefunname":"func yaml_emitter_increase_indent(emitter *yaml_emitter_t, flow, indentless bool) bool","Funname":"yaml_emitter_increase_indent","Returntype":"bool","Args":"emitter *yaml_emitter_t, flow, indentless bool"},{"Uniquefunname":"func yaml_emitter_need_more_events(emitter *yaml_emitter_t) bool","Funname":"yaml_emitter_need_more_events","Returntype":"bool","Args":"emitter *yaml_emitter_t"},{"Uniquefunname":"func yaml_emitter_process_anchor(emitter *yaml_emitter_t) bool","Funname":"yaml_emitter_process_anchor","Returntype":"bool","Args":"emitter *yaml_emitter_t"},{"Uniquefunname":"func yaml_emitter_process_scalar(emitter *yaml_emitter_t) bool","Funname":"yaml_emitter_process_scalar","Returntype":"bool","Args":"emitter *yaml_emitter_t"},{"Uniquefunname":"func yaml_emitter_process_tag(emitter *yaml_emitter_t) bool","Funname":"yaml_emitter_process_tag","Returntype":"bool","Args":"emitter *yaml_emitter_t"},{"Uniquefunname":"func yaml_emitter_select_scalar_style(emitter *yaml_emitter_t, event *yaml_event_t) bool","Funname":"yaml_emitter_select_scalar_style","Returntype":"bool","Args":"emitter *yaml_emitter_t, event *yaml_event_t"},{"Uniquefunname":"func yaml_emitter_set_emitter_error(emitter *yaml_emitter_t, problem string) bool","Funname":"yaml_emitter_set_emitter_error","Returntype":"bool","Args":"emitter *yaml_emitter_t, problem string"},{"Uniquefunname":"func yaml_emitter_state_machine(emitter *yaml_emitter_t, event *yaml_event_t) bool","Funname":"yaml_emitter_state_machine","Returntype":"bool","Args":"emitter *yaml_emitter_t, event *yaml_event_t"},{"Uniquefunname":"func yaml_emitter_write_anchor(emitter *yaml_emitter_t, value []byte) bool","Funname":"yaml_emitter_write_anchor","Returntype":"bool","Args":"emitter *yaml_emitter_t, value []byte"},{"Uniquefunname":"func yaml_emitter_write_block_scalar_hints(emitter *yaml_emitter_t, value []byte) bool","Funname":"yaml_emitter_write_block_scalar_hints","Returntype":"bool","Args":"emitter *yaml_emitter_t, value []byte"},{"Uniquefunname":"func yaml_emitter_write_bom(emitter *yaml_emitter_t) bool","Funname":"yaml_emitter_write_bom","Returntype":"bool","Args":"emitter *yaml_emitter_t"},{"Uniquefunname":"func yaml_emitter_write_double_quoted_scalar(emitter *yaml_emitter_t, value []byte, allow_breaks bool)bool","Funname":"yaml_emitter_write_double_quoted_scalar","Returntype":"bool","Args":"emitter *yaml_emitter_t, value []byte, allow_breaks bool"},{"Uniquefunname":"func yaml_emitter_write_folded_scalar(emitter *yaml_emitter_t, value []byte) bool","Funname":"yaml_emitter_write_folded_scalar","Returntype":"bool","Args":"emitter *yaml_emitter_t, value []byte"},{"Uniquefunname":"func yaml_emitter_write_indent(emitter *yaml_emitter_t) bool","Funname":"yaml_emitter_write_indent","Returntype":"bool","Args":"emitter *yaml_emitter_t"},{"Uniquefunname":"func yaml_emitter_write_indicator(emitter *yaml_emitter_t, indicator []byte, need_whitespace, is_whitespace, is_indention bool)bool","Funname":"yaml_emitter_write_indicator","Returntype":"bool","Args":"emitter *yaml_emitter_t, indicator []byte, need_whitespace, is_whitespace, is_indention bool"},{"Uniquefunname":"func yaml_emitter_write_literal_scalar(emitter *yaml_emitter_t, value []byte) bool","Funname":"yaml_emitter_write_literal_scalar","Returntype":"bool","Args":"emitter *yaml_emitter_t, value []byte"},{"Uniquefunname":"func yaml_emitter_write_plain_scalar(emitter *yaml_emitter_t, value []byte, allow_breaks bool)bool","Funname":"yaml_emitter_write_plain_scalar","Returntype":"bool","Args":"emitter *yaml_emitter_t, value []byte, allow_breaks bool"},{"Uniquefunname":"func yaml_emitter_write_single_quoted_scalar(emitter *yaml_emitter_t, value []byte, allow_breaks bool)bool","Funname":"yaml_emitter_write_single_quoted_scalar","Returntype":"bool","Args":"emitter *yaml_emitter_t, value []byte, allow_breaks bool"},{"Uniquefunname":"func yaml_emitter_write_tag_content(emitter *yaml_emitter_t, value []byte, need_whitespace bool)bool","Funname":"yaml_emitter_write_tag_content","Returntype":"bool","Args":"emitter *yaml_emitter_t, value []byte, need_whitespace bool"},{"Uniquefunname":"func yaml_emitter_write_tag_handle(emitter *yaml_emitter_t, value []byte) bool","Funname":"yaml_emitter_write_tag_handle","Returntype":"bool","Args":"emitter *yaml_emitter_t, value []byte"}],"Records":null}
{"Filepath":"vendor/src/gopkg.in/yaml.v2/encode.go","Functions":[{"Uniquefunname":"func (e *encoder) boolv(tag string, in reflect.Value)","Funname":"boolv","Returntype":"","Args":"tag string, in reflect.Value"},{"Uniquefunname":"func (e *encoder) destroy()","Funname":"destroy","Returntype":"","Args":""},{"Uniquefunname":"func (e *encoder) emit()","Funname":"emit","Returntype":"","Args":""},{"Uniquefunname":"func (e *encoder) emitScalar(value, anchor, tag string, style yaml_scalar_style_t)","Funname":"emitScalar","Returntype":"","Args":"value, anchor, tag string, style yaml_scalar_style_t"},{"Uniquefunname":"func (e *encoder) finish()","Funname":"finish","Returntype":"","Args":""},{"Uniquefunname":"func (e *encoder) floatv(tag string, in reflect.Value)","Funname":"floatv","Returntype":"","Args":"tag string, in reflect.Value"},{"Uniquefunname":"func (e *encoder) init()","Funname":"init","Returntype":"","Args":""},{"Uniquefunname":"func (e *encoder) intv(tag string, in reflect.Value)","Funname":"intv","Returntype":"","Args":"tag string, in reflect.Value"},{"Uniquefunname":"func isBase60Float(s string) (result bool)","Funname":"isBase60Float","Returntype":"(result bool)","Args":"s string"},{"Uniquefunname":"func (e *encoder) itemsv(tag string, in reflect.Value)","Funname":"itemsv","Returntype":"","Args":"tag string, in reflect.Value"},{"Uniquefunname":"func (e *encoder) mappingv(tag string, f func())","Funname":"mappingv","Returntype":"","Args":"tag string, f func()"},{"Uniquefunname":"func (e *encoder) mapv(tag string, in reflect.Value)","Funname":"mapv","Returntype":"","Args":"tag string, in reflect.Value"},{"Uniquefunname":"func (e *encoder) marshal(tag string, in reflect.Value)","Funname":"marshal","Returntype":"","Args":"tag string, in reflect.Value"},{"Uniquefunname":"func (e *encoder) marshalDoc(tag string, in reflect.Value)","Funname":"marshalDoc","Returntype":"","Args":"tag string, in reflect.Value"},{"Uniquefunname":"func (e *encoder) must(ok bool)","Funname":"must","Returntype":"","Args":"ok bool"},{"Uniquefunname":"func newEncoder() *encoder","Funname":"newEncoder","Returntype":"*encoder","Args":""},{"Uniquefunname":"func newEncoderWithWriter(w io.Writer) *encoder","Funname":"newEncoderWithWriter","Returntype":"*encoder","Args":"w io.Writer"},{"Uniquefunname":"func (e *encoder) nilv()","Funname":"nilv","Returntype":"","Args":""},{"Uniquefunname":"func (e *encoder) slicev(tag string, in reflect.Value)","Funname":"slicev","Returntype":"","Args":"tag string, in reflect.Value"},{"Uniquefunname":"func (e *encoder) stringv(tag string, in reflect.Value)","Funname":"stringv","Returntype":"","Args":"tag string, in reflect.Value"},{"Uniquefunname":"func (e *encoder) structv(tag string, in reflect.Value)","Funname":"structv","Returntype":"","Args":"tag string, in reflect.Value"},{"Uniquefunname":"func (e *encoder) timev(tag string, in reflect.Value)","Funname":"timev","Returntype":"","Args":"tag string, in reflect.Value"},{"Uniquefunname":"func (e *encoder) uintv(tag string, in reflect.Value)","Funname":"uintv","Returntype":"","Args":"tag string, in reflect.Value"},{"Uniquefunname":"func (e *encoder) boolv(tag string, in reflect.Value)","Funname":"yaml.encoder.boolv","Returntype":"","Args":"tag string, in reflect.Value"},{"Uniquefunname":"func (e *encoder) destroy()","Funname":"yaml.encoder.destroy","Returntype":"","Args":""},{"Uniquefunname":"func (e *encoder) emit()","Funname":"yaml.encoder.emit","Returntype":"","Args":""},{"Uniquefunname":"func (e *encoder) emitScalar(value, anchor, tag string, style yaml_scalar_style_t)","Funname":"yaml.encoder.emitScalar","Returntype":"","Args":"value, anchor, tag string, style yaml_scalar_style_t"},{"Uniquefunname":"func (e *encoder) finish()","Funname":"yaml.encoder.finish","Returntype":"","Args":""},{"Uniquefunname":"func (e *encoder) floatv(tag string, in reflect.Value)","Funname":"yaml.encoder.floatv","Returntype":"","Args":"tag string, in reflect.Value"},{"Uniquefunname":"func (e *encoder) init()","Funname":"yaml.encoder.init","Returntype":"","Args":""},{"Uniquefunname":"func (e *encoder) intv(tag string, in reflect.Value)","Funname":"yaml.encoder.intv","Returntype":"","Args":"tag string, in reflect.Value"},{"Uniquefunname":"func (e *encoder) itemsv(tag string, in reflect.Value)","Funname":"yaml.encoder.itemsv","Returntype":"","Args":"tag string, in reflect.Value"},{"Uniquefunname":"func (e *encoder) mappingv(tag string, f func())","Funname":"yaml.encoder.mappingv","Returntype":"","Args":"tag string, f func()"},{"Uniquefunname":"func (e *encoder) mapv(tag string, in reflect.Value)","Funname":"yaml.encoder.mapv","Returntype":"","Args":"tag string, in reflect.Value"},{"Uniquefunname":"func (e *encoder) marshal(tag string, in reflect.Value)","Funname":"yaml.encoder.marshal","Returntype":"","Args":"tag string, in reflect.Value"},{"Uniquefunname":"func (e *encoder) marshalDoc(tag string, in reflect.Value)","Funname":"yaml.encoder.marshalDoc","Returntype":"","Args":"tag string, in reflect.Value"},{"Uniquefunname":"func (e *encoder) must(ok bool)","Funname":"yaml.encoder.must","Returntype":"","Args":"ok bool"},{"Uniquefunname":"func (e *encoder) nilv()","Funname":"yaml.encoder.nilv","Returntype":"","Args":""},{"Uniquefunname":"func (e *encoder) slicev(tag string, in reflect.Value)","Funname":"yaml.encoder.slicev","Returntype":"","Args":"tag string, in reflect.Value"},{"Uniquefunname":"func (e *encoder) stringv(tag string, in reflect.Value)","Funname":"yaml.encoder.stringv","Returntype":"","Args":"tag string, in reflect.Value"},{"Uniquefunname":"func (e *encoder) structv(tag string, in reflect.Value)","Funname":"yaml.encoder.structv","Returntype":"","Args":"tag string, in reflect.Value"},{"Uniquefunname":"func (e *encoder) timev(tag string, in reflect.Value)","Funname":"yaml.encoder.timev","Returntype":"","Args":"tag string, in reflect.Value"},{"Uniquefunname":"func (e *encoder) uintv(tag string, in reflect.Value)","Funname":"yaml.encoder.uintv","Returntype":"","Args":"tag string, in reflect.Value"},{"Uniquefunname":"func isBase60Float(s string) (result bool)","Funname":"yaml.isBase60Float","Returntype":"(result bool)","Args":"s string"},{"Uniquefunname":"func newEncoder() *encoder","Funname":"yaml.newEncoder","Returntype":"*encoder","Args":""},{"Uniquefunname":"func newEncoderWithWriter(w io.Writer) *encoder","Funname":"yaml.newEncoderWithWriter","Returntype":"*encoder","Args":"w io.Writer"}],"Records":[{"Name":"var:yaml","Fields":["yaml.base60float"]},{"Name":"struct:yaml.encoder","Fields":["yaml.encoder.doneInit bool","yaml.encoder.emitter yaml_emitter_t","yaml.encoder.event yaml_event_t","yaml.encoder.flow bool","yaml.encoder.out []byte"]}]}
{"Filepath":"vendor/src/gopkg.in/yaml.v2/encode_test.go","Functions":[{"Uniquefunname":"func (o marshalerType) MarshalText() ([]byte, error)","Funname":"MarshalText","Returntype":"([]byte, error)","Args":""},{"Uniquefunname":"func (ft *failingMarshaler) MarshalYAML() (interface","Funname":"MarshalYAML","Returntype":"(interface{}, error)","Args":""},{"Uniquefunname":"func (o marshalerType) MarshalYAML() (interface","Funname":"MarshalYAML","Returntype":"(interface{}, error)","Args":""},{"Uniquefunname":"func (s *S) TestEncoderMultipleDocuments(c *C)","Funname":"TestEncoderMultipleDocuments","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *S) TestEncoderSingleDocument(c *C)","Funname":"TestEncoderSingleDocument","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *S) TestEncoderWriteError(c *C)","Funname":"TestEncoderWriteError","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *S) TestMarshal(c *C)","Funname":"TestMarshal","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *S) TestMarshalErrors(c *C)","Funname":"TestMarshalErrors","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *S) TestMarshalTypeCache(c *C)","Funname":"TestMarshalTypeCache","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *S) TestMarshaler(c *C)","Funname":"TestMarshaler","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *S) TestMarshalerError(c *C)","Funname":"TestMarshalerError","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *S) TestMarshalerWholeDocument(c *C)","Funname":"TestMarshalerWholeDocument","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *S) TestSortedOutput(c *C)","Funname":"TestSortedOutput","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (errorWriter) Write([]byte) (int, error)","Funname":"Write","Returntype":"(int, error)","Args":"[]byte"},{"Uniquefunname":"func newTime(t time.Time) *time.Time","Funname":"newTime","Returntype":"*time.Time","Args":"t time.Time"},{"Uniquefunname":"func (s *S) TestEncoderMultipleDocuments(c *C)","Funname":"yaml_test.S.TestEncoderMultipleDocuments","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *S) TestEncoderSingleDocument(c *C)","Funname":"yaml_test.S.TestEncoderSingleDocument","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *S) TestEncoderWriteError(c *C)","Funname":"yaml_test.S.TestEncoderWriteError","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *S) TestMarshal(c *C)","Funname":"yaml_test.S.TestMarshal","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *S) TestMarshalErrors(c *C)","Funname":"yaml_test.S.TestMarshalErrors","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *S) TestMarshalTypeCache(c *C)","Funname":"yaml_test.S.TestMarshalTypeCache","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *S) TestMarshaler(c *C)","Funname":"yaml_test.S.TestMarshaler","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *S) TestMarshalerError(c *C)","Funname":"yaml_test.S.TestMarshalerError","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *S) TestMarshalerWholeDocument(c *C)","Funname":"yaml_test.S.TestMarshalerWholeDocument","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (s *S) TestSortedOutput(c *C)","Funname":"yaml_test.S.TestSortedOutput","Returntype":"","Args":"c *C"},{"Uniquefunname":"func (errorWriter) Write([]byte) (int, error)","Funname":"yaml_test.errorWriter.Write","Returntype":"(int, error)","Args":"[]byte"},{"Uniquefunname":"func (ft *failingMarshaler) MarshalYAML() (interface","Funname":"yaml_test.failingMarshaler.MarshalYAML","Returntype":"(interface{}, error)","Args":""},{"Uniquefunname":"func (o marshalerType) MarshalText() ([]byte, error)","Funname":"yaml_test.marshalerType.MarshalText","Returntype":"([]byte, error)","Args":""},{"Uniquefunname":"func (o marshalerType) MarshalYAML() (interface","Funname":"yaml_test.marshalerType.MarshalYAML","Returntype":"(interface{}, error)","Args":""},{"Uniquefunname":"func newTime(t time.Time) *time.Time","Funname":"yaml_test.newTime","Returntype":"*time.Time","Args":"t time.Time"}],"Records":[{"Name":"var:yaml_test","Fields":["yaml_test.marshalErrorTests","yaml_test.marshalIntTest","yaml_test.marshalTests","yaml_test.marshalerTests"]},{"Name":"struct:yaml_test.marshalerType","Fields":["yaml_test.marshalerType.value interface{}"]},{"Name":"struct:yaml_test.marshalerValue","Fields":["yaml_test.marshalerValue.Field marshalerType"]}]}
{"Filepath":"vendor/src/gopkg.in/yaml.v2/example_embedded_test.go","Functions":[{"Uniquefunname":"func ExampleUnmarshal_embedded()","Funname":"ExampleUnmarshal_embedded","Returntype":"","Args":""},{"Uniquefunname":"func ExampleUnmarshal_embedded()","Funname":"yaml_test.ExampleUnmarshal_embedded","Returntype":"","Args":""}],"Records":[{"Name":"struct:yaml_test.StructA","Fields":["yaml_test.StructA.A string"]},{"Name":"struct:yaml_test.StructB","Fields":["yaml_test.StructB.B string"]},{"Name":"var:yaml_test","Fields":["yaml_test.data"]}]}
{"Filepath":"vendor/src/gopkg.in/yaml.v2/parserc.go","Functions":[{"Uniquefunname":"func peek_token(parser *yaml_parser_t) *yaml_token_t","Funname":"peek_token","Returntype":"*yaml_token_t","Args":"parser *yaml_parser_t"},{"Uniquefunname":"func skip_token(parser *yaml_parser_t)","Funname":"skip_token","Returntype":"","Args":"parser *yaml_parser_t"},{"Uniquefunname":"func peek_token(parser *yaml_parser_t) *yaml_token_t","Funname":"yaml.peek_token","Returntype":"*yaml_token_t","Args":"parser *yaml_parser_t"},{"Uniquefunname":"func skip_token(parser *yaml_parser_t)","Funname":"yaml.skip_token","Returntype":"","Args":"parser *yaml_parser_t"},{"Uniquefunname":"func yaml.yaml_parser_append_tag_directive(parser *yaml_parser_t, value yaml_tag_directive_t, allow_duplicates bool, mark yaml_mark_t)bool","Funname":"yaml.yaml_parser_append_tag_directive","Returntype":"bool","Args":"parser *yaml_parser_t, value yaml_tag_directive_t, allow_duplicates bool, mark yaml_mark_t"},{"Uniquefunname":"func yaml_parser_parse(parser *yaml_parser_t, event *yaml_event_t) bool","Funname":"yaml.yaml_parser_parse","Returntype":"bool","Args":"parser *yaml_parser_t, event *yaml_event_t"},{"Uniquefunname":"func yaml.yaml_parser_parse_block_mapping_key(parser *yaml_parser_t, event *yaml_event_t, first bool)bool","Funname":"yaml.yaml_parser_parse_block_mapping_key","Returntype":"bool","Args":"parser *yaml_parser_t, event *yaml_event_t, first bool"},{"Uniquefunname":"func yaml_parser_parse_block_mapping_value(parser *yaml_parser_t, event *yaml_event_t) bool","Funname":"yaml.yaml_parser_parse_block_mapping_value","Returntype":"bool","Args":"parser *yaml_parser_t, event *yaml_event_t"},{"Uniquefunname":"func yaml.yaml_parser_parse_block_sequence_entry(parser *yaml_parser_t, event *yaml_event_t, first bool)bool","Funname":"yaml.yaml_parser_parse_block_sequence_entry","Returntype":"bool","Args":"parser *yaml_parser_t, event *yaml_event_t, first bool"},{"Uniquefunname":"func yaml_parser_parse_document_content(parser *yaml_parser_t, event *yaml_event_t) bool","Funname":"yaml.yaml_parser_parse_document_content","Returntype":"bool","Args":"parser *yaml_parser_t, event *yaml_event_t"},{"Uniquefunname":"func yaml_parser_parse_document_end(parser *yaml_parser_t, event *yaml_event_t) bool","Funname":"yaml.yaml_parser_parse_document_end","Returntype":"bool","Args":"parser *yaml_parser_t, event *yaml_event_t"},{"Uniquefunname":"func yaml.yaml_parser_parse_document_start(parser *yaml_parser_t, event *yaml_event_t, implicit bool)bool","Funname":"yaml.yaml_parser_parse_document_start","Returntype":"bool","Args":"parser *yaml_parser_t, event *yaml_event_t, implicit bool"},{"Uniquefunname":"func yaml.yaml_parser_parse_flow_mapping_key(parser *yaml_parser_t, event *yaml_event_t, first bool)bool","Funname":"yaml.yaml_parser_parse_flow_mapping_key","Returntype":"bool","Args":"parser *yaml_parser_t, event *yaml_event_t, first bool"},{"Uniquefunname":"func yaml.yaml_parser_parse_flow_mapping_value(parser *yaml_parser_t, event *yaml_event_t, empty bool)bool","Funname":"yaml.yaml_parser_parse_flow_mapping_value","Returntype":"bool","Args":"parser *yaml_parser_t, event *yaml_event_t, empty bool"},{"Uniquefunname":"func yaml.yaml_parser_parse_flow_sequence_entry(parser *yaml_parser_t, event *yaml_event_t, first bool)bool","Funname":"yaml.yaml_parser_parse_flow_sequence_entry","Returntype":"bool","Args":"parser *yaml_parser_t, event *yaml_event_t, first bool"},{"Uniquefunname":"func yaml.yaml_parser_parse_flow_sequence_entry_mapping_end(parser *yaml_parser_t, event *yaml_event_t)bool","Funname":"yaml.yaml_parser_parse_flow_sequence_entry_mapping_end","Returntype":"bool","Args":"parser *yaml_parser_t, event *yaml_event_t"},{"Uniquefunname":"func yaml.yaml_parser_parse_flow_sequence_entry_mapping_key(parser *yaml_parser_t, event *yaml_event_t)bool","Funname":"yaml.yaml_parser_parse_flow_sequence_entry_mapping_key","Returntype":"bool","Args":"parser *yaml_parser_t, event *yaml_event_t"},{"Uniquefunname":"func yaml.yaml_parser_parse_flow_sequence_entry_mapping_value(parser *yaml_parser_t, event *yaml_event_t)bool","Funname":"yaml.yaml_parser_parse_flow_sequence_entry_mapping_value","Returntype":"bool","Args":"parser *yaml_parser_t, event *yaml_event_t"},{"Uniquefunname":"func yaml.yaml_parser_parse_indentless_sequence_entry(parser *yaml_parser_t, event *yaml_event_t)bool","Funname":"yaml.yaml_parser_parse_indentless_sequence_entry","Returntype":"bool","Args":"parser *yaml_parser_t, event *yaml_event_t"},{"Uniquefunname":"func yaml.yaml_parser_parse_node(parser *yaml_parser_t, event *yaml_event_t, block, indentless_sequence bool)bool","Funname":"yaml.yaml_parser_parse_node","Returntype":"bool","Args":"parser *yaml_parser_t, event *yaml_event_t, block, indentless_sequence bool"},{"Uniquefunname":"func yaml_parser_parse_stream_start(parser *yaml_parser_t, event *yaml_event_t) bool","Funname":"yaml.yaml_parser_parse_stream_start","Returntype":"bool","Args":"parser *yaml_parser_t, event *yaml_event_t"},{"Uniquefunname":"func yaml.yaml_parser_process_directives(parser *yaml_parser_t, version_directive_ref **yaml_version_directive_t, tag_directives_ref *[]yaml_tag_directive_t)bool","Funname":"yaml.yaml_parser_process_directives","Returntype":"bool","Args":"parser *yaml_parser_t, version_directive_ref **yaml_version_directive_t, tag_directives_ref *[]yaml_tag_directive_t"},{"Uniquefunname":"func yaml.yaml_parser_process_empty_scalar(parser *yaml_parser_t, event *yaml_event_t, mark yaml_mark_t)bool","Funname":"yaml.yaml_parser_process_empty_scalar","Returntype":"bool","Args":"parser *yaml_parser_t, event *yaml_event_t, mark yaml_mark_t"},{"Uniquefunname":"func yaml.yaml_parser_set_parser_error(parser *yaml_parser_t, problem string, problem_mark yaml_mark_t)bool","Funname":"yaml.yaml_parser_set_parser_error","Returntype":"bool","Args":"parser *yaml_parser_t, problem string, problem_mark yaml_mark_t"},{"Uniquefunname":"func yaml.yaml_parser_set_parser_error_context(parser *yaml_parser_t, context string, context_mark yaml_mark_t, problem string, problem_mark yaml_mark_t)bool","Funname":"yaml.yaml_parser_set_parser_error_context","Returntype":"bool","Args":"parser *yaml_parser_t, context string, context_mark yaml_mark_t, problem string, problem_mark yaml_mark_t"},{"Uniquefunname":"func yaml_parser_state_machine(parser *yaml_parser_t, event *yaml_event_t) bool","Funname":"yaml.yaml_parser_state_machine","Returntype":"bool","Args":"parser *yaml_parser_t, event *yaml_event_t"},{"Uniquefunname":"func yaml_parser_append_tag_directive(parser *yaml_parser_t, value yaml_tag_directive_t, allow_duplicates bool, mark yaml_mark_t)bool","Funname":"yaml_parser_append_tag_directive","Returntype":"bool","Args":"parser *yaml_parser_t, value yaml_tag_directive_t, allow_duplicates bool, mark yaml_mark_t"},{"Uniquefunname":"func yaml_parser_parse(parser *yaml_parser_t, event *yaml_event_t) bool","Funname":"yaml_parser_parse","Returntype":"bool","Args":"parser *yaml_parser_t, event *yaml_event_t"},{"Uniquefunname":"func yaml_parser_parse_block_mapping_key(parser *yaml_parser_t, event *yaml_event_t, first bool)bool","Funname":"yaml_parser_parse_block_mapping_key","Returntype":"bool","Args":"parser *yaml_parser_t, event *yaml_event_t, first bool"},{"Uniquefunname":"func yaml_parser_parse_block_mapping_value(parser *yaml_parser_t, event *yaml_event_t) bool","Funname":"yaml_parser_parse_block_mapping_value","Returntype":"bool","Args":"parser *yaml_parser_t, event *yaml_event_t"},{"Uniquefunname":"func yaml_parser_parse_block_sequence_entry(parser *yaml_parser_t, event *yaml_event_t, first bool)bool","Funname":"yaml_parser_parse_block_sequence_entry","Returntype":"bool","Args":"parser *yaml_parser_t, event *yaml_event_t, first bool"},{"Uniquefunname":"func yaml_parser_parse_document_content(parser *yaml_parser_t, event *yaml_event_t) bool","Funname":"yaml_parser_parse_document_content","Returntype":"bool","Args":"parser *yaml_parser_t, event *yaml_event_t"},{"Uniquefunname":"func yaml_parser_parse_document_end(parser *yaml_parser_t, event *yaml_event_t) bool","Funname":"yaml_parser_parse_document_end","Returntype":"bool","Args":"parser *yaml_parser_t, event *yaml_event_t"},{"Uniquefunname":"func yaml_parser_parse_document_start(parser *yaml_parser_t, event *yaml_event_t, implicit bool)bool","Funname":"yaml_parser_parse_document_start","Returntype":"bool","Args":"parser *yaml_parser_t, event *yaml_event_t, implicit bool"},{"Uniquefunname":"func yaml_parser_parse_flow_mapping_key(parser *yaml_parser_t, event *yaml_event_t, first bool)bool","Funname":"yaml_parser_parse_flow_mapping_key","Returntype":"bool","Args":"parser *yaml_parser_t, event *yaml_event_t, first bool"},{"Uniquefunname":"func yaml_parser_parse_flow_mapping_value(parser *yaml_parser_t, event *yaml_event_t, empty bool)bool","Funname":"yaml_parser_parse_flow_mapping_value","Returntype":"bool","Args":"parser *yaml_parser_t, event *yaml_event_t, empty bool"},{"Uniquefunname":"func yaml_parser_parse_flow_sequence_entry(parser *yaml_parser_t, event *yaml_event_t, first bool)bool","Funname":"yaml_parser_parse_flow_sequence_entry","Returntype":"bool","Args":"parser *yaml_parser_t, event *yaml_event_t, first bool"},{"Uniquefunname":"func yaml_parser_parse_flow_sequence_entry_mapping_end(parser *yaml_parser_t, event *yaml_event_t)bool","Funname":"yaml_parser_parse_flow_sequence_entry_mapping_end","Returntype":"bool","Args":"parser *yaml_parser_t, event *yaml_event_t"},{"Uniquefunname":"func yaml_parser_parse_flow_sequence_entry_mapping_key(parser *yaml_parser_t, event *yaml_event_t)bool","Funname":"yaml_parser_parse_flow_sequence_entry_mapping_key","Returntype":"bool","Args":"parser *yaml_parser_t, event *yaml_event_t"},{"Uniquefunname":"func yaml_parser_parse_flow_sequence_entry_mapping_value(parser *yaml_parser_t, event *yaml_event_t)bool","Funname":"yaml_parser_parse_flow_sequence_entry_mapping_value","Returntype":"bool","Args":"parser *yaml_parser_t, event *yaml_event_t"},{"Uniquefunname":"func yaml_parser_parse_indentless_sequence_entry(parser *yaml_parser_t, event *yaml_event_t)bool","Funname":"yaml_parser_parse_indentless_sequence_entry","Returntype":"bool","Args":"parser *yaml_parser_t, event *yaml_event_t"},{"Uniquefunname":"func yaml_parser_parse_node(parser *yaml_parser_t, event *yaml_event_t, block, indentless_sequence bool)bool","Funname":"yaml_parser_parse_node","Returntype":"bool","Args":"parser *yaml_parser_t, event *yaml_event_t, block, indentless_sequence bool"},{"Uniquefunname":"func yaml_parser_parse_stream_start(parser *yaml_parser_t, event *yaml_event_t) bool","Funname":"yaml_parser_parse_stream_start","Returntype":"bool","Args":"parser *yaml_parser_t, event *yaml_event_t"},{"Uniquefunname":"func yaml_parser_process_directives(parser *yaml_parser_t, version_directive_ref **yaml_version_directive_t, tag_directives_ref *[]yaml_tag_directive_t)bool","Funname":"yaml_parser_process_directives","Returntype":"bool","Args":"parser *yaml_parser_t, version_directive_ref **yaml_version_directive_t, tag_directives_ref *[]yaml_tag_directive_t"},{"Uniquefunname":"func yaml_parser_process_empty_scalar(parser *yaml_parser_t, event *yaml_event_t, mark yaml_mark_t)bool","Funname":"yaml_parser_process_empty_scalar","Returntype":"bool","Args":"parser *yaml_parser_t, event *yaml_event_t, mark yaml_mark_t"},{"Uniquefunname":"func yaml_parser_set_parser_error(parser *yaml_parser_t, problem string, problem_mark yaml_mark_t)bool","Funname":"yaml_parser_set_parser_error","Returntype":"bool","Args":"parser *yaml_parser_t, problem string, problem_mark yaml_mark_t"},{"Uniquefunname":"func yaml_parser_set_parser_error_context(parser *yaml_parser_t, context string, context_mark yaml_mark_t, problem string, problem_mark yaml_mark_t)bool","Funname":"yaml_parser_set_parser_error_context","Returntype":"bool","Args":"parser *yaml_parser_t, context string, context_mark yaml_mark_t, problem string, problem_mark yaml_mark_t"},{"Uniquefunname":"func yaml_parser_state_machine(parser *yaml_parser_t, event *yaml_event_t) bool","Funname":"yaml_parser_state_machine","Returntype":"bool","Args":"parser *yaml_parser_t, event *yaml_event_t"}],"Records":[{"Name":"var:yaml","Fields":["yaml.default_tag_directives"]}]}
{"Filepath":"vendor/src/gopkg.in/yaml.v2/readerc.go","Functions":[{"Uniquefunname":"func yaml_parser_determine_encoding(parser *yaml_parser_t) bool","Funname":"yaml.yaml_parser_determine_encoding","Returntype":"bool","Args":"parser *yaml_parser_t"},{"Uniquefunname":"func yaml.yaml_parser_set_reader_error(parser *yaml_parser_t, problem string, offset int, value int)bool","Funname":"yaml.yaml_parser_set_reader_error","Returntype":"bool","Args":"parser *yaml_parser_t, problem string, offset int, value int"},{"Uniquefunname":"func yaml_parser_update_buffer(parser *yaml_parser_t, length int) bool","Funname":"yaml.yaml_parser_update_buffer","Returntype":"bool","Args":"parser *yaml_parser_t, length int"},{"Uniquefunname":"func yaml_parser_update_raw_buffer(parser *yaml_parser_t) bool","Funname":"yaml.yaml_parser_update_raw_buffer","Returntype":"bool","Args":"parser *yaml_parser_t"},{"Uniquefunname":"func yaml_parser_determine_encoding(parser *yaml_parser_t) bool","Funname":"yaml_parser_determine_encoding","Returntype":"bool","Args":"parser *yaml_parser_t"},{"Uniquefunname":"func yaml_parser_set_reader_error(parser *yaml_parser_t, problem string, offset int, value int)bool","Funname":"yaml_parser_set_reader_error","Returntype":"bool","Args":"parser *yaml_parser_t, problem string, offset int, value int"},{"Uniquefunname":"func yaml_parser_update_buffer(parser *yaml_parser_t, length int) bool","Funname":"yaml_parser_update_buffer","Returntype":"bool","Args":"parser *yaml_parser_t, length int"},{"Uniquefunname":"func yaml_parser_update_raw_buffer(parser *yaml_parser_t) bool","Funname":"yaml_parser_update_raw_buffer","Returntype":"bool","Args":"parser *yaml_parser_t"}],"Records":[{"Name":"const:yaml","Fields":["yaml.bom_UTF16BE","yaml.bom_UTF16LE","yaml.bom_UTF8"]}]}
{"Filepath":"vendor/src/gopkg.in/yaml.v2/resolve.go","Functions":[{"Uniquefunname":"func encodeBase64(s string) string","Funname":"encodeBase64","Returntype":"string","Args":"s string"},{"Uniquefunname":"func init()","Funname":"init","Returntype":"","Args":""},{"Uniquefunname":"func longTag(tag string) string","Funname":"longTag","Returntype":"string","Args":"tag string"},{"Uniquefunname":"func parseTimestamp(s string) (time.Time, bool)","Funname":"parseTimestamp","Returntype":"(time.Time, bool)","Args":"s string"},{"Uniquefunname":"func resolvableTag(tag string) bool","Funname":"resolvableTag","Returntype":"bool","Args":"tag string"},{"Uniquefunname":"func resolve(tag string, in string) (rtag string, out interface","Funname":"resolve","Returntype":"(rtag string, out interface{})","Args":"tag string, in string"},{"Uniquefunname":"func shortTag(tag string) string","Funname":"shortTag","Returntype":"string","Args":"tag string"},{"Uniquefunname":"func encodeBase64(s string) string","Funname":"yaml.encodeBase64","Returntype":"string","Args":"s string"},{"Uniquefunname":"func init()","Funname":"yaml.init","Returntype":"","Args":""},{"Uniquefunname":"func longTag(tag string) string","Funname":"yaml.longTag","Returntype":"string","Args":"tag string"},{"Uniquefunname":"func parseTimestamp(s string) (time.Time, bool)","Funname":"yaml.parseTimestamp","Returntype":"(time.Time, bool)","Args":"s string"},{"Uniquefunname":"func resolvableTag(tag string) bool","Funname":"yaml.resolvableTag","Returntype":"bool","Args":"tag string"},{"Uniquefunname":"func resolve(tag string, in string) (rtag string, out interface","Funname":"yaml.resolve","Returntype":"(rtag string, out interface{})","Args":"tag string, in string"},{"Uniquefunname":"func shortTag(tag string) string","Funname":"yaml.shortTag","Returntype":"string","Args":"tag string"}],"Records":[{"Name":"var:yaml","Fields":["yaml.allowedTimestampFormats","yaml.resolveMap","yaml.resolveTable","yaml.yamlStyleFloat"]},{"Name":"const:yaml","Fields":["yaml.longTagPrefix"]},{"Name":"struct:yaml.resolveMapItem","Fields":["yaml.resolveMapItem.tag string","yaml.resolveMapItem.value interface{}"]}]}
{"Filepath":"vendor/src/gopkg.in/yaml.v2/scannerc.go","Functions":[{"Uniquefunname":"func cache(parser *yaml_parser_t, length int) bool","Funname":"cache","Returntype":"bool","Args":"parser *yaml_parser_t, length int"},{"Uniquefunname":"func read(parser *yaml_parser_t, s []byte) []byte","Funname":"read","Returntype":"[]byte","Args":"parser *yaml_parser_t, s []byte"},{"Uniquefunname":"func read_line(parser *yaml_parser_t, s []byte) []byte","Funname":"read_line","Returntype":"[]byte","Args":"parser *yaml_parser_t, s []byte"},{"Uniquefunname":"func skip(parser *yaml_parser_t)","Funname":"skip","Returntype":"","Args":"parser *yaml_parser_t"},{"Uniquefunname":"func skip_line(parser *yaml_parser_t)","Funname":"skip_line","Returntype":"","Args":"parser *yaml_parser_t"},{"Uniquefunname":"func trace(args ...interface","Funname":"trace","Returntype":"func()","Args":"args ...interface{}"},{"Uniquefunname":"func cache(parser *yaml_parser_t, length int) bool","Funname":"yaml.cache","Returntype":"bool","Args":"parser *yaml_parser_t, length int"},{"Uniquefunname":"func read(parser *yaml_parser_t, s []byte) []byte","Funname":"yaml.read","Returntype":"[]byte","Args":"parser *yaml_parser_t, s []byte"},{"Uniquefunname":"func read_line(parser *yaml_parser_t, s []byte) []byte","Funname":"yaml.read_line","Returntype":"[]byte","Args":"parser *yaml_parser_t, s []byte"},{"Uniquefunname":"func skip(parser *yaml_parser_t)","Funname":"yaml.skip","Returntype":"","Args":"parser *yaml_parser_t"},{"Uniquefunname":"func skip_line(parser *yaml_parser_t)","Funname":"yaml.skip_line","Returntype":"","Args":"parser *yaml_parser_t"},{"Uniquefunname":"func trace(args ...interface","Funname":"yaml.trace","Returntype":"func()","Args":"args ...interface{}"},{"Uniquefunname":"func yaml_parser_decrease_flow_level(parser *yaml_parser_t) bool","Funname":"yaml.yaml_parser_decrease_flow_level","Returntype":"bool","Args":"parser *yaml_parser_t"},{"Uniquefunname":"func yaml_parser_fetch_anchor(parser *yaml_parser_t, typ yaml_token_type_t) bool","Funname":"yaml.yaml_parser_fetch_anchor","Returntype":"bool","Args":"parser *yaml_parser_t, typ yaml_token_type_t"},{"Uniquefunname":"func yaml_parser_fetch_block_entry(parser *yaml_parser_t) bool","Funname":"yaml.yaml_parser_fetch_block_entry","Returntype":"bool","Args":"parser *yaml_parser_t"},{"Uniquefunname":"func yaml_parser_fetch_block_scalar(parser *yaml_parser_t, literal bool) bool","Funname":"yaml.yaml_parser_fetch_block_scalar","Returntype":"bool","Args":"parser *yaml_parser_t, literal bool"},{"Uniquefunname":"func yaml_parser_fetch_directive(parser *yaml_parser_t) bool","Funname":"yaml.yaml_parser_fetch_directive","Returntype":"bool","Args":"parser *yaml_parser_t"},{"Uniquefunname":"func yaml_parser_fetch_document_indicator(parser *yaml_parser_t, typ yaml_token_type_t) bool","Funname":"yaml.yaml_parser_fetch_document_indicator","Returntype":"bool","Args":"parser *yaml_parser_t, typ yaml_token_type_t"},{"Uniquefunname":"func yaml_parser_fetch_flow_collection_end(parser *yaml_parser_t, typ yaml_token_type_t) bool","Funname":"yaml.yaml_parser_fetch_flow_collection_end","Returntype":"bool","Args":"parser *yaml_parser_t, typ yaml_token_type_t"},{"Uniquefunname":"func yaml.yaml_parser_fetch_flow_collection_start(parser *yaml_parser_t, typ yaml_token_type_t)bool","Funname":"yaml.yaml_parser_fetch_flow_collection_start","Returntype":"bool","Args":"parser *yaml_parser_t, typ yaml_token_type_t"},{"Uniquefunname":"func yaml_parser_fetch_flow_entry(parser *yaml_parser_t) bool","Funname":"yaml.yaml_parser_fetch_flow_entry","Returntype":"bool","Args":"parser *yaml_parser_t"},{"Uniquefunname":"func yaml_parser_fetch_flow_scalar(parser *yaml_parser_t, single bool) bool","Funname":"yaml.yaml_parser_fetch_flow_scalar","Returntype":"bool","Args":"parser *yaml_parser_t, single bool"},{"Uniquefunname":"func yaml_parser_fetch_key(parser *yaml_parser_t) bool","Funname":"yaml.yaml_parser_fetch_key","Returntype":"bool","Args":"parser *yaml_parser_t"},{"Uniquefunname":"func yaml_parser_fetch_more_tokens(parser *yaml_parser_t) bool","Funname":"yaml.yaml_parser_fetch_more_tokens","Returntype":"bool","Args":"parser *yaml_parser_t"},{"Uniquefunname":"func yaml_parser_fetch_next_token(parser *yaml_parser_t) bool","Funname":"yaml.yaml_parser_fetch_next_token","Returntype":"bool","Args":"parser *yaml_parser_t"},{"Uniquefunname":"func yaml_parser_fetch_plain_scalar(parser *yaml_parser_t) bool","Funname":"yaml.yaml_parser_fetch_plain_scalar","Returntype":"bool","Args":"parser *yaml_parser_t"},{"Uniquefunname":"func yaml_parser_fetch_stream_end(parser *yaml_parser_t) bool","Funname":"yaml.yaml_parser_fetch_stream_end","Returntype":"bool","Args":"parser *yaml_parser_t"},{"Uniquefunname":"func yaml_parser_fetch_stream_start(parser *yaml_parser_t) bool","Funname":"yaml.yaml_parser_fetch_stream_start","Returntype":"bool","Args":"parser *yaml_parser_t"},{"Uniquefunname":"func yaml_parser_fetch_tag(parser *yaml_parser_t) bool","Funname":"yaml.yaml_parser_fetch_tag","Returntype":"bool","Args":"parser *yaml_parser_t"},{"Uniquefunname":"func yaml_parser_fetch_value(parser *yaml_parser_t) bool","Funname":"yaml.yaml_parser_fetch_value","Returntype":"bool","Args":"parser *yaml_parser_t"},{"Uniquefunname":"func yaml_parser_increase_flow_level(parser *yaml_parser_t) bool","Funname":"yaml.yaml_parser_increase_flow_level","Returntype":"bool","Args":"parser *yaml_parser_t"},{"Uniquefunname":"func yaml_parser_remove_simple_key(parser *yaml_parser_t) bool","Funname":"yaml.yaml_parser_remove_simple_key","Returntype":"bool","Args":"parser *yaml_parser_t"},{"Uniquefunname":"func yaml.yaml_parser_roll_indent(parser *yaml_parser_t, column, number int, typ yaml_token_type_t, mark yaml_mark_t)bool","Funname":"yaml.yaml_parser_roll_indent","Returntype":"bool","Args":"parser *yaml_parser_t, column, number int, typ yaml_token_type_t, mark yaml_mark_t"},{"Uniquefunname":"func yaml_parser_save_simple_key(parser *yaml_parser_t) bool","Funname":"yaml.yaml_parser_save_simple_key","Returntype":"bool","Args":"parser *yaml_parser_t"},{"Uniquefunname":"func yaml_parser_scan(parser *yaml_parser_t, token *yaml_token_t) bool","Funname":"yaml.yaml_parser_scan","Returntype":"bool","Args":"parser *yaml_parser_t, token *yaml_token_t"},{"Uniquefunname":"func yaml.yaml_parser_scan_anchor(parser *yaml_parser_t, token *yaml_token_t, typ yaml_token_type_t)bool","Funname":"yaml.yaml_parser_scan_anchor","Returntype":"bool","Args":"parser *yaml_parser_t, token *yaml_token_t, typ yaml_token_type_t"},{"Uniquefunname":"func yaml.yaml_parser_scan_block_scalar(parser *yaml_parser_t, token *yaml_token_t, literal bool)bool","Funname":"yaml.yaml_parser_scan_block_scalar","Returntype":"bool","Args":"parser *yaml_parser_t, token *yaml_token_t, literal bool"},{"Uniquefunname":"func yaml.yaml_parser_scan_block_scalar_breaks(parser *yaml_parser_t, indent *int, breaks *[]byte, start_mark yaml_mark_t, end_mark *yaml_mark_t)bool","Funname":"yaml.yaml_parser_scan_block_scalar_breaks","Returntype":"bool","Args":"parser *yaml_parser_t, indent *int, breaks *[]byte, start_mark yaml_mark_t, end_mark *yaml_mark_t"},{"Uniquefunname":"func yaml_parser_scan_directive(parser *yaml_parser_t, token *yaml_token_t) bool","Funname":"yaml.yaml_parser_scan_directive","Returntype":"bool","Args":"parser *yaml_parser_t, token *yaml_token_t"},{"Uniquefunname":"func yaml.yaml_parser_scan_directive_name(parser *yaml_parser_t, start_mark yaml_mark_t, name *[]byte)bool","Funname":"yaml.yaml_parser_scan_directive_name","Returntype":"bool","Args":"parser *yaml_parser_t, start_mark yaml_mark_t, name *[]byte"},{"Uniquefunname":"func yaml.yaml_parser_scan_flow_scalar(parser *yaml_parser_t, token *yaml_token_t, single bool)bool","Funname":"yaml.yaml_parser_scan_flow_scalar","Returntype":"bool","Args":"parser *yaml_parser_t, token *yaml_token_t, single bool"},{"Uniquefunname":"func yaml_parser_scan_plain_scalar(parser *yaml_parser_t, token *yaml_token_t) bool","Funname":"yaml.yaml_parser_scan_plain_scalar","Returntype":"bool","Args":"parser *yaml_parser_t, token *yaml_token_t"},{"Uniquefunname":"func yaml_parser_scan_tag(parser *yaml_parser_t, token *yaml_token_t) bool","Funname":"yaml.yaml_parser_scan_tag","Returntype":"bool","Args":"parser *yaml_parser_t, token *yaml_token_t"},{"Uniquefunname":"func yaml.yaml_parser_scan_tag_directive_value(parser *yaml_parser_t, start_mark yaml_mark_t, handle, prefix *[]byte)bool","Funname":"yaml.yaml_parser_scan_tag_directive_value","Returntype":"bool","Args":"parser *yaml_parser_t, start_mark yaml_mark_t, handle, prefix *[]byte"},{"Uniquefunname":"func yaml.yaml_parser_scan_tag_handle(parser *yaml_parser_t, directive bool, start_mark yaml_mark_t, handle *[]byte)bool","Funname":"yaml.yaml_parser_scan_tag_handle","Returntype":"bool","Args":"parser *yaml_parser_t, directive bool, start_mark yaml_mark_t, handle *[]byte"},{"Uniquefunname":"func yaml.yaml_parser_scan_tag_uri(parser *yaml_parser_t, directive bool, head []byte, start_mark yaml_mark_t, uri *[]byte)bool","Funname":"yaml.yaml_parser_scan_tag_uri","Returntype":"bool","Args":"parser *yaml_parser_t, directive bool, head []byte, start_mark yaml_mark_t, uri *[]byte"},{"Uniquefunname":"func yaml_parser_scan_to_next_token(parser *yaml_parser_t) bool","Funname":"yaml.yaml_parser_scan_to_next_token","Returntype":"bool","Args":"parser *yaml_parser_t"},{"Uniquefunname":"func yaml.yaml_parser_scan_uri_escapes(parser *yaml_parser_t, directive bool, start_mark yaml_mark_t, s *[]byte)bool","Funname":"yaml.yaml_parser_scan_uri_escapes","Returntype":"bool","Args":"parser *yaml_parser_t, directive bool, start_mark yaml_mark_t, s *[]byte"},{"Uniquefunname":"func yaml.yaml_parser_scan_version_directive_number(parser *yaml_parser_t, start_mark yaml_mark_t, number *int8)bool","Funname":"yaml.yaml_parser_scan_version_directive_number","Returntype":"bool","Args":"parser *yaml_parser_t, start_mark yaml_mark_t, number *int8"},{"Uniquefunname":"func yaml.yaml_parser_scan_version_directive_value(parser *yaml_parser_t, start_mark yaml_mark_t, major, minor *int8)bool","Funname":"yaml.yaml_parser_scan_version_directive_value","Returntype":"bool","Args":"parser *yaml_parser_t, start_mark yaml_mark_t, major, minor *int8"},{"Uniquefunname":"func yaml.yaml_parser_set_scanner_error(parser *yaml_parser_t, context string, context_mark yaml_mark_t, problem string)bool","Funname":"yaml.yaml_parser_set_scanner_error","Returntype":"bool","Args":"parser *yaml_parser_t, context string, context_mark yaml_mark_t, problem string"},{"Uniquefunname":"func yaml.yaml_parser_set_scanner_tag_error(parser *yaml_parser_t, directive bool, context_mark yaml_mark_t, problem string)bool","Funname":"yaml.yaml_parser_set_scanner_tag_error","Returntype":"bool","Args":"parser *yaml_parser_t, directive bool, context_mark yaml_mark_t, problem string"},{"Uniquefunname":"func yaml_parser_stale_simple_keys(parser *yaml_parser_t) bool","Funname":"yaml.yaml_parser_stale_simple_keys","Returntype":"bool","Args":"parser *yaml_parser_t"},{"Uniquefunname":"func yaml_parser_unroll_indent(parser *yaml_parser_t, column int) bool","Funname":"yaml.yaml_parser_unroll_indent","Returntype":"bool","Args":"parser *yaml_parser_t, column int"},{"Uniquefunname":"func yaml_parser_decrease_flow_level(parser *yaml_parser_t) bool","Funname":"yaml_parser_decrease_flow_level","Returntype":"bool","Args":"parser *yaml_parser_t"},{"Uniquefunname":"func yaml_parser_fetch_anchor(parser *yaml_parser_t, typ yaml_token_type_t) bool","Funname":"yaml_parser_fetch_anchor","Returntype":"bool","Args":"parser *yaml_parser_t, typ yaml_token_type_t"},{"Uniquefunname":"func yaml_parser_fetch_block_entry(parser *yaml_parser_t) bool","Funname":"yaml_parser_fetch_block_entry","Returntype":"bool","Args":"parser *yaml_parser_t"},{"Uniquefunname":"func yaml_parser_fetch_block_scalar(parser *yaml_parser_t, literal bool) bool","Funname":"yaml_parser_fetch_block_scalar","Returntype":"bool","Args":"parser *yaml_parser_t, literal bool"},{"Uniquefunname":"func yaml_parser_fetch_directive(parser *yaml_parser_t) bool","Funname":"yaml_parser_fetch_directive","Returntype":"bool","Args":"parser *yaml_parser_t"},{"Uniquefunname":"func yaml_parser_fetch_document_indicator(parser *yaml_parser_t, typ yaml_token_type_t) bool","Funname":"yaml_parser_fetch_document_indicator","Returntype":"bool","Args":"parser *yaml_parser_t, typ yaml_token_type_t"},{"Uniquefunname":"func yaml_parser_fetch_flow_collection_end(parser *yaml_parser_t, typ yaml_token_type_t) bool","Funname":"yaml_parser_fetch_flow_collection_end","Returntype":"bool","Args":"parser *yaml_parser_t, typ yaml_token_type_t"},{"Uniquefunname":"func yaml_parser_fetch_flow_collection_start(parser *yaml_parser_t, typ yaml_token_type_t)bool","Funname":"yaml_parser_fetch_flow_collection_start","Returntype":"bool","Args":"parser *yaml_parser_t, typ yaml_token_type_t"},{"Uniquefunname":"func yaml_parser_fetch_flow_entry(parser *yaml_parser_t) bool","Funname":"yaml_parser_fetch_flow_entry","Returntype":"bool","Args":"parser *yaml_parser_t"},{"Uniquefunname":"func yaml_parser_fetch_flow_scalar(parser *yaml_parser_t, single bool) bool","Funname":"yaml_parser_fetch_flow_scalar","Returntype":"bool","Args":"parser *yaml_parser_t, single bool"},{"Uniquefunname":"func yaml_parser_fetch_key(parser *yaml_parser_t) bool","Funname":"yaml_parser_fetch_key","Returntype":"bool","Args":"parser *yaml_parser_t"},{"Uniquefunname":"func yaml_parser_fetch_more_tokens(parser *yaml_parser_t) bool","Funname":"yaml_parser_fetch_more_tokens","Returntype":"bool","Args":"parser *yaml_parser_t"},{"Uniquefunname":"func yaml_parser_fetch_next_token(parser *yaml_parser_t) bool","Funname":"yaml_parser_fetch_next_token","Returntype":"bool","Args":"parser *yaml_parser_t"},{"Uniquefunname":"func yaml_parser_fetch_plain_scalar(parser *yaml_parser_t) bool","Funname":"yaml_parser_fetch_plain_scalar","Returntype":"bool","Args":"parser *yaml_parser_t"},{"Uniquefunname":"func yaml_parser_fetch_stream_end(parser *yaml_parser_t) bool","Funname":"yaml_parser_fetch_stream_end","Returntype":"bool","Args":"parser *yaml_parser_t"},{"Uniquefunname":"func yaml_parser_fetch_stream_start(parser *yaml_parser_t) bool","Funname":"yaml_parser_fetch_stream_start","Returntype":"bool","Args":"parser *yaml_parser_t"},{"Uniquefunname":"func yaml_parser_fetch_tag(parser *yaml_parser_t) bool","Funname":"yaml_parser_fetch_tag","Returntype":"bool","Args":"parser *yaml_parser_t"},{"Uniquefunname":"func yaml_parser_fetch_value(parser *yaml_parser_t) bool","Funname":"yaml_parser_fetch_value","Returntype":"bool","Args":"parser *yaml_parser_t"},{"Uniquefunname":"func yaml_parser_increase_flow_level(parser *yaml_parser_t) bool","Funname":"yaml_parser_increase_flow_level","Returntype":"bool","Args":"parser *yaml_parser_t"},{"Uniquefunname":"func yaml_parser_remove_simple_key(parser *yaml_parser_t) bool","Funname":"yaml_parser_remove_simple_key","Returntype":"bool","Args":"parser *yaml_parser_t"},{"Uniquefunname":"func yaml_parser_roll_indent(parser *yaml_parser_t, column, number int, typ yaml_token_type_t, mark yaml_mark_t)bool","Funname":"yaml_parser_roll_indent","Returntype":"bool","Args":"parser *yaml_parser_t, column, number int, typ yaml_token_type_t, mark yaml_mark_t"},{"Uniquefunname":"func yaml_parser_save_simple_key(parser *yaml_parser_t) bool","Funname":"yaml_parser_save_simple_key","Returntype":"bool","Args":"parser *yaml_parser_t"},{"Uniquefunname":"func yaml_parser_scan(parser *yaml_parser_t, token *yaml_token_t) bool","Funname":"yaml_parser_scan","Returntype":"bool","Args":"parser *yaml_parser_t, token *yaml_token_t"},{"Uniquefunname":"func yaml_parser_scan_anchor(parser *yaml_parser_t, token *yaml_token_t, typ yaml_token_type_t)bool","Funname":"yaml_parser_scan_anchor","Returntype":"bool","Args":"parser *yaml_parser_t, token *yaml_token_t, typ yaml_token_type_t"},{"Uniquefunname":"func yaml_parser_scan_block_scalar(parser *yaml_parser_t, token *yaml_token_t, literal bool)bool","Funname":"yaml_parser_scan_block_scalar","Returntype":"bool","Args":"parser *yaml_parser_t, token *yaml_token_t, literal bool"},{"Uniquefunname":"func yaml_parser_scan_block_scalar_breaks(parser *yaml_parser_t, indent *int, breaks *[]byte, start_mark yaml_mark_t, end_mark *yaml_mark_t)bool","Funname":"yaml_parser_scan_block_scalar_breaks","Returntype":"bool","Args":"parser *yaml_parser_t, indent *int, breaks *[]byte, start_mark yaml_mark_t, end_mark *yaml_mark_t"},{"Uniquefunname":"func yaml_parser_scan_directive(parser *yaml_parser_t, token *yaml_token_t) bool","Funname":"yaml_parser_scan_directive","Returntype":"bool","Args":"parser *yaml_parser_t, token *yaml_token_t"},{"Uniquefunname":"func yaml_parser_scan_directive_name(parser *yaml_parser_t, start_mark yaml_mark_t, name *[]byte)bool","Funname":"yaml_parser_scan_directive_name","Returntype":"bool","Args":"parser *yaml_parser_t, start_mark yaml_mark_t, name *[]byte"},{"Uniquefunname":"func yaml_parser_scan_flow_scalar(parser *yaml_parser_t, token *yaml_token_t, single bool)bool","Funname":"yaml_parser_scan_flow_scalar","Returntype":"bool","Args":"parser *yaml_parser_t, token *yaml_token_t, single bool"},{"Uniquefunname":"func yaml_parser_scan_plain_scalar(parser *yaml_parser_t, token *yaml_token_t) bool","Funname":"yaml_parser_scan_plain_scalar","Returntype":"bool","Args":"parser *yaml_parser_t, token *yaml_token_t"},{"Uniquefunname":"func yaml_parser_scan_tag(parser *yaml_parser_t, token *yaml_token_t) bool","Funname":"yaml_parser_scan_tag","Returntype":"bool","Args":"parser *yaml_parser_t, token *yaml_token_t"},{"Uniquefunname":"func yaml_parser_scan_tag_directive_value(parser *yaml_parser_t, start_mark yaml_mark_t, handle, prefix *[]byte)bool","Funname":"yaml_parser_scan_tag_directive_value","Returntype":"bool","Args":"parser *yaml_parser_t, start_mark yaml_mark_t, handle, prefix *[]byte"},{"Uniquefunname":"func yaml_parser_scan_tag_handle(parser *yaml_parser_t, directive bool, start_mark yaml_mark_t, handle *[]byte)bool","Funname":"yaml_parser_scan_tag_handle","Returntype":"bool","Args":"parser *yaml_parser_t, directive bool, start_mark yaml_mark_t, handle *[]byte"},{"Uniquefunname":"func yaml_parser_scan_tag_uri(parser *yaml_parser_t, directive bool, head []byte, start_mark yaml_mark_t, uri *[]byte)bool","Funname":"yaml_parser_scan_tag_uri","Returntype":"bool","Args":"parser *yaml_parser_t, directive bool, head []byte, start_mark yaml_mark_t, uri *[]byte"},{"Uniquefunname":"func yaml_parser_scan_to_next_token(parser *yaml_parser_t) bool","Funname":"yaml_parser_scan_to_next_token","Returntype":"bool","Args":"parser *yaml_parser_t"},{"Uniquefunname":"func yaml_parser_scan_uri_escapes(parser *yaml_parser_t, directive bool, start_mark yaml_mark_t, s *[]byte)bool","Funname":"yaml_parser_scan_uri_escapes","Returntype":"bool","Args":"parser *yaml_parser_t, directive bool, start_mark yaml_mark_t, s *[]byte"},{"Uniquefunname":"func yaml_parser_scan_version_directive_number(parser *yaml_parser_t, start_mark yaml_mark_t, number *int8)bool","Funname":"yaml_parser_scan_version_directive_number","Returntype":"bool","Args":"parser *yaml_parser_t, start_mark yaml_mark_t, number *int8"},{"Uniquefunname":"func yaml_parser_scan_version_directive_value(parser *yaml_parser_t, start_mark yaml_mark_t, major, minor *int8)bool","Funname":"yaml_parser_scan_version_directive_value","Returntype":"bool","Args":"parser *yaml_parser_t, start_mark yaml_mark_t, major, minor *int8"},{"Uniquefunname":"func yaml_parser_set_scanner_error(parser *yaml_parser_t, context string, context_mark yaml_mark_t, problem string)bool","Funname":"yaml_parser_set_scanner_error","Returntype":"bool","Args":"parser *yaml_parser_t, context string, context_mark yaml_mark_t, problem string"},{"Uniquefunname":"func yaml_parser_set_scanner_tag_error(parser *yaml_parser_t, directive bool, context_mark yaml_mark_t, problem string)bool","Funname":"yaml_parser_set_scanner_tag_error","Returntype":"bool","Args":"parser *yaml_parser_t, directive bool, context_mark yaml_mark_t, problem string"},{"Uniquefunname":"func yaml_parser_stale_simple_keys(parser *yaml_parser_t) bool","Funname":"yaml_parser_stale_simple_keys","Returntype":"bool","Args":"parser *yaml_parser_t"},{"Uniquefunname":"func yaml_parser_unroll_indent(parser *yaml_parser_t, column int) bool","Funname":"yaml_parser_unroll_indent","Returntype":"bool","Args":"parser *yaml_parser_t, column int"}],"Records":[{"Name":"const:yaml","Fields":["yaml.max_number_length"]}]}
{"Filepath":"vendor/src/gopkg.in/yaml.v2/sorter.go","Functions":[{"Uniquefunname":"func Len()int","Funname":"Len","Returntype":"int","Args":""},{"Uniquefunname":"func (l keyList) Less(i, j int) bool","Funname":"Less","Returntype":"bool","Args":"i, j int"},{"Uniquefunname":"func Swap(i, j int)","Funname":"Swap","Returntype":"","Args":"i, j int"},{"Uniquefunname":"func keyFloat(v reflect.Value) (f float64, ok bool)","Funname":"keyFloat","Returntype":"(f float64, ok bool)","Args":"v reflect.Value"},{"Uniquefunname":"func numLess(a, b reflect.Value) bool","Funname":"numLess","Returntype":"bool","Args":"a, b reflect.Value"},{"Uniquefunname":"func keyFloat(v reflect.Value) (f float64, ok bool)","Funname":"yaml.keyFloat","Returntype":"(f float64, ok bool)","Args":"v reflect.Value"},{"Uniquefunname":"func yaml.keyList.Len()int","Funname":"yaml.keyList.Len","Returntype":"int","Args":""},{"Uniquefunname":"func (l keyList) Less(i, j int) bool","Funname":"yaml.keyList.Less","Returntype":"bool","Args":"i, j int"},{"Uniquefunname":"func yaml.keyList.Swap(i, j int)","Funname":"yaml.keyList.Swap","Returntype":"","Args":"i, j int"},{"Uniquefunname":"func numLess(a, b reflect.Value) bool","Funname":"yaml.numLess","Returntype":"bool","Args":"a, b reflect.Value"}],"Records":null}
{"Filepath":"vendor/src/gopkg.in/yaml.v2/suite_test.go","Functions":[{"Uniquefunname":"func Test(t *testing.T)","Funname":"Test","Returntype":"","Args":"t *testing.T"},{"Uniquefunname":"func yaml_test.Test(t *testing.T)","Funname":"yaml_test.Test","Returntype":"","Args":"t *testing.T"}],"Records":[{"Name":"var:yaml_test","Fields":["yaml_test._"]}]}
{"Filepath":"vendor/src/gopkg.in/yaml.v2/writerc.go","Functions":[{"Uniquefunname":"func yaml_emitter_flush(emitter *yaml_emitter_t) bool","Funname":"yaml.yaml_emitter_flush","Returntype":"bool","Args":"emitter *yaml_emitter_t"},{"Uniquefunname":"func yaml_emitter_set_writer_error(emitter *yaml_emitter_t, problem string) bool","Funname":"yaml.yaml_emitter_set_writer_error","Returntype":"bool","Args":"emitter *yaml_emitter_t, problem string"},{"Uniquefunname":"func yaml_emitter_flush(emitter *yaml_emitter_t) bool","Funname":"yaml_emitter_flush","Returntype":"bool","Args":"emitter *yaml_emitter_t"},{"Uniquefunname":"func yaml_emitter_set_writer_error(emitter *yaml_emitter_t, problem string) bool","Funname":"yaml_emitter_set_writer_error","Returntype":"bool","Args":"emitter *yaml_emitter_t, problem string"}],"Records":null}
{"Filepath":"vendor/src/gopkg.in/yaml.v2/yaml.go","Functions":[{"Uniquefunname":"func (e *Encoder) Close() (err error)","Funname":"Close","Returntype":"(err error)","Args":""},{"Uniquefunname":"func (dec *Decoder) Decode(v interface","Funname":"Decode","Returntype":"(err error)","Args":"v interface{}"},{"Uniquefunname":"func (e *Encoder) Encode(v interface","Funname":"Encode","Returntype":"(err error)","Args":"v interface{}"},{"Uniquefunname":"func (e *TypeError) Error() string","Funname":"Error","Returntype":"string","Args":""},{"Uniquefunname":"func Marshal(in interface","Funname":"Marshal","Returntype":"(out []byte, err error)","Args":"in interface{}"},{"Uniquefunname":"func NewDecoder(r io.Reader) *Decoder","Funname":"NewDecoder","Returntype":"*Decoder","Args":"r io.Reader"},{"Uniquefunname":"func NewEncoder(w io.Writer) *Encoder","Funname":"NewEncoder","Returntype":"*Encoder","Args":"w io.Writer"},{"Uniquefunname":"func (dec *Decoder) SetStrict(strict bool)","Funname":"SetStrict","Returntype":"","Args":"strict bool"},{"Uniquefunname":"func Unmarshal(in []byte, out interface","Funname":"Unmarshal","Returntype":"(err error)","Args":"in []byte, out interface{}"},{"Uniquefunname":"func UnmarshalStrict(in []byte, out interface","Funname":"UnmarshalStrict","Returntype":"(err error)","Args":"in []byte, out interface{}"},{"Uniquefunname":"func fail(err error)","Funname":"fail","Returntype":"","Args":"err error"},{"Uniquefunname":"func failf(format string, args ...interface","Funname":"failf","Returntype":"","Args":"format string, args ...interface{}"},{"Uniquefunname":"func getStructInfo(st reflect.Type) (*structInfo, error)","Funname":"getStructInfo","Returntype":"(*structInfo, error)","Args":"st reflect.Type"},{"Uniquefunname":"func handleErr(err *error)","Funname":"handleErr","Returntype":"","Args":"err *error"},{"Uniquefunname":"func isZero(v reflect.Value) bool","Funname":"isZero","Returntype":"bool","Args":"v reflect.Value"},{"Uniquefunname":"func unmarshal(in []byte, out interface","Funname":"unmarshal","Returntype":"(err error)","Args":"in []byte, out interface{}, strict bool"},{"Uniquefunname":"func (dec *Decoder) Decode(v interface","Funname":"yaml.Decoder.Decode","Returntype":"(err error)","Args":"v interface{}"},{"Uniquefunname":"func (dec *Decoder) SetStrict(strict bool)","Funname":"yaml.Decoder.SetStrict","Returntype":"","Args":"strict bool"},{"Uniquefunname":"func (e *Encoder) Close() (err error)","Funname":"yaml.Encoder.Close","Returntype":"(err error)","Args":""},{"Uniquefunname":"func (e *Encoder) Encode(v interface","Funname":"yaml.Encoder.Encode","Returntype":"(err error)","Args":"v interface{}"},{"Uniquefunname":"func Marshal(in interface","Funname":"yaml.Marshal","Returntype":"(out []byte, err error)","Args":"in interface{}"},{"Uniquefunname":"func NewDecoder(r io.Reader) *Decoder","Funname":"yaml.NewDecoder","Returntype":"*Decoder","Args":"r io.Reader"},{"Uniquefunname":"func NewEncoder(w io.Writer) *Encoder","Funname":"yaml.NewEncoder","Returntype":"*Encoder","Args":"w io.Writer"},{"Uniquefunname":"func (e *TypeError) Error() string","Funname":"yaml.TypeError.Error","Returntype":"string","Args":""},{"Uniquefunname":"func Unmarshal(in []byte, out interface","Funname":"yaml.Unmarshal","Returntype":"(err error)","Args":"in []byte, out interface{}"},{"Uniquefunname":"func UnmarshalStrict(in []byte, out interface","Funname":"yaml.UnmarshalStrict","Returntype":"(err error)","Args":"in []byte, out interface{}"},{"Uniquefunname":"func fail(err error)","Funname":"yaml.fail","Returntype":"","Args":"err error"},{"Uniquefunname":"func failf(format string, args ...interface","Funname":"yaml.failf","Returntype":"","Args":"format string, args ...interface{}"},{"Uniquefunname":"func getStructInfo(st reflect.Type) (*structInfo, error)","Funname":"yaml.getStructInfo","Returntype":"(*structInfo, error)","Args":"st reflect.Type"},{"Uniquefunname":"func handleErr(err *error)","Funname":"yaml.handleErr","Returntype":"","Args":"err *error"},{"Uniquefunname":"func isZero(v reflect.Value) bool","Funname":"yaml.isZero","Returntype":"bool","Args":"v reflect.Value"},{"Uniquefunname":"func unmarshal(in []byte, out interface","Funname":"yaml.unmarshal","Returntype":"(err error)","Args":"in []byte, out interface{}, strict bool"}],"Records":[{"Name":"struct:yaml.Decoder","Fields":["yaml.Decoder.parser *parser","yaml.Decoder.strict bool"]},{"Name":"struct:yaml.Encoder","Fields":["yaml.Encoder.encoder *encoder"]},{"Name":"interface","Fields":["yaml.IsZeroer","yaml.Marshaler","yaml.Unmarshaler"]},{"Name":"struct:yaml.MapItem","Fields":["yaml.MapItem.Key interface{}","yaml.MapItem.Value interface{}"]},{"Name":"struct:yaml.TypeError","Fields":["yaml.TypeError.Errors []string"]},{"Name":"struct:yaml.fieldInfo","Fields":["yaml.fieldInfo.Flow bool","yaml.fieldInfo.Id int","yaml.fieldInfo.Inline []int","yaml.fieldInfo.Key string","yaml.fieldInfo.Num int","yaml.fieldInfo.OmitEmpty bool"]},{"Name":"var:yaml","Fields":["yaml.fieldMapMutex","yaml.structMap"]},{"Name":"struct:yaml.structInfo","Fields":["yaml.structInfo.FieldsList []fieldInfo","yaml.structInfo.FieldsMap map[string]fieldInfo","yaml.structInfo.InlineMap int"]},{"Name":"struct:yaml.yamlError","Fields":["yaml.yamlError.err error"]}]}
{"Filepath":"vendor/src/gopkg.in/yaml.v2/yamlh.go","Functions":[{"Uniquefunname":"func (e yaml_event_type_t) String() string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func (ps yaml_parser_state_t) String() string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func (tt yaml_token_type_t) String() string","Funname":"String","Returntype":"string","Args":""},{"Uniquefunname":"func mapping_style()yaml_mapping_style_t","Funname":"mapping_style","Returntype":"yaml_mapping_style_t","Args":""},{"Uniquefunname":"func scalar_style()yaml_scalar_style_t","Funname":"scalar_style","Returntype":"yaml_scalar_style_t","Args":""},{"Uniquefunname":"func sequence_style()yaml_sequence_style_t","Funname":"sequence_style","Returntype":"yaml_sequence_style_t","Args":""},{"Uniquefunname":"func yaml.yaml_event_t.mapping_style()yaml_mapping_style_t","Funname":"yaml.yaml_event_t.mapping_style","Returntype":"yaml_mapping_style_t","Args":""},{"Uniquefunname":"func yaml.yaml_event_t.scalar_style()yaml_scalar_style_t","Funname":"yaml.yaml_event_t.scalar_style","Returntype":"yaml_scalar_style_t","Args":""},{"Uniquefunname":"func yaml.yaml_event_t.sequence_style()yaml_sequence_style_t","Funname":"yaml.yaml_event_t.sequence_style","Returntype":"yaml_sequence_style_t","Args":""},{"Uniquefunname":"func (e yaml_event_type_t) String() string","Funname":"yaml.yaml_event_type_t.String","Returntype":"string","Args":""},{"Uniquefunname":"func (ps yaml_parser_state_t) String() string","Funname":"yaml.yaml_parser_state_t.String","Returntype":"string","Args":""},{"Uniquefunname":"func (tt yaml_token_type_t) String() string","Funname":"yaml.yaml_token_type_t.String","Returntype":"string","Args":""}],"Records":[{"Name":"var:yaml","Fields":["yaml.eventStrings"]},{"Name":"const:yaml","Fields":["yaml.yaml_ALIAS_EVENT","yaml.yaml_ALIAS_TOKEN","yaml.yaml_ANCHOR_TOKEN","yaml.yaml_ANY_BREAK","yaml.yaml_ANY_ENCODING","yaml.yaml_ANY_MAPPING_STYLE","yaml.yaml_ANY_SCALAR_STYLE","yaml.yaml_ANY_SEQUENCE_STYLE","yaml.yaml_BINARY_TAG","yaml.yaml_BLOCK_END_TOKEN","yaml.yaml_BLOCK_ENTRY_TOKEN","yaml.yaml_BLOCK_MAPPING_START_TOKEN","yaml.yaml_BLOCK_MAPPING_STYLE","yaml.yaml_BLOCK_SEQUENCE_START_TOKEN","yaml.yaml_BLOCK_SEQUENCE_STYLE","yaml.yaml_BOOL_TAG","yaml.yaml_COMPOSER_ERROR","yaml.yaml_CRLN_BREAK","yaml.yaml_CR_BREAK","yaml.yaml_DEFAULT_MAPPING_TAG","yaml.yaml_DEFAULT_SCALAR_TAG","yaml.yaml_DEFAULT_SEQUENCE_TAG","yaml.yaml_DOCUMENT_END_EVENT","yaml.yaml_DOCUMENT_END_TOKEN","yaml.yaml_DOCUMENT_START_EVENT","yaml.yaml_DOCUMENT_START_TOKEN","yaml.yaml_DOUBLE_QUOTED_SCALAR_STYLE","yaml.yaml_EMITTER_ERROR","yaml.yaml_EMIT_BLOCK_MAPPING_FIRST_KEY_STATE","yaml.yaml_EMIT_BLOCK_MAPPING_KEY_STATE","yaml.yaml_EMIT_BLOCK_MAPPING_SIMPLE_VALUE_STATE","yaml.yaml_EMIT_BLOCK_MAPPING_VALUE_STATE","yaml.yaml_EMIT_BLOCK_SEQUENCE_FIRST_ITEM_STATE","yaml.yaml_EMIT_BLOCK_SEQUENCE_ITEM_STATE","yaml.yaml_EMIT_DOCUMENT_CONTENT_STATE","yaml.yaml_EMIT_DOCUMENT_END_STATE","yaml.yaml_EMIT_DOCUMENT_START_STATE","yaml.yaml_EMIT_END_STATE","yaml.yaml_EMIT_FIRST_DOCUMENT_START_STATE","yaml.yaml_EMIT_FLOW_MAPPING_FIRST_KEY_STATE","yaml.yaml_EMIT_FLOW_MAPPING_KEY_STATE","yaml.yaml_EMIT_FLOW_MAPPING_SIMPLE_VALUE_STATE","yaml.yaml_EMIT_FLOW_MAPPING_VALUE_STATE","yaml.yaml_EMIT_FLOW_SEQUENCE_FIRST_ITEM_STATE","yaml.yaml_EMIT_FLOW_SEQUENCE_ITEM_STATE","yaml.yaml_EMIT_STREAM_START_STATE","yaml.yaml_FLOAT_TAG","yaml.yaml_FLOW_ENTRY_TOKEN","yaml.yaml_FLOW_MAPPING_END_TOKEN","yaml.yaml_FLOW_MAPPING_START_TOKEN","yaml.yaml_FLOW_MAPPING_STYLE","yaml.yaml_FLOW_SEQUENCE_END_TOKEN","yaml.yaml_FLOW_SEQUENCE_START_TOKEN","yaml.yaml_FLOW_SEQUENCE_STYLE","yaml.yaml_FOLDED_SCALAR_STYLE","yaml.yaml_INT_TAG","yaml.yaml_KEY_TOKEN","yaml.yaml_LITERAL_SCALAR_STYLE","yaml.yaml_LN_BREAK","yaml.yaml_MAPPING_END_EVENT","yaml.yaml_MAPPING_NODE","yaml.yaml_MAPPING_START_EVENT","yaml.yaml_MAP_TAG","yaml.yaml_MEMORY_ERROR","yaml.yaml_MERGE_TAG","yaml.yaml_NO_ERROR","yaml.yaml_NO_EVENT","yaml.yaml_NO_NODE","yaml.yaml_NO_TOKEN","yaml.yaml_NULL_TAG","yaml.yaml_PARSER_ERROR","yaml.yaml_PARSE_BLOCK_MAPPING_FIRST_KEY_STATE","yaml.yaml_PARSE_BLOCK_MAPPING_KEY_STATE","yaml.yaml_PARSE_BLOCK_MAPPING_VALUE_STATE","yaml.yaml_PARSE_BLOCK_NODE_OR_INDENTLESS_SEQUENCE_STATE","yaml.yaml_PARSE_BLOCK_NODE_STATE","yaml.yaml_PARSE_BLOCK_SEQUENCE_ENTRY_STATE","yaml.yaml_PARSE_BLOCK_SEQUENCE_FIRST_ENTRY_STATE","yaml.yaml_PARSE_DOCUMENT_CONTENT_STATE","yaml.yaml_PARSE_DOCUMENT_END_STATE","yaml.yaml_PARSE_DOCUMENT_START_STATE","yaml.yaml_PARSE_END_STATE","yaml.yaml_PARSE_FLOW_MAPPING_EMPTY_VALUE_STATE","yaml.yaml_PARSE_FLOW_MAPPING_FIRST_KEY_STATE","yaml.yaml_PARSE_FLOW_MAPPING_KEY_STATE","yaml.yaml_PARSE_FLOW_MAPPING_VALUE_STATE","yaml.yaml_PARSE_FLOW_NODE_STATE","yaml.yaml_PARSE_FLOW_SEQUENCE_ENTRY_MAPPING_END_STATE","yaml.yaml_PARSE_FLOW_SEQUENCE_ENTRY_MAPPING_KEY_STATE","yaml.yaml_PARSE_FLOW_SEQUENCE_ENTRY_MAPPING_VALUE_STATE","yaml.yaml_PARSE_FLOW_SEQUENCE_ENTRY_STATE","yaml.yaml_PARSE_FLOW_SEQUENCE_FIRST_ENTRY_STATE","yaml.yaml_PARSE_IMPLICIT_DOCUMENT_START_STATE","yaml.yaml_PARSE_INDENTLESS_SEQUENCE_ENTRY_STATE","yaml.yaml_PARSE_STREAM_START_STATE","yaml.yaml_PLAIN_SCALAR_STYLE","yaml.yaml_READER_ERROR","yaml.yaml_SCALAR_EVENT","yaml.yaml_SCALAR_NODE","yaml.yaml_SCALAR_TOKEN","yaml.yaml_SCANNER_ERROR","yaml.yaml_SEQUENCE_END_EVENT","yaml.yaml_SEQUENCE_NODE","yaml.yaml_SEQUENCE_START_EVENT","yaml.yaml_SEQ_TAG","yaml.yaml_SINGLE_QUOTED_SCALAR_STYLE","yaml.yaml_STREAM_END_EVENT","yaml.yaml_STREAM_END_TOKEN","yaml.yaml_STREAM_START_EVENT","yaml.yaml_STREAM_START_TOKEN","yaml.yaml_STR_TAG","yaml.yaml_TAG_DIRECTIVE_TOKEN","yaml.yaml_TAG_TOKEN","yaml.yaml_TIMESTAMP_TAG","yaml.yaml_UTF16BE_ENCODING","yaml.yaml_UTF16LE_ENCODING","yaml.yaml_UTF8_ENCODING","yaml.yaml_VALUE_TOKEN","yaml.yaml_VERSION_DIRECTIVE_TOKEN","yaml.yaml_WRITER_ERROR"]},{"Name":"struct:yaml.yaml_alias_data_t","Fields":["yaml.yaml_alias_data_t.anchor []byte","yaml.yaml_alias_data_t.index int","yaml.yaml_alias_data_t.mark yaml_mark_t"]},{"Name":"struct:yaml.yaml_document_t","Fields":["yaml.yaml_document_t.end_implicit int","yaml.yaml_document_t.end_mark yaml_mark_t","yaml.yaml_document_t.nodes []yaml_node_t","yaml.yaml_document_t.start_implicit int","yaml.yaml_document_t.start_mark yaml_mark_t","yaml.yaml_document_t.tag_directives_data []yaml_tag_directive_t","yaml.yaml_document_t.tag_directives_end int","yaml.yaml_document_t.tag_directives_start int","yaml.yaml_document_t.version_directive *yaml_version_directive_t"]},{"Name":"struct:yaml.yaml_emitter_t","Fields":["yaml.yaml_emitter_t.anchor_data struct { anchor []byte ; alias bool ; }","yaml.yaml_emitter_t.anchors *struct { references int ; anchor int ; serialized bool ; }","yaml.yaml_emitter_t.best_indent int","yaml.yaml_emitter_t.best_width int","yaml.yaml_emitter_t.buffer []byte","yaml.yaml_emitter_t.buffer_pos int","yaml.yaml_emitter_t.canonical bool","yaml.yaml_emitter_t.closed bool","yaml.yaml_emitter_t.column int","yaml.yaml_emitter_t.document *yaml_document_t","yaml.yaml_emitter_t.encoding yaml_encoding_t","yaml.yaml_emitter_t.error yaml_error_type_t","yaml.yaml_emitter_t.events []yaml_event_t","yaml.yaml_emitter_t.events_head int","yaml.yaml_emitter_t.flow_level int","yaml.yaml_emitter_t.indent int","yaml.yaml_emitter_t.indention bool","yaml.yaml_emitter_t.indents []int","yaml.yaml_emitter_t.last_anchor_id int","yaml.yaml_emitter_t.line int","yaml.yaml_emitter_t.line_break yaml_break_t","yaml.yaml_emitter_t.mapping_context bool","yaml.yaml_emitter_t.open_ended bool","yaml.yaml_emitter_t.opened bool","yaml.yaml_emitter_t.output_buffer *[]byte","yaml.yaml_emitter_t.output_writer io.Writer","yaml.yaml_emitter_t.problem string","yaml.yaml_emitter_t.raw_buffer []byte","yaml.yaml_emitter_t.raw_buffer_pos int","yaml.yaml_emitter_t.root_context bool","yaml.yaml_emitter_t.scalar_data struct { value []byte ; multiline bool ; flow_plain_allowed bool ; block_plain_allowed bool ; single_quoted_allowed bool ; block_allowed bool ; style yaml_scalar_style_t ; }","yaml.yaml_emitter_t.sequence_context bool","yaml.yaml_emitter_t.simple_key_context bool","yaml.yaml_emitter_t.state yaml_emitter_state_t","yaml.yaml_emitter_t.states []yaml_emitter_state_t","yaml.yaml_emitter_t.tag_data struct { handle []byte ; suffix []byte ; }","yaml.yaml_emitter_t.tag_directives []yaml_tag_directive_t","yaml.yaml_emitter_t.unicode bool","yaml.yaml_emitter_t.whitespace bool","yaml.yaml_emitter_t.write_handler yaml_write_handler_t"]},{"Name":"struct:yaml.yaml_event_t","Fields":["yaml.yaml_event_t.anchor []byte","yaml.yaml_event_t.encoding yaml_encoding_t","yaml.yaml_event_t.end_mark yaml_mark_t","yaml.yaml_event_t.implicit bool","yaml.yaml_event_t.quoted_implicit bool","yaml.yaml_event_t.start_mark yaml_mark_t","yaml.yaml_event_t.style yaml_style_t","yaml.yaml_event_t.tag []byte","yaml.yaml_event_t.tag_directives []yaml_tag_directive_t","yaml.yaml_event_t.typ yaml_event_type_t","yaml.yaml_event_t.value []byte","yaml.yaml_event_t.version_directive *yaml_version_directive_t"]},{"Name":"struct:yaml.yaml_mark_t","Fields":["yaml.yaml_mark_t.column int","yaml.yaml_mark_t.index int","yaml.yaml_mark_t.line int"]},{"Name":"struct:yaml.yaml_node_pair_t","Fields":["yaml.yaml_node_pair_t.key int","yaml.yaml_node_pair_t.value int"]},{"Name":"struct:yaml.yaml_node_t","Fields":["yaml.yaml_node_t.end_mark yaml_mark_t","yaml.yaml_node_t.mapping struct { pairs_data []yaml_node_pair_t ; pairs_start *yaml_node_pair_t ; pairs_end *yaml_node_pair_t ; pairs_top *yaml_node_pair_t ; style yaml_mapping_style_t ; }","yaml.yaml_node_t.scalar struct { value []byte ; length int ; style yaml_scalar_style_t ; }","yaml.yaml_node_t.sequence struct { items_data []yaml_node_item_t ; style yaml_sequence_style_t ; }","yaml.yaml_node_t.start_mark yaml_mark_t","yaml.yaml_node_t.tag []byte","yaml.yaml_node_t.typ yaml_node_type_t"]},{"Name":"struct:yaml.yaml_parser_t","Fields":["yaml.yaml_parser_t.aliases []yaml_alias_data_t","yaml.yaml_parser_t.buffer []byte","yaml.yaml_parser_t.buffer_pos int","yaml.yaml_parser_t.context string","yaml.yaml_parser_t.context_mark yaml_mark_t","yaml.yaml_parser_t.document *yaml_document_t","yaml.yaml_parser_t.encoding yaml_encoding_t","yaml.yaml_parser_t.eof bool","yaml.yaml_parser_t.error yaml_error_type_t","yaml.yaml_parser_t.flow_level int","yaml.yaml_parser_t.indent int","yaml.yaml_parser_t.indents []int","yaml.yaml_parser_t.input []byte","yaml.yaml_parser_t.input_pos int","yaml.yaml_parser_t.input_reader io.Reader","yaml.yaml_parser_t.mark yaml_mark_t","yaml.yaml_parser_t.marks []yaml_mark_t","yaml.yaml_parser_t.offset int","yaml.yaml_parser_t.problem string","yaml.yaml_parser_t.problem_mark yaml_mark_t","yaml.yaml_parser_t.problem_offset int","yaml.yaml_parser_t.problem_value int","yaml.yaml_parser_t.raw_buffer []byte","yaml.yaml_parser_t.raw_buffer_pos int","yaml.yaml_parser_t.read_handler yaml_read_handler_t","yaml.yaml_parser_t.simple_key_allowed bool","yaml.yaml_parser_t.simple_keys []yaml_simple_key_t","yaml.yaml_parser_t.state yaml_parser_state_t","yaml.yaml_parser_t.states []yaml_parser_state_t","yaml.yaml_parser_t.stream_end_produced bool","yaml.yaml_parser_t.stream_start_produced bool","yaml.yaml_parser_t.tag_directives []yaml_tag_directive_t","yaml.yaml_parser_t.token_available bool","yaml.yaml_parser_t.tokens []yaml_token_t","yaml.yaml_parser_t.tokens_head int","yaml.yaml_parser_t.tokens_parsed int","yaml.yaml_parser_t.unread int"]},{"Name":"struct:yaml.yaml_simple_key_t","Fields":["yaml.yaml_simple_key_t.mark yaml_mark_t","yaml.yaml_simple_key_t.possible bool","yaml.yaml_simple_key_t.required bool","yaml.yaml_simple_key_t.token_number int"]},{"Name":"struct:yaml.yaml_tag_directive_t","Fields":["yaml.yaml_tag_directive_t.handle []byte","yaml.yaml_tag_directive_t.prefix []byte"]},{"Name":"struct:yaml.yaml_token_t","Fields":["yaml.yaml_token_t.encoding yaml_encoding_t","yaml.yaml_token_t.end_mark yaml_mark_t","yaml.yaml_token_t.major int8","yaml.yaml_token_t.minor int8","yaml.yaml_token_t.prefix []byte","yaml.yaml_token_t.start_mark yaml_mark_t","yaml.yaml_token_t.style yaml_scalar_style_t","yaml.yaml_token_t.suffix []byte","yaml.yaml_token_t.typ yaml_token_type_t","yaml.yaml_token_t.value []byte"]},{"Name":"struct:yaml.yaml_version_directive_t","Fields":["yaml.yaml_version_directive_t.major int8","yaml.yaml_version_directive_t.minor int8"]}]}
{"Filepath":"vendor/src/gopkg.in/yaml.v2/yamlprivateh.go","Functions":[{"Uniquefunname":"func as_digit(b []byte, i int) int","Funname":"as_digit","Returntype":"int","Args":"b []byte, i int"},{"Uniquefunname":"func as_hex(b []byte, i int) int","Funname":"as_hex","Returntype":"int","Args":"b []byte, i int"},{"Uniquefunname":"func is_alpha(b []byte, i int) bool","Funname":"is_alpha","Returntype":"bool","Args":"b []byte, i int"},{"Uniquefunname":"func is_ascii(b []byte, i int) bool","Funname":"is_ascii","Returntype":"bool","Args":"b []byte, i int"},{"Uniquefunname":"func is_blank(b []byte, i int) bool","Funname":"is_blank","Returntype":"bool","Args":"b []byte, i int"},{"Uniquefunname":"func is_blankz(b []byte, i int) bool","Funname":"is_blankz","Returntype":"bool","Args":"b []byte, i int"},{"Uniquefunname":"func is_bom(b []byte, i int) bool","Funname":"is_bom","Returntype":"bool","Args":"b []byte, i int"},{"Uniquefunname":"func is_break(b []byte, i int) bool","Funname":"is_break","Returntype":"bool","Args":"b []byte, i int"},{"Uniquefunname":"func is_breakz(b []byte, i int) bool","Funname":"is_breakz","Returntype":"bool","Args":"b []byte, i int"},{"Uniquefunname":"func is_crlf(b []byte, i int) bool","Funname":"is_crlf","Returntype":"bool","Args":"b []byte, i int"},{"Uniquefunname":"func is_digit(b []byte, i int) bool","Funname":"is_digit","Returntype":"bool","Args":"b []byte, i int"},{"Uniquefunname":"func is_hex(b []byte, i int) bool","Funname":"is_hex","Returntype":"bool","Args":"b []byte, i int"},{"Uniquefunname":"func is_printable(b []byte, i int) bool","Funname":"is_printable","Returntype":"bool","Args":"b []byte, i int"},{"Uniquefunname":"func is_space(b []byte, i int) bool","Funname":"is_space","Returntype":"bool","Args":"b []byte, i int"},{"Uniquefunname":"func is_spacez(b []byte, i int) bool","Funname":"is_spacez","Returntype":"bool","Args":"b []byte, i int"},{"Uniquefunname":"func is_tab(b []byte, i int) bool","Funname":"is_tab","Returntype":"bool","Args":"b []byte, i int"},{"Uniquefunname":"func is_z(b []byte, i int) bool","Funname":"is_z","Returntype":"bool","Args":"b []byte, i int"},{"Uniquefunname":"func width(b byte) int","Funname":"width","Returntype":"int","Args":"b byte"},{"Uniquefunname":"func as_digit(b []byte, i int) int","Funname":"yaml.as_digit","Returntype":"int","Args":"b []byte, i int"},{"Uniquefunname":"func as_hex(b []byte, i int) int","Funname":"yaml.as_hex","Returntype":"int","Args":"b []byte, i int"},{"Uniquefunname":"func is_alpha(b []byte, i int) bool","Funname":"yaml.is_alpha","Returntype":"bool","Args":"b []byte, i int"},{"Uniquefunname":"func is_ascii(b []byte, i int) bool","Funname":"yaml.is_ascii","Returntype":"bool","Args":"b []byte, i int"},{"Uniquefunname":"func is_blank(b []byte, i int) bool","Funname":"yaml.is_blank","Returntype":"bool","Args":"b []byte, i int"},{"Uniquefunname":"func is_blankz(b []byte, i int) bool","Funname":"yaml.is_blankz","Returntype":"bool","Args":"b []byte, i int"},{"Uniquefunname":"func is_bom(b []byte, i int) bool","Funname":"yaml.is_bom","Returntype":"bool","Args":"b []byte, i int"},{"Uniquefunname":"func is_break(b []byte, i int) bool","Funname":"yaml.is_break","Returntype":"bool","Args":"b []byte, i int"},{"Uniquefunname":"func is_breakz(b []byte, i int) bool","Funname":"yaml.is_breakz","Returntype":"bool","Args":"b []byte, i int"},{"Uniquefunname":"func is_crlf(b []byte, i int) bool","Funname":"yaml.is_crlf","Returntype":"bool","Args":"b []byte, i int"},{"Uniquefunname":"func is_digit(b []byte, i int) bool","Funname":"yaml.is_digit","Returntype":"bool","Args":"b []byte, i int"},{"Uniquefunname":"func is_hex(b []byte, i int) bool","Funname":"yaml.is_hex","Returntype":"bool","Args":"b []byte, i int"},{"Uniquefunname":"func is_printable(b []byte, i int) bool","Funname":"yaml.is_printable","Returntype":"bool","Args":"b []byte, i int"},{"Uniquefunname":"func is_space(b []byte, i int) bool","Funname":"yaml.is_space","Returntype":"bool","Args":"b []byte, i int"},{"Uniquefunname":"func is_spacez(b []byte, i int) bool","Funname":"yaml.is_spacez","Returntype":"bool","Args":"b []byte, i int"},{"Uniquefunname":"func is_tab(b []byte, i int) bool","Funname":"yaml.is_tab","Returntype":"bool","Args":"b []byte, i int"},{"Uniquefunname":"func is_z(b []byte, i int) bool","Funname":"yaml.is_z","Returntype":"bool","Args":"b []byte, i int"},{"Uniquefunname":"func width(b byte) int","Funname":"yaml.width","Returntype":"int","Args":"b byte"}],"Records":[{"Name":"const:yaml","Fields":["yaml.initial_queue_size","yaml.initial_stack_size","yaml.initial_string_size","yaml.input_buffer_size","yaml.input_raw_buffer_size","yaml.output_buffer_size","yaml.output_raw_buffer_size"]}]}
